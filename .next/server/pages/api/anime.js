"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/anime";
exports.ids = ["pages/api/anime"];
exports.modules = {

/***/ "axios":
/*!************************!*\
  !*** external "axios" ***!
  \************************/
/***/ ((module) => {

module.exports = require("axios");

/***/ }),

/***/ "cheerio":
/*!**************************!*\
  !*** external "cheerio" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("cheerio");

/***/ }),

/***/ "cross-fetch":
/*!******************************!*\
  !*** external "cross-fetch" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("cross-fetch");

/***/ }),

/***/ "crypto-js":
/*!****************************!*\
  !*** external "crypto-js" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("crypto-js");

/***/ }),

/***/ "debug":
/*!************************!*\
  !*** external "debug" ***!
  \************************/
/***/ ((module) => {

module.exports = require("debug");

/***/ }),

/***/ "extract-zip":
/*!******************************!*\
  !*** external "extract-zip" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("extract-zip");

/***/ }),

/***/ "graphql-request":
/*!**********************************!*\
  !*** external "graphql-request" ***!
  \**********************************/
/***/ ((module) => {

module.exports = require("graphql-request");

/***/ }),

/***/ "graphql-tag":
/*!******************************!*\
  !*** external "graphql-tag" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("graphql-tag");

/***/ }),

/***/ "https-proxy-agent":
/*!************************************!*\
  !*** external "https-proxy-agent" ***!
  \************************************/
/***/ ((module) => {

module.exports = require("https-proxy-agent");

/***/ }),

/***/ "pkg-dir":
/*!**************************!*\
  !*** external "pkg-dir" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("pkg-dir");

/***/ }),

/***/ "proxy-from-env":
/*!*********************************!*\
  !*** external "proxy-from-env" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("proxy-from-env");

/***/ }),

/***/ "rimraf":
/*!*************************!*\
  !*** external "rimraf" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("rimraf");

/***/ }),

/***/ "tar-fs":
/*!*************************!*\
  !*** external "tar-fs" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("tar-fs");

/***/ }),

/***/ "unbzip2-stream":
/*!*********************************!*\
  !*** external "unbzip2-stream" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("unbzip2-stream");

/***/ }),

/***/ "user-agents":
/*!******************************!*\
  !*** external "user-agents" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("user-agents");

/***/ }),

/***/ "child_process":
/*!********************************!*\
  !*** external "child_process" ***!
  \********************************/
/***/ ((module) => {

module.exports = require("child_process");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "dns":
/*!**********************!*\
  !*** external "dns" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("dns");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "module":
/*!*************************!*\
  !*** external "module" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("module");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("net");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "readline":
/*!***************************!*\
  !*** external "readline" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("readline");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tls");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/ws/lib/buffer-util.js":
/*!***********************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/ws/lib/buffer-util.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst { EMPTY_BUFFER } = __webpack_require__(/*! ./constants */ \"(api)/./node_modules/gogoanime-api/node_modules/ws/lib/constants.js\");\n\n/**\n * Merges an array of buffers into a new buffer.\n *\n * @param {Buffer[]} list The array of buffers to concat\n * @param {Number} totalLength The total length of buffers in the list\n * @return {Buffer} The resulting buffer\n * @public\n */\nfunction concat(list, totalLength) {\n  if (list.length === 0) return EMPTY_BUFFER;\n  if (list.length === 1) return list[0];\n\n  const target = Buffer.allocUnsafe(totalLength);\n  let offset = 0;\n\n  for (let i = 0; i < list.length; i++) {\n    const buf = list[i];\n    target.set(buf, offset);\n    offset += buf.length;\n  }\n\n  if (offset < totalLength) return target.slice(0, offset);\n\n  return target;\n}\n\n/**\n * Masks a buffer using the given mask.\n *\n * @param {Buffer} source The buffer to mask\n * @param {Buffer} mask The mask to use\n * @param {Buffer} output The buffer where to store the result\n * @param {Number} offset The offset at which to start writing\n * @param {Number} length The number of bytes to mask.\n * @public\n */\nfunction _mask(source, mask, output, offset, length) {\n  for (let i = 0; i < length; i++) {\n    output[offset + i] = source[i] ^ mask[i & 3];\n  }\n}\n\n/**\n * Unmasks a buffer using the given mask.\n *\n * @param {Buffer} buffer The buffer to unmask\n * @param {Buffer} mask The mask to use\n * @public\n */\nfunction _unmask(buffer, mask) {\n  for (let i = 0; i < buffer.length; i++) {\n    buffer[i] ^= mask[i & 3];\n  }\n}\n\n/**\n * Converts a buffer to an `ArrayBuffer`.\n *\n * @param {Buffer} buf The buffer to convert\n * @return {ArrayBuffer} Converted buffer\n * @public\n */\nfunction toArrayBuffer(buf) {\n  if (buf.byteLength === buf.buffer.byteLength) {\n    return buf.buffer;\n  }\n\n  return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n}\n\n/**\n * Converts `data` to a `Buffer`.\n *\n * @param {*} data The data to convert\n * @return {Buffer} The buffer\n * @throws {TypeError}\n * @public\n */\nfunction toBuffer(data) {\n  toBuffer.readOnly = true;\n\n  if (Buffer.isBuffer(data)) return data;\n\n  let buf;\n\n  if (data instanceof ArrayBuffer) {\n    buf = Buffer.from(data);\n  } else if (ArrayBuffer.isView(data)) {\n    buf = Buffer.from(data.buffer, data.byteOffset, data.byteLength);\n  } else {\n    buf = Buffer.from(data);\n    toBuffer.readOnly = false;\n  }\n\n  return buf;\n}\n\ntry {\n  const bufferUtil = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'bufferutil'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n\n  module.exports = {\n    concat,\n    mask(source, mask, output, offset, length) {\n      if (length < 48) _mask(source, mask, output, offset, length);\n      else bufferUtil.mask(source, mask, output, offset, length);\n    },\n    toArrayBuffer,\n    toBuffer,\n    unmask(buffer, mask) {\n      if (buffer.length < 32) _unmask(buffer, mask);\n      else bufferUtil.unmask(buffer, mask);\n    }\n  };\n} catch (e) /* istanbul ignore next */ {\n  module.exports = {\n    concat,\n    mask: _mask,\n    toArrayBuffer,\n    toBuffer,\n    unmask: _unmask\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvZ29nb2FuaW1lLWFwaS9ub2RlX21vZHVsZXMvd3MvbGliL2J1ZmZlci11dGlsLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLFFBQVEsZUFBZSxFQUFFLG1CQUFPLENBQUMsd0ZBQWE7O0FBRTlDO0FBQ0E7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQixXQUFXLFFBQVE7QUFDbkIsWUFBWSxRQUFRO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxrQkFBa0IsaUJBQWlCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsWUFBWTtBQUM5QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsbUJBQW1CO0FBQ3JDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsWUFBWSxhQUFhO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsR0FBRztBQUNkLFlBQVksUUFBUTtBQUNwQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLHFCQUFxQixtQkFBTyxDQUFDLHlJQUFZOztBQUV6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbmltZWZsaXgvLi9ub2RlX21vZHVsZXMvZ29nb2FuaW1lLWFwaS9ub2RlX21vZHVsZXMvd3MvbGliL2J1ZmZlci11dGlsLmpzP2FkYjkiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB7IEVNUFRZX0JVRkZFUiB9ID0gcmVxdWlyZSgnLi9jb25zdGFudHMnKTtcblxuLyoqXG4gKiBNZXJnZXMgYW4gYXJyYXkgb2YgYnVmZmVycyBpbnRvIGEgbmV3IGJ1ZmZlci5cbiAqXG4gKiBAcGFyYW0ge0J1ZmZlcltdfSBsaXN0IFRoZSBhcnJheSBvZiBidWZmZXJzIHRvIGNvbmNhdFxuICogQHBhcmFtIHtOdW1iZXJ9IHRvdGFsTGVuZ3RoIFRoZSB0b3RhbCBsZW5ndGggb2YgYnVmZmVycyBpbiB0aGUgbGlzdFxuICogQHJldHVybiB7QnVmZmVyfSBUaGUgcmVzdWx0aW5nIGJ1ZmZlclxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiBjb25jYXQobGlzdCwgdG90YWxMZW5ndGgpIHtcbiAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSByZXR1cm4gRU1QVFlfQlVGRkVSO1xuICBpZiAobGlzdC5sZW5ndGggPT09IDEpIHJldHVybiBsaXN0WzBdO1xuXG4gIGNvbnN0IHRhcmdldCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSh0b3RhbExlbmd0aCk7XG4gIGxldCBvZmZzZXQgPSAwO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGJ1ZiA9IGxpc3RbaV07XG4gICAgdGFyZ2V0LnNldChidWYsIG9mZnNldCk7XG4gICAgb2Zmc2V0ICs9IGJ1Zi5sZW5ndGg7XG4gIH1cblxuICBpZiAob2Zmc2V0IDwgdG90YWxMZW5ndGgpIHJldHVybiB0YXJnZXQuc2xpY2UoMCwgb2Zmc2V0KTtcblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG4vKipcbiAqIE1hc2tzIGEgYnVmZmVyIHVzaW5nIHRoZSBnaXZlbiBtYXNrLlxuICpcbiAqIEBwYXJhbSB7QnVmZmVyfSBzb3VyY2UgVGhlIGJ1ZmZlciB0byBtYXNrXG4gKiBAcGFyYW0ge0J1ZmZlcn0gbWFzayBUaGUgbWFzayB0byB1c2VcbiAqIEBwYXJhbSB7QnVmZmVyfSBvdXRwdXQgVGhlIGJ1ZmZlciB3aGVyZSB0byBzdG9yZSB0aGUgcmVzdWx0XG4gKiBAcGFyYW0ge051bWJlcn0gb2Zmc2V0IFRoZSBvZmZzZXQgYXQgd2hpY2ggdG8gc3RhcnQgd3JpdGluZ1xuICogQHBhcmFtIHtOdW1iZXJ9IGxlbmd0aCBUaGUgbnVtYmVyIG9mIGJ5dGVzIHRvIG1hc2suXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIF9tYXNrKHNvdXJjZSwgbWFzaywgb3V0cHV0LCBvZmZzZXQsIGxlbmd0aCkge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgb3V0cHV0W29mZnNldCArIGldID0gc291cmNlW2ldIF4gbWFza1tpICYgM107XG4gIH1cbn1cblxuLyoqXG4gKiBVbm1hc2tzIGEgYnVmZmVyIHVzaW5nIHRoZSBnaXZlbiBtYXNrLlxuICpcbiAqIEBwYXJhbSB7QnVmZmVyfSBidWZmZXIgVGhlIGJ1ZmZlciB0byB1bm1hc2tcbiAqIEBwYXJhbSB7QnVmZmVyfSBtYXNrIFRoZSBtYXNrIHRvIHVzZVxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiBfdW5tYXNrKGJ1ZmZlciwgbWFzaykge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGJ1ZmZlci5sZW5ndGg7IGkrKykge1xuICAgIGJ1ZmZlcltpXSBePSBtYXNrW2kgJiAzXTtcbiAgfVxufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgYnVmZmVyIHRvIGFuIGBBcnJheUJ1ZmZlcmAuXG4gKlxuICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZiBUaGUgYnVmZmVyIHRvIGNvbnZlcnRcbiAqIEByZXR1cm4ge0FycmF5QnVmZmVyfSBDb252ZXJ0ZWQgYnVmZmVyXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIHRvQXJyYXlCdWZmZXIoYnVmKSB7XG4gIGlmIChidWYuYnl0ZUxlbmd0aCA9PT0gYnVmLmJ1ZmZlci5ieXRlTGVuZ3RoKSB7XG4gICAgcmV0dXJuIGJ1Zi5idWZmZXI7XG4gIH1cblxuICByZXR1cm4gYnVmLmJ1ZmZlci5zbGljZShidWYuYnl0ZU9mZnNldCwgYnVmLmJ5dGVPZmZzZXQgKyBidWYuYnl0ZUxlbmd0aCk7XG59XG5cbi8qKlxuICogQ29udmVydHMgYGRhdGFgIHRvIGEgYEJ1ZmZlcmAuXG4gKlxuICogQHBhcmFtIHsqfSBkYXRhIFRoZSBkYXRhIHRvIGNvbnZlcnRcbiAqIEByZXR1cm4ge0J1ZmZlcn0gVGhlIGJ1ZmZlclxuICogQHRocm93cyB7VHlwZUVycm9yfVxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiB0b0J1ZmZlcihkYXRhKSB7XG4gIHRvQnVmZmVyLnJlYWRPbmx5ID0gdHJ1ZTtcblxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKGRhdGEpKSByZXR1cm4gZGF0YTtcblxuICBsZXQgYnVmO1xuXG4gIGlmIChkYXRhIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICBidWYgPSBCdWZmZXIuZnJvbShkYXRhKTtcbiAgfSBlbHNlIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcoZGF0YSkpIHtcbiAgICBidWYgPSBCdWZmZXIuZnJvbShkYXRhLmJ1ZmZlciwgZGF0YS5ieXRlT2Zmc2V0LCBkYXRhLmJ5dGVMZW5ndGgpO1xuICB9IGVsc2Uge1xuICAgIGJ1ZiA9IEJ1ZmZlci5mcm9tKGRhdGEpO1xuICAgIHRvQnVmZmVyLnJlYWRPbmx5ID0gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gYnVmO1xufVxuXG50cnkge1xuICBjb25zdCBidWZmZXJVdGlsID0gcmVxdWlyZSgnYnVmZmVydXRpbCcpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0ge1xuICAgIGNvbmNhdCxcbiAgICBtYXNrKHNvdXJjZSwgbWFzaywgb3V0cHV0LCBvZmZzZXQsIGxlbmd0aCkge1xuICAgICAgaWYgKGxlbmd0aCA8IDQ4KSBfbWFzayhzb3VyY2UsIG1hc2ssIG91dHB1dCwgb2Zmc2V0LCBsZW5ndGgpO1xuICAgICAgZWxzZSBidWZmZXJVdGlsLm1hc2soc291cmNlLCBtYXNrLCBvdXRwdXQsIG9mZnNldCwgbGVuZ3RoKTtcbiAgICB9LFxuICAgIHRvQXJyYXlCdWZmZXIsXG4gICAgdG9CdWZmZXIsXG4gICAgdW5tYXNrKGJ1ZmZlciwgbWFzaykge1xuICAgICAgaWYgKGJ1ZmZlci5sZW5ndGggPCAzMikgX3VubWFzayhidWZmZXIsIG1hc2spO1xuICAgICAgZWxzZSBidWZmZXJVdGlsLnVubWFzayhidWZmZXIsIG1hc2spO1xuICAgIH1cbiAgfTtcbn0gY2F0Y2ggKGUpIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgY29uY2F0LFxuICAgIG1hc2s6IF9tYXNrLFxuICAgIHRvQXJyYXlCdWZmZXIsXG4gICAgdG9CdWZmZXIsXG4gICAgdW5tYXNrOiBfdW5tYXNrXG4gIH07XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/ws/lib/buffer-util.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/ws/lib/constants.js":
/*!*********************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/ws/lib/constants.js ***!
  \*********************************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = {\n  BINARY_TYPES: ['nodebuffer', 'arraybuffer', 'fragments'],\n  EMPTY_BUFFER: Buffer.alloc(0),\n  GUID: '258EAFA5-E914-47DA-95CA-C5AB0DC85B11',\n  kForOnEventAttribute: Symbol('kIsForOnEventAttribute'),\n  kListener: Symbol('kListener'),\n  kStatusCode: Symbol('status-code'),\n  kWebSocket: Symbol('websocket'),\n  NOOP: () => {}\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvZ29nb2FuaW1lLWFwaS9ub2RlX21vZHVsZXMvd3MvbGliL2NvbnN0YW50cy5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FuaW1lZmxpeC8uL25vZGVfbW9kdWxlcy9nb2dvYW5pbWUtYXBpL25vZGVfbW9kdWxlcy93cy9saWIvY29uc3RhbnRzLmpzPzFkOTciXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQklOQVJZX1RZUEVTOiBbJ25vZGVidWZmZXInLCAnYXJyYXlidWZmZXInLCAnZnJhZ21lbnRzJ10sXG4gIEVNUFRZX0JVRkZFUjogQnVmZmVyLmFsbG9jKDApLFxuICBHVUlEOiAnMjU4RUFGQTUtRTkxNC00N0RBLTk1Q0EtQzVBQjBEQzg1QjExJyxcbiAga0Zvck9uRXZlbnRBdHRyaWJ1dGU6IFN5bWJvbCgna0lzRm9yT25FdmVudEF0dHJpYnV0ZScpLFxuICBrTGlzdGVuZXI6IFN5bWJvbCgna0xpc3RlbmVyJyksXG4gIGtTdGF0dXNDb2RlOiBTeW1ib2woJ3N0YXR1cy1jb2RlJyksXG4gIGtXZWJTb2NrZXQ6IFN5bWJvbCgnd2Vic29ja2V0JyksXG4gIE5PT1A6ICgpID0+IHt9XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/ws/lib/constants.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/ws/lib/event-target.js":
/*!************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/ws/lib/event-target.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst { kForOnEventAttribute, kListener } = __webpack_require__(/*! ./constants */ \"(api)/./node_modules/gogoanime-api/node_modules/ws/lib/constants.js\");\n\nconst kCode = Symbol('kCode');\nconst kData = Symbol('kData');\nconst kError = Symbol('kError');\nconst kMessage = Symbol('kMessage');\nconst kReason = Symbol('kReason');\nconst kTarget = Symbol('kTarget');\nconst kType = Symbol('kType');\nconst kWasClean = Symbol('kWasClean');\n\n/**\n * Class representing an event.\n */\nclass Event {\n  /**\n   * Create a new `Event`.\n   *\n   * @param {String} type The name of the event\n   * @throws {TypeError} If the `type` argument is not specified\n   */\n  constructor(type) {\n    this[kTarget] = null;\n    this[kType] = type;\n  }\n\n  /**\n   * @type {*}\n   */\n  get target() {\n    return this[kTarget];\n  }\n\n  /**\n   * @type {String}\n   */\n  get type() {\n    return this[kType];\n  }\n}\n\nObject.defineProperty(Event.prototype, 'target', { enumerable: true });\nObject.defineProperty(Event.prototype, 'type', { enumerable: true });\n\n/**\n * Class representing a close event.\n *\n * @extends Event\n */\nclass CloseEvent extends Event {\n  /**\n   * Create a new `CloseEvent`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} [options] A dictionary object that allows for setting\n   *     attributes via object members of the same name\n   * @param {Number} [options.code=0] The status code explaining why the\n   *     connection was closed\n   * @param {String} [options.reason=''] A human-readable string explaining why\n   *     the connection was closed\n   * @param {Boolean} [options.wasClean=false] Indicates whether or not the\n   *     connection was cleanly closed\n   */\n  constructor(type, options = {}) {\n    super(type);\n\n    this[kCode] = options.code === undefined ? 0 : options.code;\n    this[kReason] = options.reason === undefined ? '' : options.reason;\n    this[kWasClean] = options.wasClean === undefined ? false : options.wasClean;\n  }\n\n  /**\n   * @type {Number}\n   */\n  get code() {\n    return this[kCode];\n  }\n\n  /**\n   * @type {String}\n   */\n  get reason() {\n    return this[kReason];\n  }\n\n  /**\n   * @type {Boolean}\n   */\n  get wasClean() {\n    return this[kWasClean];\n  }\n}\n\nObject.defineProperty(CloseEvent.prototype, 'code', { enumerable: true });\nObject.defineProperty(CloseEvent.prototype, 'reason', { enumerable: true });\nObject.defineProperty(CloseEvent.prototype, 'wasClean', { enumerable: true });\n\n/**\n * Class representing an error event.\n *\n * @extends Event\n */\nclass ErrorEvent extends Event {\n  /**\n   * Create a new `ErrorEvent`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} [options] A dictionary object that allows for setting\n   *     attributes via object members of the same name\n   * @param {*} [options.error=null] The error that generated this event\n   * @param {String} [options.message=''] The error message\n   */\n  constructor(type, options = {}) {\n    super(type);\n\n    this[kError] = options.error === undefined ? null : options.error;\n    this[kMessage] = options.message === undefined ? '' : options.message;\n  }\n\n  /**\n   * @type {*}\n   */\n  get error() {\n    return this[kError];\n  }\n\n  /**\n   * @type {String}\n   */\n  get message() {\n    return this[kMessage];\n  }\n}\n\nObject.defineProperty(ErrorEvent.prototype, 'error', { enumerable: true });\nObject.defineProperty(ErrorEvent.prototype, 'message', { enumerable: true });\n\n/**\n * Class representing a message event.\n *\n * @extends Event\n */\nclass MessageEvent extends Event {\n  /**\n   * Create a new `MessageEvent`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} [options] A dictionary object that allows for setting\n   *     attributes via object members of the same name\n   * @param {*} [options.data=null] The message content\n   */\n  constructor(type, options = {}) {\n    super(type);\n\n    this[kData] = options.data === undefined ? null : options.data;\n  }\n\n  /**\n   * @type {*}\n   */\n  get data() {\n    return this[kData];\n  }\n}\n\nObject.defineProperty(MessageEvent.prototype, 'data', { enumerable: true });\n\n/**\n * This provides methods for emulating the `EventTarget` interface. It's not\n * meant to be used directly.\n *\n * @mixin\n */\nconst EventTarget = {\n  /**\n   * Register an event listener.\n   *\n   * @param {String} type A string representing the event type to listen for\n   * @param {Function} listener The listener to add\n   * @param {Object} [options] An options object specifies characteristics about\n   *     the event listener\n   * @param {Boolean} [options.once=false] A `Boolean` indicating that the\n   *     listener should be invoked at most once after being added. If `true`,\n   *     the listener would be automatically removed when invoked.\n   * @public\n   */\n  addEventListener(type, listener, options = {}) {\n    let wrapper;\n\n    if (type === 'message') {\n      wrapper = function onMessage(data, isBinary) {\n        const event = new MessageEvent('message', {\n          data: isBinary ? data : data.toString()\n        });\n\n        event[kTarget] = this;\n        listener.call(this, event);\n      };\n    } else if (type === 'close') {\n      wrapper = function onClose(code, message) {\n        const event = new CloseEvent('close', {\n          code,\n          reason: message.toString(),\n          wasClean: this._closeFrameReceived && this._closeFrameSent\n        });\n\n        event[kTarget] = this;\n        listener.call(this, event);\n      };\n    } else if (type === 'error') {\n      wrapper = function onError(error) {\n        const event = new ErrorEvent('error', {\n          error,\n          message: error.message\n        });\n\n        event[kTarget] = this;\n        listener.call(this, event);\n      };\n    } else if (type === 'open') {\n      wrapper = function onOpen() {\n        const event = new Event('open');\n\n        event[kTarget] = this;\n        listener.call(this, event);\n      };\n    } else {\n      return;\n    }\n\n    wrapper[kForOnEventAttribute] = !!options[kForOnEventAttribute];\n    wrapper[kListener] = listener;\n\n    if (options.once) {\n      this.once(type, wrapper);\n    } else {\n      this.on(type, wrapper);\n    }\n  },\n\n  /**\n   * Remove an event listener.\n   *\n   * @param {String} type A string representing the event type to remove\n   * @param {Function} handler The listener to remove\n   * @public\n   */\n  removeEventListener(type, handler) {\n    for (const listener of this.listeners(type)) {\n      if (listener[kListener] === handler && !listener[kForOnEventAttribute]) {\n        this.removeListener(type, listener);\n        break;\n      }\n    }\n  }\n};\n\nmodule.exports = {\n  CloseEvent,\n  ErrorEvent,\n  Event,\n  EventTarget,\n  MessageEvent\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvZ29nb2FuaW1lLWFwaS9ub2RlX21vZHVsZXMvd3MvbGliL2V2ZW50LXRhcmdldC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixRQUFRLGtDQUFrQyxFQUFFLG1CQUFPLENBQUMsd0ZBQWE7O0FBRWpFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsY0FBYyxXQUFXO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxtREFBbUQsa0JBQWtCO0FBQ3JFLGlEQUFpRCxrQkFBa0I7O0FBRW5FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckI7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQSxhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBLGdDQUFnQztBQUNoQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHNEQUFzRCxrQkFBa0I7QUFDeEUsd0RBQXdELGtCQUFrQjtBQUMxRSwwREFBMEQsa0JBQWtCOztBQUU1RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0EsYUFBYSxHQUFHO0FBQ2hCLGFBQWEsUUFBUTtBQUNyQjtBQUNBLGdDQUFnQztBQUNoQzs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx1REFBdUQsa0JBQWtCO0FBQ3pFLHlEQUF5RCxrQkFBa0I7O0FBRTNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckI7QUFDQSxhQUFhLEdBQUc7QUFDaEI7QUFDQSxnQ0FBZ0M7QUFDaEM7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHdEQUF3RCxrQkFBa0I7O0FBRTFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsVUFBVTtBQUN2QixhQUFhLFFBQVE7QUFDckI7QUFDQSxhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0M7QUFDL0M7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxVQUFVO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbmltZWZsaXgvLi9ub2RlX21vZHVsZXMvZ29nb2FuaW1lLWFwaS9ub2RlX21vZHVsZXMvd3MvbGliL2V2ZW50LXRhcmdldC5qcz85NzY5Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgeyBrRm9yT25FdmVudEF0dHJpYnV0ZSwga0xpc3RlbmVyIH0gPSByZXF1aXJlKCcuL2NvbnN0YW50cycpO1xuXG5jb25zdCBrQ29kZSA9IFN5bWJvbCgna0NvZGUnKTtcbmNvbnN0IGtEYXRhID0gU3ltYm9sKCdrRGF0YScpO1xuY29uc3Qga0Vycm9yID0gU3ltYm9sKCdrRXJyb3InKTtcbmNvbnN0IGtNZXNzYWdlID0gU3ltYm9sKCdrTWVzc2FnZScpO1xuY29uc3Qga1JlYXNvbiA9IFN5bWJvbCgna1JlYXNvbicpO1xuY29uc3Qga1RhcmdldCA9IFN5bWJvbCgna1RhcmdldCcpO1xuY29uc3Qga1R5cGUgPSBTeW1ib2woJ2tUeXBlJyk7XG5jb25zdCBrV2FzQ2xlYW4gPSBTeW1ib2woJ2tXYXNDbGVhbicpO1xuXG4vKipcbiAqIENsYXNzIHJlcHJlc2VudGluZyBhbiBldmVudC5cbiAqL1xuY2xhc3MgRXZlbnQge1xuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IGBFdmVudGAuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIFRoZSBuYW1lIG9mIHRoZSBldmVudFxuICAgKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIHRoZSBgdHlwZWAgYXJndW1lbnQgaXMgbm90IHNwZWNpZmllZFxuICAgKi9cbiAgY29uc3RydWN0b3IodHlwZSkge1xuICAgIHRoaXNba1RhcmdldF0gPSBudWxsO1xuICAgIHRoaXNba1R5cGVdID0gdHlwZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAdHlwZSB7Kn1cbiAgICovXG4gIGdldCB0YXJnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXNba1RhcmdldF07XG4gIH1cblxuICAvKipcbiAgICogQHR5cGUge1N0cmluZ31cbiAgICovXG4gIGdldCB0eXBlKCkge1xuICAgIHJldHVybiB0aGlzW2tUeXBlXTtcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnQucHJvdG90eXBlLCAndGFyZ2V0JywgeyBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50LnByb3RvdHlwZSwgJ3R5cGUnLCB7IGVudW1lcmFibGU6IHRydWUgfSk7XG5cbi8qKlxuICogQ2xhc3MgcmVwcmVzZW50aW5nIGEgY2xvc2UgZXZlbnQuXG4gKlxuICogQGV4dGVuZHMgRXZlbnRcbiAqL1xuY2xhc3MgQ2xvc2VFdmVudCBleHRlbmRzIEV2ZW50IHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBgQ2xvc2VFdmVudGAuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIFRoZSBuYW1lIG9mIHRoZSBldmVudFxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIEEgZGljdGlvbmFyeSBvYmplY3QgdGhhdCBhbGxvd3MgZm9yIHNldHRpbmdcbiAgICogICAgIGF0dHJpYnV0ZXMgdmlhIG9iamVjdCBtZW1iZXJzIG9mIHRoZSBzYW1lIG5hbWVcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLmNvZGU9MF0gVGhlIHN0YXR1cyBjb2RlIGV4cGxhaW5pbmcgd2h5IHRoZVxuICAgKiAgICAgY29ubmVjdGlvbiB3YXMgY2xvc2VkXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0aW9ucy5yZWFzb249JyddIEEgaHVtYW4tcmVhZGFibGUgc3RyaW5nIGV4cGxhaW5pbmcgd2h5XG4gICAqICAgICB0aGUgY29ubmVjdGlvbiB3YXMgY2xvc2VkXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMud2FzQ2xlYW49ZmFsc2VdIEluZGljYXRlcyB3aGV0aGVyIG9yIG5vdCB0aGVcbiAgICogICAgIGNvbm5lY3Rpb24gd2FzIGNsZWFubHkgY2xvc2VkXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih0eXBlLCBvcHRpb25zID0ge30pIHtcbiAgICBzdXBlcih0eXBlKTtcblxuICAgIHRoaXNba0NvZGVdID0gb3B0aW9ucy5jb2RlID09PSB1bmRlZmluZWQgPyAwIDogb3B0aW9ucy5jb2RlO1xuICAgIHRoaXNba1JlYXNvbl0gPSBvcHRpb25zLnJlYXNvbiA9PT0gdW5kZWZpbmVkID8gJycgOiBvcHRpb25zLnJlYXNvbjtcbiAgICB0aGlzW2tXYXNDbGVhbl0gPSBvcHRpb25zLndhc0NsZWFuID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IG9wdGlvbnMud2FzQ2xlYW47XG4gIH1cblxuICAvKipcbiAgICogQHR5cGUge051bWJlcn1cbiAgICovXG4gIGdldCBjb2RlKCkge1xuICAgIHJldHVybiB0aGlzW2tDb2RlXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgKi9cbiAgZ2V0IHJlYXNvbigpIHtcbiAgICByZXR1cm4gdGhpc1trUmVhc29uXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICovXG4gIGdldCB3YXNDbGVhbigpIHtcbiAgICByZXR1cm4gdGhpc1trV2FzQ2xlYW5dO1xuICB9XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShDbG9zZUV2ZW50LnByb3RvdHlwZSwgJ2NvZGUnLCB7IGVudW1lcmFibGU6IHRydWUgfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoQ2xvc2VFdmVudC5wcm90b3R5cGUsICdyZWFzb24nLCB7IGVudW1lcmFibGU6IHRydWUgfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoQ2xvc2VFdmVudC5wcm90b3R5cGUsICd3YXNDbGVhbicsIHsgZW51bWVyYWJsZTogdHJ1ZSB9KTtcblxuLyoqXG4gKiBDbGFzcyByZXByZXNlbnRpbmcgYW4gZXJyb3IgZXZlbnQuXG4gKlxuICogQGV4dGVuZHMgRXZlbnRcbiAqL1xuY2xhc3MgRXJyb3JFdmVudCBleHRlbmRzIEV2ZW50IHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBgRXJyb3JFdmVudGAuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIFRoZSBuYW1lIG9mIHRoZSBldmVudFxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIEEgZGljdGlvbmFyeSBvYmplY3QgdGhhdCBhbGxvd3MgZm9yIHNldHRpbmdcbiAgICogICAgIGF0dHJpYnV0ZXMgdmlhIG9iamVjdCBtZW1iZXJzIG9mIHRoZSBzYW1lIG5hbWVcbiAgICogQHBhcmFtIHsqfSBbb3B0aW9ucy5lcnJvcj1udWxsXSBUaGUgZXJyb3IgdGhhdCBnZW5lcmF0ZWQgdGhpcyBldmVudFxuICAgKiBAcGFyYW0ge1N0cmluZ30gW29wdGlvbnMubWVzc2FnZT0nJ10gVGhlIGVycm9yIG1lc3NhZ2VcbiAgICovXG4gIGNvbnN0cnVjdG9yKHR5cGUsIG9wdGlvbnMgPSB7fSkge1xuICAgIHN1cGVyKHR5cGUpO1xuXG4gICAgdGhpc1trRXJyb3JdID0gb3B0aW9ucy5lcnJvciA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IG9wdGlvbnMuZXJyb3I7XG4gICAgdGhpc1trTWVzc2FnZV0gPSBvcHRpb25zLm1lc3NhZ2UgPT09IHVuZGVmaW5lZCA/ICcnIDogb3B0aW9ucy5tZXNzYWdlO1xuICB9XG5cbiAgLyoqXG4gICAqIEB0eXBlIHsqfVxuICAgKi9cbiAgZ2V0IGVycm9yKCkge1xuICAgIHJldHVybiB0aGlzW2tFcnJvcl07XG4gIH1cblxuICAvKipcbiAgICogQHR5cGUge1N0cmluZ31cbiAgICovXG4gIGdldCBtZXNzYWdlKCkge1xuICAgIHJldHVybiB0aGlzW2tNZXNzYWdlXTtcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRXJyb3JFdmVudC5wcm90b3R5cGUsICdlcnJvcicsIHsgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShFcnJvckV2ZW50LnByb3RvdHlwZSwgJ21lc3NhZ2UnLCB7IGVudW1lcmFibGU6IHRydWUgfSk7XG5cbi8qKlxuICogQ2xhc3MgcmVwcmVzZW50aW5nIGEgbWVzc2FnZSBldmVudC5cbiAqXG4gKiBAZXh0ZW5kcyBFdmVudFxuICovXG5jbGFzcyBNZXNzYWdlRXZlbnQgZXh0ZW5kcyBFdmVudCB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgYE1lc3NhZ2VFdmVudGAuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIFRoZSBuYW1lIG9mIHRoZSBldmVudFxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIEEgZGljdGlvbmFyeSBvYmplY3QgdGhhdCBhbGxvd3MgZm9yIHNldHRpbmdcbiAgICogICAgIGF0dHJpYnV0ZXMgdmlhIG9iamVjdCBtZW1iZXJzIG9mIHRoZSBzYW1lIG5hbWVcbiAgICogQHBhcmFtIHsqfSBbb3B0aW9ucy5kYXRhPW51bGxdIFRoZSBtZXNzYWdlIGNvbnRlbnRcbiAgICovXG4gIGNvbnN0cnVjdG9yKHR5cGUsIG9wdGlvbnMgPSB7fSkge1xuICAgIHN1cGVyKHR5cGUpO1xuXG4gICAgdGhpc1trRGF0YV0gPSBvcHRpb25zLmRhdGEgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBvcHRpb25zLmRhdGE7XG4gIH1cblxuICAvKipcbiAgICogQHR5cGUgeyp9XG4gICAqL1xuICBnZXQgZGF0YSgpIHtcbiAgICByZXR1cm4gdGhpc1trRGF0YV07XG4gIH1cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KE1lc3NhZ2VFdmVudC5wcm90b3R5cGUsICdkYXRhJywgeyBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuXG4vKipcbiAqIFRoaXMgcHJvdmlkZXMgbWV0aG9kcyBmb3IgZW11bGF0aW5nIHRoZSBgRXZlbnRUYXJnZXRgIGludGVyZmFjZS4gSXQncyBub3RcbiAqIG1lYW50IHRvIGJlIHVzZWQgZGlyZWN0bHkuXG4gKlxuICogQG1peGluXG4gKi9cbmNvbnN0IEV2ZW50VGFyZ2V0ID0ge1xuICAvKipcbiAgICogUmVnaXN0ZXIgYW4gZXZlbnQgbGlzdGVuZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIEEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgZXZlbnQgdHlwZSB0byBsaXN0ZW4gZm9yXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIFRoZSBsaXN0ZW5lciB0byBhZGRcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBBbiBvcHRpb25zIG9iamVjdCBzcGVjaWZpZXMgY2hhcmFjdGVyaXN0aWNzIGFib3V0XG4gICAqICAgICB0aGUgZXZlbnQgbGlzdGVuZXJcbiAgICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5vbmNlPWZhbHNlXSBBIGBCb29sZWFuYCBpbmRpY2F0aW5nIHRoYXQgdGhlXG4gICAqICAgICBsaXN0ZW5lciBzaG91bGQgYmUgaW52b2tlZCBhdCBtb3N0IG9uY2UgYWZ0ZXIgYmVpbmcgYWRkZWQuIElmIGB0cnVlYCxcbiAgICogICAgIHRoZSBsaXN0ZW5lciB3b3VsZCBiZSBhdXRvbWF0aWNhbGx5IHJlbW92ZWQgd2hlbiBpbnZva2VkLlxuICAgKiBAcHVibGljXG4gICAqL1xuICBhZGRFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyLCBvcHRpb25zID0ge30pIHtcbiAgICBsZXQgd3JhcHBlcjtcblxuICAgIGlmICh0eXBlID09PSAnbWVzc2FnZScpIHtcbiAgICAgIHdyYXBwZXIgPSBmdW5jdGlvbiBvbk1lc3NhZ2UoZGF0YSwgaXNCaW5hcnkpIHtcbiAgICAgICAgY29uc3QgZXZlbnQgPSBuZXcgTWVzc2FnZUV2ZW50KCdtZXNzYWdlJywge1xuICAgICAgICAgIGRhdGE6IGlzQmluYXJ5ID8gZGF0YSA6IGRhdGEudG9TdHJpbmcoKVxuICAgICAgICB9KTtcblxuICAgICAgICBldmVudFtrVGFyZ2V0XSA9IHRoaXM7XG4gICAgICAgIGxpc3RlbmVyLmNhbGwodGhpcywgZXZlbnQpO1xuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdjbG9zZScpIHtcbiAgICAgIHdyYXBwZXIgPSBmdW5jdGlvbiBvbkNsb3NlKGNvZGUsIG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3QgZXZlbnQgPSBuZXcgQ2xvc2VFdmVudCgnY2xvc2UnLCB7XG4gICAgICAgICAgY29kZSxcbiAgICAgICAgICByZWFzb246IG1lc3NhZ2UudG9TdHJpbmcoKSxcbiAgICAgICAgICB3YXNDbGVhbjogdGhpcy5fY2xvc2VGcmFtZVJlY2VpdmVkICYmIHRoaXMuX2Nsb3NlRnJhbWVTZW50XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGV2ZW50W2tUYXJnZXRdID0gdGhpcztcbiAgICAgICAgbGlzdGVuZXIuY2FsbCh0aGlzLCBldmVudCk7XG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2Vycm9yJykge1xuICAgICAgd3JhcHBlciA9IGZ1bmN0aW9uIG9uRXJyb3IoZXJyb3IpIHtcbiAgICAgICAgY29uc3QgZXZlbnQgPSBuZXcgRXJyb3JFdmVudCgnZXJyb3InLCB7XG4gICAgICAgICAgZXJyb3IsXG4gICAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZVxuICAgICAgICB9KTtcblxuICAgICAgICBldmVudFtrVGFyZ2V0XSA9IHRoaXM7XG4gICAgICAgIGxpc3RlbmVyLmNhbGwodGhpcywgZXZlbnQpO1xuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdvcGVuJykge1xuICAgICAgd3JhcHBlciA9IGZ1bmN0aW9uIG9uT3BlbigpIHtcbiAgICAgICAgY29uc3QgZXZlbnQgPSBuZXcgRXZlbnQoJ29wZW4nKTtcblxuICAgICAgICBldmVudFtrVGFyZ2V0XSA9IHRoaXM7XG4gICAgICAgIGxpc3RlbmVyLmNhbGwodGhpcywgZXZlbnQpO1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHdyYXBwZXJba0Zvck9uRXZlbnRBdHRyaWJ1dGVdID0gISFvcHRpb25zW2tGb3JPbkV2ZW50QXR0cmlidXRlXTtcbiAgICB3cmFwcGVyW2tMaXN0ZW5lcl0gPSBsaXN0ZW5lcjtcblxuICAgIGlmIChvcHRpb25zLm9uY2UpIHtcbiAgICAgIHRoaXMub25jZSh0eXBlLCB3cmFwcGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5vbih0eXBlLCB3cmFwcGVyKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhbiBldmVudCBsaXN0ZW5lci5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgQSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBldmVudCB0eXBlIHRvIHJlbW92ZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIFRoZSBsaXN0ZW5lciB0byByZW1vdmVcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBoYW5kbGVyKSB7XG4gICAgZm9yIChjb25zdCBsaXN0ZW5lciBvZiB0aGlzLmxpc3RlbmVycyh0eXBlKSkge1xuICAgICAgaWYgKGxpc3RlbmVyW2tMaXN0ZW5lcl0gPT09IGhhbmRsZXIgJiYgIWxpc3RlbmVyW2tGb3JPbkV2ZW50QXR0cmlidXRlXSkge1xuICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQ2xvc2VFdmVudCxcbiAgRXJyb3JFdmVudCxcbiAgRXZlbnQsXG4gIEV2ZW50VGFyZ2V0LFxuICBNZXNzYWdlRXZlbnRcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/ws/lib/event-target.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/ws/lib/extension.js":
/*!*********************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/ws/lib/extension.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst { tokenChars } = __webpack_require__(/*! ./validation */ \"(api)/./node_modules/gogoanime-api/node_modules/ws/lib/validation.js\");\n\n/**\n * Adds an offer to the map of extension offers or a parameter to the map of\n * parameters.\n *\n * @param {Object} dest The map of extension offers or parameters\n * @param {String} name The extension or parameter name\n * @param {(Object|Boolean|String)} elem The extension parameters or the\n *     parameter value\n * @private\n */\nfunction push(dest, name, elem) {\n  if (dest[name] === undefined) dest[name] = [elem];\n  else dest[name].push(elem);\n}\n\n/**\n * Parses the `Sec-WebSocket-Extensions` header into an object.\n *\n * @param {String} header The field value of the header\n * @return {Object} The parsed object\n * @public\n */\nfunction parse(header) {\n  const offers = Object.create(null);\n  let params = Object.create(null);\n  let mustUnescape = false;\n  let isEscaping = false;\n  let inQuotes = false;\n  let extensionName;\n  let paramName;\n  let start = -1;\n  let code = -1;\n  let end = -1;\n  let i = 0;\n\n  for (; i < header.length; i++) {\n    code = header.charCodeAt(i);\n\n    if (extensionName === undefined) {\n      if (end === -1 && tokenChars[code] === 1) {\n        if (start === -1) start = i;\n      } else if (\n        i !== 0 &&\n        (code === 0x20 /* ' ' */ || code === 0x09) /* '\\t' */\n      ) {\n        if (end === -1 && start !== -1) end = i;\n      } else if (code === 0x3b /* ';' */ || code === 0x2c /* ',' */) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n        const name = header.slice(start, end);\n        if (code === 0x2c) {\n          push(offers, name, params);\n          params = Object.create(null);\n        } else {\n          extensionName = name;\n        }\n\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    } else if (paramName === undefined) {\n      if (end === -1 && tokenChars[code] === 1) {\n        if (start === -1) start = i;\n      } else if (code === 0x20 || code === 0x09) {\n        if (end === -1 && start !== -1) end = i;\n      } else if (code === 0x3b || code === 0x2c) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n        push(params, header.slice(start, end), true);\n        if (code === 0x2c) {\n          push(offers, extensionName, params);\n          params = Object.create(null);\n          extensionName = undefined;\n        }\n\n        start = end = -1;\n      } else if (code === 0x3d /* '=' */ && start !== -1 && end === -1) {\n        paramName = header.slice(start, i);\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    } else {\n      //\n      // The value of a quoted-string after unescaping must conform to the\n      // token ABNF, so only token characters are valid.\n      // Ref: https://tools.ietf.org/html/rfc6455#section-9.1\n      //\n      if (isEscaping) {\n        if (tokenChars[code] !== 1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n        if (start === -1) start = i;\n        else if (!mustUnescape) mustUnescape = true;\n        isEscaping = false;\n      } else if (inQuotes) {\n        if (tokenChars[code] === 1) {\n          if (start === -1) start = i;\n        } else if (code === 0x22 /* '\"' */ && start !== -1) {\n          inQuotes = false;\n          end = i;\n        } else if (code === 0x5c /* '\\' */) {\n          isEscaping = true;\n        } else {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n      } else if (code === 0x22 && header.charCodeAt(i - 1) === 0x3d) {\n        inQuotes = true;\n      } else if (end === -1 && tokenChars[code] === 1) {\n        if (start === -1) start = i;\n      } else if (start !== -1 && (code === 0x20 || code === 0x09)) {\n        if (end === -1) end = i;\n      } else if (code === 0x3b || code === 0x2c) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n        let value = header.slice(start, end);\n        if (mustUnescape) {\n          value = value.replace(/\\\\/g, '');\n          mustUnescape = false;\n        }\n        push(params, paramName, value);\n        if (code === 0x2c) {\n          push(offers, extensionName, params);\n          params = Object.create(null);\n          extensionName = undefined;\n        }\n\n        paramName = undefined;\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    }\n  }\n\n  if (start === -1 || inQuotes || code === 0x20 || code === 0x09) {\n    throw new SyntaxError('Unexpected end of input');\n  }\n\n  if (end === -1) end = i;\n  const token = header.slice(start, end);\n  if (extensionName === undefined) {\n    push(offers, token, params);\n  } else {\n    if (paramName === undefined) {\n      push(params, token, true);\n    } else if (mustUnescape) {\n      push(params, paramName, token.replace(/\\\\/g, ''));\n    } else {\n      push(params, paramName, token);\n    }\n    push(offers, extensionName, params);\n  }\n\n  return offers;\n}\n\n/**\n * Builds the `Sec-WebSocket-Extensions` header field value.\n *\n * @param {Object} extensions The map of extensions and parameters to format\n * @return {String} A string representing the given object\n * @public\n */\nfunction format(extensions) {\n  return Object.keys(extensions)\n    .map((extension) => {\n      let configurations = extensions[extension];\n      if (!Array.isArray(configurations)) configurations = [configurations];\n      return configurations\n        .map((params) => {\n          return [extension]\n            .concat(\n              Object.keys(params).map((k) => {\n                let values = params[k];\n                if (!Array.isArray(values)) values = [values];\n                return values\n                  .map((v) => (v === true ? k : `${k}=${v}`))\n                  .join('; ');\n              })\n            )\n            .join('; ');\n        })\n        .join(', ');\n    })\n    .join(', ');\n}\n\nmodule.exports = { format, parse };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/ws/lib/extension.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/ws/lib/limiter.js":
/*!*******************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/ws/lib/limiter.js ***!
  \*******************************************************************/
/***/ ((module) => {

eval("\n\nconst kDone = Symbol('kDone');\nconst kRun = Symbol('kRun');\n\n/**\n * A very simple job queue with adjustable concurrency. Adapted from\n * https://github.com/STRML/async-limiter\n */\nclass Limiter {\n  /**\n   * Creates a new `Limiter`.\n   *\n   * @param {Number} [concurrency=Infinity] The maximum number of jobs allowed\n   *     to run concurrently\n   */\n  constructor(concurrency) {\n    this[kDone] = () => {\n      this.pending--;\n      this[kRun]();\n    };\n    this.concurrency = concurrency || Infinity;\n    this.jobs = [];\n    this.pending = 0;\n  }\n\n  /**\n   * Adds a job to the queue.\n   *\n   * @param {Function} job The job to run\n   * @public\n   */\n  add(job) {\n    this.jobs.push(job);\n    this[kRun]();\n  }\n\n  /**\n   * Removes a job from the queue and runs it if possible.\n   *\n   * @private\n   */\n  [kRun]() {\n    if (this.pending === this.concurrency) return;\n\n    if (this.jobs.length) {\n      const job = this.jobs.shift();\n\n      this.pending++;\n      job(this[kDone]);\n    }\n  }\n}\n\nmodule.exports = Limiter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvZ29nb2FuaW1lLWFwaS9ub2RlX21vZHVsZXMvd3MvbGliL2xpbWl0ZXIuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxVQUFVO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbmltZWZsaXgvLi9ub2RlX21vZHVsZXMvZ29nb2FuaW1lLWFwaS9ub2RlX21vZHVsZXMvd3MvbGliL2xpbWl0ZXIuanM/YThhYSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGtEb25lID0gU3ltYm9sKCdrRG9uZScpO1xuY29uc3Qga1J1biA9IFN5bWJvbCgna1J1bicpO1xuXG4vKipcbiAqIEEgdmVyeSBzaW1wbGUgam9iIHF1ZXVlIHdpdGggYWRqdXN0YWJsZSBjb25jdXJyZW5jeS4gQWRhcHRlZCBmcm9tXG4gKiBodHRwczovL2dpdGh1Yi5jb20vU1RSTUwvYXN5bmMtbGltaXRlclxuICovXG5jbGFzcyBMaW1pdGVyIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgYExpbWl0ZXJgLlxuICAgKlxuICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmN1cnJlbmN5PUluZmluaXR5XSBUaGUgbWF4aW11bSBudW1iZXIgb2Ygam9icyBhbGxvd2VkXG4gICAqICAgICB0byBydW4gY29uY3VycmVudGx5XG4gICAqL1xuICBjb25zdHJ1Y3Rvcihjb25jdXJyZW5jeSkge1xuICAgIHRoaXNba0RvbmVdID0gKCkgPT4ge1xuICAgICAgdGhpcy5wZW5kaW5nLS07XG4gICAgICB0aGlzW2tSdW5dKCk7XG4gICAgfTtcbiAgICB0aGlzLmNvbmN1cnJlbmN5ID0gY29uY3VycmVuY3kgfHwgSW5maW5pdHk7XG4gICAgdGhpcy5qb2JzID0gW107XG4gICAgdGhpcy5wZW5kaW5nID0gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGEgam9iIHRvIHRoZSBxdWV1ZS5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gam9iIFRoZSBqb2IgdG8gcnVuXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGFkZChqb2IpIHtcbiAgICB0aGlzLmpvYnMucHVzaChqb2IpO1xuICAgIHRoaXNba1J1bl0oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGEgam9iIGZyb20gdGhlIHF1ZXVlIGFuZCBydW5zIGl0IGlmIHBvc3NpYmxlLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgW2tSdW5dKCkge1xuICAgIGlmICh0aGlzLnBlbmRpbmcgPT09IHRoaXMuY29uY3VycmVuY3kpIHJldHVybjtcblxuICAgIGlmICh0aGlzLmpvYnMubGVuZ3RoKSB7XG4gICAgICBjb25zdCBqb2IgPSB0aGlzLmpvYnMuc2hpZnQoKTtcblxuICAgICAgdGhpcy5wZW5kaW5nKys7XG4gICAgICBqb2IodGhpc1trRG9uZV0pO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IExpbWl0ZXI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/ws/lib/limiter.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/ws/lib/permessage-deflate.js":
/*!******************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/ws/lib/permessage-deflate.js ***!
  \******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst zlib = __webpack_require__(/*! zlib */ \"zlib\");\n\nconst bufferUtil = __webpack_require__(/*! ./buffer-util */ \"(api)/./node_modules/gogoanime-api/node_modules/ws/lib/buffer-util.js\");\nconst Limiter = __webpack_require__(/*! ./limiter */ \"(api)/./node_modules/gogoanime-api/node_modules/ws/lib/limiter.js\");\nconst { kStatusCode } = __webpack_require__(/*! ./constants */ \"(api)/./node_modules/gogoanime-api/node_modules/ws/lib/constants.js\");\n\nconst TRAILER = Buffer.from([0x00, 0x00, 0xff, 0xff]);\nconst kPerMessageDeflate = Symbol('permessage-deflate');\nconst kTotalLength = Symbol('total-length');\nconst kCallback = Symbol('callback');\nconst kBuffers = Symbol('buffers');\nconst kError = Symbol('error');\n\n//\n// We limit zlib concurrency, which prevents severe memory fragmentation\n// as documented in https://github.com/nodejs/node/issues/8871#issuecomment-250915913\n// and https://github.com/websockets/ws/issues/1202\n//\n// Intentionally global; it's the global thread pool that's an issue.\n//\nlet zlibLimiter;\n\n/**\n * permessage-deflate implementation.\n */\nclass PerMessageDeflate {\n  /**\n   * Creates a PerMessageDeflate instance.\n   *\n   * @param {Object} [options] Configuration options\n   * @param {(Boolean|Number)} [options.clientMaxWindowBits] Advertise support\n   *     for, or request, a custom client window size\n   * @param {Boolean} [options.clientNoContextTakeover=false] Advertise/\n   *     acknowledge disabling of client context takeover\n   * @param {Number} [options.concurrencyLimit=10] The number of concurrent\n   *     calls to zlib\n   * @param {(Boolean|Number)} [options.serverMaxWindowBits] Request/confirm the\n   *     use of a custom server window size\n   * @param {Boolean} [options.serverNoContextTakeover=false] Request/accept\n   *     disabling of server context takeover\n   * @param {Number} [options.threshold=1024] Size (in bytes) below which\n   *     messages should not be compressed if context takeover is disabled\n   * @param {Object} [options.zlibDeflateOptions] Options to pass to zlib on\n   *     deflate\n   * @param {Object} [options.zlibInflateOptions] Options to pass to zlib on\n   *     inflate\n   * @param {Boolean} [isServer=false] Create the instance in either server or\n   *     client mode\n   * @param {Number} [maxPayload=0] The maximum allowed message length\n   */\n  constructor(options, isServer, maxPayload) {\n    this._maxPayload = maxPayload | 0;\n    this._options = options || {};\n    this._threshold =\n      this._options.threshold !== undefined ? this._options.threshold : 1024;\n    this._isServer = !!isServer;\n    this._deflate = null;\n    this._inflate = null;\n\n    this.params = null;\n\n    if (!zlibLimiter) {\n      const concurrency =\n        this._options.concurrencyLimit !== undefined\n          ? this._options.concurrencyLimit\n          : 10;\n      zlibLimiter = new Limiter(concurrency);\n    }\n  }\n\n  /**\n   * @type {String}\n   */\n  static get extensionName() {\n    return 'permessage-deflate';\n  }\n\n  /**\n   * Create an extension negotiation offer.\n   *\n   * @return {Object} Extension parameters\n   * @public\n   */\n  offer() {\n    const params = {};\n\n    if (this._options.serverNoContextTakeover) {\n      params.server_no_context_takeover = true;\n    }\n    if (this._options.clientNoContextTakeover) {\n      params.client_no_context_takeover = true;\n    }\n    if (this._options.serverMaxWindowBits) {\n      params.server_max_window_bits = this._options.serverMaxWindowBits;\n    }\n    if (this._options.clientMaxWindowBits) {\n      params.client_max_window_bits = this._options.clientMaxWindowBits;\n    } else if (this._options.clientMaxWindowBits == null) {\n      params.client_max_window_bits = true;\n    }\n\n    return params;\n  }\n\n  /**\n   * Accept an extension negotiation offer/response.\n   *\n   * @param {Array} configurations The extension negotiation offers/reponse\n   * @return {Object} Accepted configuration\n   * @public\n   */\n  accept(configurations) {\n    configurations = this.normalizeParams(configurations);\n\n    this.params = this._isServer\n      ? this.acceptAsServer(configurations)\n      : this.acceptAsClient(configurations);\n\n    return this.params;\n  }\n\n  /**\n   * Releases all resources used by the extension.\n   *\n   * @public\n   */\n  cleanup() {\n    if (this._inflate) {\n      this._inflate.close();\n      this._inflate = null;\n    }\n\n    if (this._deflate) {\n      const callback = this._deflate[kCallback];\n\n      this._deflate.close();\n      this._deflate = null;\n\n      if (callback) {\n        callback(\n          new Error(\n            'The deflate stream was closed while data was being processed'\n          )\n        );\n      }\n    }\n  }\n\n  /**\n   *  Accept an extension negotiation offer.\n   *\n   * @param {Array} offers The extension negotiation offers\n   * @return {Object} Accepted configuration\n   * @private\n   */\n  acceptAsServer(offers) {\n    const opts = this._options;\n    const accepted = offers.find((params) => {\n      if (\n        (opts.serverNoContextTakeover === false &&\n          params.server_no_context_takeover) ||\n        (params.server_max_window_bits &&\n          (opts.serverMaxWindowBits === false ||\n            (typeof opts.serverMaxWindowBits === 'number' &&\n              opts.serverMaxWindowBits > params.server_max_window_bits))) ||\n        (typeof opts.clientMaxWindowBits === 'number' &&\n          !params.client_max_window_bits)\n      ) {\n        return false;\n      }\n\n      return true;\n    });\n\n    if (!accepted) {\n      throw new Error('None of the extension offers can be accepted');\n    }\n\n    if (opts.serverNoContextTakeover) {\n      accepted.server_no_context_takeover = true;\n    }\n    if (opts.clientNoContextTakeover) {\n      accepted.client_no_context_takeover = true;\n    }\n    if (typeof opts.serverMaxWindowBits === 'number') {\n      accepted.server_max_window_bits = opts.serverMaxWindowBits;\n    }\n    if (typeof opts.clientMaxWindowBits === 'number') {\n      accepted.client_max_window_bits = opts.clientMaxWindowBits;\n    } else if (\n      accepted.client_max_window_bits === true ||\n      opts.clientMaxWindowBits === false\n    ) {\n      delete accepted.client_max_window_bits;\n    }\n\n    return accepted;\n  }\n\n  /**\n   * Accept the extension negotiation response.\n   *\n   * @param {Array} response The extension negotiation response\n   * @return {Object} Accepted configuration\n   * @private\n   */\n  acceptAsClient(response) {\n    const params = response[0];\n\n    if (\n      this._options.clientNoContextTakeover === false &&\n      params.client_no_context_takeover\n    ) {\n      throw new Error('Unexpected parameter \"client_no_context_takeover\"');\n    }\n\n    if (!params.client_max_window_bits) {\n      if (typeof this._options.clientMaxWindowBits === 'number') {\n        params.client_max_window_bits = this._options.clientMaxWindowBits;\n      }\n    } else if (\n      this._options.clientMaxWindowBits === false ||\n      (typeof this._options.clientMaxWindowBits === 'number' &&\n        params.client_max_window_bits > this._options.clientMaxWindowBits)\n    ) {\n      throw new Error(\n        'Unexpected or invalid parameter \"client_max_window_bits\"'\n      );\n    }\n\n    return params;\n  }\n\n  /**\n   * Normalize parameters.\n   *\n   * @param {Array} configurations The extension negotiation offers/reponse\n   * @return {Array} The offers/response with normalized parameters\n   * @private\n   */\n  normalizeParams(configurations) {\n    configurations.forEach((params) => {\n      Object.keys(params).forEach((key) => {\n        let value = params[key];\n\n        if (value.length > 1) {\n          throw new Error(`Parameter \"${key}\" must have only a single value`);\n        }\n\n        value = value[0];\n\n        if (key === 'client_max_window_bits') {\n          if (value !== true) {\n            const num = +value;\n            if (!Number.isInteger(num) || num < 8 || num > 15) {\n              throw new TypeError(\n                `Invalid value for parameter \"${key}\": ${value}`\n              );\n            }\n            value = num;\n          } else if (!this._isServer) {\n            throw new TypeError(\n              `Invalid value for parameter \"${key}\": ${value}`\n            );\n          }\n        } else if (key === 'server_max_window_bits') {\n          const num = +value;\n          if (!Number.isInteger(num) || num < 8 || num > 15) {\n            throw new TypeError(\n              `Invalid value for parameter \"${key}\": ${value}`\n            );\n          }\n          value = num;\n        } else if (\n          key === 'client_no_context_takeover' ||\n          key === 'server_no_context_takeover'\n        ) {\n          if (value !== true) {\n            throw new TypeError(\n              `Invalid value for parameter \"${key}\": ${value}`\n            );\n          }\n        } else {\n          throw new Error(`Unknown parameter \"${key}\"`);\n        }\n\n        params[key] = value;\n      });\n    });\n\n    return configurations;\n  }\n\n  /**\n   * Decompress data. Concurrency limited.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @public\n   */\n  decompress(data, fin, callback) {\n    zlibLimiter.add((done) => {\n      this._decompress(data, fin, (err, result) => {\n        done();\n        callback(err, result);\n      });\n    });\n  }\n\n  /**\n   * Compress data. Concurrency limited.\n   *\n   * @param {(Buffer|String)} data Data to compress\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @public\n   */\n  compress(data, fin, callback) {\n    zlibLimiter.add((done) => {\n      this._compress(data, fin, (err, result) => {\n        done();\n        callback(err, result);\n      });\n    });\n  }\n\n  /**\n   * Decompress data.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @private\n   */\n  _decompress(data, fin, callback) {\n    const endpoint = this._isServer ? 'client' : 'server';\n\n    if (!this._inflate) {\n      const key = `${endpoint}_max_window_bits`;\n      const windowBits =\n        typeof this.params[key] !== 'number'\n          ? zlib.Z_DEFAULT_WINDOWBITS\n          : this.params[key];\n\n      this._inflate = zlib.createInflateRaw({\n        ...this._options.zlibInflateOptions,\n        windowBits\n      });\n      this._inflate[kPerMessageDeflate] = this;\n      this._inflate[kTotalLength] = 0;\n      this._inflate[kBuffers] = [];\n      this._inflate.on('error', inflateOnError);\n      this._inflate.on('data', inflateOnData);\n    }\n\n    this._inflate[kCallback] = callback;\n\n    this._inflate.write(data);\n    if (fin) this._inflate.write(TRAILER);\n\n    this._inflate.flush(() => {\n      const err = this._inflate[kError];\n\n      if (err) {\n        this._inflate.close();\n        this._inflate = null;\n        callback(err);\n        return;\n      }\n\n      const data = bufferUtil.concat(\n        this._inflate[kBuffers],\n        this._inflate[kTotalLength]\n      );\n\n      if (this._inflate._readableState.endEmitted) {\n        this._inflate.close();\n        this._inflate = null;\n      } else {\n        this._inflate[kTotalLength] = 0;\n        this._inflate[kBuffers] = [];\n\n        if (fin && this.params[`${endpoint}_no_context_takeover`]) {\n          this._inflate.reset();\n        }\n      }\n\n      callback(null, data);\n    });\n  }\n\n  /**\n   * Compress data.\n   *\n   * @param {(Buffer|String)} data Data to compress\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @private\n   */\n  _compress(data, fin, callback) {\n    const endpoint = this._isServer ? 'server' : 'client';\n\n    if (!this._deflate) {\n      const key = `${endpoint}_max_window_bits`;\n      const windowBits =\n        typeof this.params[key] !== 'number'\n          ? zlib.Z_DEFAULT_WINDOWBITS\n          : this.params[key];\n\n      this._deflate = zlib.createDeflateRaw({\n        ...this._options.zlibDeflateOptions,\n        windowBits\n      });\n\n      this._deflate[kTotalLength] = 0;\n      this._deflate[kBuffers] = [];\n\n      this._deflate.on('data', deflateOnData);\n    }\n\n    this._deflate[kCallback] = callback;\n\n    this._deflate.write(data);\n    this._deflate.flush(zlib.Z_SYNC_FLUSH, () => {\n      if (!this._deflate) {\n        //\n        // The deflate stream was closed while data was being processed.\n        //\n        return;\n      }\n\n      let data = bufferUtil.concat(\n        this._deflate[kBuffers],\n        this._deflate[kTotalLength]\n      );\n\n      if (fin) data = data.slice(0, data.length - 4);\n\n      //\n      // Ensure that the callback will not be called again in\n      // `PerMessageDeflate#cleanup()`.\n      //\n      this._deflate[kCallback] = null;\n\n      this._deflate[kTotalLength] = 0;\n      this._deflate[kBuffers] = [];\n\n      if (fin && this.params[`${endpoint}_no_context_takeover`]) {\n        this._deflate.reset();\n      }\n\n      callback(null, data);\n    });\n  }\n}\n\nmodule.exports = PerMessageDeflate;\n\n/**\n * The listener of the `zlib.DeflateRaw` stream `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\nfunction deflateOnData(chunk) {\n  this[kBuffers].push(chunk);\n  this[kTotalLength] += chunk.length;\n}\n\n/**\n * The listener of the `zlib.InflateRaw` stream `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\nfunction inflateOnData(chunk) {\n  this[kTotalLength] += chunk.length;\n\n  if (\n    this[kPerMessageDeflate]._maxPayload < 1 ||\n    this[kTotalLength] <= this[kPerMessageDeflate]._maxPayload\n  ) {\n    this[kBuffers].push(chunk);\n    return;\n  }\n\n  this[kError] = new RangeError('Max payload size exceeded');\n  this[kError].code = 'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH';\n  this[kError][kStatusCode] = 1009;\n  this.removeListener('data', inflateOnData);\n  this.reset();\n}\n\n/**\n * The listener of the `zlib.InflateRaw` stream `'error'` event.\n *\n * @param {Error} err The emitted error\n * @private\n */\nfunction inflateOnError(err) {\n  //\n  // There is no need to call `Zlib#close()` as the handle is automatically\n  // closed when an error is emitted.\n  //\n  this[kPerMessageDeflate]._inflate = null;\n  err[kStatusCode] = 1007;\n  this[kCallback](err);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/ws/lib/permessage-deflate.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/ws/lib/receiver.js":
/*!********************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/ws/lib/receiver.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst { Writable } = __webpack_require__(/*! stream */ \"stream\");\n\nconst PerMessageDeflate = __webpack_require__(/*! ./permessage-deflate */ \"(api)/./node_modules/gogoanime-api/node_modules/ws/lib/permessage-deflate.js\");\nconst {\n  BINARY_TYPES,\n  EMPTY_BUFFER,\n  kStatusCode,\n  kWebSocket\n} = __webpack_require__(/*! ./constants */ \"(api)/./node_modules/gogoanime-api/node_modules/ws/lib/constants.js\");\nconst { concat, toArrayBuffer, unmask } = __webpack_require__(/*! ./buffer-util */ \"(api)/./node_modules/gogoanime-api/node_modules/ws/lib/buffer-util.js\");\nconst { isValidStatusCode, isValidUTF8 } = __webpack_require__(/*! ./validation */ \"(api)/./node_modules/gogoanime-api/node_modules/ws/lib/validation.js\");\n\nconst GET_INFO = 0;\nconst GET_PAYLOAD_LENGTH_16 = 1;\nconst GET_PAYLOAD_LENGTH_64 = 2;\nconst GET_MASK = 3;\nconst GET_DATA = 4;\nconst INFLATING = 5;\n\n/**\n * HyBi Receiver implementation.\n *\n * @extends Writable\n */\nclass Receiver extends Writable {\n  /**\n   * Creates a Receiver instance.\n   *\n   * @param {Object} [options] Options object\n   * @param {String} [options.binaryType=nodebuffer] The type for binary data\n   * @param {Object} [options.extensions] An object containing the negotiated\n   *     extensions\n   * @param {Boolean} [options.isServer=false] Specifies whether to operate in\n   *     client or server mode\n   * @param {Number} [options.maxPayload=0] The maximum allowed message length\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n   *     not to skip UTF-8 validation for text and close messages\n   */\n  constructor(options = {}) {\n    super();\n\n    this._binaryType = options.binaryType || BINARY_TYPES[0];\n    this._extensions = options.extensions || {};\n    this._isServer = !!options.isServer;\n    this._maxPayload = options.maxPayload | 0;\n    this._skipUTF8Validation = !!options.skipUTF8Validation;\n    this[kWebSocket] = undefined;\n\n    this._bufferedBytes = 0;\n    this._buffers = [];\n\n    this._compressed = false;\n    this._payloadLength = 0;\n    this._mask = undefined;\n    this._fragmented = 0;\n    this._masked = false;\n    this._fin = false;\n    this._opcode = 0;\n\n    this._totalPayloadLength = 0;\n    this._messageLength = 0;\n    this._fragments = [];\n\n    this._state = GET_INFO;\n    this._loop = false;\n  }\n\n  /**\n   * Implements `Writable.prototype._write()`.\n   *\n   * @param {Buffer} chunk The chunk of data to write\n   * @param {String} encoding The character encoding of `chunk`\n   * @param {Function} cb Callback\n   * @private\n   */\n  _write(chunk, encoding, cb) {\n    if (this._opcode === 0x08 && this._state == GET_INFO) return cb();\n\n    this._bufferedBytes += chunk.length;\n    this._buffers.push(chunk);\n    this.startLoop(cb);\n  }\n\n  /**\n   * Consumes `n` bytes from the buffered data.\n   *\n   * @param {Number} n The number of bytes to consume\n   * @return {Buffer} The consumed bytes\n   * @private\n   */\n  consume(n) {\n    this._bufferedBytes -= n;\n\n    if (n === this._buffers[0].length) return this._buffers.shift();\n\n    if (n < this._buffers[0].length) {\n      const buf = this._buffers[0];\n      this._buffers[0] = buf.slice(n);\n      return buf.slice(0, n);\n    }\n\n    const dst = Buffer.allocUnsafe(n);\n\n    do {\n      const buf = this._buffers[0];\n      const offset = dst.length - n;\n\n      if (n >= buf.length) {\n        dst.set(this._buffers.shift(), offset);\n      } else {\n        dst.set(new Uint8Array(buf.buffer, buf.byteOffset, n), offset);\n        this._buffers[0] = buf.slice(n);\n      }\n\n      n -= buf.length;\n    } while (n > 0);\n\n    return dst;\n  }\n\n  /**\n   * Starts the parsing loop.\n   *\n   * @param {Function} cb Callback\n   * @private\n   */\n  startLoop(cb) {\n    let err;\n    this._loop = true;\n\n    do {\n      switch (this._state) {\n        case GET_INFO:\n          err = this.getInfo();\n          break;\n        case GET_PAYLOAD_LENGTH_16:\n          err = this.getPayloadLength16();\n          break;\n        case GET_PAYLOAD_LENGTH_64:\n          err = this.getPayloadLength64();\n          break;\n        case GET_MASK:\n          this.getMask();\n          break;\n        case GET_DATA:\n          err = this.getData(cb);\n          break;\n        default:\n          // `INFLATING`\n          this._loop = false;\n          return;\n      }\n    } while (this._loop);\n\n    cb(err);\n  }\n\n  /**\n   * Reads the first two bytes of a frame.\n   *\n   * @return {(RangeError|undefined)} A possible error\n   * @private\n   */\n  getInfo() {\n    if (this._bufferedBytes < 2) {\n      this._loop = false;\n      return;\n    }\n\n    const buf = this.consume(2);\n\n    if ((buf[0] & 0x30) !== 0x00) {\n      this._loop = false;\n      return error(\n        RangeError,\n        'RSV2 and RSV3 must be clear',\n        true,\n        1002,\n        'WS_ERR_UNEXPECTED_RSV_2_3'\n      );\n    }\n\n    const compressed = (buf[0] & 0x40) === 0x40;\n\n    if (compressed && !this._extensions[PerMessageDeflate.extensionName]) {\n      this._loop = false;\n      return error(\n        RangeError,\n        'RSV1 must be clear',\n        true,\n        1002,\n        'WS_ERR_UNEXPECTED_RSV_1'\n      );\n    }\n\n    this._fin = (buf[0] & 0x80) === 0x80;\n    this._opcode = buf[0] & 0x0f;\n    this._payloadLength = buf[1] & 0x7f;\n\n    if (this._opcode === 0x00) {\n      if (compressed) {\n        this._loop = false;\n        return error(\n          RangeError,\n          'RSV1 must be clear',\n          true,\n          1002,\n          'WS_ERR_UNEXPECTED_RSV_1'\n        );\n      }\n\n      if (!this._fragmented) {\n        this._loop = false;\n        return error(\n          RangeError,\n          'invalid opcode 0',\n          true,\n          1002,\n          'WS_ERR_INVALID_OPCODE'\n        );\n      }\n\n      this._opcode = this._fragmented;\n    } else if (this._opcode === 0x01 || this._opcode === 0x02) {\n      if (this._fragmented) {\n        this._loop = false;\n        return error(\n          RangeError,\n          `invalid opcode ${this._opcode}`,\n          true,\n          1002,\n          'WS_ERR_INVALID_OPCODE'\n        );\n      }\n\n      this._compressed = compressed;\n    } else if (this._opcode > 0x07 && this._opcode < 0x0b) {\n      if (!this._fin) {\n        this._loop = false;\n        return error(\n          RangeError,\n          'FIN must be set',\n          true,\n          1002,\n          'WS_ERR_EXPECTED_FIN'\n        );\n      }\n\n      if (compressed) {\n        this._loop = false;\n        return error(\n          RangeError,\n          'RSV1 must be clear',\n          true,\n          1002,\n          'WS_ERR_UNEXPECTED_RSV_1'\n        );\n      }\n\n      if (this._payloadLength > 0x7d) {\n        this._loop = false;\n        return error(\n          RangeError,\n          `invalid payload length ${this._payloadLength}`,\n          true,\n          1002,\n          'WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH'\n        );\n      }\n    } else {\n      this._loop = false;\n      return error(\n        RangeError,\n        `invalid opcode ${this._opcode}`,\n        true,\n        1002,\n        'WS_ERR_INVALID_OPCODE'\n      );\n    }\n\n    if (!this._fin && !this._fragmented) this._fragmented = this._opcode;\n    this._masked = (buf[1] & 0x80) === 0x80;\n\n    if (this._isServer) {\n      if (!this._masked) {\n        this._loop = false;\n        return error(\n          RangeError,\n          'MASK must be set',\n          true,\n          1002,\n          'WS_ERR_EXPECTED_MASK'\n        );\n      }\n    } else if (this._masked) {\n      this._loop = false;\n      return error(\n        RangeError,\n        'MASK must be clear',\n        true,\n        1002,\n        'WS_ERR_UNEXPECTED_MASK'\n      );\n    }\n\n    if (this._payloadLength === 126) this._state = GET_PAYLOAD_LENGTH_16;\n    else if (this._payloadLength === 127) this._state = GET_PAYLOAD_LENGTH_64;\n    else return this.haveLength();\n  }\n\n  /**\n   * Gets extended payload length (7+16).\n   *\n   * @return {(RangeError|undefined)} A possible error\n   * @private\n   */\n  getPayloadLength16() {\n    if (this._bufferedBytes < 2) {\n      this._loop = false;\n      return;\n    }\n\n    this._payloadLength = this.consume(2).readUInt16BE(0);\n    return this.haveLength();\n  }\n\n  /**\n   * Gets extended payload length (7+64).\n   *\n   * @return {(RangeError|undefined)} A possible error\n   * @private\n   */\n  getPayloadLength64() {\n    if (this._bufferedBytes < 8) {\n      this._loop = false;\n      return;\n    }\n\n    const buf = this.consume(8);\n    const num = buf.readUInt32BE(0);\n\n    //\n    // The maximum safe integer in JavaScript is 2^53 - 1. An error is returned\n    // if payload length is greater than this number.\n    //\n    if (num > Math.pow(2, 53 - 32) - 1) {\n      this._loop = false;\n      return error(\n        RangeError,\n        'Unsupported WebSocket frame: payload length > 2^53 - 1',\n        false,\n        1009,\n        'WS_ERR_UNSUPPORTED_DATA_PAYLOAD_LENGTH'\n      );\n    }\n\n    this._payloadLength = num * Math.pow(2, 32) + buf.readUInt32BE(4);\n    return this.haveLength();\n  }\n\n  /**\n   * Payload length has been read.\n   *\n   * @return {(RangeError|undefined)} A possible error\n   * @private\n   */\n  haveLength() {\n    if (this._payloadLength && this._opcode < 0x08) {\n      this._totalPayloadLength += this._payloadLength;\n      if (this._totalPayloadLength > this._maxPayload && this._maxPayload > 0) {\n        this._loop = false;\n        return error(\n          RangeError,\n          'Max payload size exceeded',\n          false,\n          1009,\n          'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH'\n        );\n      }\n    }\n\n    if (this._masked) this._state = GET_MASK;\n    else this._state = GET_DATA;\n  }\n\n  /**\n   * Reads mask bytes.\n   *\n   * @private\n   */\n  getMask() {\n    if (this._bufferedBytes < 4) {\n      this._loop = false;\n      return;\n    }\n\n    this._mask = this.consume(4);\n    this._state = GET_DATA;\n  }\n\n  /**\n   * Reads data bytes.\n   *\n   * @param {Function} cb Callback\n   * @return {(Error|RangeError|undefined)} A possible error\n   * @private\n   */\n  getData(cb) {\n    let data = EMPTY_BUFFER;\n\n    if (this._payloadLength) {\n      if (this._bufferedBytes < this._payloadLength) {\n        this._loop = false;\n        return;\n      }\n\n      data = this.consume(this._payloadLength);\n\n      if (\n        this._masked &&\n        (this._mask[0] | this._mask[1] | this._mask[2] | this._mask[3]) !== 0\n      ) {\n        unmask(data, this._mask);\n      }\n    }\n\n    if (this._opcode > 0x07) return this.controlMessage(data);\n\n    if (this._compressed) {\n      this._state = INFLATING;\n      this.decompress(data, cb);\n      return;\n    }\n\n    if (data.length) {\n      //\n      // This message is not compressed so its length is the sum of the payload\n      // length of all fragments.\n      //\n      this._messageLength = this._totalPayloadLength;\n      this._fragments.push(data);\n    }\n\n    return this.dataMessage();\n  }\n\n  /**\n   * Decompresses data.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Function} cb Callback\n   * @private\n   */\n  decompress(data, cb) {\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n\n    perMessageDeflate.decompress(data, this._fin, (err, buf) => {\n      if (err) return cb(err);\n\n      if (buf.length) {\n        this._messageLength += buf.length;\n        if (this._messageLength > this._maxPayload && this._maxPayload > 0) {\n          return cb(\n            error(\n              RangeError,\n              'Max payload size exceeded',\n              false,\n              1009,\n              'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH'\n            )\n          );\n        }\n\n        this._fragments.push(buf);\n      }\n\n      const er = this.dataMessage();\n      if (er) return cb(er);\n\n      this.startLoop(cb);\n    });\n  }\n\n  /**\n   * Handles a data message.\n   *\n   * @return {(Error|undefined)} A possible error\n   * @private\n   */\n  dataMessage() {\n    if (this._fin) {\n      const messageLength = this._messageLength;\n      const fragments = this._fragments;\n\n      this._totalPayloadLength = 0;\n      this._messageLength = 0;\n      this._fragmented = 0;\n      this._fragments = [];\n\n      if (this._opcode === 2) {\n        let data;\n\n        if (this._binaryType === 'nodebuffer') {\n          data = concat(fragments, messageLength);\n        } else if (this._binaryType === 'arraybuffer') {\n          data = toArrayBuffer(concat(fragments, messageLength));\n        } else {\n          data = fragments;\n        }\n\n        this.emit('message', data, true);\n      } else {\n        const buf = concat(fragments, messageLength);\n\n        if (!this._skipUTF8Validation && !isValidUTF8(buf)) {\n          this._loop = false;\n          return error(\n            Error,\n            'invalid UTF-8 sequence',\n            true,\n            1007,\n            'WS_ERR_INVALID_UTF8'\n          );\n        }\n\n        this.emit('message', buf, false);\n      }\n    }\n\n    this._state = GET_INFO;\n  }\n\n  /**\n   * Handles a control message.\n   *\n   * @param {Buffer} data Data to handle\n   * @return {(Error|RangeError|undefined)} A possible error\n   * @private\n   */\n  controlMessage(data) {\n    if (this._opcode === 0x08) {\n      this._loop = false;\n\n      if (data.length === 0) {\n        this.emit('conclude', 1005, EMPTY_BUFFER);\n        this.end();\n      } else if (data.length === 1) {\n        return error(\n          RangeError,\n          'invalid payload length 1',\n          true,\n          1002,\n          'WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH'\n        );\n      } else {\n        const code = data.readUInt16BE(0);\n\n        if (!isValidStatusCode(code)) {\n          return error(\n            RangeError,\n            `invalid status code ${code}`,\n            true,\n            1002,\n            'WS_ERR_INVALID_CLOSE_CODE'\n          );\n        }\n\n        const buf = data.slice(2);\n\n        if (!this._skipUTF8Validation && !isValidUTF8(buf)) {\n          return error(\n            Error,\n            'invalid UTF-8 sequence',\n            true,\n            1007,\n            'WS_ERR_INVALID_UTF8'\n          );\n        }\n\n        this.emit('conclude', code, buf);\n        this.end();\n      }\n    } else if (this._opcode === 0x09) {\n      this.emit('ping', data);\n    } else {\n      this.emit('pong', data);\n    }\n\n    this._state = GET_INFO;\n  }\n}\n\nmodule.exports = Receiver;\n\n/**\n * Builds an error object.\n *\n * @param {function(new:Error|RangeError)} ErrorCtor The error constructor\n * @param {String} message The error message\n * @param {Boolean} prefix Specifies whether or not to add a default prefix to\n *     `message`\n * @param {Number} statusCode The status code\n * @param {String} errorCode The exposed error code\n * @return {(Error|RangeError)} The error\n * @private\n */\nfunction error(ErrorCtor, message, prefix, statusCode, errorCode) {\n  const err = new ErrorCtor(\n    prefix ? `Invalid WebSocket frame: ${message}` : message\n  );\n\n  Error.captureStackTrace(err, error);\n  err.code = errorCode;\n  err[kStatusCode] = statusCode;\n  return err;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/ws/lib/receiver.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/ws/lib/sender.js":
/*!******************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/ws/lib/sender.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^net|tls$\" }] */\n\n\n\nconst net = __webpack_require__(/*! net */ \"net\");\nconst tls = __webpack_require__(/*! tls */ \"tls\");\nconst { randomFillSync } = __webpack_require__(/*! crypto */ \"crypto\");\n\nconst PerMessageDeflate = __webpack_require__(/*! ./permessage-deflate */ \"(api)/./node_modules/gogoanime-api/node_modules/ws/lib/permessage-deflate.js\");\nconst { EMPTY_BUFFER } = __webpack_require__(/*! ./constants */ \"(api)/./node_modules/gogoanime-api/node_modules/ws/lib/constants.js\");\nconst { isValidStatusCode } = __webpack_require__(/*! ./validation */ \"(api)/./node_modules/gogoanime-api/node_modules/ws/lib/validation.js\");\nconst { mask: applyMask, toBuffer } = __webpack_require__(/*! ./buffer-util */ \"(api)/./node_modules/gogoanime-api/node_modules/ws/lib/buffer-util.js\");\n\nconst kByteLength = Symbol('kByteLength');\nconst maskBuffer = Buffer.alloc(4);\n\n/**\n * HyBi Sender implementation.\n */\nclass Sender {\n  /**\n   * Creates a Sender instance.\n   *\n   * @param {(net.Socket|tls.Socket)} socket The connection socket\n   * @param {Object} [extensions] An object containing the negotiated extensions\n   * @param {Function} [generateMask] The function used to generate the masking\n   *     key\n   */\n  constructor(socket, extensions, generateMask) {\n    this._extensions = extensions || {};\n\n    if (generateMask) {\n      this._generateMask = generateMask;\n      this._maskBuffer = Buffer.alloc(4);\n    }\n\n    this._socket = socket;\n\n    this._firstFragment = true;\n    this._compress = false;\n\n    this._bufferedBytes = 0;\n    this._deflating = false;\n    this._queue = [];\n  }\n\n  /**\n   * Frames a piece of data according to the HyBi WebSocket protocol.\n   *\n   * @param {(Buffer|String)} data The data to frame\n   * @param {Object} options Options object\n   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\n   *     FIN bit\n   * @param {Function} [options.generateMask] The function used to generate the\n   *     masking key\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Buffer} [options.maskBuffer] The buffer used to store the masking\n   *     key\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\n   *     modified\n   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\n   *     RSV1 bit\n   * @return {(Buffer|String)[]} The framed data\n   * @public\n   */\n  static frame(data, options) {\n    let mask;\n    let merge = false;\n    let offset = 2;\n    let skipMasking = false;\n\n    if (options.mask) {\n      mask = options.maskBuffer || maskBuffer;\n\n      if (options.generateMask) {\n        options.generateMask(mask);\n      } else {\n        randomFillSync(mask, 0, 4);\n      }\n\n      skipMasking = (mask[0] | mask[1] | mask[2] | mask[3]) === 0;\n      offset = 6;\n    }\n\n    let dataLength;\n\n    if (typeof data === 'string') {\n      if (\n        (!options.mask || skipMasking) &&\n        options[kByteLength] !== undefined\n      ) {\n        dataLength = options[kByteLength];\n      } else {\n        data = Buffer.from(data);\n        dataLength = data.length;\n      }\n    } else {\n      dataLength = data.length;\n      merge = options.mask && options.readOnly && !skipMasking;\n    }\n\n    let payloadLength = dataLength;\n\n    if (dataLength >= 65536) {\n      offset += 8;\n      payloadLength = 127;\n    } else if (dataLength > 125) {\n      offset += 2;\n      payloadLength = 126;\n    }\n\n    const target = Buffer.allocUnsafe(merge ? dataLength + offset : offset);\n\n    target[0] = options.fin ? options.opcode | 0x80 : options.opcode;\n    if (options.rsv1) target[0] |= 0x40;\n\n    target[1] = payloadLength;\n\n    if (payloadLength === 126) {\n      target.writeUInt16BE(dataLength, 2);\n    } else if (payloadLength === 127) {\n      target[2] = target[3] = 0;\n      target.writeUIntBE(dataLength, 4, 6);\n    }\n\n    if (!options.mask) return [target, data];\n\n    target[1] |= 0x80;\n    target[offset - 4] = mask[0];\n    target[offset - 3] = mask[1];\n    target[offset - 2] = mask[2];\n    target[offset - 1] = mask[3];\n\n    if (skipMasking) return [target, data];\n\n    if (merge) {\n      applyMask(data, mask, target, offset, dataLength);\n      return [target];\n    }\n\n    applyMask(data, mask, data, 0, dataLength);\n    return [target, data];\n  }\n\n  /**\n   * Sends a close message to the other peer.\n   *\n   * @param {Number} [code] The status code component of the body\n   * @param {(String|Buffer)} [data] The message component of the body\n   * @param {Boolean} [mask=false] Specifies whether or not to mask the message\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  close(code, data, mask, cb) {\n    let buf;\n\n    if (code === undefined) {\n      buf = EMPTY_BUFFER;\n    } else if (typeof code !== 'number' || !isValidStatusCode(code)) {\n      throw new TypeError('First argument must be a valid error code number');\n    } else if (data === undefined || !data.length) {\n      buf = Buffer.allocUnsafe(2);\n      buf.writeUInt16BE(code, 0);\n    } else {\n      const length = Buffer.byteLength(data);\n\n      if (length > 123) {\n        throw new RangeError('The message must not be greater than 123 bytes');\n      }\n\n      buf = Buffer.allocUnsafe(2 + length);\n      buf.writeUInt16BE(code, 0);\n\n      if (typeof data === 'string') {\n        buf.write(data, 2);\n      } else {\n        buf.set(data, 2);\n      }\n    }\n\n    const options = {\n      [kByteLength]: buf.length,\n      fin: true,\n      generateMask: this._generateMask,\n      mask,\n      maskBuffer: this._maskBuffer,\n      opcode: 0x08,\n      readOnly: false,\n      rsv1: false\n    };\n\n    if (this._deflating) {\n      this.enqueue([this.dispatch, buf, false, options, cb]);\n    } else {\n      this.sendFrame(Sender.frame(buf, options), cb);\n    }\n  }\n\n  /**\n   * Sends a ping message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  ping(data, mask, cb) {\n    let byteLength;\n    let readOnly;\n\n    if (typeof data === 'string') {\n      byteLength = Buffer.byteLength(data);\n      readOnly = false;\n    } else {\n      data = toBuffer(data);\n      byteLength = data.length;\n      readOnly = toBuffer.readOnly;\n    }\n\n    if (byteLength > 125) {\n      throw new RangeError('The data size must not be greater than 125 bytes');\n    }\n\n    const options = {\n      [kByteLength]: byteLength,\n      fin: true,\n      generateMask: this._generateMask,\n      mask,\n      maskBuffer: this._maskBuffer,\n      opcode: 0x09,\n      readOnly,\n      rsv1: false\n    };\n\n    if (this._deflating) {\n      this.enqueue([this.dispatch, data, false, options, cb]);\n    } else {\n      this.sendFrame(Sender.frame(data, options), cb);\n    }\n  }\n\n  /**\n   * Sends a pong message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  pong(data, mask, cb) {\n    let byteLength;\n    let readOnly;\n\n    if (typeof data === 'string') {\n      byteLength = Buffer.byteLength(data);\n      readOnly = false;\n    } else {\n      data = toBuffer(data);\n      byteLength = data.length;\n      readOnly = toBuffer.readOnly;\n    }\n\n    if (byteLength > 125) {\n      throw new RangeError('The data size must not be greater than 125 bytes');\n    }\n\n    const options = {\n      [kByteLength]: byteLength,\n      fin: true,\n      generateMask: this._generateMask,\n      mask,\n      maskBuffer: this._maskBuffer,\n      opcode: 0x0a,\n      readOnly,\n      rsv1: false\n    };\n\n    if (this._deflating) {\n      this.enqueue([this.dispatch, data, false, options, cb]);\n    } else {\n      this.sendFrame(Sender.frame(data, options), cb);\n    }\n  }\n\n  /**\n   * Sends a data message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Object} options Options object\n   * @param {Boolean} [options.binary=false] Specifies whether `data` is binary\n   *     or text\n   * @param {Boolean} [options.compress=false] Specifies whether or not to\n   *     compress `data`\n   * @param {Boolean} [options.fin=false] Specifies whether the fragment is the\n   *     last one\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  send(data, options, cb) {\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n    let opcode = options.binary ? 2 : 1;\n    let rsv1 = options.compress;\n\n    let byteLength;\n    let readOnly;\n\n    if (typeof data === 'string') {\n      byteLength = Buffer.byteLength(data);\n      readOnly = false;\n    } else {\n      data = toBuffer(data);\n      byteLength = data.length;\n      readOnly = toBuffer.readOnly;\n    }\n\n    if (this._firstFragment) {\n      this._firstFragment = false;\n      if (\n        rsv1 &&\n        perMessageDeflate &&\n        perMessageDeflate.params[\n          perMessageDeflate._isServer\n            ? 'server_no_context_takeover'\n            : 'client_no_context_takeover'\n        ]\n      ) {\n        rsv1 = byteLength >= perMessageDeflate._threshold;\n      }\n      this._compress = rsv1;\n    } else {\n      rsv1 = false;\n      opcode = 0;\n    }\n\n    if (options.fin) this._firstFragment = true;\n\n    if (perMessageDeflate) {\n      const opts = {\n        [kByteLength]: byteLength,\n        fin: options.fin,\n        generateMask: this._generateMask,\n        mask: options.mask,\n        maskBuffer: this._maskBuffer,\n        opcode,\n        readOnly,\n        rsv1\n      };\n\n      if (this._deflating) {\n        this.enqueue([this.dispatch, data, this._compress, opts, cb]);\n      } else {\n        this.dispatch(data, this._compress, opts, cb);\n      }\n    } else {\n      this.sendFrame(\n        Sender.frame(data, {\n          [kByteLength]: byteLength,\n          fin: options.fin,\n          generateMask: this._generateMask,\n          mask: options.mask,\n          maskBuffer: this._maskBuffer,\n          opcode,\n          readOnly,\n          rsv1: false\n        }),\n        cb\n      );\n    }\n  }\n\n  /**\n   * Dispatches a message.\n   *\n   * @param {(Buffer|String)} data The message to send\n   * @param {Boolean} [compress=false] Specifies whether or not to compress\n   *     `data`\n   * @param {Object} options Options object\n   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\n   *     FIN bit\n   * @param {Function} [options.generateMask] The function used to generate the\n   *     masking key\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Buffer} [options.maskBuffer] The buffer used to store the masking\n   *     key\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\n   *     modified\n   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\n   *     RSV1 bit\n   * @param {Function} [cb] Callback\n   * @private\n   */\n  dispatch(data, compress, options, cb) {\n    if (!compress) {\n      this.sendFrame(Sender.frame(data, options), cb);\n      return;\n    }\n\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n\n    this._bufferedBytes += options[kByteLength];\n    this._deflating = true;\n    perMessageDeflate.compress(data, options.fin, (_, buf) => {\n      if (this._socket.destroyed) {\n        const err = new Error(\n          'The socket was closed while data was being compressed'\n        );\n\n        if (typeof cb === 'function') cb(err);\n\n        for (let i = 0; i < this._queue.length; i++) {\n          const params = this._queue[i];\n          const callback = params[params.length - 1];\n\n          if (typeof callback === 'function') callback(err);\n        }\n\n        return;\n      }\n\n      this._bufferedBytes -= options[kByteLength];\n      this._deflating = false;\n      options.readOnly = false;\n      this.sendFrame(Sender.frame(buf, options), cb);\n      this.dequeue();\n    });\n  }\n\n  /**\n   * Executes queued send operations.\n   *\n   * @private\n   */\n  dequeue() {\n    while (!this._deflating && this._queue.length) {\n      const params = this._queue.shift();\n\n      this._bufferedBytes -= params[3][kByteLength];\n      Reflect.apply(params[0], this, params.slice(1));\n    }\n  }\n\n  /**\n   * Enqueues a send operation.\n   *\n   * @param {Array} params Send operation parameters.\n   * @private\n   */\n  enqueue(params) {\n    this._bufferedBytes += params[3][kByteLength];\n    this._queue.push(params);\n  }\n\n  /**\n   * Sends a frame.\n   *\n   * @param {Buffer[]} list The frame to send\n   * @param {Function} [cb] Callback\n   * @private\n   */\n  sendFrame(list, cb) {\n    if (list.length === 2) {\n      this._socket.cork();\n      this._socket.write(list[0]);\n      this._socket.write(list[1], cb);\n      this._socket.uncork();\n    } else {\n      this._socket.write(list[0], cb);\n    }\n  }\n}\n\nmodule.exports = Sender;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/ws/lib/sender.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/ws/lib/stream.js":
/*!******************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/ws/lib/stream.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst { Duplex } = __webpack_require__(/*! stream */ \"stream\");\n\n/**\n * Emits the `'close'` event on a stream.\n *\n * @param {Duplex} stream The stream.\n * @private\n */\nfunction emitClose(stream) {\n  stream.emit('close');\n}\n\n/**\n * The listener of the `'end'` event.\n *\n * @private\n */\nfunction duplexOnEnd() {\n  if (!this.destroyed && this._writableState.finished) {\n    this.destroy();\n  }\n}\n\n/**\n * The listener of the `'error'` event.\n *\n * @param {Error} err The error\n * @private\n */\nfunction duplexOnError(err) {\n  this.removeListener('error', duplexOnError);\n  this.destroy();\n  if (this.listenerCount('error') === 0) {\n    // Do not suppress the throwing behavior.\n    this.emit('error', err);\n  }\n}\n\n/**\n * Wraps a `WebSocket` in a duplex stream.\n *\n * @param {WebSocket} ws The `WebSocket` to wrap\n * @param {Object} [options] The options for the `Duplex` constructor\n * @return {Duplex} The duplex stream\n * @public\n */\nfunction createWebSocketStream(ws, options) {\n  let terminateOnDestroy = true;\n\n  const duplex = new Duplex({\n    ...options,\n    autoDestroy: false,\n    emitClose: false,\n    objectMode: false,\n    writableObjectMode: false\n  });\n\n  ws.on('message', function message(msg, isBinary) {\n    const data =\n      !isBinary && duplex._readableState.objectMode ? msg.toString() : msg;\n\n    if (!duplex.push(data)) ws.pause();\n  });\n\n  ws.once('error', function error(err) {\n    if (duplex.destroyed) return;\n\n    // Prevent `ws.terminate()` from being called by `duplex._destroy()`.\n    //\n    // - If the `'error'` event is emitted before the `'open'` event, then\n    //   `ws.terminate()` is a noop as no socket is assigned.\n    // - Otherwise, the error is re-emitted by the listener of the `'error'`\n    //   event of the `Receiver` object. The listener already closes the\n    //   connection by calling `ws.close()`. This allows a close frame to be\n    //   sent to the other peer. If `ws.terminate()` is called right after this,\n    //   then the close frame might not be sent.\n    terminateOnDestroy = false;\n    duplex.destroy(err);\n  });\n\n  ws.once('close', function close() {\n    if (duplex.destroyed) return;\n\n    duplex.push(null);\n  });\n\n  duplex._destroy = function (err, callback) {\n    if (ws.readyState === ws.CLOSED) {\n      callback(err);\n      process.nextTick(emitClose, duplex);\n      return;\n    }\n\n    let called = false;\n\n    ws.once('error', function error(err) {\n      called = true;\n      callback(err);\n    });\n\n    ws.once('close', function close() {\n      if (!called) callback(err);\n      process.nextTick(emitClose, duplex);\n    });\n\n    if (terminateOnDestroy) ws.terminate();\n  };\n\n  duplex._final = function (callback) {\n    if (ws.readyState === ws.CONNECTING) {\n      ws.once('open', function open() {\n        duplex._final(callback);\n      });\n      return;\n    }\n\n    // If the value of the `_socket` property is `null` it means that `ws` is a\n    // client websocket and the handshake failed. In fact, when this happens, a\n    // socket is never assigned to the websocket. Wait for the `'error'` event\n    // that will be emitted by the websocket.\n    if (ws._socket === null) return;\n\n    if (ws._socket._writableState.finished) {\n      callback();\n      if (duplex._readableState.endEmitted) duplex.destroy();\n    } else {\n      ws._socket.once('finish', function finish() {\n        // `duplex` is not destroyed here because the `'end'` event will be\n        // emitted on `duplex` after this `'finish'` event. The EOF signaling\n        // `null` chunk is, in fact, pushed when the websocket emits `'close'`.\n        callback();\n      });\n      ws.close();\n    }\n  };\n\n  duplex._read = function () {\n    if (ws.isPaused) ws.resume();\n  };\n\n  duplex._write = function (chunk, encoding, callback) {\n    if (ws.readyState === ws.CONNECTING) {\n      ws.once('open', function open() {\n        duplex._write(chunk, encoding, callback);\n      });\n      return;\n    }\n\n    ws.send(chunk, callback);\n  };\n\n  duplex.on('end', duplexOnEnd);\n  duplex.on('error', duplexOnError);\n  return duplex;\n}\n\nmodule.exports = createWebSocketStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvZ29nb2FuaW1lLWFwaS9ub2RlX21vZHVsZXMvd3MvbGliL3N0cmVhbS5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixRQUFRLFNBQVMsRUFBRSxtQkFBTyxDQUFDLHNCQUFROztBQUVuQztBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxXQUFXO0FBQ3RCLFdBQVcsUUFBUTtBQUNuQixZQUFZLFFBQVE7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FuaW1lZmxpeC8uL25vZGVfbW9kdWxlcy9nb2dvYW5pbWUtYXBpL25vZGVfbW9kdWxlcy93cy9saWIvc3RyZWFtLmpzPzMwMDIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB7IER1cGxleCB9ID0gcmVxdWlyZSgnc3RyZWFtJyk7XG5cbi8qKlxuICogRW1pdHMgdGhlIGAnY2xvc2UnYCBldmVudCBvbiBhIHN0cmVhbS5cbiAqXG4gKiBAcGFyYW0ge0R1cGxleH0gc3RyZWFtIFRoZSBzdHJlYW0uXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBlbWl0Q2xvc2Uoc3RyZWFtKSB7XG4gIHN0cmVhbS5lbWl0KCdjbG9zZScpO1xufVxuXG4vKipcbiAqIFRoZSBsaXN0ZW5lciBvZiB0aGUgYCdlbmQnYCBldmVudC5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBkdXBsZXhPbkVuZCgpIHtcbiAgaWYgKCF0aGlzLmRlc3Ryb3llZCAmJiB0aGlzLl93cml0YWJsZVN0YXRlLmZpbmlzaGVkKSB7XG4gICAgdGhpcy5kZXN0cm95KCk7XG4gIH1cbn1cblxuLyoqXG4gKiBUaGUgbGlzdGVuZXIgb2YgdGhlIGAnZXJyb3InYCBldmVudC5cbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnIgVGhlIGVycm9yXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBkdXBsZXhPbkVycm9yKGVycikge1xuICB0aGlzLnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIGR1cGxleE9uRXJyb3IpO1xuICB0aGlzLmRlc3Ryb3koKTtcbiAgaWYgKHRoaXMubGlzdGVuZXJDb3VudCgnZXJyb3InKSA9PT0gMCkge1xuICAgIC8vIERvIG5vdCBzdXBwcmVzcyB0aGUgdGhyb3dpbmcgYmVoYXZpb3IuXG4gICAgdGhpcy5lbWl0KCdlcnJvcicsIGVycik7XG4gIH1cbn1cblxuLyoqXG4gKiBXcmFwcyBhIGBXZWJTb2NrZXRgIGluIGEgZHVwbGV4IHN0cmVhbS5cbiAqXG4gKiBAcGFyYW0ge1dlYlNvY2tldH0gd3MgVGhlIGBXZWJTb2NrZXRgIHRvIHdyYXBcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gVGhlIG9wdGlvbnMgZm9yIHRoZSBgRHVwbGV4YCBjb25zdHJ1Y3RvclxuICogQHJldHVybiB7RHVwbGV4fSBUaGUgZHVwbGV4IHN0cmVhbVxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiBjcmVhdGVXZWJTb2NrZXRTdHJlYW0od3MsIG9wdGlvbnMpIHtcbiAgbGV0IHRlcm1pbmF0ZU9uRGVzdHJveSA9IHRydWU7XG5cbiAgY29uc3QgZHVwbGV4ID0gbmV3IER1cGxleCh7XG4gICAgLi4ub3B0aW9ucyxcbiAgICBhdXRvRGVzdHJveTogZmFsc2UsXG4gICAgZW1pdENsb3NlOiBmYWxzZSxcbiAgICBvYmplY3RNb2RlOiBmYWxzZSxcbiAgICB3cml0YWJsZU9iamVjdE1vZGU6IGZhbHNlXG4gIH0pO1xuXG4gIHdzLm9uKCdtZXNzYWdlJywgZnVuY3Rpb24gbWVzc2FnZShtc2csIGlzQmluYXJ5KSB7XG4gICAgY29uc3QgZGF0YSA9XG4gICAgICAhaXNCaW5hcnkgJiYgZHVwbGV4Ll9yZWFkYWJsZVN0YXRlLm9iamVjdE1vZGUgPyBtc2cudG9TdHJpbmcoKSA6IG1zZztcblxuICAgIGlmICghZHVwbGV4LnB1c2goZGF0YSkpIHdzLnBhdXNlKCk7XG4gIH0pO1xuXG4gIHdzLm9uY2UoJ2Vycm9yJywgZnVuY3Rpb24gZXJyb3IoZXJyKSB7XG4gICAgaWYgKGR1cGxleC5kZXN0cm95ZWQpIHJldHVybjtcblxuICAgIC8vIFByZXZlbnQgYHdzLnRlcm1pbmF0ZSgpYCBmcm9tIGJlaW5nIGNhbGxlZCBieSBgZHVwbGV4Ll9kZXN0cm95KClgLlxuICAgIC8vXG4gICAgLy8gLSBJZiB0aGUgYCdlcnJvcidgIGV2ZW50IGlzIGVtaXR0ZWQgYmVmb3JlIHRoZSBgJ29wZW4nYCBldmVudCwgdGhlblxuICAgIC8vICAgYHdzLnRlcm1pbmF0ZSgpYCBpcyBhIG5vb3AgYXMgbm8gc29ja2V0IGlzIGFzc2lnbmVkLlxuICAgIC8vIC0gT3RoZXJ3aXNlLCB0aGUgZXJyb3IgaXMgcmUtZW1pdHRlZCBieSB0aGUgbGlzdGVuZXIgb2YgdGhlIGAnZXJyb3InYFxuICAgIC8vICAgZXZlbnQgb2YgdGhlIGBSZWNlaXZlcmAgb2JqZWN0LiBUaGUgbGlzdGVuZXIgYWxyZWFkeSBjbG9zZXMgdGhlXG4gICAgLy8gICBjb25uZWN0aW9uIGJ5IGNhbGxpbmcgYHdzLmNsb3NlKClgLiBUaGlzIGFsbG93cyBhIGNsb3NlIGZyYW1lIHRvIGJlXG4gICAgLy8gICBzZW50IHRvIHRoZSBvdGhlciBwZWVyLiBJZiBgd3MudGVybWluYXRlKClgIGlzIGNhbGxlZCByaWdodCBhZnRlciB0aGlzLFxuICAgIC8vICAgdGhlbiB0aGUgY2xvc2UgZnJhbWUgbWlnaHQgbm90IGJlIHNlbnQuXG4gICAgdGVybWluYXRlT25EZXN0cm95ID0gZmFsc2U7XG4gICAgZHVwbGV4LmRlc3Ryb3koZXJyKTtcbiAgfSk7XG5cbiAgd3Mub25jZSgnY2xvc2UnLCBmdW5jdGlvbiBjbG9zZSgpIHtcbiAgICBpZiAoZHVwbGV4LmRlc3Ryb3llZCkgcmV0dXJuO1xuXG4gICAgZHVwbGV4LnB1c2gobnVsbCk7XG4gIH0pO1xuXG4gIGR1cGxleC5fZGVzdHJveSA9IGZ1bmN0aW9uIChlcnIsIGNhbGxiYWNrKSB7XG4gICAgaWYgKHdzLnJlYWR5U3RhdGUgPT09IHdzLkNMT1NFRCkge1xuICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZW1pdENsb3NlLCBkdXBsZXgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBjYWxsZWQgPSBmYWxzZTtcblxuICAgIHdzLm9uY2UoJ2Vycm9yJywgZnVuY3Rpb24gZXJyb3IoZXJyKSB7XG4gICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICB9KTtcblxuICAgIHdzLm9uY2UoJ2Nsb3NlJywgZnVuY3Rpb24gY2xvc2UoKSB7XG4gICAgICBpZiAoIWNhbGxlZCkgY2FsbGJhY2soZXJyKTtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZW1pdENsb3NlLCBkdXBsZXgpO1xuICAgIH0pO1xuXG4gICAgaWYgKHRlcm1pbmF0ZU9uRGVzdHJveSkgd3MudGVybWluYXRlKCk7XG4gIH07XG5cbiAgZHVwbGV4Ll9maW5hbCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIGlmICh3cy5yZWFkeVN0YXRlID09PSB3cy5DT05ORUNUSU5HKSB7XG4gICAgICB3cy5vbmNlKCdvcGVuJywgZnVuY3Rpb24gb3BlbigpIHtcbiAgICAgICAgZHVwbGV4Ll9maW5hbChjYWxsYmFjayk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGUgdmFsdWUgb2YgdGhlIGBfc29ja2V0YCBwcm9wZXJ0eSBpcyBgbnVsbGAgaXQgbWVhbnMgdGhhdCBgd3NgIGlzIGFcbiAgICAvLyBjbGllbnQgd2Vic29ja2V0IGFuZCB0aGUgaGFuZHNoYWtlIGZhaWxlZC4gSW4gZmFjdCwgd2hlbiB0aGlzIGhhcHBlbnMsIGFcbiAgICAvLyBzb2NrZXQgaXMgbmV2ZXIgYXNzaWduZWQgdG8gdGhlIHdlYnNvY2tldC4gV2FpdCBmb3IgdGhlIGAnZXJyb3InYCBldmVudFxuICAgIC8vIHRoYXQgd2lsbCBiZSBlbWl0dGVkIGJ5IHRoZSB3ZWJzb2NrZXQuXG4gICAgaWYgKHdzLl9zb2NrZXQgPT09IG51bGwpIHJldHVybjtcblxuICAgIGlmICh3cy5fc29ja2V0Ll93cml0YWJsZVN0YXRlLmZpbmlzaGVkKSB7XG4gICAgICBjYWxsYmFjaygpO1xuICAgICAgaWYgKGR1cGxleC5fcmVhZGFibGVTdGF0ZS5lbmRFbWl0dGVkKSBkdXBsZXguZGVzdHJveSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB3cy5fc29ja2V0Lm9uY2UoJ2ZpbmlzaCcsIGZ1bmN0aW9uIGZpbmlzaCgpIHtcbiAgICAgICAgLy8gYGR1cGxleGAgaXMgbm90IGRlc3Ryb3llZCBoZXJlIGJlY2F1c2UgdGhlIGAnZW5kJ2AgZXZlbnQgd2lsbCBiZVxuICAgICAgICAvLyBlbWl0dGVkIG9uIGBkdXBsZXhgIGFmdGVyIHRoaXMgYCdmaW5pc2gnYCBldmVudC4gVGhlIEVPRiBzaWduYWxpbmdcbiAgICAgICAgLy8gYG51bGxgIGNodW5rIGlzLCBpbiBmYWN0LCBwdXNoZWQgd2hlbiB0aGUgd2Vic29ja2V0IGVtaXRzIGAnY2xvc2UnYC5cbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgIH0pO1xuICAgICAgd3MuY2xvc2UoKTtcbiAgICB9XG4gIH07XG5cbiAgZHVwbGV4Ll9yZWFkID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh3cy5pc1BhdXNlZCkgd3MucmVzdW1lKCk7XG4gIH07XG5cbiAgZHVwbGV4Ll93cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNhbGxiYWNrKSB7XG4gICAgaWYgKHdzLnJlYWR5U3RhdGUgPT09IHdzLkNPTk5FQ1RJTkcpIHtcbiAgICAgIHdzLm9uY2UoJ29wZW4nLCBmdW5jdGlvbiBvcGVuKCkge1xuICAgICAgICBkdXBsZXguX3dyaXRlKGNodW5rLCBlbmNvZGluZywgY2FsbGJhY2spO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgd3Muc2VuZChjaHVuaywgY2FsbGJhY2spO1xuICB9O1xuXG4gIGR1cGxleC5vbignZW5kJywgZHVwbGV4T25FbmQpO1xuICBkdXBsZXgub24oJ2Vycm9yJywgZHVwbGV4T25FcnJvcik7XG4gIHJldHVybiBkdXBsZXg7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlV2ViU29ja2V0U3RyZWFtO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/ws/lib/stream.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/ws/lib/subprotocol.js":
/*!***********************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/ws/lib/subprotocol.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst { tokenChars } = __webpack_require__(/*! ./validation */ \"(api)/./node_modules/gogoanime-api/node_modules/ws/lib/validation.js\");\n\n/**\n * Parses the `Sec-WebSocket-Protocol` header into a set of subprotocol names.\n *\n * @param {String} header The field value of the header\n * @return {Set} The subprotocol names\n * @public\n */\nfunction parse(header) {\n  const protocols = new Set();\n  let start = -1;\n  let end = -1;\n  let i = 0;\n\n  for (i; i < header.length; i++) {\n    const code = header.charCodeAt(i);\n\n    if (end === -1 && tokenChars[code] === 1) {\n      if (start === -1) start = i;\n    } else if (\n      i !== 0 &&\n      (code === 0x20 /* ' ' */ || code === 0x09) /* '\\t' */\n    ) {\n      if (end === -1 && start !== -1) end = i;\n    } else if (code === 0x2c /* ',' */) {\n      if (start === -1) {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n\n      if (end === -1) end = i;\n\n      const protocol = header.slice(start, end);\n\n      if (protocols.has(protocol)) {\n        throw new SyntaxError(`The \"${protocol}\" subprotocol is duplicated`);\n      }\n\n      protocols.add(protocol);\n      start = end = -1;\n    } else {\n      throw new SyntaxError(`Unexpected character at index ${i}`);\n    }\n  }\n\n  if (start === -1 || end !== -1) {\n    throw new SyntaxError('Unexpected end of input');\n  }\n\n  const protocol = header.slice(start, i);\n\n  if (protocols.has(protocol)) {\n    throw new SyntaxError(`The \"${protocol}\" subprotocol is duplicated`);\n  }\n\n  protocols.add(protocol);\n  return protocols;\n}\n\nmodule.exports = { parse };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvZ29nb2FuaW1lLWFwaS9ub2RlX21vZHVsZXMvd3MvbGliL3N1YnByb3RvY29sLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLFFBQVEsYUFBYSxFQUFFLG1CQUFPLENBQUMsMEZBQWM7O0FBRTdDO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZLEtBQUs7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsVUFBVSxtQkFBbUI7QUFDN0I7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLCtEQUErRCxFQUFFO0FBQ2pFOztBQUVBOztBQUVBOztBQUVBO0FBQ0Esc0NBQXNDLFNBQVM7QUFDL0M7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTiw2REFBNkQsRUFBRTtBQUMvRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLGtDQUFrQyxTQUFTO0FBQzNDOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxtQkFBbUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbmltZWZsaXgvLi9ub2RlX21vZHVsZXMvZ29nb2FuaW1lLWFwaS9ub2RlX21vZHVsZXMvd3MvbGliL3N1YnByb3RvY29sLmpzP2M3ZjUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB7IHRva2VuQ2hhcnMgfSA9IHJlcXVpcmUoJy4vdmFsaWRhdGlvbicpO1xuXG4vKipcbiAqIFBhcnNlcyB0aGUgYFNlYy1XZWJTb2NrZXQtUHJvdG9jb2xgIGhlYWRlciBpbnRvIGEgc2V0IG9mIHN1YnByb3RvY29sIG5hbWVzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXIgVGhlIGZpZWxkIHZhbHVlIG9mIHRoZSBoZWFkZXJcbiAqIEByZXR1cm4ge1NldH0gVGhlIHN1YnByb3RvY29sIG5hbWVzXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIHBhcnNlKGhlYWRlcikge1xuICBjb25zdCBwcm90b2NvbHMgPSBuZXcgU2V0KCk7XG4gIGxldCBzdGFydCA9IC0xO1xuICBsZXQgZW5kID0gLTE7XG4gIGxldCBpID0gMDtcblxuICBmb3IgKGk7IGkgPCBoZWFkZXIubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBjb2RlID0gaGVhZGVyLmNoYXJDb2RlQXQoaSk7XG5cbiAgICBpZiAoZW5kID09PSAtMSAmJiB0b2tlbkNoYXJzW2NvZGVdID09PSAxKSB7XG4gICAgICBpZiAoc3RhcnQgPT09IC0xKSBzdGFydCA9IGk7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIGkgIT09IDAgJiZcbiAgICAgIChjb2RlID09PSAweDIwIC8qICcgJyAqLyB8fCBjb2RlID09PSAweDA5KSAvKiAnXFx0JyAqL1xuICAgICkge1xuICAgICAgaWYgKGVuZCA9PT0gLTEgJiYgc3RhcnQgIT09IC0xKSBlbmQgPSBpO1xuICAgIH0gZWxzZSBpZiAoY29kZSA9PT0gMHgyYyAvKiAnLCcgKi8pIHtcbiAgICAgIGlmIChzdGFydCA9PT0gLTEpIHtcbiAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKGBVbmV4cGVjdGVkIGNoYXJhY3RlciBhdCBpbmRleCAke2l9YCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChlbmQgPT09IC0xKSBlbmQgPSBpO1xuXG4gICAgICBjb25zdCBwcm90b2NvbCA9IGhlYWRlci5zbGljZShzdGFydCwgZW5kKTtcblxuICAgICAgaWYgKHByb3RvY29scy5oYXMocHJvdG9jb2wpKSB7XG4gICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihgVGhlIFwiJHtwcm90b2NvbH1cIiBzdWJwcm90b2NvbCBpcyBkdXBsaWNhdGVkYCk7XG4gICAgICB9XG5cbiAgICAgIHByb3RvY29scy5hZGQocHJvdG9jb2wpO1xuICAgICAgc3RhcnQgPSBlbmQgPSAtMTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKGBVbmV4cGVjdGVkIGNoYXJhY3RlciBhdCBpbmRleCAke2l9YCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHN0YXJ0ID09PSAtMSB8fCBlbmQgIT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKCdVbmV4cGVjdGVkIGVuZCBvZiBpbnB1dCcpO1xuICB9XG5cbiAgY29uc3QgcHJvdG9jb2wgPSBoZWFkZXIuc2xpY2Uoc3RhcnQsIGkpO1xuXG4gIGlmIChwcm90b2NvbHMuaGFzKHByb3RvY29sKSkge1xuICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihgVGhlIFwiJHtwcm90b2NvbH1cIiBzdWJwcm90b2NvbCBpcyBkdXBsaWNhdGVkYCk7XG4gIH1cblxuICBwcm90b2NvbHMuYWRkKHByb3RvY29sKTtcbiAgcmV0dXJuIHByb3RvY29scztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7IHBhcnNlIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/ws/lib/subprotocol.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/ws/lib/validation.js":
/*!**********************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/ws/lib/validation.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\n//\n// Allowed token characters:\n//\n// '!', '#', '$', '%', '&', ''', '*', '+', '-',\n// '.', 0-9, A-Z, '^', '_', '`', a-z, '|', '~'\n//\n// tokenChars[32] === 0 // ' '\n// tokenChars[33] === 1 // '!'\n// tokenChars[34] === 0 // '\"'\n// ...\n//\n// prettier-ignore\nconst tokenChars = [\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0 - 15\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 16 - 31\n  0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, // 32 - 47\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 48 - 63\n  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 64 - 79\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, // 80 - 95\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 96 - 111\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0 // 112 - 127\n];\n\n/**\n * Checks if a status code is allowed in a close frame.\n *\n * @param {Number} code The status code\n * @return {Boolean} `true` if the status code is valid, else `false`\n * @public\n */\nfunction isValidStatusCode(code) {\n  return (\n    (code >= 1000 &&\n      code <= 1014 &&\n      code !== 1004 &&\n      code !== 1005 &&\n      code !== 1006) ||\n    (code >= 3000 && code <= 4999)\n  );\n}\n\n/**\n * Checks if a given buffer contains only correct UTF-8.\n * Ported from https://www.cl.cam.ac.uk/%7Emgk25/ucs/utf8_check.c by\n * Markus Kuhn.\n *\n * @param {Buffer} buf The buffer to check\n * @return {Boolean} `true` if `buf` contains only correct UTF-8, else `false`\n * @public\n */\nfunction _isValidUTF8(buf) {\n  const len = buf.length;\n  let i = 0;\n\n  while (i < len) {\n    if ((buf[i] & 0x80) === 0) {\n      // 0xxxxxxx\n      i++;\n    } else if ((buf[i] & 0xe0) === 0xc0) {\n      // 110xxxxx 10xxxxxx\n      if (\n        i + 1 === len ||\n        (buf[i + 1] & 0xc0) !== 0x80 ||\n        (buf[i] & 0xfe) === 0xc0 // Overlong\n      ) {\n        return false;\n      }\n\n      i += 2;\n    } else if ((buf[i] & 0xf0) === 0xe0) {\n      // 1110xxxx 10xxxxxx 10xxxxxx\n      if (\n        i + 2 >= len ||\n        (buf[i + 1] & 0xc0) !== 0x80 ||\n        (buf[i + 2] & 0xc0) !== 0x80 ||\n        (buf[i] === 0xe0 && (buf[i + 1] & 0xe0) === 0x80) || // Overlong\n        (buf[i] === 0xed && (buf[i + 1] & 0xe0) === 0xa0) // Surrogate (U+D800 - U+DFFF)\n      ) {\n        return false;\n      }\n\n      i += 3;\n    } else if ((buf[i] & 0xf8) === 0xf0) {\n      // 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n      if (\n        i + 3 >= len ||\n        (buf[i + 1] & 0xc0) !== 0x80 ||\n        (buf[i + 2] & 0xc0) !== 0x80 ||\n        (buf[i + 3] & 0xc0) !== 0x80 ||\n        (buf[i] === 0xf0 && (buf[i + 1] & 0xf0) === 0x80) || // Overlong\n        (buf[i] === 0xf4 && buf[i + 1] > 0x8f) ||\n        buf[i] > 0xf4 // > U+10FFFF\n      ) {\n        return false;\n      }\n\n      i += 4;\n    } else {\n      return false;\n    }\n  }\n\n  return true;\n}\n\ntry {\n  const isValidUTF8 = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'utf-8-validate'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n\n  module.exports = {\n    isValidStatusCode,\n    isValidUTF8(buf) {\n      return buf.length < 150 ? _isValidUTF8(buf) : isValidUTF8(buf);\n    },\n    tokenChars\n  };\n} catch (e) /* istanbul ignore next */ {\n  module.exports = {\n    isValidStatusCode,\n    isValidUTF8: _isValidUTF8,\n    tokenChars\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvZ29nb2FuaW1lLWFwaS9ub2RlX21vZHVsZXMvd3MvbGliL3ZhbGlkYXRpb24uanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVksU0FBUztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZLFNBQVM7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLHNCQUFzQixtQkFBTyxDQUFDLDZJQUFnQjs7QUFFOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbmltZWZsaXgvLi9ub2RlX21vZHVsZXMvZ29nb2FuaW1lLWFwaS9ub2RlX21vZHVsZXMvd3MvbGliL3ZhbGlkYXRpb24uanM/MjlhOCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8vXG4vLyBBbGxvd2VkIHRva2VuIGNoYXJhY3RlcnM6XG4vL1xuLy8gJyEnLCAnIycsICckJywgJyUnLCAnJicsICcnJywgJyonLCAnKycsICctJyxcbi8vICcuJywgMC05LCBBLVosICdeJywgJ18nLCAnYCcsIGEteiwgJ3wnLCAnfidcbi8vXG4vLyB0b2tlbkNoYXJzWzMyXSA9PT0gMCAvLyAnICdcbi8vIHRva2VuQ2hhcnNbMzNdID09PSAxIC8vICchJ1xuLy8gdG9rZW5DaGFyc1szNF0gPT09IDAgLy8gJ1wiJ1xuLy8gLi4uXG4vL1xuLy8gcHJldHRpZXItaWdub3JlXG5jb25zdCB0b2tlbkNoYXJzID0gW1xuICAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAvLyAwIC0gMTVcbiAgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgLy8gMTYgLSAzMVxuICAwLCAxLCAwLCAxLCAxLCAxLCAxLCAxLCAwLCAwLCAxLCAxLCAwLCAxLCAxLCAwLCAvLyAzMiAtIDQ3XG4gIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDAsIDAsIDAsIDAsIDAsIDAsIC8vIDQ4IC0gNjNcbiAgMCwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLy8gNjQgLSA3OVxuICAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAwLCAwLCAwLCAxLCAxLCAvLyA4MCAtIDk1XG4gIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIC8vIDk2IC0gMTExXG4gIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDAsIDEsIDAsIDEsIDAgLy8gMTEyIC0gMTI3XG5dO1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIHN0YXR1cyBjb2RlIGlzIGFsbG93ZWQgaW4gYSBjbG9zZSBmcmFtZS5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gY29kZSBUaGUgc3RhdHVzIGNvZGVcbiAqIEByZXR1cm4ge0Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgc3RhdHVzIGNvZGUgaXMgdmFsaWQsIGVsc2UgYGZhbHNlYFxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiBpc1ZhbGlkU3RhdHVzQ29kZShjb2RlKSB7XG4gIHJldHVybiAoXG4gICAgKGNvZGUgPj0gMTAwMCAmJlxuICAgICAgY29kZSA8PSAxMDE0ICYmXG4gICAgICBjb2RlICE9PSAxMDA0ICYmXG4gICAgICBjb2RlICE9PSAxMDA1ICYmXG4gICAgICBjb2RlICE9PSAxMDA2KSB8fFxuICAgIChjb2RlID49IDMwMDAgJiYgY29kZSA8PSA0OTk5KVxuICApO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIGdpdmVuIGJ1ZmZlciBjb250YWlucyBvbmx5IGNvcnJlY3QgVVRGLTguXG4gKiBQb3J0ZWQgZnJvbSBodHRwczovL3d3dy5jbC5jYW0uYWMudWsvJTdFbWdrMjUvdWNzL3V0ZjhfY2hlY2suYyBieVxuICogTWFya3VzIEt1aG4uXG4gKlxuICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZiBUaGUgYnVmZmVyIHRvIGNoZWNrXG4gKiBAcmV0dXJuIHtCb29sZWFufSBgdHJ1ZWAgaWYgYGJ1ZmAgY29udGFpbnMgb25seSBjb3JyZWN0IFVURi04LCBlbHNlIGBmYWxzZWBcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gX2lzVmFsaWRVVEY4KGJ1Zikge1xuICBjb25zdCBsZW4gPSBidWYubGVuZ3RoO1xuICBsZXQgaSA9IDA7XG5cbiAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICBpZiAoKGJ1ZltpXSAmIDB4ODApID09PSAwKSB7XG4gICAgICAvLyAweHh4eHh4eFxuICAgICAgaSsrO1xuICAgIH0gZWxzZSBpZiAoKGJ1ZltpXSAmIDB4ZTApID09PSAweGMwKSB7XG4gICAgICAvLyAxMTB4eHh4eCAxMHh4eHh4eFxuICAgICAgaWYgKFxuICAgICAgICBpICsgMSA9PT0gbGVuIHx8XG4gICAgICAgIChidWZbaSArIDFdICYgMHhjMCkgIT09IDB4ODAgfHxcbiAgICAgICAgKGJ1ZltpXSAmIDB4ZmUpID09PSAweGMwIC8vIE92ZXJsb25nXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpICs9IDI7XG4gICAgfSBlbHNlIGlmICgoYnVmW2ldICYgMHhmMCkgPT09IDB4ZTApIHtcbiAgICAgIC8vIDExMTB4eHh4IDEweHh4eHh4IDEweHh4eHh4XG4gICAgICBpZiAoXG4gICAgICAgIGkgKyAyID49IGxlbiB8fFxuICAgICAgICAoYnVmW2kgKyAxXSAmIDB4YzApICE9PSAweDgwIHx8XG4gICAgICAgIChidWZbaSArIDJdICYgMHhjMCkgIT09IDB4ODAgfHxcbiAgICAgICAgKGJ1ZltpXSA9PT0gMHhlMCAmJiAoYnVmW2kgKyAxXSAmIDB4ZTApID09PSAweDgwKSB8fCAvLyBPdmVybG9uZ1xuICAgICAgICAoYnVmW2ldID09PSAweGVkICYmIChidWZbaSArIDFdICYgMHhlMCkgPT09IDB4YTApIC8vIFN1cnJvZ2F0ZSAoVStEODAwIC0gVStERkZGKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaSArPSAzO1xuICAgIH0gZWxzZSBpZiAoKGJ1ZltpXSAmIDB4ZjgpID09PSAweGYwKSB7XG4gICAgICAvLyAxMTExMHh4eCAxMHh4eHh4eCAxMHh4eHh4eCAxMHh4eHh4eFxuICAgICAgaWYgKFxuICAgICAgICBpICsgMyA+PSBsZW4gfHxcbiAgICAgICAgKGJ1ZltpICsgMV0gJiAweGMwKSAhPT0gMHg4MCB8fFxuICAgICAgICAoYnVmW2kgKyAyXSAmIDB4YzApICE9PSAweDgwIHx8XG4gICAgICAgIChidWZbaSArIDNdICYgMHhjMCkgIT09IDB4ODAgfHxcbiAgICAgICAgKGJ1ZltpXSA9PT0gMHhmMCAmJiAoYnVmW2kgKyAxXSAmIDB4ZjApID09PSAweDgwKSB8fCAvLyBPdmVybG9uZ1xuICAgICAgICAoYnVmW2ldID09PSAweGY0ICYmIGJ1ZltpICsgMV0gPiAweDhmKSB8fFxuICAgICAgICBidWZbaV0gPiAweGY0IC8vID4gVSsxMEZGRkZcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGkgKz0gNDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG50cnkge1xuICBjb25zdCBpc1ZhbGlkVVRGOCA9IHJlcXVpcmUoJ3V0Zi04LXZhbGlkYXRlJyk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgaXNWYWxpZFN0YXR1c0NvZGUsXG4gICAgaXNWYWxpZFVURjgoYnVmKSB7XG4gICAgICByZXR1cm4gYnVmLmxlbmd0aCA8IDE1MCA/IF9pc1ZhbGlkVVRGOChidWYpIDogaXNWYWxpZFVURjgoYnVmKTtcbiAgICB9LFxuICAgIHRva2VuQ2hhcnNcbiAgfTtcbn0gY2F0Y2ggKGUpIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgaXNWYWxpZFN0YXR1c0NvZGUsXG4gICAgaXNWYWxpZFVURjg6IF9pc1ZhbGlkVVRGOCxcbiAgICB0b2tlbkNoYXJzXG4gIH07XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/ws/lib/validation.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/ws/lib/websocket-server.js":
/*!****************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/ws/lib/websocket-server.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^net|tls|https$\" }] */\n\n\n\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst http = __webpack_require__(/*! http */ \"http\");\nconst https = __webpack_require__(/*! https */ \"https\");\nconst net = __webpack_require__(/*! net */ \"net\");\nconst tls = __webpack_require__(/*! tls */ \"tls\");\nconst { createHash } = __webpack_require__(/*! crypto */ \"crypto\");\n\nconst extension = __webpack_require__(/*! ./extension */ \"(api)/./node_modules/gogoanime-api/node_modules/ws/lib/extension.js\");\nconst PerMessageDeflate = __webpack_require__(/*! ./permessage-deflate */ \"(api)/./node_modules/gogoanime-api/node_modules/ws/lib/permessage-deflate.js\");\nconst subprotocol = __webpack_require__(/*! ./subprotocol */ \"(api)/./node_modules/gogoanime-api/node_modules/ws/lib/subprotocol.js\");\nconst WebSocket = __webpack_require__(/*! ./websocket */ \"(api)/./node_modules/gogoanime-api/node_modules/ws/lib/websocket.js\");\nconst { GUID, kWebSocket } = __webpack_require__(/*! ./constants */ \"(api)/./node_modules/gogoanime-api/node_modules/ws/lib/constants.js\");\n\nconst keyRegex = /^[+/0-9A-Za-z]{22}==$/;\n\nconst RUNNING = 0;\nconst CLOSING = 1;\nconst CLOSED = 2;\n\n/**\n * Class representing a WebSocket server.\n *\n * @extends EventEmitter\n */\nclass WebSocketServer extends EventEmitter {\n  /**\n   * Create a `WebSocketServer` instance.\n   *\n   * @param {Object} options Configuration options\n   * @param {Number} [options.backlog=511] The maximum length of the queue of\n   *     pending connections\n   * @param {Boolean} [options.clientTracking=true] Specifies whether or not to\n   *     track clients\n   * @param {Function} [options.handleProtocols] A hook to handle protocols\n   * @param {String} [options.host] The hostname where to bind the server\n   * @param {Number} [options.maxPayload=104857600] The maximum allowed message\n   *     size\n   * @param {Boolean} [options.noServer=false] Enable no server mode\n   * @param {String} [options.path] Accept only connections matching this path\n   * @param {(Boolean|Object)} [options.perMessageDeflate=false] Enable/disable\n   *     permessage-deflate\n   * @param {Number} [options.port] The port where to bind the server\n   * @param {(http.Server|https.Server)} [options.server] A pre-created HTTP/S\n   *     server to use\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n   *     not to skip UTF-8 validation for text and close messages\n   * @param {Function} [options.verifyClient] A hook to reject connections\n   * @param {Function} [options.WebSocket=WebSocket] Specifies the `WebSocket`\n   *     class to use. It must be the `WebSocket` class or class that extends it\n   * @param {Function} [callback] A listener for the `listening` event\n   */\n  constructor(options, callback) {\n    super();\n\n    options = {\n      maxPayload: 100 * 1024 * 1024,\n      skipUTF8Validation: false,\n      perMessageDeflate: false,\n      handleProtocols: null,\n      clientTracking: true,\n      verifyClient: null,\n      noServer: false,\n      backlog: null, // use default (511 as implemented in net.js)\n      server: null,\n      host: null,\n      path: null,\n      port: null,\n      WebSocket,\n      ...options\n    };\n\n    if (\n      (options.port == null && !options.server && !options.noServer) ||\n      (options.port != null && (options.server || options.noServer)) ||\n      (options.server && options.noServer)\n    ) {\n      throw new TypeError(\n        'One and only one of the \"port\", \"server\", or \"noServer\" options ' +\n          'must be specified'\n      );\n    }\n\n    if (options.port != null) {\n      this._server = http.createServer((req, res) => {\n        const body = http.STATUS_CODES[426];\n\n        res.writeHead(426, {\n          'Content-Length': body.length,\n          'Content-Type': 'text/plain'\n        });\n        res.end(body);\n      });\n      this._server.listen(\n        options.port,\n        options.host,\n        options.backlog,\n        callback\n      );\n    } else if (options.server) {\n      this._server = options.server;\n    }\n\n    if (this._server) {\n      const emitConnection = this.emit.bind(this, 'connection');\n\n      this._removeListeners = addListeners(this._server, {\n        listening: this.emit.bind(this, 'listening'),\n        error: this.emit.bind(this, 'error'),\n        upgrade: (req, socket, head) => {\n          this.handleUpgrade(req, socket, head, emitConnection);\n        }\n      });\n    }\n\n    if (options.perMessageDeflate === true) options.perMessageDeflate = {};\n    if (options.clientTracking) {\n      this.clients = new Set();\n      this._shouldEmitClose = false;\n    }\n\n    this.options = options;\n    this._state = RUNNING;\n  }\n\n  /**\n   * Returns the bound address, the address family name, and port of the server\n   * as reported by the operating system if listening on an IP socket.\n   * If the server is listening on a pipe or UNIX domain socket, the name is\n   * returned as a string.\n   *\n   * @return {(Object|String|null)} The address of the server\n   * @public\n   */\n  address() {\n    if (this.options.noServer) {\n      throw new Error('The server is operating in \"noServer\" mode');\n    }\n\n    if (!this._server) return null;\n    return this._server.address();\n  }\n\n  /**\n   * Stop the server from accepting new connections and emit the `'close'` event\n   * when all existing connections are closed.\n   *\n   * @param {Function} [cb] A one-time listener for the `'close'` event\n   * @public\n   */\n  close(cb) {\n    if (this._state === CLOSED) {\n      if (cb) {\n        this.once('close', () => {\n          cb(new Error('The server is not running'));\n        });\n      }\n\n      process.nextTick(emitClose, this);\n      return;\n    }\n\n    if (cb) this.once('close', cb);\n\n    if (this._state === CLOSING) return;\n    this._state = CLOSING;\n\n    if (this.options.noServer || this.options.server) {\n      if (this._server) {\n        this._removeListeners();\n        this._removeListeners = this._server = null;\n      }\n\n      if (this.clients) {\n        if (!this.clients.size) {\n          process.nextTick(emitClose, this);\n        } else {\n          this._shouldEmitClose = true;\n        }\n      } else {\n        process.nextTick(emitClose, this);\n      }\n    } else {\n      const server = this._server;\n\n      this._removeListeners();\n      this._removeListeners = this._server = null;\n\n      //\n      // The HTTP/S server was created internally. Close it, and rely on its\n      // `'close'` event.\n      //\n      server.close(() => {\n        emitClose(this);\n      });\n    }\n  }\n\n  /**\n   * See if a given request should be handled by this server instance.\n   *\n   * @param {http.IncomingMessage} req Request object to inspect\n   * @return {Boolean} `true` if the request is valid, else `false`\n   * @public\n   */\n  shouldHandle(req) {\n    if (this.options.path) {\n      const index = req.url.indexOf('?');\n      const pathname = index !== -1 ? req.url.slice(0, index) : req.url;\n\n      if (pathname !== this.options.path) return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Handle a HTTP Upgrade request.\n   *\n   * @param {http.IncomingMessage} req The request object\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\n   *     server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @public\n   */\n  handleUpgrade(req, socket, head, cb) {\n    socket.on('error', socketOnError);\n\n    const key = req.headers['sec-websocket-key'];\n    const version = +req.headers['sec-websocket-version'];\n\n    if (req.method !== 'GET') {\n      const message = 'Invalid HTTP method';\n      abortHandshakeOrEmitwsClientError(this, req, socket, 405, message);\n      return;\n    }\n\n    if (req.headers.upgrade.toLowerCase() !== 'websocket') {\n      const message = 'Invalid Upgrade header';\n      abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n      return;\n    }\n\n    if (!key || !keyRegex.test(key)) {\n      const message = 'Missing or invalid Sec-WebSocket-Key header';\n      abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n      return;\n    }\n\n    if (version !== 8 && version !== 13) {\n      const message = 'Missing or invalid Sec-WebSocket-Version header';\n      abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n      return;\n    }\n\n    if (!this.shouldHandle(req)) {\n      abortHandshake(socket, 400);\n      return;\n    }\n\n    const secWebSocketProtocol = req.headers['sec-websocket-protocol'];\n    let protocols = new Set();\n\n    if (secWebSocketProtocol !== undefined) {\n      try {\n        protocols = subprotocol.parse(secWebSocketProtocol);\n      } catch (err) {\n        const message = 'Invalid Sec-WebSocket-Protocol header';\n        abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n        return;\n      }\n    }\n\n    const secWebSocketExtensions = req.headers['sec-websocket-extensions'];\n    const extensions = {};\n\n    if (\n      this.options.perMessageDeflate &&\n      secWebSocketExtensions !== undefined\n    ) {\n      const perMessageDeflate = new PerMessageDeflate(\n        this.options.perMessageDeflate,\n        true,\n        this.options.maxPayload\n      );\n\n      try {\n        const offers = extension.parse(secWebSocketExtensions);\n\n        if (offers[PerMessageDeflate.extensionName]) {\n          perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);\n          extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\n        }\n      } catch (err) {\n        const message =\n          'Invalid or unacceptable Sec-WebSocket-Extensions header';\n        abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n        return;\n      }\n    }\n\n    //\n    // Optionally call external client verification handler.\n    //\n    if (this.options.verifyClient) {\n      const info = {\n        origin:\n          req.headers[`${version === 8 ? 'sec-websocket-origin' : 'origin'}`],\n        secure: !!(req.socket.authorized || req.socket.encrypted),\n        req\n      };\n\n      if (this.options.verifyClient.length === 2) {\n        this.options.verifyClient(info, (verified, code, message, headers) => {\n          if (!verified) {\n            return abortHandshake(socket, code || 401, message, headers);\n          }\n\n          this.completeUpgrade(\n            extensions,\n            key,\n            protocols,\n            req,\n            socket,\n            head,\n            cb\n          );\n        });\n        return;\n      }\n\n      if (!this.options.verifyClient(info)) return abortHandshake(socket, 401);\n    }\n\n    this.completeUpgrade(extensions, key, protocols, req, socket, head, cb);\n  }\n\n  /**\n   * Upgrade the connection to WebSocket.\n   *\n   * @param {Object} extensions The accepted extensions\n   * @param {String} key The value of the `Sec-WebSocket-Key` header\n   * @param {Set} protocols The subprotocols\n   * @param {http.IncomingMessage} req The request object\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\n   *     server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @throws {Error} If called more than once with the same socket\n   * @private\n   */\n  completeUpgrade(extensions, key, protocols, req, socket, head, cb) {\n    //\n    // Destroy the socket if the client has already sent a FIN packet.\n    //\n    if (!socket.readable || !socket.writable) return socket.destroy();\n\n    if (socket[kWebSocket]) {\n      throw new Error(\n        'server.handleUpgrade() was called more than once with the same ' +\n          'socket, possibly due to a misconfiguration'\n      );\n    }\n\n    if (this._state > RUNNING) return abortHandshake(socket, 503);\n\n    const digest = createHash('sha1')\n      .update(key + GUID)\n      .digest('base64');\n\n    const headers = [\n      'HTTP/1.1 101 Switching Protocols',\n      'Upgrade: websocket',\n      'Connection: Upgrade',\n      `Sec-WebSocket-Accept: ${digest}`\n    ];\n\n    const ws = new this.options.WebSocket(null);\n\n    if (protocols.size) {\n      //\n      // Optionally call external protocol selection handler.\n      //\n      const protocol = this.options.handleProtocols\n        ? this.options.handleProtocols(protocols, req)\n        : protocols.values().next().value;\n\n      if (protocol) {\n        headers.push(`Sec-WebSocket-Protocol: ${protocol}`);\n        ws._protocol = protocol;\n      }\n    }\n\n    if (extensions[PerMessageDeflate.extensionName]) {\n      const params = extensions[PerMessageDeflate.extensionName].params;\n      const value = extension.format({\n        [PerMessageDeflate.extensionName]: [params]\n      });\n      headers.push(`Sec-WebSocket-Extensions: ${value}`);\n      ws._extensions = extensions;\n    }\n\n    //\n    // Allow external modification/inspection of handshake headers.\n    //\n    this.emit('headers', headers, req);\n\n    socket.write(headers.concat('\\r\\n').join('\\r\\n'));\n    socket.removeListener('error', socketOnError);\n\n    ws.setSocket(socket, head, {\n      maxPayload: this.options.maxPayload,\n      skipUTF8Validation: this.options.skipUTF8Validation\n    });\n\n    if (this.clients) {\n      this.clients.add(ws);\n      ws.on('close', () => {\n        this.clients.delete(ws);\n\n        if (this._shouldEmitClose && !this.clients.size) {\n          process.nextTick(emitClose, this);\n        }\n      });\n    }\n\n    cb(ws, req);\n  }\n}\n\nmodule.exports = WebSocketServer;\n\n/**\n * Add event listeners on an `EventEmitter` using a map of <event, listener>\n * pairs.\n *\n * @param {EventEmitter} server The event emitter\n * @param {Object.<String, Function>} map The listeners to add\n * @return {Function} A function that will remove the added listeners when\n *     called\n * @private\n */\nfunction addListeners(server, map) {\n  for (const event of Object.keys(map)) server.on(event, map[event]);\n\n  return function removeListeners() {\n    for (const event of Object.keys(map)) {\n      server.removeListener(event, map[event]);\n    }\n  };\n}\n\n/**\n * Emit a `'close'` event on an `EventEmitter`.\n *\n * @param {EventEmitter} server The event emitter\n * @private\n */\nfunction emitClose(server) {\n  server._state = CLOSED;\n  server.emit('close');\n}\n\n/**\n * Handle socket errors.\n *\n * @private\n */\nfunction socketOnError() {\n  this.destroy();\n}\n\n/**\n * Close the connection when preconditions are not fulfilled.\n *\n * @param {(net.Socket|tls.Socket)} socket The socket of the upgrade request\n * @param {Number} code The HTTP response status code\n * @param {String} [message] The HTTP response body\n * @param {Object} [headers] Additional HTTP response headers\n * @private\n */\nfunction abortHandshake(socket, code, message, headers) {\n  //\n  // The socket is writable unless the user destroyed or ended it before calling\n  // `server.handleUpgrade()` or in the `verifyClient` function, which is a user\n  // error. Handling this does not make much sense as the worst that can happen\n  // is that some of the data written by the user might be discarded due to the\n  // call to `socket.end()` below, which triggers an `'error'` event that in\n  // turn causes the socket to be destroyed.\n  //\n  message = message || http.STATUS_CODES[code];\n  headers = {\n    Connection: 'close',\n    'Content-Type': 'text/html',\n    'Content-Length': Buffer.byteLength(message),\n    ...headers\n  };\n\n  socket.once('finish', socket.destroy);\n\n  socket.end(\n    `HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\\r\\n` +\n      Object.keys(headers)\n        .map((h) => `${h}: ${headers[h]}`)\n        .join('\\r\\n') +\n      '\\r\\n\\r\\n' +\n      message\n  );\n}\n\n/**\n * Emit a `'wsClientError'` event on a `WebSocketServer` if there is at least\n * one listener for it, otherwise call `abortHandshake()`.\n *\n * @param {WebSocketServer} server The WebSocket server\n * @param {http.IncomingMessage} req The request object\n * @param {(net.Socket|tls.Socket)} socket The socket of the upgrade request\n * @param {Number} code The HTTP response status code\n * @param {String} message The HTTP response body\n * @private\n */\nfunction abortHandshakeOrEmitwsClientError(server, req, socket, code, message) {\n  if (server.listenerCount('wsClientError')) {\n    const err = new Error(message);\n    Error.captureStackTrace(err, abortHandshakeOrEmitwsClientError);\n\n    server.emit('wsClientError', err, socket, req);\n  } else {\n    abortHandshake(socket, code, message);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvZ29nb2FuaW1lLWFwaS9ub2RlX21vZHVsZXMvd3MvbGliL3dlYnNvY2tldC1zZXJ2ZXIuanMuanMiLCJtYXBwaW5ncyI6IkFBQUEsc0NBQXNDLHdDQUF3Qzs7QUFFakU7O0FBRWIscUJBQXFCLG1CQUFPLENBQUMsc0JBQVE7QUFDckMsYUFBYSxtQkFBTyxDQUFDLGtCQUFNO0FBQzNCLGNBQWMsbUJBQU8sQ0FBQyxvQkFBTztBQUM3QixZQUFZLG1CQUFPLENBQUMsZ0JBQUs7QUFDekIsWUFBWSxtQkFBTyxDQUFDLGdCQUFLO0FBQ3pCLFFBQVEsYUFBYSxFQUFFLG1CQUFPLENBQUMsc0JBQVE7O0FBRXZDLGtCQUFrQixtQkFBTyxDQUFDLHdGQUFhO0FBQ3ZDLDBCQUEwQixtQkFBTyxDQUFDLDBHQUFzQjtBQUN4RCxvQkFBb0IsbUJBQU8sQ0FBQyw0RkFBZTtBQUMzQyxrQkFBa0IsbUJBQU8sQ0FBQyx3RkFBYTtBQUN2QyxRQUFRLG1CQUFtQixFQUFFLG1CQUFPLENBQUMsd0ZBQWE7O0FBRWxELGlDQUFpQyxHQUFHOztBQUVwQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQjtBQUNBLGFBQWEsU0FBUztBQUN0QjtBQUNBLGFBQWEsVUFBVTtBQUN2QixhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0EsYUFBYSxTQUFTO0FBQ3RCLGFBQWEsUUFBUTtBQUNyQixhQUFhLGtCQUFrQjtBQUMvQjtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLDRCQUE0QjtBQUN6QztBQUNBLGFBQWEsU0FBUztBQUN0QjtBQUNBLGFBQWEsVUFBVTtBQUN2QixhQUFhLFVBQVU7QUFDdkI7QUFDQSxhQUFhLFVBQVU7QUFDdkI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxzQkFBc0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsVUFBVTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxNQUFNO0FBQ047O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLHNCQUFzQjtBQUNuQyxjQUFjLFNBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLHNCQUFzQjtBQUNuQyxhQUFhLHlCQUF5QjtBQUN0QztBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFVBQVU7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLGtEQUFrRDtBQUMzRTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLEtBQUs7QUFDbEIsYUFBYSxzQkFBc0I7QUFDbkMsYUFBYSx5QkFBeUI7QUFDdEM7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxVQUFVO0FBQ3ZCLGNBQWMsT0FBTztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLE9BQU87QUFDdEM7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxnREFBZ0QsU0FBUztBQUN6RDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsZ0RBQWdELE1BQU07QUFDdEQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsY0FBYztBQUN6QixXQUFXLDJCQUEyQjtBQUN0QyxZQUFZLFVBQVU7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxjQUFjO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcseUJBQXlCO0FBQ3BDLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLGdCQUFnQixNQUFNLEVBQUUsd0JBQXdCO0FBQ2hEO0FBQ0EsdUJBQXVCLEVBQUUsSUFBSSxXQUFXO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGlCQUFpQjtBQUM1QixXQUFXLHNCQUFzQjtBQUNqQyxXQUFXLHlCQUF5QjtBQUNwQyxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbmltZWZsaXgvLi9ub2RlX21vZHVsZXMvZ29nb2FuaW1lLWFwaS9ub2RlX21vZHVsZXMvd3MvbGliL3dlYnNvY2tldC1zZXJ2ZXIuanM/ZmIxMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQgbm8tdW51c2VkLXZhcnM6IFtcImVycm9yXCIsIHsgXCJ2YXJzSWdub3JlUGF0dGVyblwiOiBcIl5uZXR8dGxzfGh0dHBzJFwiIH1dICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJyk7XG5jb25zdCBodHRwID0gcmVxdWlyZSgnaHR0cCcpO1xuY29uc3QgaHR0cHMgPSByZXF1aXJlKCdodHRwcycpO1xuY29uc3QgbmV0ID0gcmVxdWlyZSgnbmV0Jyk7XG5jb25zdCB0bHMgPSByZXF1aXJlKCd0bHMnKTtcbmNvbnN0IHsgY3JlYXRlSGFzaCB9ID0gcmVxdWlyZSgnY3J5cHRvJyk7XG5cbmNvbnN0IGV4dGVuc2lvbiA9IHJlcXVpcmUoJy4vZXh0ZW5zaW9uJyk7XG5jb25zdCBQZXJNZXNzYWdlRGVmbGF0ZSA9IHJlcXVpcmUoJy4vcGVybWVzc2FnZS1kZWZsYXRlJyk7XG5jb25zdCBzdWJwcm90b2NvbCA9IHJlcXVpcmUoJy4vc3VicHJvdG9jb2wnKTtcbmNvbnN0IFdlYlNvY2tldCA9IHJlcXVpcmUoJy4vd2Vic29ja2V0Jyk7XG5jb25zdCB7IEdVSUQsIGtXZWJTb2NrZXQgfSA9IHJlcXVpcmUoJy4vY29uc3RhbnRzJyk7XG5cbmNvbnN0IGtleVJlZ2V4ID0gL15bKy8wLTlBLVphLXpdezIyfT09JC87XG5cbmNvbnN0IFJVTk5JTkcgPSAwO1xuY29uc3QgQ0xPU0lORyA9IDE7XG5jb25zdCBDTE9TRUQgPSAyO1xuXG4vKipcbiAqIENsYXNzIHJlcHJlc2VudGluZyBhIFdlYlNvY2tldCBzZXJ2ZXIuXG4gKlxuICogQGV4dGVuZHMgRXZlbnRFbWl0dGVyXG4gKi9cbmNsYXNzIFdlYlNvY2tldFNlcnZlciBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBgV2ViU29ja2V0U2VydmVyYCBpbnN0YW5jZS5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgQ29uZmlndXJhdGlvbiBvcHRpb25zXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5iYWNrbG9nPTUxMV0gVGhlIG1heGltdW0gbGVuZ3RoIG9mIHRoZSBxdWV1ZSBvZlxuICAgKiAgICAgcGVuZGluZyBjb25uZWN0aW9uc1xuICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLmNsaWVudFRyYWNraW5nPXRydWVdIFNwZWNpZmllcyB3aGV0aGVyIG9yIG5vdCB0b1xuICAgKiAgICAgdHJhY2sgY2xpZW50c1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0aW9ucy5oYW5kbGVQcm90b2NvbHNdIEEgaG9vayB0byBoYW5kbGUgcHJvdG9jb2xzXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0aW9ucy5ob3N0XSBUaGUgaG9zdG5hbWUgd2hlcmUgdG8gYmluZCB0aGUgc2VydmVyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5tYXhQYXlsb2FkPTEwNDg1NzYwMF0gVGhlIG1heGltdW0gYWxsb3dlZCBtZXNzYWdlXG4gICAqICAgICBzaXplXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMubm9TZXJ2ZXI9ZmFsc2VdIEVuYWJsZSBubyBzZXJ2ZXIgbW9kZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gW29wdGlvbnMucGF0aF0gQWNjZXB0IG9ubHkgY29ubmVjdGlvbnMgbWF0Y2hpbmcgdGhpcyBwYXRoXG4gICAqIEBwYXJhbSB7KEJvb2xlYW58T2JqZWN0KX0gW29wdGlvbnMucGVyTWVzc2FnZURlZmxhdGU9ZmFsc2VdIEVuYWJsZS9kaXNhYmxlXG4gICAqICAgICBwZXJtZXNzYWdlLWRlZmxhdGVcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLnBvcnRdIFRoZSBwb3J0IHdoZXJlIHRvIGJpbmQgdGhlIHNlcnZlclxuICAgKiBAcGFyYW0geyhodHRwLlNlcnZlcnxodHRwcy5TZXJ2ZXIpfSBbb3B0aW9ucy5zZXJ2ZXJdIEEgcHJlLWNyZWF0ZWQgSFRUUC9TXG4gICAqICAgICBzZXJ2ZXIgdG8gdXNlXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuc2tpcFVURjhWYWxpZGF0aW9uPWZhbHNlXSBTcGVjaWZpZXMgd2hldGhlciBvclxuICAgKiAgICAgbm90IHRvIHNraXAgVVRGLTggdmFsaWRhdGlvbiBmb3IgdGV4dCBhbmQgY2xvc2UgbWVzc2FnZXNcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdGlvbnMudmVyaWZ5Q2xpZW50XSBBIGhvb2sgdG8gcmVqZWN0IGNvbm5lY3Rpb25zXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRpb25zLldlYlNvY2tldD1XZWJTb2NrZXRdIFNwZWNpZmllcyB0aGUgYFdlYlNvY2tldGBcbiAgICogICAgIGNsYXNzIHRvIHVzZS4gSXQgbXVzdCBiZSB0aGUgYFdlYlNvY2tldGAgY2xhc3Mgb3IgY2xhc3MgdGhhdCBleHRlbmRzIGl0XG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gQSBsaXN0ZW5lciBmb3IgdGhlIGBsaXN0ZW5pbmdgIGV2ZW50XG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRpb25zLCBjYWxsYmFjaykge1xuICAgIHN1cGVyKCk7XG5cbiAgICBvcHRpb25zID0ge1xuICAgICAgbWF4UGF5bG9hZDogMTAwICogMTAyNCAqIDEwMjQsXG4gICAgICBza2lwVVRGOFZhbGlkYXRpb246IGZhbHNlLFxuICAgICAgcGVyTWVzc2FnZURlZmxhdGU6IGZhbHNlLFxuICAgICAgaGFuZGxlUHJvdG9jb2xzOiBudWxsLFxuICAgICAgY2xpZW50VHJhY2tpbmc6IHRydWUsXG4gICAgICB2ZXJpZnlDbGllbnQ6IG51bGwsXG4gICAgICBub1NlcnZlcjogZmFsc2UsXG4gICAgICBiYWNrbG9nOiBudWxsLCAvLyB1c2UgZGVmYXVsdCAoNTExIGFzIGltcGxlbWVudGVkIGluIG5ldC5qcylcbiAgICAgIHNlcnZlcjogbnVsbCxcbiAgICAgIGhvc3Q6IG51bGwsXG4gICAgICBwYXRoOiBudWxsLFxuICAgICAgcG9ydDogbnVsbCxcbiAgICAgIFdlYlNvY2tldCxcbiAgICAgIC4uLm9wdGlvbnNcbiAgICB9O1xuXG4gICAgaWYgKFxuICAgICAgKG9wdGlvbnMucG9ydCA9PSBudWxsICYmICFvcHRpb25zLnNlcnZlciAmJiAhb3B0aW9ucy5ub1NlcnZlcikgfHxcbiAgICAgIChvcHRpb25zLnBvcnQgIT0gbnVsbCAmJiAob3B0aW9ucy5zZXJ2ZXIgfHwgb3B0aW9ucy5ub1NlcnZlcikpIHx8XG4gICAgICAob3B0aW9ucy5zZXJ2ZXIgJiYgb3B0aW9ucy5ub1NlcnZlcilcbiAgICApIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICdPbmUgYW5kIG9ubHkgb25lIG9mIHRoZSBcInBvcnRcIiwgXCJzZXJ2ZXJcIiwgb3IgXCJub1NlcnZlclwiIG9wdGlvbnMgJyArXG4gICAgICAgICAgJ211c3QgYmUgc3BlY2lmaWVkJ1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5wb3J0ICE9IG51bGwpIHtcbiAgICAgIHRoaXMuX3NlcnZlciA9IGh0dHAuY3JlYXRlU2VydmVyKChyZXEsIHJlcykgPT4ge1xuICAgICAgICBjb25zdCBib2R5ID0gaHR0cC5TVEFUVVNfQ09ERVNbNDI2XTtcblxuICAgICAgICByZXMud3JpdGVIZWFkKDQyNiwge1xuICAgICAgICAgICdDb250ZW50LUxlbmd0aCc6IGJvZHkubGVuZ3RoLFxuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAndGV4dC9wbGFpbidcbiAgICAgICAgfSk7XG4gICAgICAgIHJlcy5lbmQoYm9keSk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuX3NlcnZlci5saXN0ZW4oXG4gICAgICAgIG9wdGlvbnMucG9ydCxcbiAgICAgICAgb3B0aW9ucy5ob3N0LFxuICAgICAgICBvcHRpb25zLmJhY2tsb2csXG4gICAgICAgIGNhbGxiYWNrXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5zZXJ2ZXIpIHtcbiAgICAgIHRoaXMuX3NlcnZlciA9IG9wdGlvbnMuc2VydmVyO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9zZXJ2ZXIpIHtcbiAgICAgIGNvbnN0IGVtaXRDb25uZWN0aW9uID0gdGhpcy5lbWl0LmJpbmQodGhpcywgJ2Nvbm5lY3Rpb24nKTtcblxuICAgICAgdGhpcy5fcmVtb3ZlTGlzdGVuZXJzID0gYWRkTGlzdGVuZXJzKHRoaXMuX3NlcnZlciwge1xuICAgICAgICBsaXN0ZW5pbmc6IHRoaXMuZW1pdC5iaW5kKHRoaXMsICdsaXN0ZW5pbmcnKSxcbiAgICAgICAgZXJyb3I6IHRoaXMuZW1pdC5iaW5kKHRoaXMsICdlcnJvcicpLFxuICAgICAgICB1cGdyYWRlOiAocmVxLCBzb2NrZXQsIGhlYWQpID0+IHtcbiAgICAgICAgICB0aGlzLmhhbmRsZVVwZ3JhZGUocmVxLCBzb2NrZXQsIGhlYWQsIGVtaXRDb25uZWN0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMucGVyTWVzc2FnZURlZmxhdGUgPT09IHRydWUpIG9wdGlvbnMucGVyTWVzc2FnZURlZmxhdGUgPSB7fTtcbiAgICBpZiAob3B0aW9ucy5jbGllbnRUcmFja2luZykge1xuICAgICAgdGhpcy5jbGllbnRzID0gbmV3IFNldCgpO1xuICAgICAgdGhpcy5fc2hvdWxkRW1pdENsb3NlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLl9zdGF0ZSA9IFJVTk5JTkc7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgYm91bmQgYWRkcmVzcywgdGhlIGFkZHJlc3MgZmFtaWx5IG5hbWUsIGFuZCBwb3J0IG9mIHRoZSBzZXJ2ZXJcbiAgICogYXMgcmVwb3J0ZWQgYnkgdGhlIG9wZXJhdGluZyBzeXN0ZW0gaWYgbGlzdGVuaW5nIG9uIGFuIElQIHNvY2tldC5cbiAgICogSWYgdGhlIHNlcnZlciBpcyBsaXN0ZW5pbmcgb24gYSBwaXBlIG9yIFVOSVggZG9tYWluIHNvY2tldCwgdGhlIG5hbWUgaXNcbiAgICogcmV0dXJuZWQgYXMgYSBzdHJpbmcuXG4gICAqXG4gICAqIEByZXR1cm4geyhPYmplY3R8U3RyaW5nfG51bGwpfSBUaGUgYWRkcmVzcyBvZiB0aGUgc2VydmVyXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGFkZHJlc3MoKSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5ub1NlcnZlcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgc2VydmVyIGlzIG9wZXJhdGluZyBpbiBcIm5vU2VydmVyXCIgbW9kZScpO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5fc2VydmVyKSByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4gdGhpcy5fc2VydmVyLmFkZHJlc3MoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdG9wIHRoZSBzZXJ2ZXIgZnJvbSBhY2NlcHRpbmcgbmV3IGNvbm5lY3Rpb25zIGFuZCBlbWl0IHRoZSBgJ2Nsb3NlJ2AgZXZlbnRcbiAgICogd2hlbiBhbGwgZXhpc3RpbmcgY29ubmVjdGlvbnMgYXJlIGNsb3NlZC5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NiXSBBIG9uZS10aW1lIGxpc3RlbmVyIGZvciB0aGUgYCdjbG9zZSdgIGV2ZW50XG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGNsb3NlKGNiKSB7XG4gICAgaWYgKHRoaXMuX3N0YXRlID09PSBDTE9TRUQpIHtcbiAgICAgIGlmIChjYikge1xuICAgICAgICB0aGlzLm9uY2UoJ2Nsb3NlJywgKCkgPT4ge1xuICAgICAgICAgIGNiKG5ldyBFcnJvcignVGhlIHNlcnZlciBpcyBub3QgcnVubmluZycpKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZW1pdENsb3NlLCB0aGlzKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoY2IpIHRoaXMub25jZSgnY2xvc2UnLCBjYik7XG5cbiAgICBpZiAodGhpcy5fc3RhdGUgPT09IENMT1NJTkcpIHJldHVybjtcbiAgICB0aGlzLl9zdGF0ZSA9IENMT1NJTkc7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLm5vU2VydmVyIHx8IHRoaXMub3B0aW9ucy5zZXJ2ZXIpIHtcbiAgICAgIGlmICh0aGlzLl9zZXJ2ZXIpIHtcbiAgICAgICAgdGhpcy5fcmVtb3ZlTGlzdGVuZXJzKCk7XG4gICAgICAgIHRoaXMuX3JlbW92ZUxpc3RlbmVycyA9IHRoaXMuX3NlcnZlciA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmNsaWVudHMpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNsaWVudHMuc2l6ZSkge1xuICAgICAgICAgIHByb2Nlc3MubmV4dFRpY2soZW1pdENsb3NlLCB0aGlzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9zaG91bGRFbWl0Q2xvc2UgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGVtaXRDbG9zZSwgdGhpcyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHNlcnZlciA9IHRoaXMuX3NlcnZlcjtcblxuICAgICAgdGhpcy5fcmVtb3ZlTGlzdGVuZXJzKCk7XG4gICAgICB0aGlzLl9yZW1vdmVMaXN0ZW5lcnMgPSB0aGlzLl9zZXJ2ZXIgPSBudWxsO1xuXG4gICAgICAvL1xuICAgICAgLy8gVGhlIEhUVFAvUyBzZXJ2ZXIgd2FzIGNyZWF0ZWQgaW50ZXJuYWxseS4gQ2xvc2UgaXQsIGFuZCByZWx5IG9uIGl0c1xuICAgICAgLy8gYCdjbG9zZSdgIGV2ZW50LlxuICAgICAgLy9cbiAgICAgIHNlcnZlci5jbG9zZSgoKSA9PiB7XG4gICAgICAgIGVtaXRDbG9zZSh0aGlzKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZWUgaWYgYSBnaXZlbiByZXF1ZXN0IHNob3VsZCBiZSBoYW5kbGVkIGJ5IHRoaXMgc2VydmVyIGluc3RhbmNlLlxuICAgKlxuICAgKiBAcGFyYW0ge2h0dHAuSW5jb21pbmdNZXNzYWdlfSByZXEgUmVxdWVzdCBvYmplY3QgdG8gaW5zcGVjdFxuICAgKiBAcmV0dXJuIHtCb29sZWFufSBgdHJ1ZWAgaWYgdGhlIHJlcXVlc3QgaXMgdmFsaWQsIGVsc2UgYGZhbHNlYFxuICAgKiBAcHVibGljXG4gICAqL1xuICBzaG91bGRIYW5kbGUocmVxKSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5wYXRoKSB7XG4gICAgICBjb25zdCBpbmRleCA9IHJlcS51cmwuaW5kZXhPZignPycpO1xuICAgICAgY29uc3QgcGF0aG5hbWUgPSBpbmRleCAhPT0gLTEgPyByZXEudXJsLnNsaWNlKDAsIGluZGV4KSA6IHJlcS51cmw7XG5cbiAgICAgIGlmIChwYXRobmFtZSAhPT0gdGhpcy5vcHRpb25zLnBhdGgpIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGUgYSBIVFRQIFVwZ3JhZGUgcmVxdWVzdC5cbiAgICpcbiAgICogQHBhcmFtIHtodHRwLkluY29taW5nTWVzc2FnZX0gcmVxIFRoZSByZXF1ZXN0IG9iamVjdFxuICAgKiBAcGFyYW0geyhuZXQuU29ja2V0fHRscy5Tb2NrZXQpfSBzb2NrZXQgVGhlIG5ldHdvcmsgc29ja2V0IGJldHdlZW4gdGhlXG4gICAqICAgICBzZXJ2ZXIgYW5kIGNsaWVudFxuICAgKiBAcGFyYW0ge0J1ZmZlcn0gaGVhZCBUaGUgZmlyc3QgcGFja2V0IG9mIHRoZSB1cGdyYWRlZCBzdHJlYW1cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2IgQ2FsbGJhY2tcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgaGFuZGxlVXBncmFkZShyZXEsIHNvY2tldCwgaGVhZCwgY2IpIHtcbiAgICBzb2NrZXQub24oJ2Vycm9yJywgc29ja2V0T25FcnJvcik7XG5cbiAgICBjb25zdCBrZXkgPSByZXEuaGVhZGVyc1snc2VjLXdlYnNvY2tldC1rZXknXTtcbiAgICBjb25zdCB2ZXJzaW9uID0gK3JlcS5oZWFkZXJzWydzZWMtd2Vic29ja2V0LXZlcnNpb24nXTtcblxuICAgIGlmIChyZXEubWV0aG9kICE9PSAnR0VUJykge1xuICAgICAgY29uc3QgbWVzc2FnZSA9ICdJbnZhbGlkIEhUVFAgbWV0aG9kJztcbiAgICAgIGFib3J0SGFuZHNoYWtlT3JFbWl0d3NDbGllbnRFcnJvcih0aGlzLCByZXEsIHNvY2tldCwgNDA1LCBtZXNzYWdlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAocmVxLmhlYWRlcnMudXBncmFkZS50b0xvd2VyQ2FzZSgpICE9PSAnd2Vic29ja2V0Jykge1xuICAgICAgY29uc3QgbWVzc2FnZSA9ICdJbnZhbGlkIFVwZ3JhZGUgaGVhZGVyJztcbiAgICAgIGFib3J0SGFuZHNoYWtlT3JFbWl0d3NDbGllbnRFcnJvcih0aGlzLCByZXEsIHNvY2tldCwgNDAwLCBtZXNzYWdlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIWtleSB8fCAha2V5UmVnZXgudGVzdChrZXkpKSB7XG4gICAgICBjb25zdCBtZXNzYWdlID0gJ01pc3Npbmcgb3IgaW52YWxpZCBTZWMtV2ViU29ja2V0LUtleSBoZWFkZXInO1xuICAgICAgYWJvcnRIYW5kc2hha2VPckVtaXR3c0NsaWVudEVycm9yKHRoaXMsIHJlcSwgc29ja2V0LCA0MDAsIG1lc3NhZ2UpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh2ZXJzaW9uICE9PSA4ICYmIHZlcnNpb24gIT09IDEzKSB7XG4gICAgICBjb25zdCBtZXNzYWdlID0gJ01pc3Npbmcgb3IgaW52YWxpZCBTZWMtV2ViU29ja2V0LVZlcnNpb24gaGVhZGVyJztcbiAgICAgIGFib3J0SGFuZHNoYWtlT3JFbWl0d3NDbGllbnRFcnJvcih0aGlzLCByZXEsIHNvY2tldCwgNDAwLCBtZXNzYWdlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuc2hvdWxkSGFuZGxlKHJlcSkpIHtcbiAgICAgIGFib3J0SGFuZHNoYWtlKHNvY2tldCwgNDAwKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBzZWNXZWJTb2NrZXRQcm90b2NvbCA9IHJlcS5oZWFkZXJzWydzZWMtd2Vic29ja2V0LXByb3RvY29sJ107XG4gICAgbGV0IHByb3RvY29scyA9IG5ldyBTZXQoKTtcblxuICAgIGlmIChzZWNXZWJTb2NrZXRQcm90b2NvbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0cnkge1xuICAgICAgICBwcm90b2NvbHMgPSBzdWJwcm90b2NvbC5wYXJzZShzZWNXZWJTb2NrZXRQcm90b2NvbCk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9ICdJbnZhbGlkIFNlYy1XZWJTb2NrZXQtUHJvdG9jb2wgaGVhZGVyJztcbiAgICAgICAgYWJvcnRIYW5kc2hha2VPckVtaXR3c0NsaWVudEVycm9yKHRoaXMsIHJlcSwgc29ja2V0LCA0MDAsIG1lc3NhZ2UpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3Qgc2VjV2ViU29ja2V0RXh0ZW5zaW9ucyA9IHJlcS5oZWFkZXJzWydzZWMtd2Vic29ja2V0LWV4dGVuc2lvbnMnXTtcbiAgICBjb25zdCBleHRlbnNpb25zID0ge307XG5cbiAgICBpZiAoXG4gICAgICB0aGlzLm9wdGlvbnMucGVyTWVzc2FnZURlZmxhdGUgJiZcbiAgICAgIHNlY1dlYlNvY2tldEV4dGVuc2lvbnMgIT09IHVuZGVmaW5lZFxuICAgICkge1xuICAgICAgY29uc3QgcGVyTWVzc2FnZURlZmxhdGUgPSBuZXcgUGVyTWVzc2FnZURlZmxhdGUoXG4gICAgICAgIHRoaXMub3B0aW9ucy5wZXJNZXNzYWdlRGVmbGF0ZSxcbiAgICAgICAgdHJ1ZSxcbiAgICAgICAgdGhpcy5vcHRpb25zLm1heFBheWxvYWRcbiAgICAgICk7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IG9mZmVycyA9IGV4dGVuc2lvbi5wYXJzZShzZWNXZWJTb2NrZXRFeHRlbnNpb25zKTtcblxuICAgICAgICBpZiAob2ZmZXJzW1Blck1lc3NhZ2VEZWZsYXRlLmV4dGVuc2lvbk5hbWVdKSB7XG4gICAgICAgICAgcGVyTWVzc2FnZURlZmxhdGUuYWNjZXB0KG9mZmVyc1tQZXJNZXNzYWdlRGVmbGF0ZS5leHRlbnNpb25OYW1lXSk7XG4gICAgICAgICAgZXh0ZW5zaW9uc1tQZXJNZXNzYWdlRGVmbGF0ZS5leHRlbnNpb25OYW1lXSA9IHBlck1lc3NhZ2VEZWZsYXRlO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9XG4gICAgICAgICAgJ0ludmFsaWQgb3IgdW5hY2NlcHRhYmxlIFNlYy1XZWJTb2NrZXQtRXh0ZW5zaW9ucyBoZWFkZXInO1xuICAgICAgICBhYm9ydEhhbmRzaGFrZU9yRW1pdHdzQ2xpZW50RXJyb3IodGhpcywgcmVxLCBzb2NrZXQsIDQwMCwgbWVzc2FnZSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvL1xuICAgIC8vIE9wdGlvbmFsbHkgY2FsbCBleHRlcm5hbCBjbGllbnQgdmVyaWZpY2F0aW9uIGhhbmRsZXIuXG4gICAgLy9cbiAgICBpZiAodGhpcy5vcHRpb25zLnZlcmlmeUNsaWVudCkge1xuICAgICAgY29uc3QgaW5mbyA9IHtcbiAgICAgICAgb3JpZ2luOlxuICAgICAgICAgIHJlcS5oZWFkZXJzW2Ake3ZlcnNpb24gPT09IDggPyAnc2VjLXdlYnNvY2tldC1vcmlnaW4nIDogJ29yaWdpbid9YF0sXG4gICAgICAgIHNlY3VyZTogISEocmVxLnNvY2tldC5hdXRob3JpemVkIHx8IHJlcS5zb2NrZXQuZW5jcnlwdGVkKSxcbiAgICAgICAgcmVxXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnZlcmlmeUNsaWVudC5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLnZlcmlmeUNsaWVudChpbmZvLCAodmVyaWZpZWQsIGNvZGUsIG1lc3NhZ2UsIGhlYWRlcnMpID0+IHtcbiAgICAgICAgICBpZiAoIXZlcmlmaWVkKSB7XG4gICAgICAgICAgICByZXR1cm4gYWJvcnRIYW5kc2hha2Uoc29ja2V0LCBjb2RlIHx8IDQwMSwgbWVzc2FnZSwgaGVhZGVycyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5jb21wbGV0ZVVwZ3JhZGUoXG4gICAgICAgICAgICBleHRlbnNpb25zLFxuICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgcHJvdG9jb2xzLFxuICAgICAgICAgICAgcmVxLFxuICAgICAgICAgICAgc29ja2V0LFxuICAgICAgICAgICAgaGVhZCxcbiAgICAgICAgICAgIGNiXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLm9wdGlvbnMudmVyaWZ5Q2xpZW50KGluZm8pKSByZXR1cm4gYWJvcnRIYW5kc2hha2Uoc29ja2V0LCA0MDEpO1xuICAgIH1cblxuICAgIHRoaXMuY29tcGxldGVVcGdyYWRlKGV4dGVuc2lvbnMsIGtleSwgcHJvdG9jb2xzLCByZXEsIHNvY2tldCwgaGVhZCwgY2IpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZ3JhZGUgdGhlIGNvbm5lY3Rpb24gdG8gV2ViU29ja2V0LlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gZXh0ZW5zaW9ucyBUaGUgYWNjZXB0ZWQgZXh0ZW5zaW9uc1xuICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5IFRoZSB2YWx1ZSBvZiB0aGUgYFNlYy1XZWJTb2NrZXQtS2V5YCBoZWFkZXJcbiAgICogQHBhcmFtIHtTZXR9IHByb3RvY29scyBUaGUgc3VicHJvdG9jb2xzXG4gICAqIEBwYXJhbSB7aHR0cC5JbmNvbWluZ01lc3NhZ2V9IHJlcSBUaGUgcmVxdWVzdCBvYmplY3RcbiAgICogQHBhcmFtIHsobmV0LlNvY2tldHx0bHMuU29ja2V0KX0gc29ja2V0IFRoZSBuZXR3b3JrIHNvY2tldCBiZXR3ZWVuIHRoZVxuICAgKiAgICAgc2VydmVyIGFuZCBjbGllbnRcbiAgICogQHBhcmFtIHtCdWZmZXJ9IGhlYWQgVGhlIGZpcnN0IHBhY2tldCBvZiB0aGUgdXBncmFkZWQgc3RyZWFtXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiIENhbGxiYWNrXG4gICAqIEB0aHJvd3Mge0Vycm9yfSBJZiBjYWxsZWQgbW9yZSB0aGFuIG9uY2Ugd2l0aCB0aGUgc2FtZSBzb2NrZXRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGNvbXBsZXRlVXBncmFkZShleHRlbnNpb25zLCBrZXksIHByb3RvY29scywgcmVxLCBzb2NrZXQsIGhlYWQsIGNiKSB7XG4gICAgLy9cbiAgICAvLyBEZXN0cm95IHRoZSBzb2NrZXQgaWYgdGhlIGNsaWVudCBoYXMgYWxyZWFkeSBzZW50IGEgRklOIHBhY2tldC5cbiAgICAvL1xuICAgIGlmICghc29ja2V0LnJlYWRhYmxlIHx8ICFzb2NrZXQud3JpdGFibGUpIHJldHVybiBzb2NrZXQuZGVzdHJveSgpO1xuXG4gICAgaWYgKHNvY2tldFtrV2ViU29ja2V0XSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnc2VydmVyLmhhbmRsZVVwZ3JhZGUoKSB3YXMgY2FsbGVkIG1vcmUgdGhhbiBvbmNlIHdpdGggdGhlIHNhbWUgJyArXG4gICAgICAgICAgJ3NvY2tldCwgcG9zc2libHkgZHVlIHRvIGEgbWlzY29uZmlndXJhdGlvbidcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3N0YXRlID4gUlVOTklORykgcmV0dXJuIGFib3J0SGFuZHNoYWtlKHNvY2tldCwgNTAzKTtcblxuICAgIGNvbnN0IGRpZ2VzdCA9IGNyZWF0ZUhhc2goJ3NoYTEnKVxuICAgICAgLnVwZGF0ZShrZXkgKyBHVUlEKVxuICAgICAgLmRpZ2VzdCgnYmFzZTY0Jyk7XG5cbiAgICBjb25zdCBoZWFkZXJzID0gW1xuICAgICAgJ0hUVFAvMS4xIDEwMSBTd2l0Y2hpbmcgUHJvdG9jb2xzJyxcbiAgICAgICdVcGdyYWRlOiB3ZWJzb2NrZXQnLFxuICAgICAgJ0Nvbm5lY3Rpb246IFVwZ3JhZGUnLFxuICAgICAgYFNlYy1XZWJTb2NrZXQtQWNjZXB0OiAke2RpZ2VzdH1gXG4gICAgXTtcblxuICAgIGNvbnN0IHdzID0gbmV3IHRoaXMub3B0aW9ucy5XZWJTb2NrZXQobnVsbCk7XG5cbiAgICBpZiAocHJvdG9jb2xzLnNpemUpIHtcbiAgICAgIC8vXG4gICAgICAvLyBPcHRpb25hbGx5IGNhbGwgZXh0ZXJuYWwgcHJvdG9jb2wgc2VsZWN0aW9uIGhhbmRsZXIuXG4gICAgICAvL1xuICAgICAgY29uc3QgcHJvdG9jb2wgPSB0aGlzLm9wdGlvbnMuaGFuZGxlUHJvdG9jb2xzXG4gICAgICAgID8gdGhpcy5vcHRpb25zLmhhbmRsZVByb3RvY29scyhwcm90b2NvbHMsIHJlcSlcbiAgICAgICAgOiBwcm90b2NvbHMudmFsdWVzKCkubmV4dCgpLnZhbHVlO1xuXG4gICAgICBpZiAocHJvdG9jb2wpIHtcbiAgICAgICAgaGVhZGVycy5wdXNoKGBTZWMtV2ViU29ja2V0LVByb3RvY29sOiAke3Byb3RvY29sfWApO1xuICAgICAgICB3cy5fcHJvdG9jb2wgPSBwcm90b2NvbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZXh0ZW5zaW9uc1tQZXJNZXNzYWdlRGVmbGF0ZS5leHRlbnNpb25OYW1lXSkge1xuICAgICAgY29uc3QgcGFyYW1zID0gZXh0ZW5zaW9uc1tQZXJNZXNzYWdlRGVmbGF0ZS5leHRlbnNpb25OYW1lXS5wYXJhbXM7XG4gICAgICBjb25zdCB2YWx1ZSA9IGV4dGVuc2lvbi5mb3JtYXQoe1xuICAgICAgICBbUGVyTWVzc2FnZURlZmxhdGUuZXh0ZW5zaW9uTmFtZV06IFtwYXJhbXNdXG4gICAgICB9KTtcbiAgICAgIGhlYWRlcnMucHVzaChgU2VjLVdlYlNvY2tldC1FeHRlbnNpb25zOiAke3ZhbHVlfWApO1xuICAgICAgd3MuX2V4dGVuc2lvbnMgPSBleHRlbnNpb25zO1xuICAgIH1cblxuICAgIC8vXG4gICAgLy8gQWxsb3cgZXh0ZXJuYWwgbW9kaWZpY2F0aW9uL2luc3BlY3Rpb24gb2YgaGFuZHNoYWtlIGhlYWRlcnMuXG4gICAgLy9cbiAgICB0aGlzLmVtaXQoJ2hlYWRlcnMnLCBoZWFkZXJzLCByZXEpO1xuXG4gICAgc29ja2V0LndyaXRlKGhlYWRlcnMuY29uY2F0KCdcXHJcXG4nKS5qb2luKCdcXHJcXG4nKSk7XG4gICAgc29ja2V0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIHNvY2tldE9uRXJyb3IpO1xuXG4gICAgd3Muc2V0U29ja2V0KHNvY2tldCwgaGVhZCwge1xuICAgICAgbWF4UGF5bG9hZDogdGhpcy5vcHRpb25zLm1heFBheWxvYWQsXG4gICAgICBza2lwVVRGOFZhbGlkYXRpb246IHRoaXMub3B0aW9ucy5za2lwVVRGOFZhbGlkYXRpb25cbiAgICB9KTtcblxuICAgIGlmICh0aGlzLmNsaWVudHMpIHtcbiAgICAgIHRoaXMuY2xpZW50cy5hZGQod3MpO1xuICAgICAgd3Mub24oJ2Nsb3NlJywgKCkgPT4ge1xuICAgICAgICB0aGlzLmNsaWVudHMuZGVsZXRlKHdzKTtcblxuICAgICAgICBpZiAodGhpcy5fc2hvdWxkRW1pdENsb3NlICYmICF0aGlzLmNsaWVudHMuc2l6ZSkge1xuICAgICAgICAgIHByb2Nlc3MubmV4dFRpY2soZW1pdENsb3NlLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY2Iod3MsIHJlcSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBXZWJTb2NrZXRTZXJ2ZXI7XG5cbi8qKlxuICogQWRkIGV2ZW50IGxpc3RlbmVycyBvbiBhbiBgRXZlbnRFbWl0dGVyYCB1c2luZyBhIG1hcCBvZiA8ZXZlbnQsIGxpc3RlbmVyPlxuICogcGFpcnMuXG4gKlxuICogQHBhcmFtIHtFdmVudEVtaXR0ZXJ9IHNlcnZlciBUaGUgZXZlbnQgZW1pdHRlclxuICogQHBhcmFtIHtPYmplY3QuPFN0cmluZywgRnVuY3Rpb24+fSBtYXAgVGhlIGxpc3RlbmVycyB0byBhZGRcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIHRoYXQgd2lsbCByZW1vdmUgdGhlIGFkZGVkIGxpc3RlbmVycyB3aGVuXG4gKiAgICAgY2FsbGVkXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBhZGRMaXN0ZW5lcnMoc2VydmVyLCBtYXApIHtcbiAgZm9yIChjb25zdCBldmVudCBvZiBPYmplY3Qua2V5cyhtYXApKSBzZXJ2ZXIub24oZXZlbnQsIG1hcFtldmVudF0pO1xuXG4gIHJldHVybiBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcnMoKSB7XG4gICAgZm9yIChjb25zdCBldmVudCBvZiBPYmplY3Qua2V5cyhtYXApKSB7XG4gICAgICBzZXJ2ZXIucmVtb3ZlTGlzdGVuZXIoZXZlbnQsIG1hcFtldmVudF0pO1xuICAgIH1cbiAgfTtcbn1cblxuLyoqXG4gKiBFbWl0IGEgYCdjbG9zZSdgIGV2ZW50IG9uIGFuIGBFdmVudEVtaXR0ZXJgLlxuICpcbiAqIEBwYXJhbSB7RXZlbnRFbWl0dGVyfSBzZXJ2ZXIgVGhlIGV2ZW50IGVtaXR0ZXJcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGVtaXRDbG9zZShzZXJ2ZXIpIHtcbiAgc2VydmVyLl9zdGF0ZSA9IENMT1NFRDtcbiAgc2VydmVyLmVtaXQoJ2Nsb3NlJyk7XG59XG5cbi8qKlxuICogSGFuZGxlIHNvY2tldCBlcnJvcnMuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gc29ja2V0T25FcnJvcigpIHtcbiAgdGhpcy5kZXN0cm95KCk7XG59XG5cbi8qKlxuICogQ2xvc2UgdGhlIGNvbm5lY3Rpb24gd2hlbiBwcmVjb25kaXRpb25zIGFyZSBub3QgZnVsZmlsbGVkLlxuICpcbiAqIEBwYXJhbSB7KG5ldC5Tb2NrZXR8dGxzLlNvY2tldCl9IHNvY2tldCBUaGUgc29ja2V0IG9mIHRoZSB1cGdyYWRlIHJlcXVlc3RcbiAqIEBwYXJhbSB7TnVtYmVyfSBjb2RlIFRoZSBIVFRQIHJlc3BvbnNlIHN0YXR1cyBjb2RlXG4gKiBAcGFyYW0ge1N0cmluZ30gW21lc3NhZ2VdIFRoZSBIVFRQIHJlc3BvbnNlIGJvZHlcbiAqIEBwYXJhbSB7T2JqZWN0fSBbaGVhZGVyc10gQWRkaXRpb25hbCBIVFRQIHJlc3BvbnNlIGhlYWRlcnNcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGFib3J0SGFuZHNoYWtlKHNvY2tldCwgY29kZSwgbWVzc2FnZSwgaGVhZGVycykge1xuICAvL1xuICAvLyBUaGUgc29ja2V0IGlzIHdyaXRhYmxlIHVubGVzcyB0aGUgdXNlciBkZXN0cm95ZWQgb3IgZW5kZWQgaXQgYmVmb3JlIGNhbGxpbmdcbiAgLy8gYHNlcnZlci5oYW5kbGVVcGdyYWRlKClgIG9yIGluIHRoZSBgdmVyaWZ5Q2xpZW50YCBmdW5jdGlvbiwgd2hpY2ggaXMgYSB1c2VyXG4gIC8vIGVycm9yLiBIYW5kbGluZyB0aGlzIGRvZXMgbm90IG1ha2UgbXVjaCBzZW5zZSBhcyB0aGUgd29yc3QgdGhhdCBjYW4gaGFwcGVuXG4gIC8vIGlzIHRoYXQgc29tZSBvZiB0aGUgZGF0YSB3cml0dGVuIGJ5IHRoZSB1c2VyIG1pZ2h0IGJlIGRpc2NhcmRlZCBkdWUgdG8gdGhlXG4gIC8vIGNhbGwgdG8gYHNvY2tldC5lbmQoKWAgYmVsb3csIHdoaWNoIHRyaWdnZXJzIGFuIGAnZXJyb3InYCBldmVudCB0aGF0IGluXG4gIC8vIHR1cm4gY2F1c2VzIHRoZSBzb2NrZXQgdG8gYmUgZGVzdHJveWVkLlxuICAvL1xuICBtZXNzYWdlID0gbWVzc2FnZSB8fCBodHRwLlNUQVRVU19DT0RFU1tjb2RlXTtcbiAgaGVhZGVycyA9IHtcbiAgICBDb25uZWN0aW9uOiAnY2xvc2UnLFxuICAgICdDb250ZW50LVR5cGUnOiAndGV4dC9odG1sJyxcbiAgICAnQ29udGVudC1MZW5ndGgnOiBCdWZmZXIuYnl0ZUxlbmd0aChtZXNzYWdlKSxcbiAgICAuLi5oZWFkZXJzXG4gIH07XG5cbiAgc29ja2V0Lm9uY2UoJ2ZpbmlzaCcsIHNvY2tldC5kZXN0cm95KTtcblxuICBzb2NrZXQuZW5kKFxuICAgIGBIVFRQLzEuMSAke2NvZGV9ICR7aHR0cC5TVEFUVVNfQ09ERVNbY29kZV19XFxyXFxuYCArXG4gICAgICBPYmplY3Qua2V5cyhoZWFkZXJzKVxuICAgICAgICAubWFwKChoKSA9PiBgJHtofTogJHtoZWFkZXJzW2hdfWApXG4gICAgICAgIC5qb2luKCdcXHJcXG4nKSArXG4gICAgICAnXFxyXFxuXFxyXFxuJyArXG4gICAgICBtZXNzYWdlXG4gICk7XG59XG5cbi8qKlxuICogRW1pdCBhIGAnd3NDbGllbnRFcnJvcidgIGV2ZW50IG9uIGEgYFdlYlNvY2tldFNlcnZlcmAgaWYgdGhlcmUgaXMgYXQgbGVhc3RcbiAqIG9uZSBsaXN0ZW5lciBmb3IgaXQsIG90aGVyd2lzZSBjYWxsIGBhYm9ydEhhbmRzaGFrZSgpYC5cbiAqXG4gKiBAcGFyYW0ge1dlYlNvY2tldFNlcnZlcn0gc2VydmVyIFRoZSBXZWJTb2NrZXQgc2VydmVyXG4gKiBAcGFyYW0ge2h0dHAuSW5jb21pbmdNZXNzYWdlfSByZXEgVGhlIHJlcXVlc3Qgb2JqZWN0XG4gKiBAcGFyYW0geyhuZXQuU29ja2V0fHRscy5Tb2NrZXQpfSBzb2NrZXQgVGhlIHNvY2tldCBvZiB0aGUgdXBncmFkZSByZXF1ZXN0XG4gKiBAcGFyYW0ge051bWJlcn0gY29kZSBUaGUgSFRUUCByZXNwb25zZSBzdGF0dXMgY29kZVxuICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgVGhlIEhUVFAgcmVzcG9uc2UgYm9keVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gYWJvcnRIYW5kc2hha2VPckVtaXR3c0NsaWVudEVycm9yKHNlcnZlciwgcmVxLCBzb2NrZXQsIGNvZGUsIG1lc3NhZ2UpIHtcbiAgaWYgKHNlcnZlci5saXN0ZW5lckNvdW50KCd3c0NsaWVudEVycm9yJykpIHtcbiAgICBjb25zdCBlcnIgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UoZXJyLCBhYm9ydEhhbmRzaGFrZU9yRW1pdHdzQ2xpZW50RXJyb3IpO1xuXG4gICAgc2VydmVyLmVtaXQoJ3dzQ2xpZW50RXJyb3InLCBlcnIsIHNvY2tldCwgcmVxKTtcbiAgfSBlbHNlIHtcbiAgICBhYm9ydEhhbmRzaGFrZShzb2NrZXQsIGNvZGUsIG1lc3NhZ2UpO1xuICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/ws/lib/websocket-server.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/ws/lib/websocket.js":
/*!*********************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/ws/lib/websocket.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^Readable$\" }] */\n\n\n\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst https = __webpack_require__(/*! https */ \"https\");\nconst http = __webpack_require__(/*! http */ \"http\");\nconst net = __webpack_require__(/*! net */ \"net\");\nconst tls = __webpack_require__(/*! tls */ \"tls\");\nconst { randomBytes, createHash } = __webpack_require__(/*! crypto */ \"crypto\");\nconst { Readable } = __webpack_require__(/*! stream */ \"stream\");\nconst { URL } = __webpack_require__(/*! url */ \"url\");\n\nconst PerMessageDeflate = __webpack_require__(/*! ./permessage-deflate */ \"(api)/./node_modules/gogoanime-api/node_modules/ws/lib/permessage-deflate.js\");\nconst Receiver = __webpack_require__(/*! ./receiver */ \"(api)/./node_modules/gogoanime-api/node_modules/ws/lib/receiver.js\");\nconst Sender = __webpack_require__(/*! ./sender */ \"(api)/./node_modules/gogoanime-api/node_modules/ws/lib/sender.js\");\nconst {\n  BINARY_TYPES,\n  EMPTY_BUFFER,\n  GUID,\n  kForOnEventAttribute,\n  kListener,\n  kStatusCode,\n  kWebSocket,\n  NOOP\n} = __webpack_require__(/*! ./constants */ \"(api)/./node_modules/gogoanime-api/node_modules/ws/lib/constants.js\");\nconst {\n  EventTarget: { addEventListener, removeEventListener }\n} = __webpack_require__(/*! ./event-target */ \"(api)/./node_modules/gogoanime-api/node_modules/ws/lib/event-target.js\");\nconst { format, parse } = __webpack_require__(/*! ./extension */ \"(api)/./node_modules/gogoanime-api/node_modules/ws/lib/extension.js\");\nconst { toBuffer } = __webpack_require__(/*! ./buffer-util */ \"(api)/./node_modules/gogoanime-api/node_modules/ws/lib/buffer-util.js\");\n\nconst closeTimeout = 30 * 1000;\nconst kAborted = Symbol('kAborted');\nconst protocolVersions = [8, 13];\nconst readyStates = ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'];\nconst subprotocolRegex = /^[!#$%&'*+\\-.0-9A-Z^_`|a-z~]+$/;\n\n/**\n * Class representing a WebSocket.\n *\n * @extends EventEmitter\n */\nclass WebSocket extends EventEmitter {\n  /**\n   * Create a new `WebSocket`.\n   *\n   * @param {(String|URL)} address The URL to which to connect\n   * @param {(String|String[])} [protocols] The subprotocols\n   * @param {Object} [options] Connection options\n   */\n  constructor(address, protocols, options) {\n    super();\n\n    this._binaryType = BINARY_TYPES[0];\n    this._closeCode = 1006;\n    this._closeFrameReceived = false;\n    this._closeFrameSent = false;\n    this._closeMessage = EMPTY_BUFFER;\n    this._closeTimer = null;\n    this._extensions = {};\n    this._paused = false;\n    this._protocol = '';\n    this._readyState = WebSocket.CONNECTING;\n    this._receiver = null;\n    this._sender = null;\n    this._socket = null;\n\n    if (address !== null) {\n      this._bufferedAmount = 0;\n      this._isServer = false;\n      this._redirects = 0;\n\n      if (protocols === undefined) {\n        protocols = [];\n      } else if (!Array.isArray(protocols)) {\n        if (typeof protocols === 'object' && protocols !== null) {\n          options = protocols;\n          protocols = [];\n        } else {\n          protocols = [protocols];\n        }\n      }\n\n      initAsClient(this, address, protocols, options);\n    } else {\n      this._isServer = true;\n    }\n  }\n\n  /**\n   * This deviates from the WHATWG interface since ws doesn't support the\n   * required default \"blob\" type (instead we define a custom \"nodebuffer\"\n   * type).\n   *\n   * @type {String}\n   */\n  get binaryType() {\n    return this._binaryType;\n  }\n\n  set binaryType(type) {\n    if (!BINARY_TYPES.includes(type)) return;\n\n    this._binaryType = type;\n\n    //\n    // Allow to change `binaryType` on the fly.\n    //\n    if (this._receiver) this._receiver._binaryType = type;\n  }\n\n  /**\n   * @type {Number}\n   */\n  get bufferedAmount() {\n    if (!this._socket) return this._bufferedAmount;\n\n    return this._socket._writableState.length + this._sender._bufferedBytes;\n  }\n\n  /**\n   * @type {String}\n   */\n  get extensions() {\n    return Object.keys(this._extensions).join();\n  }\n\n  /**\n   * @type {Boolean}\n   */\n  get isPaused() {\n    return this._paused;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onclose() {\n    return null;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onerror() {\n    return null;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onopen() {\n    return null;\n  }\n\n  /**\n   * @type {Function}\n   */\n  /* istanbul ignore next */\n  get onmessage() {\n    return null;\n  }\n\n  /**\n   * @type {String}\n   */\n  get protocol() {\n    return this._protocol;\n  }\n\n  /**\n   * @type {Number}\n   */\n  get readyState() {\n    return this._readyState;\n  }\n\n  /**\n   * @type {String}\n   */\n  get url() {\n    return this._url;\n  }\n\n  /**\n   * Set up the socket and the internal resources.\n   *\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\n   *     server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Object} options Options object\n   * @param {Function} [options.generateMask] The function used to generate the\n   *     masking key\n   * @param {Number} [options.maxPayload=0] The maximum allowed message size\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n   *     not to skip UTF-8 validation for text and close messages\n   * @private\n   */\n  setSocket(socket, head, options) {\n    const receiver = new Receiver({\n      binaryType: this.binaryType,\n      extensions: this._extensions,\n      isServer: this._isServer,\n      maxPayload: options.maxPayload,\n      skipUTF8Validation: options.skipUTF8Validation\n    });\n\n    this._sender = new Sender(socket, this._extensions, options.generateMask);\n    this._receiver = receiver;\n    this._socket = socket;\n\n    receiver[kWebSocket] = this;\n    socket[kWebSocket] = this;\n\n    receiver.on('conclude', receiverOnConclude);\n    receiver.on('drain', receiverOnDrain);\n    receiver.on('error', receiverOnError);\n    receiver.on('message', receiverOnMessage);\n    receiver.on('ping', receiverOnPing);\n    receiver.on('pong', receiverOnPong);\n\n    socket.setTimeout(0);\n    socket.setNoDelay();\n\n    if (head.length > 0) socket.unshift(head);\n\n    socket.on('close', socketOnClose);\n    socket.on('data', socketOnData);\n    socket.on('end', socketOnEnd);\n    socket.on('error', socketOnError);\n\n    this._readyState = WebSocket.OPEN;\n    this.emit('open');\n  }\n\n  /**\n   * Emit the `'close'` event.\n   *\n   * @private\n   */\n  emitClose() {\n    if (!this._socket) {\n      this._readyState = WebSocket.CLOSED;\n      this.emit('close', this._closeCode, this._closeMessage);\n      return;\n    }\n\n    if (this._extensions[PerMessageDeflate.extensionName]) {\n      this._extensions[PerMessageDeflate.extensionName].cleanup();\n    }\n\n    this._receiver.removeAllListeners();\n    this._readyState = WebSocket.CLOSED;\n    this.emit('close', this._closeCode, this._closeMessage);\n  }\n\n  /**\n   * Start a closing handshake.\n   *\n   *          +----------+   +-----------+   +----------+\n   *     - - -|ws.close()|-->|close frame|-->|ws.close()|- - -\n   *    |     +----------+   +-----------+   +----------+     |\n   *          +----------+   +-----------+         |\n   * CLOSING  |ws.close()|<--|close frame|<--+-----+       CLOSING\n   *          +----------+   +-----------+   |\n   *    |           |                        |   +---+        |\n   *                +------------------------+-->|fin| - - - -\n   *    |         +---+                      |   +---+\n   *     - - - - -|fin|<---------------------+\n   *              +---+\n   *\n   * @param {Number} [code] Status code explaining why the connection is closing\n   * @param {(String|Buffer)} [data] The reason why the connection is\n   *     closing\n   * @public\n   */\n  close(code, data) {\n    if (this.readyState === WebSocket.CLOSED) return;\n    if (this.readyState === WebSocket.CONNECTING) {\n      const msg = 'WebSocket was closed before the connection was established';\n      return abortHandshake(this, this._req, msg);\n    }\n\n    if (this.readyState === WebSocket.CLOSING) {\n      if (\n        this._closeFrameSent &&\n        (this._closeFrameReceived || this._receiver._writableState.errorEmitted)\n      ) {\n        this._socket.end();\n      }\n\n      return;\n    }\n\n    this._readyState = WebSocket.CLOSING;\n    this._sender.close(code, data, !this._isServer, (err) => {\n      //\n      // This error is handled by the `'error'` listener on the socket. We only\n      // want to know if the close frame has been sent here.\n      //\n      if (err) return;\n\n      this._closeFrameSent = true;\n\n      if (\n        this._closeFrameReceived ||\n        this._receiver._writableState.errorEmitted\n      ) {\n        this._socket.end();\n      }\n    });\n\n    //\n    // Specify a timeout for the closing handshake to complete.\n    //\n    this._closeTimer = setTimeout(\n      this._socket.destroy.bind(this._socket),\n      closeTimeout\n    );\n  }\n\n  /**\n   * Pause the socket.\n   *\n   * @public\n   */\n  pause() {\n    if (\n      this.readyState === WebSocket.CONNECTING ||\n      this.readyState === WebSocket.CLOSED\n    ) {\n      return;\n    }\n\n    this._paused = true;\n    this._socket.pause();\n  }\n\n  /**\n   * Send a ping.\n   *\n   * @param {*} [data] The data to send\n   * @param {Boolean} [mask] Indicates whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when the ping is sent\n   * @public\n   */\n  ping(data, mask, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n\n    if (typeof data === 'function') {\n      cb = data;\n      data = mask = undefined;\n    } else if (typeof mask === 'function') {\n      cb = mask;\n      mask = undefined;\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n\n    if (mask === undefined) mask = !this._isServer;\n    this._sender.ping(data || EMPTY_BUFFER, mask, cb);\n  }\n\n  /**\n   * Send a pong.\n   *\n   * @param {*} [data] The data to send\n   * @param {Boolean} [mask] Indicates whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when the pong is sent\n   * @public\n   */\n  pong(data, mask, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n\n    if (typeof data === 'function') {\n      cb = data;\n      data = mask = undefined;\n    } else if (typeof mask === 'function') {\n      cb = mask;\n      mask = undefined;\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n\n    if (mask === undefined) mask = !this._isServer;\n    this._sender.pong(data || EMPTY_BUFFER, mask, cb);\n  }\n\n  /**\n   * Resume the socket.\n   *\n   * @public\n   */\n  resume() {\n    if (\n      this.readyState === WebSocket.CONNECTING ||\n      this.readyState === WebSocket.CLOSED\n    ) {\n      return;\n    }\n\n    this._paused = false;\n    if (!this._receiver._writableState.needDrain) this._socket.resume();\n  }\n\n  /**\n   * Send a data message.\n   *\n   * @param {*} data The message to send\n   * @param {Object} [options] Options object\n   * @param {Boolean} [options.binary] Specifies whether `data` is binary or\n   *     text\n   * @param {Boolean} [options.compress] Specifies whether or not to compress\n   *     `data`\n   * @param {Boolean} [options.fin=true] Specifies whether the fragment is the\n   *     last one\n   * @param {Boolean} [options.mask] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when data is written out\n   * @public\n   */\n  send(data, options, cb) {\n    if (this.readyState === WebSocket.CONNECTING) {\n      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n    }\n\n    if (typeof options === 'function') {\n      cb = options;\n      options = {};\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    if (this.readyState !== WebSocket.OPEN) {\n      sendAfterClose(this, data, cb);\n      return;\n    }\n\n    const opts = {\n      binary: typeof data !== 'string',\n      mask: !this._isServer,\n      compress: true,\n      fin: true,\n      ...options\n    };\n\n    if (!this._extensions[PerMessageDeflate.extensionName]) {\n      opts.compress = false;\n    }\n\n    this._sender.send(data || EMPTY_BUFFER, opts, cb);\n  }\n\n  /**\n   * Forcibly close the connection.\n   *\n   * @public\n   */\n  terminate() {\n    if (this.readyState === WebSocket.CLOSED) return;\n    if (this.readyState === WebSocket.CONNECTING) {\n      const msg = 'WebSocket was closed before the connection was established';\n      return abortHandshake(this, this._req, msg);\n    }\n\n    if (this._socket) {\n      this._readyState = WebSocket.CLOSING;\n      this._socket.destroy();\n    }\n  }\n}\n\n/**\n * @constant {Number} CONNECTING\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'CONNECTING', {\n  enumerable: true,\n  value: readyStates.indexOf('CONNECTING')\n});\n\n/**\n * @constant {Number} CONNECTING\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'CONNECTING', {\n  enumerable: true,\n  value: readyStates.indexOf('CONNECTING')\n});\n\n/**\n * @constant {Number} OPEN\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'OPEN', {\n  enumerable: true,\n  value: readyStates.indexOf('OPEN')\n});\n\n/**\n * @constant {Number} OPEN\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'OPEN', {\n  enumerable: true,\n  value: readyStates.indexOf('OPEN')\n});\n\n/**\n * @constant {Number} CLOSING\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'CLOSING', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSING')\n});\n\n/**\n * @constant {Number} CLOSING\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'CLOSING', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSING')\n});\n\n/**\n * @constant {Number} CLOSED\n * @memberof WebSocket\n */\nObject.defineProperty(WebSocket, 'CLOSED', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSED')\n});\n\n/**\n * @constant {Number} CLOSED\n * @memberof WebSocket.prototype\n */\nObject.defineProperty(WebSocket.prototype, 'CLOSED', {\n  enumerable: true,\n  value: readyStates.indexOf('CLOSED')\n});\n\n[\n  'binaryType',\n  'bufferedAmount',\n  'extensions',\n  'isPaused',\n  'protocol',\n  'readyState',\n  'url'\n].forEach((property) => {\n  Object.defineProperty(WebSocket.prototype, property, { enumerable: true });\n});\n\n//\n// Add the `onopen`, `onerror`, `onclose`, and `onmessage` attributes.\n// See https://html.spec.whatwg.org/multipage/comms.html#the-websocket-interface\n//\n['open', 'error', 'close', 'message'].forEach((method) => {\n  Object.defineProperty(WebSocket.prototype, `on${method}`, {\n    enumerable: true,\n    get() {\n      for (const listener of this.listeners(method)) {\n        if (listener[kForOnEventAttribute]) return listener[kListener];\n      }\n\n      return null;\n    },\n    set(handler) {\n      for (const listener of this.listeners(method)) {\n        if (listener[kForOnEventAttribute]) {\n          this.removeListener(method, listener);\n          break;\n        }\n      }\n\n      if (typeof handler !== 'function') return;\n\n      this.addEventListener(method, handler, {\n        [kForOnEventAttribute]: true\n      });\n    }\n  });\n});\n\nWebSocket.prototype.addEventListener = addEventListener;\nWebSocket.prototype.removeEventListener = removeEventListener;\n\nmodule.exports = WebSocket;\n\n/**\n * Initialize a WebSocket client.\n *\n * @param {WebSocket} websocket The client to initialize\n * @param {(String|URL)} address The URL to which to connect\n * @param {Array} protocols The subprotocols\n * @param {Object} [options] Connection options\n * @param {Boolean} [options.followRedirects=false] Whether or not to follow\n *     redirects\n * @param {Function} [options.generateMask] The function used to generate the\n *     masking key\n * @param {Number} [options.handshakeTimeout] Timeout in milliseconds for the\n *     handshake request\n * @param {Number} [options.maxPayload=104857600] The maximum allowed message\n *     size\n * @param {Number} [options.maxRedirects=10] The maximum number of redirects\n *     allowed\n * @param {String} [options.origin] Value of the `Origin` or\n *     `Sec-WebSocket-Origin` header\n * @param {(Boolean|Object)} [options.perMessageDeflate=true] Enable/disable\n *     permessage-deflate\n * @param {Number} [options.protocolVersion=13] Value of the\n *     `Sec-WebSocket-Version` header\n * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n *     not to skip UTF-8 validation for text and close messages\n * @private\n */\nfunction initAsClient(websocket, address, protocols, options) {\n  const opts = {\n    protocolVersion: protocolVersions[1],\n    maxPayload: 100 * 1024 * 1024,\n    skipUTF8Validation: false,\n    perMessageDeflate: true,\n    followRedirects: false,\n    maxRedirects: 10,\n    ...options,\n    createConnection: undefined,\n    socketPath: undefined,\n    hostname: undefined,\n    protocol: undefined,\n    timeout: undefined,\n    method: 'GET',\n    host: undefined,\n    path: undefined,\n    port: undefined\n  };\n\n  if (!protocolVersions.includes(opts.protocolVersion)) {\n    throw new RangeError(\n      `Unsupported protocol version: ${opts.protocolVersion} ` +\n        `(supported versions: ${protocolVersions.join(', ')})`\n    );\n  }\n\n  let parsedUrl;\n\n  if (address instanceof URL) {\n    parsedUrl = address;\n    websocket._url = address.href;\n  } else {\n    try {\n      parsedUrl = new URL(address);\n    } catch (e) {\n      throw new SyntaxError(`Invalid URL: ${address}`);\n    }\n\n    websocket._url = address;\n  }\n\n  const isSecure = parsedUrl.protocol === 'wss:';\n  const isUnixSocket = parsedUrl.protocol === 'ws+unix:';\n  let invalidURLMessage;\n\n  if (parsedUrl.protocol !== 'ws:' && !isSecure && !isUnixSocket) {\n    invalidURLMessage =\n      'The URL\\'s protocol must be one of \"ws:\", \"wss:\", or \"ws+unix:\"';\n  } else if (isUnixSocket && !parsedUrl.pathname) {\n    invalidURLMessage = \"The URL's pathname is empty\";\n  } else if (parsedUrl.hash) {\n    invalidURLMessage = 'The URL contains a fragment identifier';\n  }\n\n  if (invalidURLMessage) {\n    const err = new SyntaxError(invalidURLMessage);\n\n    if (websocket._redirects === 0) {\n      throw err;\n    } else {\n      emitErrorAndClose(websocket, err);\n      return;\n    }\n  }\n\n  const defaultPort = isSecure ? 443 : 80;\n  const key = randomBytes(16).toString('base64');\n  const request = isSecure ? https.request : http.request;\n  const protocolSet = new Set();\n  let perMessageDeflate;\n\n  opts.createConnection = isSecure ? tlsConnect : netConnect;\n  opts.defaultPort = opts.defaultPort || defaultPort;\n  opts.port = parsedUrl.port || defaultPort;\n  opts.host = parsedUrl.hostname.startsWith('[')\n    ? parsedUrl.hostname.slice(1, -1)\n    : parsedUrl.hostname;\n  opts.headers = {\n    'Sec-WebSocket-Version': opts.protocolVersion,\n    'Sec-WebSocket-Key': key,\n    Connection: 'Upgrade',\n    Upgrade: 'websocket',\n    ...opts.headers\n  };\n  opts.path = parsedUrl.pathname + parsedUrl.search;\n  opts.timeout = opts.handshakeTimeout;\n\n  if (opts.perMessageDeflate) {\n    perMessageDeflate = new PerMessageDeflate(\n      opts.perMessageDeflate !== true ? opts.perMessageDeflate : {},\n      false,\n      opts.maxPayload\n    );\n    opts.headers['Sec-WebSocket-Extensions'] = format({\n      [PerMessageDeflate.extensionName]: perMessageDeflate.offer()\n    });\n  }\n  if (protocols.length) {\n    for (const protocol of protocols) {\n      if (\n        typeof protocol !== 'string' ||\n        !subprotocolRegex.test(protocol) ||\n        protocolSet.has(protocol)\n      ) {\n        throw new SyntaxError(\n          'An invalid or duplicated subprotocol was specified'\n        );\n      }\n\n      protocolSet.add(protocol);\n    }\n\n    opts.headers['Sec-WebSocket-Protocol'] = protocols.join(',');\n  }\n  if (opts.origin) {\n    if (opts.protocolVersion < 13) {\n      opts.headers['Sec-WebSocket-Origin'] = opts.origin;\n    } else {\n      opts.headers.Origin = opts.origin;\n    }\n  }\n  if (parsedUrl.username || parsedUrl.password) {\n    opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;\n  }\n\n  if (isUnixSocket) {\n    const parts = opts.path.split(':');\n\n    opts.socketPath = parts[0];\n    opts.path = parts[1];\n  }\n\n  let req;\n\n  if (opts.followRedirects) {\n    if (websocket._redirects === 0) {\n      websocket._originalSecure = isSecure;\n      websocket._originalHost = parsedUrl.host;\n\n      const headers = options && options.headers;\n\n      //\n      // Shallow copy the user provided options so that headers can be changed\n      // without mutating the original object.\n      //\n      options = { ...options, headers: {} };\n\n      if (headers) {\n        for (const [key, value] of Object.entries(headers)) {\n          options.headers[key.toLowerCase()] = value;\n        }\n      }\n    } else if (websocket.listenerCount('redirect') === 0) {\n      const isSameHost = parsedUrl.host === websocket._originalHost;\n\n      if (!isSameHost || (websocket._originalSecure && !isSecure)) {\n        //\n        // Match curl 7.77.0 behavior and drop the following headers. These\n        // headers are also dropped when following a redirect to a subdomain.\n        //\n        delete opts.headers.authorization;\n        delete opts.headers.cookie;\n\n        if (!isSameHost) delete opts.headers.host;\n\n        opts.auth = undefined;\n      }\n    }\n\n    //\n    // Match curl 7.77.0 behavior and make the first `Authorization` header win.\n    // If the `Authorization` header is set, then there is nothing to do as it\n    // will take precedence.\n    //\n    if (opts.auth && !options.headers.authorization) {\n      options.headers.authorization =\n        'Basic ' + Buffer.from(opts.auth).toString('base64');\n    }\n\n    req = websocket._req = request(opts);\n\n    if (websocket._redirects) {\n      //\n      // Unlike what is done for the `'upgrade'` event, no early exit is\n      // triggered here if the user calls `websocket.close()` or\n      // `websocket.terminate()` from a listener of the `'redirect'` event. This\n      // is because the user can also call `request.destroy()` with an error\n      // before calling `websocket.close()` or `websocket.terminate()` and this\n      // would result in an error being emitted on the `request` object with no\n      // `'error'` event listeners attached.\n      //\n      websocket.emit('redirect', websocket.url, req);\n    }\n  } else {\n    req = websocket._req = request(opts);\n  }\n\n  if (opts.timeout) {\n    req.on('timeout', () => {\n      abortHandshake(websocket, req, 'Opening handshake has timed out');\n    });\n  }\n\n  req.on('error', (err) => {\n    if (req === null || req[kAborted]) return;\n\n    req = websocket._req = null;\n    emitErrorAndClose(websocket, err);\n  });\n\n  req.on('response', (res) => {\n    const location = res.headers.location;\n    const statusCode = res.statusCode;\n\n    if (\n      location &&\n      opts.followRedirects &&\n      statusCode >= 300 &&\n      statusCode < 400\n    ) {\n      if (++websocket._redirects > opts.maxRedirects) {\n        abortHandshake(websocket, req, 'Maximum redirects exceeded');\n        return;\n      }\n\n      req.abort();\n\n      let addr;\n\n      try {\n        addr = new URL(location, address);\n      } catch (e) {\n        const err = new SyntaxError(`Invalid URL: ${location}`);\n        emitErrorAndClose(websocket, err);\n        return;\n      }\n\n      initAsClient(websocket, addr, protocols, options);\n    } else if (!websocket.emit('unexpected-response', req, res)) {\n      abortHandshake(\n        websocket,\n        req,\n        `Unexpected server response: ${res.statusCode}`\n      );\n    }\n  });\n\n  req.on('upgrade', (res, socket, head) => {\n    websocket.emit('upgrade', res);\n\n    //\n    // The user may have closed the connection from a listener of the\n    // `'upgrade'` event.\n    //\n    if (websocket.readyState !== WebSocket.CONNECTING) return;\n\n    req = websocket._req = null;\n\n    if (res.headers.upgrade.toLowerCase() !== 'websocket') {\n      abortHandshake(websocket, socket, 'Invalid Upgrade header');\n      return;\n    }\n\n    const digest = createHash('sha1')\n      .update(key + GUID)\n      .digest('base64');\n\n    if (res.headers['sec-websocket-accept'] !== digest) {\n      abortHandshake(websocket, socket, 'Invalid Sec-WebSocket-Accept header');\n      return;\n    }\n\n    const serverProt = res.headers['sec-websocket-protocol'];\n    let protError;\n\n    if (serverProt !== undefined) {\n      if (!protocolSet.size) {\n        protError = 'Server sent a subprotocol but none was requested';\n      } else if (!protocolSet.has(serverProt)) {\n        protError = 'Server sent an invalid subprotocol';\n      }\n    } else if (protocolSet.size) {\n      protError = 'Server sent no subprotocol';\n    }\n\n    if (protError) {\n      abortHandshake(websocket, socket, protError);\n      return;\n    }\n\n    if (serverProt) websocket._protocol = serverProt;\n\n    const secWebSocketExtensions = res.headers['sec-websocket-extensions'];\n\n    if (secWebSocketExtensions !== undefined) {\n      if (!perMessageDeflate) {\n        const message =\n          'Server sent a Sec-WebSocket-Extensions header but no extension ' +\n          'was requested';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      let extensions;\n\n      try {\n        extensions = parse(secWebSocketExtensions);\n      } catch (err) {\n        const message = 'Invalid Sec-WebSocket-Extensions header';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      const extensionNames = Object.keys(extensions);\n\n      if (\n        extensionNames.length !== 1 ||\n        extensionNames[0] !== PerMessageDeflate.extensionName\n      ) {\n        const message = 'Server indicated an extension that was not requested';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      try {\n        perMessageDeflate.accept(extensions[PerMessageDeflate.extensionName]);\n      } catch (err) {\n        const message = 'Invalid Sec-WebSocket-Extensions header';\n        abortHandshake(websocket, socket, message);\n        return;\n      }\n\n      websocket._extensions[PerMessageDeflate.extensionName] =\n        perMessageDeflate;\n    }\n\n    websocket.setSocket(socket, head, {\n      generateMask: opts.generateMask,\n      maxPayload: opts.maxPayload,\n      skipUTF8Validation: opts.skipUTF8Validation\n    });\n  });\n\n  req.end();\n}\n\n/**\n * Emit the `'error'` and `'close'` events.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {Error} The error to emit\n * @private\n */\nfunction emitErrorAndClose(websocket, err) {\n  websocket._readyState = WebSocket.CLOSING;\n  websocket.emit('error', err);\n  websocket.emitClose();\n}\n\n/**\n * Create a `net.Socket` and initiate a connection.\n *\n * @param {Object} options Connection options\n * @return {net.Socket} The newly created socket used to start the connection\n * @private\n */\nfunction netConnect(options) {\n  options.path = options.socketPath;\n  return net.connect(options);\n}\n\n/**\n * Create a `tls.TLSSocket` and initiate a connection.\n *\n * @param {Object} options Connection options\n * @return {tls.TLSSocket} The newly created socket used to start the connection\n * @private\n */\nfunction tlsConnect(options) {\n  options.path = undefined;\n\n  if (!options.servername && options.servername !== '') {\n    options.servername = net.isIP(options.host) ? '' : options.host;\n  }\n\n  return tls.connect(options);\n}\n\n/**\n * Abort the handshake and emit an error.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {(http.ClientRequest|net.Socket|tls.Socket)} stream The request to\n *     abort or the socket to destroy\n * @param {String} message The error message\n * @private\n */\nfunction abortHandshake(websocket, stream, message) {\n  websocket._readyState = WebSocket.CLOSING;\n\n  const err = new Error(message);\n  Error.captureStackTrace(err, abortHandshake);\n\n  if (stream.setHeader) {\n    stream[kAborted] = true;\n    stream.abort();\n\n    if (stream.socket && !stream.socket.destroyed) {\n      //\n      // On Node.js >= 14.3.0 `request.abort()` does not destroy the socket if\n      // called after the request completed. See\n      // https://github.com/websockets/ws/issues/1869.\n      //\n      stream.socket.destroy();\n    }\n\n    process.nextTick(emitErrorAndClose, websocket, err);\n  } else {\n    stream.destroy(err);\n    stream.once('error', websocket.emit.bind(websocket, 'error'));\n    stream.once('close', websocket.emitClose.bind(websocket));\n  }\n}\n\n/**\n * Handle cases where the `ping()`, `pong()`, or `send()` methods are called\n * when the `readyState` attribute is `CLOSING` or `CLOSED`.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {*} [data] The data to send\n * @param {Function} [cb] Callback\n * @private\n */\nfunction sendAfterClose(websocket, data, cb) {\n  if (data) {\n    const length = toBuffer(data).length;\n\n    //\n    // The `_bufferedAmount` property is used only when the peer is a client and\n    // the opening handshake fails. Under these circumstances, in fact, the\n    // `setSocket()` method is not called, so the `_socket` and `_sender`\n    // properties are set to `null`.\n    //\n    if (websocket._socket) websocket._sender._bufferedBytes += length;\n    else websocket._bufferedAmount += length;\n  }\n\n  if (cb) {\n    const err = new Error(\n      `WebSocket is not open: readyState ${websocket.readyState} ` +\n        `(${readyStates[websocket.readyState]})`\n    );\n    cb(err);\n  }\n}\n\n/**\n * The listener of the `Receiver` `'conclude'` event.\n *\n * @param {Number} code The status code\n * @param {Buffer} reason The reason for closing\n * @private\n */\nfunction receiverOnConclude(code, reason) {\n  const websocket = this[kWebSocket];\n\n  websocket._closeFrameReceived = true;\n  websocket._closeMessage = reason;\n  websocket._closeCode = code;\n\n  if (websocket._socket[kWebSocket] === undefined) return;\n\n  websocket._socket.removeListener('data', socketOnData);\n  process.nextTick(resume, websocket._socket);\n\n  if (code === 1005) websocket.close();\n  else websocket.close(code, reason);\n}\n\n/**\n * The listener of the `Receiver` `'drain'` event.\n *\n * @private\n */\nfunction receiverOnDrain() {\n  const websocket = this[kWebSocket];\n\n  if (!websocket.isPaused) websocket._socket.resume();\n}\n\n/**\n * The listener of the `Receiver` `'error'` event.\n *\n * @param {(RangeError|Error)} err The emitted error\n * @private\n */\nfunction receiverOnError(err) {\n  const websocket = this[kWebSocket];\n\n  if (websocket._socket[kWebSocket] !== undefined) {\n    websocket._socket.removeListener('data', socketOnData);\n\n    //\n    // On Node.js < 14.0.0 the `'error'` event is emitted synchronously. See\n    // https://github.com/websockets/ws/issues/1940.\n    //\n    process.nextTick(resume, websocket._socket);\n\n    websocket.close(err[kStatusCode]);\n  }\n\n  websocket.emit('error', err);\n}\n\n/**\n * The listener of the `Receiver` `'finish'` event.\n *\n * @private\n */\nfunction receiverOnFinish() {\n  this[kWebSocket].emitClose();\n}\n\n/**\n * The listener of the `Receiver` `'message'` event.\n *\n * @param {Buffer|ArrayBuffer|Buffer[])} data The message\n * @param {Boolean} isBinary Specifies whether the message is binary or not\n * @private\n */\nfunction receiverOnMessage(data, isBinary) {\n  this[kWebSocket].emit('message', data, isBinary);\n}\n\n/**\n * The listener of the `Receiver` `'ping'` event.\n *\n * @param {Buffer} data The data included in the ping frame\n * @private\n */\nfunction receiverOnPing(data) {\n  const websocket = this[kWebSocket];\n\n  websocket.pong(data, !websocket._isServer, NOOP);\n  websocket.emit('ping', data);\n}\n\n/**\n * The listener of the `Receiver` `'pong'` event.\n *\n * @param {Buffer} data The data included in the pong frame\n * @private\n */\nfunction receiverOnPong(data) {\n  this[kWebSocket].emit('pong', data);\n}\n\n/**\n * Resume a readable stream\n *\n * @param {Readable} stream The readable stream\n * @private\n */\nfunction resume(stream) {\n  stream.resume();\n}\n\n/**\n * The listener of the `net.Socket` `'close'` event.\n *\n * @private\n */\nfunction socketOnClose() {\n  const websocket = this[kWebSocket];\n\n  this.removeListener('close', socketOnClose);\n  this.removeListener('data', socketOnData);\n  this.removeListener('end', socketOnEnd);\n\n  websocket._readyState = WebSocket.CLOSING;\n\n  let chunk;\n\n  //\n  // The close frame might not have been received or the `'end'` event emitted,\n  // for example, if the socket was destroyed due to an error. Ensure that the\n  // `receiver` stream is closed after writing any remaining buffered data to\n  // it. If the readable side of the socket is in flowing mode then there is no\n  // buffered data as everything has been already written and `readable.read()`\n  // will return `null`. If instead, the socket is paused, any possible buffered\n  // data will be read as a single chunk.\n  //\n  if (\n    !this._readableState.endEmitted &&\n    !websocket._closeFrameReceived &&\n    !websocket._receiver._writableState.errorEmitted &&\n    (chunk = websocket._socket.read()) !== null\n  ) {\n    websocket._receiver.write(chunk);\n  }\n\n  websocket._receiver.end();\n\n  this[kWebSocket] = undefined;\n\n  clearTimeout(websocket._closeTimer);\n\n  if (\n    websocket._receiver._writableState.finished ||\n    websocket._receiver._writableState.errorEmitted\n  ) {\n    websocket.emitClose();\n  } else {\n    websocket._receiver.on('error', receiverOnFinish);\n    websocket._receiver.on('finish', receiverOnFinish);\n  }\n}\n\n/**\n * The listener of the `net.Socket` `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\nfunction socketOnData(chunk) {\n  if (!this[kWebSocket]._receiver.write(chunk)) {\n    this.pause();\n  }\n}\n\n/**\n * The listener of the `net.Socket` `'end'` event.\n *\n * @private\n */\nfunction socketOnEnd() {\n  const websocket = this[kWebSocket];\n\n  websocket._readyState = WebSocket.CLOSING;\n  websocket._receiver.end();\n  this.end();\n}\n\n/**\n * The listener of the `net.Socket` `'error'` event.\n *\n * @private\n */\nfunction socketOnError() {\n  const websocket = this[kWebSocket];\n\n  this.removeListener('error', socketOnError);\n  this.on('error', NOOP);\n\n  if (websocket) {\n    websocket._readyState = WebSocket.CLOSING;\n    this.destroy();\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/ws/lib/websocket.js\n");

/***/ }),

/***/ "(api)/./src/generated/aniList.ts":
/*!**********************************!*\
  !*** ./src/generated/aniList.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ActivitySort\": () => (/* binding */ ActivitySort),\n/* harmony export */   \"ActivityType\": () => (/* binding */ ActivityType),\n/* harmony export */   \"AiringSort\": () => (/* binding */ AiringSort),\n/* harmony export */   \"AnimeBannerFragmentDoc\": () => (/* binding */ AnimeBannerFragmentDoc),\n/* harmony export */   \"AnimeInfoFragmentDoc\": () => (/* binding */ AnimeInfoFragmentDoc),\n/* harmony export */   \"AnimePageDocument\": () => (/* binding */ AnimePageDocument),\n/* harmony export */   \"CharacterRole\": () => (/* binding */ CharacterRole),\n/* harmony export */   \"CharacterSort\": () => (/* binding */ CharacterSort),\n/* harmony export */   \"ExternalLinkMediaType\": () => (/* binding */ ExternalLinkMediaType),\n/* harmony export */   \"ExternalLinkType\": () => (/* binding */ ExternalLinkType),\n/* harmony export */   \"GetAnimeBannerDocument\": () => (/* binding */ GetAnimeBannerDocument),\n/* harmony export */   \"GetAnimeByIdsDocument\": () => (/* binding */ GetAnimeByIdsDocument),\n/* harmony export */   \"GetAnimeInfoDocument\": () => (/* binding */ GetAnimeInfoDocument),\n/* harmony export */   \"GetAnimeTitleDocument\": () => (/* binding */ GetAnimeTitleDocument),\n/* harmony export */   \"GetListDocument\": () => (/* binding */ GetListDocument),\n/* harmony export */   \"GetPopularBannerDocument\": () => (/* binding */ GetPopularBannerDocument),\n/* harmony export */   \"IndexPageDocument\": () => (/* binding */ IndexPageDocument),\n/* harmony export */   \"LikeableType\": () => (/* binding */ LikeableType),\n/* harmony export */   \"MediaFormat\": () => (/* binding */ MediaFormat),\n/* harmony export */   \"MediaListSort\": () => (/* binding */ MediaListSort),\n/* harmony export */   \"MediaListStatus\": () => (/* binding */ MediaListStatus),\n/* harmony export */   \"MediaRankType\": () => (/* binding */ MediaRankType),\n/* harmony export */   \"MediaRelation\": () => (/* binding */ MediaRelation),\n/* harmony export */   \"MediaSeason\": () => (/* binding */ MediaSeason),\n/* harmony export */   \"MediaSort\": () => (/* binding */ MediaSort),\n/* harmony export */   \"MediaSource\": () => (/* binding */ MediaSource),\n/* harmony export */   \"MediaStatus\": () => (/* binding */ MediaStatus),\n/* harmony export */   \"MediaTrendSort\": () => (/* binding */ MediaTrendSort),\n/* harmony export */   \"MediaType\": () => (/* binding */ MediaType),\n/* harmony export */   \"ModActionType\": () => (/* binding */ ModActionType),\n/* harmony export */   \"ModRole\": () => (/* binding */ ModRole),\n/* harmony export */   \"NotificationType\": () => (/* binding */ NotificationType),\n/* harmony export */   \"RecommendationRating\": () => (/* binding */ RecommendationRating),\n/* harmony export */   \"RecommendationSort\": () => (/* binding */ RecommendationSort),\n/* harmony export */   \"ReviewRating\": () => (/* binding */ ReviewRating),\n/* harmony export */   \"ReviewSort\": () => (/* binding */ ReviewSort),\n/* harmony export */   \"RevisionHistoryAction\": () => (/* binding */ RevisionHistoryAction),\n/* harmony export */   \"ScoreFormat\": () => (/* binding */ ScoreFormat),\n/* harmony export */   \"SearchAnimeDocument\": () => (/* binding */ SearchAnimeDocument),\n/* harmony export */   \"SearchGenreDocument\": () => (/* binding */ SearchGenreDocument),\n/* harmony export */   \"SiteTrendSort\": () => (/* binding */ SiteTrendSort),\n/* harmony export */   \"StaffLanguage\": () => (/* binding */ StaffLanguage),\n/* harmony export */   \"StaffSort\": () => (/* binding */ StaffSort),\n/* harmony export */   \"StudioSort\": () => (/* binding */ StudioSort),\n/* harmony export */   \"SubmissionSort\": () => (/* binding */ SubmissionSort),\n/* harmony export */   \"SubmissionStatus\": () => (/* binding */ SubmissionStatus),\n/* harmony export */   \"ThreadCommentSort\": () => (/* binding */ ThreadCommentSort),\n/* harmony export */   \"ThreadSort\": () => (/* binding */ ThreadSort),\n/* harmony export */   \"UserSort\": () => (/* binding */ UserSort),\n/* harmony export */   \"UserStaffNameLanguage\": () => (/* binding */ UserStaffNameLanguage),\n/* harmony export */   \"UserStatisticsSort\": () => (/* binding */ UserStatisticsSort),\n/* harmony export */   \"UserTitleLanguage\": () => (/* binding */ UserTitleLanguage),\n/* harmony export */   \"WatchPageDocument\": () => (/* binding */ WatchPageDocument),\n/* harmony export */   \"getSdk\": () => (/* binding */ getSdk)\n/* harmony export */ });\n/* harmony import */ var graphql_tag__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql-tag */ \"graphql-tag\");\n/* harmony import */ var graphql_tag__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(graphql_tag__WEBPACK_IMPORTED_MODULE_0__);\n\nvar ActivitySort;\n(function(ActivitySort) {\n    ActivitySort[\"Id\"] = \"ID\";\n    ActivitySort[\"IdDesc\"] = \"ID_DESC\";\n    ActivitySort[\"Pinned\"] = \"PINNED\";\n})(ActivitySort || (ActivitySort = {}));\nvar ActivityType;\n(function(ActivityType) {\n    ActivityType[/** A anime list update activity */ \"AnimeList\"] = \"ANIME_LIST\";\n    ActivityType[/** A manga list update activity */ \"MangaList\"] = \"MANGA_LIST\";\n    ActivityType[/** Anime & Manga list update, only used in query arguments */ \"MediaList\"] = \"MEDIA_LIST\";\n    ActivityType[/** A text message activity sent to another user */ \"Message\"] = \"MESSAGE\";\n    ActivityType[/** A text activity */ \"Text\"] = \"TEXT\";\n})(ActivityType || (ActivityType = {}));\nvar AiringSort;\n(function(AiringSort) {\n    AiringSort[\"Episode\"] = \"EPISODE\";\n    AiringSort[\"EpisodeDesc\"] = \"EPISODE_DESC\";\n    AiringSort[\"Id\"] = \"ID\";\n    AiringSort[\"IdDesc\"] = \"ID_DESC\";\n    AiringSort[\"MediaId\"] = \"MEDIA_ID\";\n    AiringSort[\"MediaIdDesc\"] = \"MEDIA_ID_DESC\";\n    AiringSort[\"Time\"] = \"TIME\";\n    AiringSort[\"TimeDesc\"] = \"TIME_DESC\";\n})(AiringSort || (AiringSort = {}));\nvar CharacterRole;\n(function(CharacterRole) {\n    CharacterRole[/** A background character in the media */ \"Background\"] = \"BACKGROUND\";\n    CharacterRole[/** A primary character role in the media */ \"Main\"] = \"MAIN\";\n    CharacterRole[/** A supporting character role in the media */ \"Supporting\"] = \"SUPPORTING\";\n})(CharacterRole || (CharacterRole = {}));\nvar CharacterSort;\n(function(CharacterSort) {\n    CharacterSort[\"Favourites\"] = \"FAVOURITES\";\n    CharacterSort[\"FavouritesDesc\"] = \"FAVOURITES_DESC\";\n    CharacterSort[\"Id\"] = \"ID\";\n    CharacterSort[\"IdDesc\"] = \"ID_DESC\";\n    CharacterSort[/** Order manually decided by moderators */ \"Relevance\"] = \"RELEVANCE\";\n    CharacterSort[\"Role\"] = \"ROLE\";\n    CharacterSort[\"RoleDesc\"] = \"ROLE_DESC\";\n    CharacterSort[\"SearchMatch\"] = \"SEARCH_MATCH\";\n})(CharacterSort || (CharacterSort = {}));\nvar ExternalLinkMediaType;\n(function(ExternalLinkMediaType) {\n    ExternalLinkMediaType[\"Anime\"] = \"ANIME\";\n    ExternalLinkMediaType[\"Manga\"] = \"MANGA\";\n    ExternalLinkMediaType[\"Staff\"] = \"STAFF\";\n})(ExternalLinkMediaType || (ExternalLinkMediaType = {}));\nvar ExternalLinkType;\n(function(ExternalLinkType) {\n    ExternalLinkType[\"Info\"] = \"INFO\";\n    ExternalLinkType[\"Social\"] = \"SOCIAL\";\n    ExternalLinkType[\"Streaming\"] = \"STREAMING\";\n})(ExternalLinkType || (ExternalLinkType = {}));\nvar LikeableType;\n(function(LikeableType) {\n    LikeableType[\"Activity\"] = \"ACTIVITY\";\n    LikeableType[\"ActivityReply\"] = \"ACTIVITY_REPLY\";\n    LikeableType[\"Thread\"] = \"THREAD\";\n    LikeableType[\"ThreadComment\"] = \"THREAD_COMMENT\";\n})(LikeableType || (LikeableType = {}));\nvar MediaFormat;\n(function(MediaFormat) {\n    MediaFormat[/** Professionally published manga with more than one chapter */ \"Manga\"] = \"MANGA\";\n    MediaFormat[/** Anime movies with a theatrical release */ \"Movie\"] = \"MOVIE\";\n    MediaFormat[/** Short anime released as a music video */ \"Music\"] = \"MUSIC\";\n    MediaFormat[/** Written books released as a series of light novels */ \"Novel\"] = \"NOVEL\";\n    MediaFormat[/** (Original Net Animation) Anime that have been originally released online or are only available through streaming services. */ \"Ona\"] = \"ONA\";\n    MediaFormat[/** Manga with just one chapter */ \"OneShot\"] = \"ONE_SHOT\";\n    MediaFormat[/** (Original Video Animation) Anime that have been released directly on DVD/Blu-ray without originally going through a theatrical release or television broadcast */ \"Ova\"] = \"OVA\";\n    MediaFormat[/** Special episodes that have been included in DVD/Blu-ray releases, picture dramas, pilots, etc */ \"Special\"] = \"SPECIAL\";\n    MediaFormat[/** Anime broadcast on television */ \"Tv\"] = \"TV\";\n    MediaFormat[/** Anime which are under 15 minutes in length and broadcast on television */ \"TvShort\"] = \"TV_SHORT\";\n})(MediaFormat || (MediaFormat = {}));\nvar MediaListSort;\n(function(MediaListSort) {\n    MediaListSort[\"AddedTime\"] = \"ADDED_TIME\";\n    MediaListSort[\"AddedTimeDesc\"] = \"ADDED_TIME_DESC\";\n    MediaListSort[\"FinishedOn\"] = \"FINISHED_ON\";\n    MediaListSort[\"FinishedOnDesc\"] = \"FINISHED_ON_DESC\";\n    MediaListSort[\"MediaId\"] = \"MEDIA_ID\";\n    MediaListSort[\"MediaIdDesc\"] = \"MEDIA_ID_DESC\";\n    MediaListSort[\"MediaPopularity\"] = \"MEDIA_POPULARITY\";\n    MediaListSort[\"MediaPopularityDesc\"] = \"MEDIA_POPULARITY_DESC\";\n    MediaListSort[\"MediaTitleEnglish\"] = \"MEDIA_TITLE_ENGLISH\";\n    MediaListSort[\"MediaTitleEnglishDesc\"] = \"MEDIA_TITLE_ENGLISH_DESC\";\n    MediaListSort[\"MediaTitleNative\"] = \"MEDIA_TITLE_NATIVE\";\n    MediaListSort[\"MediaTitleNativeDesc\"] = \"MEDIA_TITLE_NATIVE_DESC\";\n    MediaListSort[\"MediaTitleRomaji\"] = \"MEDIA_TITLE_ROMAJI\";\n    MediaListSort[\"MediaTitleRomajiDesc\"] = \"MEDIA_TITLE_ROMAJI_DESC\";\n    MediaListSort[\"Priority\"] = \"PRIORITY\";\n    MediaListSort[\"PriorityDesc\"] = \"PRIORITY_DESC\";\n    MediaListSort[\"Progress\"] = \"PROGRESS\";\n    MediaListSort[\"ProgressDesc\"] = \"PROGRESS_DESC\";\n    MediaListSort[\"ProgressVolumes\"] = \"PROGRESS_VOLUMES\";\n    MediaListSort[\"ProgressVolumesDesc\"] = \"PROGRESS_VOLUMES_DESC\";\n    MediaListSort[\"Repeat\"] = \"REPEAT\";\n    MediaListSort[\"RepeatDesc\"] = \"REPEAT_DESC\";\n    MediaListSort[\"Score\"] = \"SCORE\";\n    MediaListSort[\"ScoreDesc\"] = \"SCORE_DESC\";\n    MediaListSort[\"StartedOn\"] = \"STARTED_ON\";\n    MediaListSort[\"StartedOnDesc\"] = \"STARTED_ON_DESC\";\n    MediaListSort[\"Status\"] = \"STATUS\";\n    MediaListSort[\"StatusDesc\"] = \"STATUS_DESC\";\n    MediaListSort[\"UpdatedTime\"] = \"UPDATED_TIME\";\n    MediaListSort[\"UpdatedTimeDesc\"] = \"UPDATED_TIME_DESC\";\n})(MediaListSort || (MediaListSort = {}));\nvar MediaListStatus;\n(function(MediaListStatus) {\n    MediaListStatus[/** Finished watching/reading */ \"Completed\"] = \"COMPLETED\";\n    MediaListStatus[/** Currently watching/reading */ \"Current\"] = \"CURRENT\";\n    MediaListStatus[/** Stopped watching/reading before completing */ \"Dropped\"] = \"DROPPED\";\n    MediaListStatus[/** Paused watching/reading */ \"Paused\"] = \"PAUSED\";\n    MediaListStatus[/** Planning to watch/read */ \"Planning\"] = \"PLANNING\";\n    MediaListStatus[/** Re-watching/reading */ \"Repeating\"] = \"REPEATING\";\n})(MediaListStatus || (MediaListStatus = {}));\nvar MediaRankType;\n(function(MediaRankType) {\n    MediaRankType[/** Ranking is based on the media's popularity */ \"Popular\"] = \"POPULAR\";\n    MediaRankType[/** Ranking is based on the media's ratings/score */ \"Rated\"] = \"RATED\";\n})(MediaRankType || (MediaRankType = {}));\nvar MediaRelation;\n(function(MediaRelation) {\n    MediaRelation[/** An adaption of this media into a different format */ \"Adaptation\"] = \"ADAPTATION\";\n    MediaRelation[/** An alternative version of the same media */ \"Alternative\"] = \"ALTERNATIVE\";\n    MediaRelation[/** Shares at least 1 character */ \"Character\"] = \"CHARACTER\";\n    MediaRelation[/** Version 2 only. */ \"Compilation\"] = \"COMPILATION\";\n    MediaRelation[/** Version 2 only. */ \"Contains\"] = \"CONTAINS\";\n    MediaRelation[/** Other */ \"Other\"] = \"OTHER\";\n    MediaRelation[/** The media a side story is from */ \"Parent\"] = \"PARENT\";\n    MediaRelation[/** Released before the relation */ \"Prequel\"] = \"PREQUEL\";\n    MediaRelation[/** Released after the relation */ \"Sequel\"] = \"SEQUEL\";\n    MediaRelation[/** A side story of the parent media */ \"SideStory\"] = \"SIDE_STORY\";\n    MediaRelation[/** Version 2 only. The source material the media was adapted from */ \"Source\"] = \"SOURCE\";\n    MediaRelation[/** An alternative version of the media with a different primary focus */ \"SpinOff\"] = \"SPIN_OFF\";\n    MediaRelation[/** A shortened and summarized version */ \"Summary\"] = \"SUMMARY\";\n})(MediaRelation || (MediaRelation = {}));\nvar MediaSeason;\n(function(MediaSeason) {\n    MediaSeason[/** Months September to November */ \"Fall\"] = \"FALL\";\n    MediaSeason[/** Months March to May */ \"Spring\"] = \"SPRING\";\n    MediaSeason[/** Months June to August */ \"Summer\"] = \"SUMMER\";\n    MediaSeason[/** Months December to February */ \"Winter\"] = \"WINTER\";\n})(MediaSeason || (MediaSeason = {}));\nvar MediaSort;\n(function(MediaSort) {\n    MediaSort[\"Chapters\"] = \"CHAPTERS\";\n    MediaSort[\"ChaptersDesc\"] = \"CHAPTERS_DESC\";\n    MediaSort[\"Duration\"] = \"DURATION\";\n    MediaSort[\"DurationDesc\"] = \"DURATION_DESC\";\n    MediaSort[\"EndDate\"] = \"END_DATE\";\n    MediaSort[\"EndDateDesc\"] = \"END_DATE_DESC\";\n    MediaSort[\"Episodes\"] = \"EPISODES\";\n    MediaSort[\"EpisodesDesc\"] = \"EPISODES_DESC\";\n    MediaSort[\"Favourites\"] = \"FAVOURITES\";\n    MediaSort[\"FavouritesDesc\"] = \"FAVOURITES_DESC\";\n    MediaSort[\"Format\"] = \"FORMAT\";\n    MediaSort[\"FormatDesc\"] = \"FORMAT_DESC\";\n    MediaSort[\"Id\"] = \"ID\";\n    MediaSort[\"IdDesc\"] = \"ID_DESC\";\n    MediaSort[\"Popularity\"] = \"POPULARITY\";\n    MediaSort[\"PopularityDesc\"] = \"POPULARITY_DESC\";\n    MediaSort[\"Score\"] = \"SCORE\";\n    MediaSort[\"ScoreDesc\"] = \"SCORE_DESC\";\n    MediaSort[\"SearchMatch\"] = \"SEARCH_MATCH\";\n    MediaSort[\"StartDate\"] = \"START_DATE\";\n    MediaSort[\"StartDateDesc\"] = \"START_DATE_DESC\";\n    MediaSort[\"Status\"] = \"STATUS\";\n    MediaSort[\"StatusDesc\"] = \"STATUS_DESC\";\n    MediaSort[\"TitleEnglish\"] = \"TITLE_ENGLISH\";\n    MediaSort[\"TitleEnglishDesc\"] = \"TITLE_ENGLISH_DESC\";\n    MediaSort[\"TitleNative\"] = \"TITLE_NATIVE\";\n    MediaSort[\"TitleNativeDesc\"] = \"TITLE_NATIVE_DESC\";\n    MediaSort[\"TitleRomaji\"] = \"TITLE_ROMAJI\";\n    MediaSort[\"TitleRomajiDesc\"] = \"TITLE_ROMAJI_DESC\";\n    MediaSort[\"Trending\"] = \"TRENDING\";\n    MediaSort[\"TrendingDesc\"] = \"TRENDING_DESC\";\n    MediaSort[\"Type\"] = \"TYPE\";\n    MediaSort[\"TypeDesc\"] = \"TYPE_DESC\";\n    MediaSort[\"UpdatedAt\"] = \"UPDATED_AT\";\n    MediaSort[\"UpdatedAtDesc\"] = \"UPDATED_AT_DESC\";\n    MediaSort[\"Volumes\"] = \"VOLUMES\";\n    MediaSort[\"VolumesDesc\"] = \"VOLUMES_DESC\";\n})(MediaSort || (MediaSort = {}));\nvar MediaSource;\n(function(MediaSource) {\n    MediaSource[/** Version 2+ only. Japanese Anime */ \"Anime\"] = \"ANIME\";\n    MediaSource[/** Version 3 only. Comics excluding manga */ \"Comic\"] = \"COMIC\";\n    MediaSource[/** Version 2+ only. Self-published works */ \"Doujinshi\"] = \"DOUJINSHI\";\n    MediaSource[/** Version 3 only. Games excluding video games */ \"Game\"] = \"GAME\";\n    MediaSource[/** Written work published in volumes */ \"LightNovel\"] = \"LIGHT_NOVEL\";\n    MediaSource[/** Version 3 only. Live action media such as movies or TV show */ \"LiveAction\"] = \"LIVE_ACTION\";\n    MediaSource[/** Asian comic book */ \"Manga\"] = \"MANGA\";\n    MediaSource[/** Version 3 only. Multimedia project */ \"MultimediaProject\"] = \"MULTIMEDIA_PROJECT\";\n    MediaSource[/** Version 2+ only. Written works not published in volumes */ \"Novel\"] = \"NOVEL\";\n    MediaSource[/** An original production not based of another work */ \"Original\"] = \"ORIGINAL\";\n    MediaSource[/** Other */ \"Other\"] = \"OTHER\";\n    MediaSource[/** Version 3 only. Picture book */ \"PictureBook\"] = \"PICTURE_BOOK\";\n    MediaSource[/** Video game */ \"VideoGame\"] = \"VIDEO_GAME\";\n    MediaSource[/** Video game driven primary by text and narrative */ \"VisualNovel\"] = \"VISUAL_NOVEL\";\n    MediaSource[/** Version 3 only. Written works published online */ \"WebNovel\"] = \"WEB_NOVEL\";\n})(MediaSource || (MediaSource = {}));\nvar MediaStatus;\n(function(MediaStatus) {\n    MediaStatus[/** Ended before the work could be finished */ \"Cancelled\"] = \"CANCELLED\";\n    MediaStatus[/** Has completed and is no longer being released */ \"Finished\"] = \"FINISHED\";\n    MediaStatus[/** Version 2 only. Is currently paused from releasing and will resume at a later date */ \"Hiatus\"] = \"HIATUS\";\n    MediaStatus[/** To be released at a later date */ \"NotYetReleased\"] = \"NOT_YET_RELEASED\";\n    MediaStatus[/** Currently releasing */ \"Releasing\"] = \"RELEASING\";\n})(MediaStatus || (MediaStatus = {}));\nvar MediaTrendSort;\n(function(MediaTrendSort) {\n    MediaTrendSort[\"Date\"] = \"DATE\";\n    MediaTrendSort[\"DateDesc\"] = \"DATE_DESC\";\n    MediaTrendSort[\"Episode\"] = \"EPISODE\";\n    MediaTrendSort[\"EpisodeDesc\"] = \"EPISODE_DESC\";\n    MediaTrendSort[\"Id\"] = \"ID\";\n    MediaTrendSort[\"IdDesc\"] = \"ID_DESC\";\n    MediaTrendSort[\"MediaId\"] = \"MEDIA_ID\";\n    MediaTrendSort[\"MediaIdDesc\"] = \"MEDIA_ID_DESC\";\n    MediaTrendSort[\"Popularity\"] = \"POPULARITY\";\n    MediaTrendSort[\"PopularityDesc\"] = \"POPULARITY_DESC\";\n    MediaTrendSort[\"Score\"] = \"SCORE\";\n    MediaTrendSort[\"ScoreDesc\"] = \"SCORE_DESC\";\n    MediaTrendSort[\"Trending\"] = \"TRENDING\";\n    MediaTrendSort[\"TrendingDesc\"] = \"TRENDING_DESC\";\n})(MediaTrendSort || (MediaTrendSort = {}));\nvar MediaType;\n(function(MediaType) {\n    MediaType[/** Japanese Anime */ \"Anime\"] = \"ANIME\";\n    MediaType[/** Asian comic */ \"Manga\"] = \"MANGA\";\n})(MediaType || (MediaType = {}));\nvar ModActionType;\n(function(ModActionType) {\n    ModActionType[\"Anon\"] = \"ANON\";\n    ModActionType[\"Ban\"] = \"BAN\";\n    ModActionType[\"Delete\"] = \"DELETE\";\n    ModActionType[\"Edit\"] = \"EDIT\";\n    ModActionType[\"Expire\"] = \"EXPIRE\";\n    ModActionType[\"Note\"] = \"NOTE\";\n    ModActionType[\"Report\"] = \"REPORT\";\n    ModActionType[\"Reset\"] = \"RESET\";\n})(ModActionType || (ModActionType = {}));\nvar ModRole;\n(function(ModRole) {\n    ModRole[/** An AniList administrator */ \"Admin\"] = \"ADMIN\";\n    ModRole[/** An anime data moderator */ \"AnimeData\"] = \"ANIME_DATA\";\n    ModRole[/** A community moderator */ \"Community\"] = \"COMMUNITY\";\n    ModRole[/** An AniList developer */ \"Developer\"] = \"DEVELOPER\";\n    ModRole[/** A discord community moderator */ \"DiscordCommunity\"] = \"DISCORD_COMMUNITY\";\n    ModRole[/** A lead anime data moderator */ \"LeadAnimeData\"] = \"LEAD_ANIME_DATA\";\n    ModRole[/** A lead community moderator */ \"LeadCommunity\"] = \"LEAD_COMMUNITY\";\n    ModRole[/** A head developer of AniList */ \"LeadDeveloper\"] = \"LEAD_DEVELOPER\";\n    ModRole[/** A lead manga data moderator */ \"LeadMangaData\"] = \"LEAD_MANGA_DATA\";\n    ModRole[/** A lead social media moderator */ \"LeadSocialMedia\"] = \"LEAD_SOCIAL_MEDIA\";\n    ModRole[/** A manga data moderator */ \"MangaData\"] = \"MANGA_DATA\";\n    ModRole[/** A retired moderator */ \"Retired\"] = \"RETIRED\";\n    ModRole[/** A social media moderator */ \"SocialMedia\"] = \"SOCIAL_MEDIA\";\n})(ModRole || (ModRole = {}));\nvar NotificationType;\n(function(NotificationType) {\n    NotificationType[/** A user has liked your activity */ \"ActivityLike\"] = \"ACTIVITY_LIKE\";\n    NotificationType[/** A user has mentioned you in their activity */ \"ActivityMention\"] = \"ACTIVITY_MENTION\";\n    NotificationType[/** A user has sent you message */ \"ActivityMessage\"] = \"ACTIVITY_MESSAGE\";\n    NotificationType[/** A user has replied to your activity */ \"ActivityReply\"] = \"ACTIVITY_REPLY\";\n    NotificationType[/** A user has liked your activity reply */ \"ActivityReplyLike\"] = \"ACTIVITY_REPLY_LIKE\";\n    NotificationType[/** A user has replied to activity you have also replied to */ \"ActivityReplySubscribed\"] = \"ACTIVITY_REPLY_SUBSCRIBED\";\n    NotificationType[/** An anime you are currently watching has aired */ \"Airing\"] = \"AIRING\";\n    NotificationType[/** A user has followed you */ \"Following\"] = \"FOLLOWING\";\n    NotificationType[/** An anime or manga has had a data change that affects how a user may track it in their lists */ \"MediaDataChange\"] = \"MEDIA_DATA_CHANGE\";\n    NotificationType[/** An anime or manga on the user's list has been deleted from the site */ \"MediaDeletion\"] = \"MEDIA_DELETION\";\n    NotificationType[/** Anime or manga entries on the user's list have been merged into a single entry */ \"MediaMerge\"] = \"MEDIA_MERGE\";\n    NotificationType[/** A new anime or manga has been added to the site where its related media is on the user's list */ \"RelatedMediaAddition\"] = \"RELATED_MEDIA_ADDITION\";\n    NotificationType[/** A user has liked your forum comment */ \"ThreadCommentLike\"] = \"THREAD_COMMENT_LIKE\";\n    NotificationType[/** A user has mentioned you in a forum comment */ \"ThreadCommentMention\"] = \"THREAD_COMMENT_MENTION\";\n    NotificationType[/** A user has replied to your forum comment */ \"ThreadCommentReply\"] = \"THREAD_COMMENT_REPLY\";\n    NotificationType[/** A user has liked your forum thread */ \"ThreadLike\"] = \"THREAD_LIKE\";\n    NotificationType[/** A user has commented in one of your subscribed forum threads */ \"ThreadSubscribed\"] = \"THREAD_SUBSCRIBED\";\n})(NotificationType || (NotificationType = {}));\nvar RecommendationRating;\n(function(RecommendationRating) {\n    RecommendationRating[\"NoRating\"] = \"NO_RATING\";\n    RecommendationRating[\"RateDown\"] = \"RATE_DOWN\";\n    RecommendationRating[\"RateUp\"] = \"RATE_UP\";\n})(RecommendationRating || (RecommendationRating = {}));\nvar RecommendationSort;\n(function(RecommendationSort) {\n    RecommendationSort[\"Id\"] = \"ID\";\n    RecommendationSort[\"IdDesc\"] = \"ID_DESC\";\n    RecommendationSort[\"Rating\"] = \"RATING\";\n    RecommendationSort[\"RatingDesc\"] = \"RATING_DESC\";\n})(RecommendationSort || (RecommendationSort = {}));\nvar ReviewRating;\n(function(ReviewRating) {\n    ReviewRating[\"DownVote\"] = \"DOWN_VOTE\";\n    ReviewRating[\"NoVote\"] = \"NO_VOTE\";\n    ReviewRating[\"UpVote\"] = \"UP_VOTE\";\n})(ReviewRating || (ReviewRating = {}));\nvar ReviewSort;\n(function(ReviewSort) {\n    ReviewSort[\"CreatedAt\"] = \"CREATED_AT\";\n    ReviewSort[\"CreatedAtDesc\"] = \"CREATED_AT_DESC\";\n    ReviewSort[\"Id\"] = \"ID\";\n    ReviewSort[\"IdDesc\"] = \"ID_DESC\";\n    ReviewSort[\"Rating\"] = \"RATING\";\n    ReviewSort[\"RatingDesc\"] = \"RATING_DESC\";\n    ReviewSort[\"Score\"] = \"SCORE\";\n    ReviewSort[\"ScoreDesc\"] = \"SCORE_DESC\";\n    ReviewSort[\"UpdatedAt\"] = \"UPDATED_AT\";\n    ReviewSort[\"UpdatedAtDesc\"] = \"UPDATED_AT_DESC\";\n})(ReviewSort || (ReviewSort = {}));\nvar RevisionHistoryAction;\n(function(RevisionHistoryAction) {\n    RevisionHistoryAction[\"Create\"] = \"CREATE\";\n    RevisionHistoryAction[\"Edit\"] = \"EDIT\";\n})(RevisionHistoryAction || (RevisionHistoryAction = {}));\nvar ScoreFormat;\n(function(ScoreFormat) {\n    ScoreFormat[/** An integer from 0-3. Should be represented in Smileys. 0 => No Score, 1 => :(, 2 => :|, 3 => :) */ \"Point_3\"] = \"POINT_3\";\n    ScoreFormat[/** An integer from 0-5. Should be represented in Stars */ \"Point_5\"] = \"POINT_5\";\n    ScoreFormat[/** An integer from 0-10 */ \"Point_10\"] = \"POINT_10\";\n    ScoreFormat[/** A float from 0-10 with 1 decimal place */ \"Point_10Decimal\"] = \"POINT_10_DECIMAL\";\n    ScoreFormat[/** An integer from 0-100 */ \"Point_100\"] = \"POINT_100\";\n})(ScoreFormat || (ScoreFormat = {}));\nvar SiteTrendSort;\n(function(SiteTrendSort) {\n    SiteTrendSort[\"Change\"] = \"CHANGE\";\n    SiteTrendSort[\"ChangeDesc\"] = \"CHANGE_DESC\";\n    SiteTrendSort[\"Count\"] = \"COUNT\";\n    SiteTrendSort[\"CountDesc\"] = \"COUNT_DESC\";\n    SiteTrendSort[\"Date\"] = \"DATE\";\n    SiteTrendSort[\"DateDesc\"] = \"DATE_DESC\";\n})(SiteTrendSort || (SiteTrendSort = {}));\nvar StaffLanguage;\n(function(StaffLanguage) {\n    StaffLanguage[/** English */ \"English\"] = \"ENGLISH\";\n    StaffLanguage[/** French */ \"French\"] = \"FRENCH\";\n    StaffLanguage[/** German */ \"German\"] = \"GERMAN\";\n    StaffLanguage[/** Hebrew */ \"Hebrew\"] = \"HEBREW\";\n    StaffLanguage[/** Hungarian */ \"Hungarian\"] = \"HUNGARIAN\";\n    StaffLanguage[/** Italian */ \"Italian\"] = \"ITALIAN\";\n    StaffLanguage[/** Japanese */ \"Japanese\"] = \"JAPANESE\";\n    StaffLanguage[/** Korean */ \"Korean\"] = \"KOREAN\";\n    StaffLanguage[/** Portuguese */ \"Portuguese\"] = \"PORTUGUESE\";\n    StaffLanguage[/** Spanish */ \"Spanish\"] = \"SPANISH\";\n})(StaffLanguage || (StaffLanguage = {}));\nvar StaffSort;\n(function(StaffSort) {\n    StaffSort[\"Favourites\"] = \"FAVOURITES\";\n    StaffSort[\"FavouritesDesc\"] = \"FAVOURITES_DESC\";\n    StaffSort[\"Id\"] = \"ID\";\n    StaffSort[\"IdDesc\"] = \"ID_DESC\";\n    StaffSort[\"Language\"] = \"LANGUAGE\";\n    StaffSort[\"LanguageDesc\"] = \"LANGUAGE_DESC\";\n    StaffSort[/** Order manually decided by moderators */ \"Relevance\"] = \"RELEVANCE\";\n    StaffSort[\"Role\"] = \"ROLE\";\n    StaffSort[\"RoleDesc\"] = \"ROLE_DESC\";\n    StaffSort[\"SearchMatch\"] = \"SEARCH_MATCH\";\n})(StaffSort || (StaffSort = {}));\nvar StudioSort;\n(function(StudioSort) {\n    StudioSort[\"Favourites\"] = \"FAVOURITES\";\n    StudioSort[\"FavouritesDesc\"] = \"FAVOURITES_DESC\";\n    StudioSort[\"Id\"] = \"ID\";\n    StudioSort[\"IdDesc\"] = \"ID_DESC\";\n    StudioSort[\"Name\"] = \"NAME\";\n    StudioSort[\"NameDesc\"] = \"NAME_DESC\";\n    StudioSort[\"SearchMatch\"] = \"SEARCH_MATCH\";\n})(StudioSort || (StudioSort = {}));\nvar SubmissionSort;\n(function(SubmissionSort) {\n    SubmissionSort[\"Id\"] = \"ID\";\n    SubmissionSort[\"IdDesc\"] = \"ID_DESC\";\n})(SubmissionSort || (SubmissionSort = {}));\nvar SubmissionStatus;\n(function(SubmissionStatus) {\n    SubmissionStatus[\"Accepted\"] = \"ACCEPTED\";\n    SubmissionStatus[\"PartiallyAccepted\"] = \"PARTIALLY_ACCEPTED\";\n    SubmissionStatus[\"Pending\"] = \"PENDING\";\n    SubmissionStatus[\"Rejected\"] = \"REJECTED\";\n})(SubmissionStatus || (SubmissionStatus = {}));\nvar ThreadCommentSort;\n(function(ThreadCommentSort) {\n    ThreadCommentSort[\"Id\"] = \"ID\";\n    ThreadCommentSort[\"IdDesc\"] = \"ID_DESC\";\n})(ThreadCommentSort || (ThreadCommentSort = {}));\nvar ThreadSort;\n(function(ThreadSort) {\n    ThreadSort[\"CreatedAt\"] = \"CREATED_AT\";\n    ThreadSort[\"CreatedAtDesc\"] = \"CREATED_AT_DESC\";\n    ThreadSort[\"Id\"] = \"ID\";\n    ThreadSort[\"IdDesc\"] = \"ID_DESC\";\n    ThreadSort[\"IsSticky\"] = \"IS_STICKY\";\n    ThreadSort[\"RepliedAt\"] = \"REPLIED_AT\";\n    ThreadSort[\"RepliedAtDesc\"] = \"REPLIED_AT_DESC\";\n    ThreadSort[\"ReplyCount\"] = \"REPLY_COUNT\";\n    ThreadSort[\"ReplyCountDesc\"] = \"REPLY_COUNT_DESC\";\n    ThreadSort[\"SearchMatch\"] = \"SEARCH_MATCH\";\n    ThreadSort[\"Title\"] = \"TITLE\";\n    ThreadSort[\"TitleDesc\"] = \"TITLE_DESC\";\n    ThreadSort[\"UpdatedAt\"] = \"UPDATED_AT\";\n    ThreadSort[\"UpdatedAtDesc\"] = \"UPDATED_AT_DESC\";\n    ThreadSort[\"ViewCount\"] = \"VIEW_COUNT\";\n    ThreadSort[\"ViewCountDesc\"] = \"VIEW_COUNT_DESC\";\n})(ThreadSort || (ThreadSort = {}));\nvar UserSort;\n(function(UserSort) {\n    UserSort[\"ChaptersRead\"] = \"CHAPTERS_READ\";\n    UserSort[\"ChaptersReadDesc\"] = \"CHAPTERS_READ_DESC\";\n    UserSort[\"Id\"] = \"ID\";\n    UserSort[\"IdDesc\"] = \"ID_DESC\";\n    UserSort[\"SearchMatch\"] = \"SEARCH_MATCH\";\n    UserSort[\"Username\"] = \"USERNAME\";\n    UserSort[\"UsernameDesc\"] = \"USERNAME_DESC\";\n    UserSort[\"WatchedTime\"] = \"WATCHED_TIME\";\n    UserSort[\"WatchedTimeDesc\"] = \"WATCHED_TIME_DESC\";\n})(UserSort || (UserSort = {}));\nvar UserStaffNameLanguage;\n(function(UserStaffNameLanguage) {\n    UserStaffNameLanguage[/** The staff or character's name in their native language */ \"Native\"] = \"NATIVE\";\n    UserStaffNameLanguage[/** The romanization of the staff or character's native name */ \"Romaji\"] = \"ROMAJI\";\n    UserStaffNameLanguage[/** The romanization of the staff or character's native name, with western name ordering */ \"RomajiWestern\"] = \"ROMAJI_WESTERN\";\n})(UserStaffNameLanguage || (UserStaffNameLanguage = {}));\nvar UserStatisticsSort;\n(function(UserStatisticsSort) {\n    UserStatisticsSort[\"Count\"] = \"COUNT\";\n    UserStatisticsSort[\"CountDesc\"] = \"COUNT_DESC\";\n    UserStatisticsSort[\"Id\"] = \"ID\";\n    UserStatisticsSort[\"IdDesc\"] = \"ID_DESC\";\n    UserStatisticsSort[\"MeanScore\"] = \"MEAN_SCORE\";\n    UserStatisticsSort[\"MeanScoreDesc\"] = \"MEAN_SCORE_DESC\";\n    UserStatisticsSort[\"Progress\"] = \"PROGRESS\";\n    UserStatisticsSort[\"ProgressDesc\"] = \"PROGRESS_DESC\";\n})(UserStatisticsSort || (UserStatisticsSort = {}));\nvar UserTitleLanguage;\n(function(UserTitleLanguage) {\n    UserTitleLanguage[/** The official english title */ \"English\"] = \"ENGLISH\";\n    UserTitleLanguage[/** The official english title, stylised by media creator */ \"EnglishStylised\"] = \"ENGLISH_STYLISED\";\n    UserTitleLanguage[/** Official title in it's native language */ \"Native\"] = \"NATIVE\";\n    UserTitleLanguage[/** Official title in it's native language, stylised by media creator */ \"NativeStylised\"] = \"NATIVE_STYLISED\";\n    UserTitleLanguage[/** The romanization of the native language title */ \"Romaji\"] = \"ROMAJI\";\n    UserTitleLanguage[/** The romanization of the native language title, stylised by media creator */ \"RomajiStylised\"] = \"ROMAJI_STYLISED\";\n})(UserTitleLanguage || (UserTitleLanguage = {}));\nconst AnimeBannerFragmentDoc = (graphql_tag__WEBPACK_IMPORTED_MODULE_0___default())`\n  fragment AnimeBanner on Media {\n    id\n    title {\n      english\n      romaji\n    }\n    bannerImage\n    description\n    format\n    duration\n    meanScore\n    genres\n    season\n    startDate {\n      year\n    }\n  }\n`;\nconst AnimeInfoFragmentDoc = (graphql_tag__WEBPACK_IMPORTED_MODULE_0___default())`\n  fragment AnimeInfo on Media {\n    id\n    title {\n      english\n      romaji\n    }\n    coverImage {\n      color\n      medium\n      large\n    }\n    format\n    duration\n    meanScore\n    nextAiringEpisode {\n      airingAt\n      timeUntilAiring\n      episode\n    }\n  }\n`;\nconst GetAnimeBannerDocument = (graphql_tag__WEBPACK_IMPORTED_MODULE_0___default())`\n  query getAnimeBanner($id: Int) {\n    Media(id: $id, type: ANIME) {\n      ...AnimeBanner\n    }\n  }\n  ${AnimeBannerFragmentDoc}\n`;\nconst GetAnimeInfoDocument = (graphql_tag__WEBPACK_IMPORTED_MODULE_0___default())`\n  query getAnimeInfo($id: Int) {\n    Media(id: $id, type: ANIME) {\n      ...AnimeInfo\n    }\n  }\n  ${AnimeInfoFragmentDoc}\n`;\nconst GetAnimeByIdsDocument = (graphql_tag__WEBPACK_IMPORTED_MODULE_0___default())`\n  query getAnimeByIds($perPage: Int, $page: Int, $ids: [Int]) {\n    Page(perPage: $perPage, page: $page) {\n      media(id_in: $ids) {\n        ...AnimeInfo\n      }\n    }\n  }\n  ${AnimeInfoFragmentDoc}\n`;\nconst GetAnimeTitleDocument = (graphql_tag__WEBPACK_IMPORTED_MODULE_0___default())`\n  query getAnimeTitle($id: Int) {\n    Media(id: $id, type: ANIME) {\n      title {\n        romaji\n        english\n      }\n    }\n  }\n`;\nconst GetPopularBannerDocument = (graphql_tag__WEBPACK_IMPORTED_MODULE_0___default())`\n  query getPopularBanner($seasonYear: Int) {\n    Media(type: ANIME, sort: POPULARITY_DESC, seasonYear: $seasonYear) {\n      ...AnimeBanner\n    }\n  }\n  ${AnimeBannerFragmentDoc}\n`;\nconst SearchAnimeDocument = (graphql_tag__WEBPACK_IMPORTED_MODULE_0___default())`\n  query searchAnime($page: Int, $perPage: Int, $keyword: String) {\n    Page(perPage: $perPage, page: $page) {\n      media(type: ANIME, search: $keyword) {\n        ...AnimeInfo\n      }\n    }\n  }\n  ${AnimeInfoFragmentDoc}\n`;\nconst SearchGenreDocument = (graphql_tag__WEBPACK_IMPORTED_MODULE_0___default())`\n  query searchGenre($page: Int, $perPage: Int, $genre: String) {\n    Page(perPage: $perPage, page: $page) {\n      media(type: ANIME, genre: $genre, sort: POPULARITY_DESC) {\n        ...AnimeInfo\n      }\n    }\n  }\n  ${AnimeInfoFragmentDoc}\n`;\nconst GetListDocument = (graphql_tag__WEBPACK_IMPORTED_MODULE_0___default())`\n  query getList($perPage: Int, $page: Int, $sort: [MediaSort]) {\n    Page(perPage: $perPage, page: $page) {\n      media(sort: $sort, type: ANIME) {\n        ...AnimeInfo\n      }\n    }\n  }\n  ${AnimeInfoFragmentDoc}\n`;\nconst IndexPageDocument = (graphql_tag__WEBPACK_IMPORTED_MODULE_0___default())`\n  query indexPage($perPage: Int, $page: Int, $seasonYear: Int) {\n    banner: Media(type: ANIME, sort: POPULARITY_DESC, seasonYear: $seasonYear) {\n      ...AnimeBanner\n    }\n    trending: Page(perPage: $perPage, page: $page) {\n      media(sort: TRENDING_DESC, type: ANIME) {\n        ...AnimeInfo\n      }\n    }\n    popular: Page(perPage: $perPage, page: $page) {\n      media(sort: POPULARITY_DESC, type: ANIME) {\n        ...AnimeInfo\n      }\n    }\n    topRated: Page(perPage: $perPage, page: $page) {\n      media(sort: SCORE_DESC, type: ANIME) {\n        ...AnimeInfo\n      }\n    }\n  }\n  ${AnimeBannerFragmentDoc}\n  ${AnimeInfoFragmentDoc}\n`;\nconst AnimePageDocument = (graphql_tag__WEBPACK_IMPORTED_MODULE_0___default())`\n  query animePage($id: Int, $perPage: Int) {\n    Media(id: $id, type: ANIME) {\n      status\n      ...AnimeInfo\n      ...AnimeBanner\n    }\n    recommended: Page(perPage: $perPage) {\n      recommendations(mediaId: $id, sort: RATING_DESC) {\n        mediaRecommendation {\n          ...AnimeInfo\n        }\n      }\n    }\n  }\n  ${AnimeInfoFragmentDoc}\n  ${AnimeBannerFragmentDoc}\n`;\nconst WatchPageDocument = (graphql_tag__WEBPACK_IMPORTED_MODULE_0___default())`\n  query watchPage($id: Int, $perPage: Int) {\n    anime: Media(id: $id) {\n      ...AnimeBanner\n      ...AnimeInfo\n    }\n    recommended: Page(perPage: $perPage) {\n      recommendations(mediaId: $id, sort: RATING_DESC) {\n        mediaRecommendation {\n          ...AnimeBanner\n          ...AnimeInfo\n        }\n      }\n    }\n  }\n  ${AnimeBannerFragmentDoc}\n  ${AnimeInfoFragmentDoc}\n`;\nconst defaultWrapper = (action, _operationName, _operationType)=>action();\nfunction getSdk(client, withWrapper = defaultWrapper) {\n    return {\n        getAnimeBanner (variables, requestHeaders) {\n            return withWrapper((wrappedRequestHeaders)=>client.request(GetAnimeBannerDocument, variables, {\n                    ...requestHeaders,\n                    ...wrappedRequestHeaders\n                }), \"getAnimeBanner\", \"query\");\n        },\n        getAnimeInfo (variables, requestHeaders) {\n            return withWrapper((wrappedRequestHeaders)=>client.request(GetAnimeInfoDocument, variables, {\n                    ...requestHeaders,\n                    ...wrappedRequestHeaders\n                }), \"getAnimeInfo\", \"query\");\n        },\n        getAnimeByIds (variables, requestHeaders) {\n            return withWrapper((wrappedRequestHeaders)=>client.request(GetAnimeByIdsDocument, variables, {\n                    ...requestHeaders,\n                    ...wrappedRequestHeaders\n                }), \"getAnimeByIds\", \"query\");\n        },\n        getAnimeTitle (variables, requestHeaders) {\n            return withWrapper((wrappedRequestHeaders)=>client.request(GetAnimeTitleDocument, variables, {\n                    ...requestHeaders,\n                    ...wrappedRequestHeaders\n                }), \"getAnimeTitle\", \"query\");\n        },\n        getPopularBanner (variables, requestHeaders) {\n            return withWrapper((wrappedRequestHeaders)=>client.request(GetPopularBannerDocument, variables, {\n                    ...requestHeaders,\n                    ...wrappedRequestHeaders\n                }), \"getPopularBanner\", \"query\");\n        },\n        searchAnime (variables, requestHeaders) {\n            return withWrapper((wrappedRequestHeaders)=>client.request(SearchAnimeDocument, variables, {\n                    ...requestHeaders,\n                    ...wrappedRequestHeaders\n                }), \"searchAnime\", \"query\");\n        },\n        searchGenre (variables, requestHeaders) {\n            return withWrapper((wrappedRequestHeaders)=>client.request(SearchGenreDocument, variables, {\n                    ...requestHeaders,\n                    ...wrappedRequestHeaders\n                }), \"searchGenre\", \"query\");\n        },\n        getList (variables, requestHeaders) {\n            return withWrapper((wrappedRequestHeaders)=>client.request(GetListDocument, variables, {\n                    ...requestHeaders,\n                    ...wrappedRequestHeaders\n                }), \"getList\", \"query\");\n        },\n        indexPage (variables, requestHeaders) {\n            return withWrapper((wrappedRequestHeaders)=>client.request(IndexPageDocument, variables, {\n                    ...requestHeaders,\n                    ...wrappedRequestHeaders\n                }), \"indexPage\", \"query\");\n        },\n        animePage (variables, requestHeaders) {\n            return withWrapper((wrappedRequestHeaders)=>client.request(AnimePageDocument, variables, {\n                    ...requestHeaders,\n                    ...wrappedRequestHeaders\n                }), \"animePage\", \"query\");\n        },\n        watchPage (variables, requestHeaders) {\n            return withWrapper((wrappedRequestHeaders)=>client.request(WatchPageDocument, variables, {\n                    ...requestHeaders,\n                    ...wrappedRequestHeaders\n                }), \"watchPage\", \"query\");\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/generated/aniList.ts\n");

/***/ }),

/***/ "(api)/./src/generated/kitsu.ts":
/*!********************************!*\
  !*** ./src/generated/kitsu.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AgeRatingEnum\": () => (/* binding */ AgeRatingEnum),\n/* harmony export */   \"AnimeSubtypeEnum\": () => (/* binding */ AnimeSubtypeEnum),\n/* harmony export */   \"CharacterRoleEnum\": () => (/* binding */ CharacterRoleEnum),\n/* harmony export */   \"CharacterVoiceSortEnum\": () => (/* binding */ CharacterVoiceSortEnum),\n/* harmony export */   \"CommentLikeSortEnum\": () => (/* binding */ CommentLikeSortEnum),\n/* harmony export */   \"CommentSortEnum\": () => (/* binding */ CommentSortEnum),\n/* harmony export */   \"EpisodeInfoFragmentDoc\": () => (/* binding */ EpisodeInfoFragmentDoc),\n/* harmony export */   \"EpisodeSortEnum\": () => (/* binding */ EpisodeSortEnum),\n/* harmony export */   \"EpisodesListFragmentDoc\": () => (/* binding */ EpisodesListFragmentDoc),\n/* harmony export */   \"FollowSortEnum\": () => (/* binding */ FollowSortEnum),\n/* harmony export */   \"GetAnimesKitsuDocument\": () => (/* binding */ GetAnimesKitsuDocument),\n/* harmony export */   \"GetEpisodeKitsuDocument\": () => (/* binding */ GetEpisodeKitsuDocument),\n/* harmony export */   \"InstallmentSortEnum\": () => (/* binding */ InstallmentSortEnum),\n/* harmony export */   \"InstallmentTagEnum\": () => (/* binding */ InstallmentTagEnum),\n/* harmony export */   \"LibraryEntryStatusEnum\": () => (/* binding */ LibraryEntryStatusEnum),\n/* harmony export */   \"LibraryEventKindEnum\": () => (/* binding */ LibraryEventKindEnum),\n/* harmony export */   \"LibraryEventSortEnum\": () => (/* binding */ LibraryEventSortEnum),\n/* harmony export */   \"LockedReasonEnum\": () => (/* binding */ LockedReasonEnum),\n/* harmony export */   \"MangaSubtypeEnum\": () => (/* binding */ MangaSubtypeEnum),\n/* harmony export */   \"MappingExternalSiteEnum\": () => (/* binding */ MappingExternalSiteEnum),\n/* harmony export */   \"MappingItemEnum\": () => (/* binding */ MappingItemEnum),\n/* harmony export */   \"MediaCategorySortEnum\": () => (/* binding */ MediaCategorySortEnum),\n/* harmony export */   \"MediaCharacterSortEnum\": () => (/* binding */ MediaCharacterSortEnum),\n/* harmony export */   \"MediaProductionRoleEnum\": () => (/* binding */ MediaProductionRoleEnum),\n/* harmony export */   \"MediaReactionSortEnum\": () => (/* binding */ MediaReactionSortEnum),\n/* harmony export */   \"MediaReactionVoteSortEnum\": () => (/* binding */ MediaReactionVoteSortEnum),\n/* harmony export */   \"MediaTypeEnum\": () => (/* binding */ MediaTypeEnum),\n/* harmony export */   \"PostLikeSortEnum\": () => (/* binding */ PostLikeSortEnum),\n/* harmony export */   \"PostSortEnum\": () => (/* binding */ PostSortEnum),\n/* harmony export */   \"ProTierEnum\": () => (/* binding */ ProTierEnum),\n/* harmony export */   \"RatingSystemEnum\": () => (/* binding */ RatingSystemEnum),\n/* harmony export */   \"RecurringBillingServiceEnum\": () => (/* binding */ RecurringBillingServiceEnum),\n/* harmony export */   \"ReleaseSeasonEnum\": () => (/* binding */ ReleaseSeasonEnum),\n/* harmony export */   \"ReleaseStatusEnum\": () => (/* binding */ ReleaseStatusEnum),\n/* harmony export */   \"ReportReasonEnum\": () => (/* binding */ ReportReasonEnum),\n/* harmony export */   \"ReportStatusEnum\": () => (/* binding */ ReportStatusEnum),\n/* harmony export */   \"SitePermissionEnum\": () => (/* binding */ SitePermissionEnum),\n/* harmony export */   \"SortDirection\": () => (/* binding */ SortDirection),\n/* harmony export */   \"TitleLanguagePreferenceEnum\": () => (/* binding */ TitleLanguagePreferenceEnum),\n/* harmony export */   \"WikiSubmissionSortEnum\": () => (/* binding */ WikiSubmissionSortEnum),\n/* harmony export */   \"WikiSubmissionStatusEnum\": () => (/* binding */ WikiSubmissionStatusEnum),\n/* harmony export */   \"getSdk\": () => (/* binding */ getSdk)\n/* harmony export */ });\n/* harmony import */ var graphql_tag__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql-tag */ \"graphql-tag\");\n/* harmony import */ var graphql_tag__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(graphql_tag__WEBPACK_IMPORTED_MODULE_0__);\n\nvar AgeRatingEnum;\n(function(AgeRatingEnum) {\n    AgeRatingEnum[/** Acceptable for all ages */ \"G\"] = \"G\";\n    AgeRatingEnum[/** Parental guidance suggested; should be safe for preteens and older */ \"Pg\"] = \"PG\";\n    AgeRatingEnum[/** Possible lewd or intense themes; should be safe for teens and older */ \"R\"] = \"R\";\n    AgeRatingEnum[/** Contains adult content or themes; should only be viewed by adults */ \"R18\"] = \"R18\";\n})(AgeRatingEnum || (AgeRatingEnum = {}));\nvar AnimeSubtypeEnum;\n(function(AnimeSubtypeEnum) {\n    AnimeSubtypeEnum[\"Movie\"] = \"MOVIE\";\n    AnimeSubtypeEnum[\"Music\"] = \"MUSIC\";\n    AnimeSubtypeEnum[/** Original Net Animation (Web Anime). */ \"Ona\"] = \"ONA\";\n    AnimeSubtypeEnum[/** Original Video Animation. Anime directly released to video market. */ \"Ova\"] = \"OVA\";\n    AnimeSubtypeEnum[/** Spinoffs or Extras of the original. */ \"Special\"] = \"SPECIAL\";\n    AnimeSubtypeEnum[\"Tv\"] = \"TV\";\n})(AnimeSubtypeEnum || (AnimeSubtypeEnum = {}));\nvar CharacterRoleEnum;\n(function(CharacterRoleEnum) {\n    CharacterRoleEnum[/** A background character who generally only appears in a few episodes */ \"Background\"] = \"BACKGROUND\";\n    CharacterRoleEnum[/** A character from a different franchise making a (usually brief) appearance */ \"Cameo\"] = \"CAMEO\";\n    CharacterRoleEnum[/** A character who appears throughout a series and is a focal point of the media */ \"Main\"] = \"MAIN\";\n    CharacterRoleEnum[/** A character who appears in multiple episodes but is not a main character */ \"Recurring\"] = \"RECURRING\";\n})(CharacterRoleEnum || (CharacterRoleEnum = {}));\nvar CharacterVoiceSortEnum;\n(function(CharacterVoiceSortEnum) {\n    CharacterVoiceSortEnum[\"CreatedAt\"] = \"CREATED_AT\";\n    CharacterVoiceSortEnum[\"UpdatedAt\"] = \"UPDATED_AT\";\n})(CharacterVoiceSortEnum || (CharacterVoiceSortEnum = {}));\nvar CommentLikeSortEnum;\n(function(CommentLikeSortEnum) {\n    CommentLikeSortEnum[\"CreatedAt\"] = \"CREATED_AT\";\n    CommentLikeSortEnum[\"Following\"] = \"FOLLOWING\";\n})(CommentLikeSortEnum || (CommentLikeSortEnum = {}));\nvar CommentSortEnum;\n(function(CommentSortEnum) {\n    CommentSortEnum[\"CreatedAt\"] = \"CREATED_AT\";\n    CommentSortEnum[\"Following\"] = \"FOLLOWING\";\n    CommentSortEnum[\"LikesCount\"] = \"LIKES_COUNT\";\n})(CommentSortEnum || (CommentSortEnum = {}));\nvar EpisodeSortEnum;\n(function(EpisodeSortEnum) {\n    EpisodeSortEnum[\"CreatedAt\"] = \"CREATED_AT\";\n    EpisodeSortEnum[\"Number\"] = \"NUMBER\";\n    EpisodeSortEnum[\"UpdatedAt\"] = \"UPDATED_AT\";\n})(EpisodeSortEnum || (EpisodeSortEnum = {}));\nvar FollowSortEnum;\n(function(FollowSortEnum) {\n    FollowSortEnum[\"CreatedAt\"] = \"CREATED_AT\";\n    FollowSortEnum[\"FollowingFollowed\"] = \"FOLLOWING_FOLLOWED\";\n    FollowSortEnum[\"FollowingFollower\"] = \"FOLLOWING_FOLLOWER\";\n})(FollowSortEnum || (FollowSortEnum = {}));\nvar InstallmentSortEnum;\n(function(InstallmentSortEnum) {\n    InstallmentSortEnum[\"AlternativeOrder\"] = \"ALTERNATIVE_ORDER\";\n    InstallmentSortEnum[\"ReleaseOrder\"] = \"RELEASE_ORDER\";\n})(InstallmentSortEnum || (InstallmentSortEnum = {}));\nvar InstallmentTagEnum;\n(function(InstallmentTagEnum) {\n    InstallmentTagEnum[/** Same universe/world/reality/timeline, completely different characters. */ \"AlternateSetting\"] = \"ALTERNATE_SETTING\";\n    InstallmentTagEnum[/** Same setting, same characters, story is told differently. */ \"AlternateVersion\"] = \"ALTERNATE_VERSION\";\n    InstallmentTagEnum[/** Characters from different media meet in the same story. */ \"Crossover\"] = \"CROSSOVER\";\n    InstallmentTagEnum[/** The main story. */ \"MainStory\"] = \"MAIN_STORY\";\n    InstallmentTagEnum[/** Takes place sometime during the main storyline. */ \"SideStory\"] = \"SIDE_STORY\";\n    InstallmentTagEnum[/** Uses characters of a different series, but is not an alternate setting or story. */ \"Spinoff\"] = \"SPINOFF\";\n})(InstallmentTagEnum || (InstallmentTagEnum = {}));\nvar LibraryEntryStatusEnum;\n(function(LibraryEntryStatusEnum) {\n    LibraryEntryStatusEnum[/** The user completed this media. */ \"Completed\"] = \"COMPLETED\";\n    LibraryEntryStatusEnum[/** The user is currently reading or watching this media. */ \"Current\"] = \"CURRENT\";\n    LibraryEntryStatusEnum[/** The user started but chose not to finish this media. */ \"Dropped\"] = \"DROPPED\";\n    LibraryEntryStatusEnum[/** The user started but paused reading or watching this media. */ \"OnHold\"] = \"ON_HOLD\";\n    LibraryEntryStatusEnum[/** The user plans to read or watch this media in future. */ \"Planned\"] = \"PLANNED\";\n})(LibraryEntryStatusEnum || (LibraryEntryStatusEnum = {}));\nvar LibraryEventKindEnum;\n(function(LibraryEventKindEnum) {\n    LibraryEventKindEnum[/** Notes were added/updated. */ \"Annotated\"] = \"ANNOTATED\";\n    LibraryEventKindEnum[/** Progress or Time Spent was added/updated. */ \"Progressed\"] = \"PROGRESSED\";\n    LibraryEventKindEnum[/** Rating was added/updated. */ \"Rated\"] = \"RATED\";\n    LibraryEventKindEnum[/** Reaction was added/updated. */ \"Reacted\"] = \"REACTED\";\n    LibraryEventKindEnum[/** Status or Reconsuming was added/updated. */ \"Updated\"] = \"UPDATED\";\n})(LibraryEventKindEnum || (LibraryEventKindEnum = {}));\nvar LibraryEventSortEnum;\n(function(LibraryEventSortEnum) {\n    LibraryEventSortEnum[\"CreatedAt\"] = \"CREATED_AT\";\n    LibraryEventSortEnum[\"UpdatedAt\"] = \"UPDATED_AT\";\n})(LibraryEventSortEnum || (LibraryEventSortEnum = {}));\nvar LockedReasonEnum;\n(function(LockedReasonEnum) {\n    LockedReasonEnum[\"Closed\"] = \"CLOSED\";\n    LockedReasonEnum[\"Spam\"] = \"SPAM\";\n    LockedReasonEnum[\"TooHeated\"] = \"TOO_HEATED\";\n})(LockedReasonEnum || (LockedReasonEnum = {}));\nvar MangaSubtypeEnum;\n(function(MangaSubtypeEnum) {\n    MangaSubtypeEnum[/** Self published work. */ \"Doujin\"] = \"DOUJIN\";\n    MangaSubtypeEnum[\"Manga\"] = \"MANGA\";\n    MangaSubtypeEnum[/** Chinese comics produced in China and in the Greater China region. */ \"Manhua\"] = \"MANHUA\";\n    MangaSubtypeEnum[/** A style of South Korean comic books and graphic novels */ \"Manhwa\"] = \"MANHWA\";\n    MangaSubtypeEnum[\"Novel\"] = \"NOVEL\";\n    MangaSubtypeEnum[/** Original English Language. */ \"Oel\"] = \"OEL\";\n    MangaSubtypeEnum[\"Oneshot\"] = \"ONESHOT\";\n})(MangaSubtypeEnum || (MangaSubtypeEnum = {}));\nvar MappingExternalSiteEnum;\n(function(MappingExternalSiteEnum) {\n    MappingExternalSiteEnum[\"Anidb\"] = \"ANIDB\";\n    MappingExternalSiteEnum[\"AnilistAnime\"] = \"ANILIST_ANIME\";\n    MappingExternalSiteEnum[\"AnilistManga\"] = \"ANILIST_MANGA\";\n    MappingExternalSiteEnum[\"Animenewsnetwork\"] = \"ANIMENEWSNETWORK\";\n    MappingExternalSiteEnum[\"Aozora\"] = \"AOZORA\";\n    MappingExternalSiteEnum[\"Hulu\"] = \"HULU\";\n    MappingExternalSiteEnum[\"ImdbEpisodes\"] = \"IMDB_EPISODES\";\n    MappingExternalSiteEnum[\"Mangaupdates\"] = \"MANGAUPDATES\";\n    MappingExternalSiteEnum[\"MyanimelistAnime\"] = \"MYANIMELIST_ANIME\";\n    MappingExternalSiteEnum[\"MyanimelistCharacters\"] = \"MYANIMELIST_CHARACTERS\";\n    MappingExternalSiteEnum[\"MyanimelistManga\"] = \"MYANIMELIST_MANGA\";\n    MappingExternalSiteEnum[\"MyanimelistPeople\"] = \"MYANIMELIST_PEOPLE\";\n    MappingExternalSiteEnum[\"MyanimelistProducers\"] = \"MYANIMELIST_PRODUCERS\";\n    MappingExternalSiteEnum[\"Mydramalist\"] = \"MYDRAMALIST\";\n    MappingExternalSiteEnum[\"Thetvdb\"] = \"THETVDB\";\n    MappingExternalSiteEnum[\"ThetvdbSeason\"] = \"THETVDB_SEASON\";\n    MappingExternalSiteEnum[\"ThetvdbSeries\"] = \"THETVDB_SERIES\";\n    MappingExternalSiteEnum[\"Trakt\"] = \"TRAKT\";\n})(MappingExternalSiteEnum || (MappingExternalSiteEnum = {}));\nvar MappingItemEnum;\n(function(MappingItemEnum) {\n    MappingItemEnum[\"Anime\"] = \"ANIME\";\n    MappingItemEnum[\"Category\"] = \"CATEGORY\";\n    MappingItemEnum[\"Character\"] = \"CHARACTER\";\n    MappingItemEnum[\"Episode\"] = \"EPISODE\";\n    MappingItemEnum[\"Manga\"] = \"MANGA\";\n    MappingItemEnum[\"Person\"] = \"PERSON\";\n    MappingItemEnum[\"Producer\"] = \"PRODUCER\";\n})(MappingItemEnum || (MappingItemEnum = {}));\nvar MediaCategorySortEnum;\n(function(MediaCategorySortEnum) {\n    MediaCategorySortEnum[\"Ancestry\"] = \"ANCESTRY\";\n    MediaCategorySortEnum[\"CreatedAt\"] = \"CREATED_AT\";\n})(MediaCategorySortEnum || (MediaCategorySortEnum = {}));\nvar MediaCharacterSortEnum;\n(function(MediaCharacterSortEnum) {\n    MediaCharacterSortEnum[\"CreatedAt\"] = \"CREATED_AT\";\n    MediaCharacterSortEnum[\"Role\"] = \"ROLE\";\n    MediaCharacterSortEnum[\"UpdatedAt\"] = \"UPDATED_AT\";\n})(MediaCharacterSortEnum || (MediaCharacterSortEnum = {}));\nvar MediaProductionRoleEnum;\n(function(MediaProductionRoleEnum) {\n    MediaProductionRoleEnum[\"Licensor\"] = \"LICENSOR\";\n    MediaProductionRoleEnum[\"Producer\"] = \"PRODUCER\";\n    MediaProductionRoleEnum[\"Serialization\"] = \"SERIALIZATION\";\n    MediaProductionRoleEnum[\"Studio\"] = \"STUDIO\";\n})(MediaProductionRoleEnum || (MediaProductionRoleEnum = {}));\nvar MediaReactionSortEnum;\n(function(MediaReactionSortEnum) {\n    MediaReactionSortEnum[\"CreatedAt\"] = \"CREATED_AT\";\n    MediaReactionSortEnum[\"UpdatedAt\"] = \"UPDATED_AT\";\n    MediaReactionSortEnum[\"UpVotesCount\"] = \"UP_VOTES_COUNT\";\n})(MediaReactionSortEnum || (MediaReactionSortEnum = {}));\nvar MediaReactionVoteSortEnum;\n(function(MediaReactionVoteSortEnum) {\n    MediaReactionVoteSortEnum[\"CreatedAt\"] = \"CREATED_AT\";\n    MediaReactionVoteSortEnum[\"Following\"] = \"FOLLOWING\";\n})(MediaReactionVoteSortEnum || (MediaReactionVoteSortEnum = {}));\nvar MediaTypeEnum;\n(function(MediaTypeEnum) {\n    MediaTypeEnum[\"Anime\"] = \"ANIME\";\n    MediaTypeEnum[\"Manga\"] = \"MANGA\";\n})(MediaTypeEnum || (MediaTypeEnum = {}));\nvar PostLikeSortEnum;\n(function(PostLikeSortEnum) {\n    PostLikeSortEnum[\"CreatedAt\"] = \"CREATED_AT\";\n    PostLikeSortEnum[\"Following\"] = \"FOLLOWING\";\n})(PostLikeSortEnum || (PostLikeSortEnum = {}));\nvar PostSortEnum;\n(function(PostSortEnum) {\n    PostSortEnum[\"CreatedAt\"] = \"CREATED_AT\";\n})(PostSortEnum || (PostSortEnum = {}));\nvar ProTierEnum;\n(function(ProTierEnum) {\n    ProTierEnum[/**\n   * Aozora Pro (only hides ads)\n   * @deprecated No longer for sale\n   */ \"AoPro\"] = \"AO_PRO\";\n    ProTierEnum[/**\n   * Aozora Pro+ (only hides ads)\n   * @deprecated No longer for sale\n   */ \"AoProPlus\"] = \"AO_PRO_PLUS\";\n    ProTierEnum[/** Top tier of Kitsu Pro */ \"Patron\"] = \"PATRON\";\n    ProTierEnum[/** Basic tier of Kitsu Pro */ \"Pro\"] = \"PRO\";\n})(ProTierEnum || (ProTierEnum = {}));\nvar RatingSystemEnum;\n(function(RatingSystemEnum) {\n    RatingSystemEnum[/** 1-20 in increments of 1 displayed as 1-10 in 0.5 increments */ \"Advanced\"] = \"ADVANCED\";\n    RatingSystemEnum[/** 1-20 in increments of 2 displayed as 5 stars in 0.5 star increments */ \"Regular\"] = \"REGULAR\";\n    RatingSystemEnum[/** 1-20 displayed as 4 smileys - Awful (1), Meh (8), Good (14) and Great (20) */ \"Simple\"] = \"SIMPLE\";\n})(RatingSystemEnum || (RatingSystemEnum = {}));\nvar RecurringBillingServiceEnum;\n(function(RecurringBillingServiceEnum) {\n    RecurringBillingServiceEnum[/** Billed through Apple In-App Subscription */ \"Apple\"] = \"APPLE\";\n    RecurringBillingServiceEnum[/** Billed through Google Play Subscription */ \"GooglePlay\"] = \"GOOGLE_PLAY\";\n    RecurringBillingServiceEnum[/** Bill a PayPal account */ \"Paypal\"] = \"PAYPAL\";\n    RecurringBillingServiceEnum[/** Bill a credit card via Stripe */ \"Stripe\"] = \"STRIPE\";\n})(RecurringBillingServiceEnum || (RecurringBillingServiceEnum = {}));\nvar ReleaseSeasonEnum;\n(function(ReleaseSeasonEnum) {\n    ReleaseSeasonEnum[/** Released during the Fall season */ \"Fall\"] = \"FALL\";\n    ReleaseSeasonEnum[/** Released during the Spring season */ \"Spring\"] = \"SPRING\";\n    ReleaseSeasonEnum[/** Released during the Summer season */ \"Summer\"] = \"SUMMER\";\n    ReleaseSeasonEnum[/** Released during the Winter season */ \"Winter\"] = \"WINTER\";\n})(ReleaseSeasonEnum || (ReleaseSeasonEnum = {}));\nvar ReleaseStatusEnum;\n(function(ReleaseStatusEnum) {\n    ReleaseStatusEnum[/** This media is currently releasing */ \"Current\"] = \"CURRENT\";\n    ReleaseStatusEnum[/** This media is no longer releasing */ \"Finished\"] = \"FINISHED\";\n    ReleaseStatusEnum[/** The release date has not been announced yet */ \"Tba\"] = \"TBA\";\n    ReleaseStatusEnum[/** This media is not released yet */ \"Unreleased\"] = \"UNRELEASED\";\n    ReleaseStatusEnum[/** This media is releasing soon */ \"Upcoming\"] = \"UPCOMING\";\n})(ReleaseStatusEnum || (ReleaseStatusEnum = {}));\nvar ReportReasonEnum;\n(function(ReportReasonEnum) {\n    ReportReasonEnum[/** No bulli! */ \"Bullying\"] = \"BULLYING\";\n    ReportReasonEnum[/** Not Safe For Work */ \"Nsfw\"] = \"NSFW\";\n    ReportReasonEnum[\"Offensive\"] = \"OFFENSIVE\";\n    ReportReasonEnum[\"Other\"] = \"OTHER\";\n    ReportReasonEnum[\"Spam\"] = \"SPAM\";\n    ReportReasonEnum[\"Spoiler\"] = \"SPOILER\";\n})(ReportReasonEnum || (ReportReasonEnum = {}));\nvar ReportStatusEnum;\n(function(ReportStatusEnum) {\n    ReportStatusEnum[\"Declined\"] = \"DECLINED\";\n    ReportStatusEnum[\"Reported\"] = \"REPORTED\";\n    ReportStatusEnum[\"Resolved\"] = \"RESOLVED\";\n})(ReportStatusEnum || (ReportStatusEnum = {}));\nvar SitePermissionEnum;\n(function(SitePermissionEnum) {\n    SitePermissionEnum[/** Administrator/staff member of Kitsu */ \"Admin\"] = \"ADMIN\";\n    SitePermissionEnum[/** Moderator of community behavior */ \"CommunityMod\"] = \"COMMUNITY_MOD\";\n    SitePermissionEnum[/** Maintainer of the Kitsu media database */ \"DatabaseMod\"] = \"DATABASE_MOD\";\n})(SitePermissionEnum || (SitePermissionEnum = {}));\nvar SortDirection;\n(function(SortDirection) {\n    SortDirection[\"Ascending\"] = \"ASCENDING\";\n    SortDirection[\"Descending\"] = \"DESCENDING\";\n})(SortDirection || (SortDirection = {}));\nvar TitleLanguagePreferenceEnum;\n(function(TitleLanguagePreferenceEnum) {\n    TitleLanguagePreferenceEnum[/** Prefer the most commonly-used title for media */ \"Canonical\"] = \"CANONICAL\";\n    TitleLanguagePreferenceEnum[/** Prefer the localized title for media */ \"Localized\"] = \"LOCALIZED\";\n    TitleLanguagePreferenceEnum[/** Prefer the romanized title for media */ \"Romanized\"] = \"ROMANIZED\";\n})(TitleLanguagePreferenceEnum || (TitleLanguagePreferenceEnum = {}));\nvar WikiSubmissionSortEnum;\n(function(WikiSubmissionSortEnum) {\n    WikiSubmissionSortEnum[\"CreatedAt\"] = \"CREATED_AT\";\n    WikiSubmissionSortEnum[\"UpdatedAt\"] = \"UPDATED_AT\";\n})(WikiSubmissionSortEnum || (WikiSubmissionSortEnum = {}));\nvar WikiSubmissionStatusEnum;\n(function(WikiSubmissionStatusEnum) {\n    WikiSubmissionStatusEnum[\"Approved\"] = \"APPROVED\";\n    WikiSubmissionStatusEnum[\"Draft\"] = \"DRAFT\";\n    WikiSubmissionStatusEnum[\"Pending\"] = \"PENDING\";\n    WikiSubmissionStatusEnum[\"Rejected\"] = \"REJECTED\";\n})(WikiSubmissionStatusEnum || (WikiSubmissionStatusEnum = {}));\nconst EpisodeInfoFragmentDoc = (graphql_tag__WEBPACK_IMPORTED_MODULE_0___default())`\n  fragment EpisodeInfo on Episode {\n    number\n    titles {\n      canonical\n    }\n    thumbnail {\n      original {\n        url\n      }\n    }\n  }\n`;\nconst EpisodesListFragmentDoc = (graphql_tag__WEBPACK_IMPORTED_MODULE_0___default())`\n  fragment EpisodesList on Anime {\n    episodeCount\n    episodes(first: $first) {\n      nodes {\n        ...EpisodeInfo\n      }\n    }\n  }\n  ${EpisodeInfoFragmentDoc}\n`;\nconst GetAnimesKitsuDocument = (graphql_tag__WEBPACK_IMPORTED_MODULE_0___default())`\n  query getAnimesKitsu($first: Int, $title: String!) {\n    searchAnimeByTitle(title: $title, first: 5) {\n      animes: nodes {\n        id\n        season\n        startDate\n        ...EpisodesList\n      }\n    }\n  }\n  ${EpisodesListFragmentDoc}\n`;\nconst GetEpisodeKitsuDocument = (graphql_tag__WEBPACK_IMPORTED_MODULE_0___default())`\n  query getEpisodeKitsu($id: ID!, $first: Int) {\n    findAnimeById(id: $id) {\n      ...EpisodesList\n    }\n  }\n  ${EpisodesListFragmentDoc}\n`;\nconst defaultWrapper = (action, _operationName, _operationType)=>action();\nfunction getSdk(client, withWrapper = defaultWrapper) {\n    return {\n        getAnimesKitsu (variables, requestHeaders) {\n            return withWrapper((wrappedRequestHeaders)=>client.request(GetAnimesKitsuDocument, variables, {\n                    ...requestHeaders,\n                    ...wrappedRequestHeaders\n                }), \"getAnimesKitsu\", \"query\");\n        },\n        getEpisodeKitsu (variables, requestHeaders) {\n            return withWrapper((wrappedRequestHeaders)=>client.request(GetEpisodeKitsuDocument, variables, {\n                    ...requestHeaders,\n                    ...wrappedRequestHeaders\n                }), \"getEpisodeKitsu\", \"query\");\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/generated/kitsu.ts\n");

/***/ }),

/***/ "(api)/./src/lib/api.ts":
/*!************************!*\
  !*** ./src/lib/api.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"animePage\": () => (/* binding */ animePage),\n/* harmony export */   \"getAnimeBanner\": () => (/* binding */ getAnimeBanner),\n/* harmony export */   \"getAnimeByIds\": () => (/* binding */ getAnimeByIds),\n/* harmony export */   \"getAnimeInfo\": () => (/* binding */ getAnimeInfo),\n/* harmony export */   \"getAnimeTitle\": () => (/* binding */ getAnimeTitle),\n/* harmony export */   \"getAnimesKitsu\": () => (/* binding */ getAnimesKitsu),\n/* harmony export */   \"getEpisodeKitsu\": () => (/* binding */ getEpisodeKitsu),\n/* harmony export */   \"getKitsuEpisodes\": () => (/* binding */ getKitsuEpisodes),\n/* harmony export */   \"getList\": () => (/* binding */ getList),\n/* harmony export */   \"getPopularBanner\": () => (/* binding */ getPopularBanner),\n/* harmony export */   \"indexPage\": () => (/* binding */ indexPage),\n/* harmony export */   \"searchAnime\": () => (/* binding */ searchAnime),\n/* harmony export */   \"searchGenre\": () => (/* binding */ searchGenre),\n/* harmony export */   \"watchPage\": () => (/* binding */ watchPage)\n/* harmony export */ });\n/* harmony import */ var graphql_request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql-request */ \"graphql-request\");\n/* harmony import */ var graphql_request__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(graphql_request__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _generated_aniList__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @generated/aniList */ \"(api)/./src/generated/aniList.ts\");\n/* harmony import */ var _generated_kitsu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @generated/kitsu */ \"(api)/./src/generated/kitsu.ts\");\n/* harmony import */ var _lib_constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @lib/constants */ \"(api)/./src/lib/constants.ts\");\n\n\n\n\nconst aniListClient = new graphql_request__WEBPACK_IMPORTED_MODULE_0__.GraphQLClient(_lib_constants__WEBPACK_IMPORTED_MODULE_3__.aniListEndpoint, {\n    headers: {}\n});\nconst kitsuClient = new graphql_request__WEBPACK_IMPORTED_MODULE_0__.GraphQLClient(_lib_constants__WEBPACK_IMPORTED_MODULE_3__.kitsuEndpoint, {\n    headers: {}\n});\nconst { indexPage , animePage , getList , searchAnime , getAnimeInfo , getPopularBanner , getAnimeBanner , getAnimeTitle , searchGenre , watchPage , getAnimeByIds ,  } = (0,_generated_aniList__WEBPACK_IMPORTED_MODULE_1__.getSdk)(aniListClient);\n// kitsu middleware to ignore error fields\nconst kitsuMiddleware = async (action)=>{\n    let result = {};\n    try {\n        result = await action();\n    } catch (err) {\n        if (!(err instanceof graphql_request__WEBPACK_IMPORTED_MODULE_0__.ClientError)) throw err;\n        result = err.response.data;\n    }\n    return result;\n};\nconst { getAnimesKitsu , getEpisodeKitsu  } = (0,_generated_kitsu__WEBPACK_IMPORTED_MODULE_2__.getSdk)(kitsuClient, kitsuMiddleware);\n/**\n * @example 'naruto', startDate: '2019', season: 'WINTER'\n */ const getKitsuEpisodes = async (title, season, startDate)=>{\n    if (!title) {\n        return {\n            episodeCount: 0,\n            episodes: {\n                nodes: []\n            }\n        };\n    }\n    const kitsuAnimes = await getAnimesKitsu({\n        title,\n        first: 8\n    });\n    let kitsuAnime = kitsuAnimes.searchAnimeByTitle.animes.filter((r)=>{\n        // return if the anime doesn't exists\n        if (!r) return false;\n        // return false if the startDate doesn't exist\n        if (!r.startDate) return false;\n        // only return false if the season exists and doesn't\n        // match with the kitsu one\n        if (r.season !== season && season) return false;\n        return r.startDate.trim().split(\"-\")[0] === startDate.toString();\n    })[0];\n    if (kitsuAnime === undefined) {\n        kitsuAnime = {\n            id: \"-1\",\n            episodeCount: 0,\n            episodes: {\n                nodes: []\n            }\n        };\n    }\n    if (kitsuAnime.episodeCount === null) {\n        kitsuAnime.episodeCount = kitsuAnime.episodes.nodes.length;\n    }\n    return kitsuAnime;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvbGliL2FwaS50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTZEO0FBRVA7QUFLNUI7QUFDc0M7QUFFaEUsTUFBTU8sYUFBYSxHQUFHLElBQUlOLDBEQUFhLENBQUNJLDJEQUFlLEVBQUU7SUFDdkRHLE9BQU8sRUFBRSxFQUFFO0NBQ1osQ0FBQztBQUVGLE1BQU1DLFdBQVcsR0FBRyxJQUFJUiwwREFBYSxDQUFDSyx5REFBYSxFQUFFO0lBQ25ERSxPQUFPLEVBQUUsRUFBRTtDQUNaLENBQUM7QUFFSyxNQUFNLEVBQ1hFLFNBQVMsR0FDVEMsU0FBUyxHQUNUQyxPQUFPLEdBQ1BDLFdBQVcsR0FDWEMsWUFBWSxHQUNaQyxnQkFBZ0IsR0FDaEJDLGNBQWMsR0FDZEMsYUFBYSxHQUNiQyxXQUFXLEdBQ1hDLFNBQVMsR0FDVEMsYUFBYSxLQUNkLEdBQUdqQiwwREFBTSxDQUFDSSxhQUFhLENBQUMsQ0FBQztBQUUxQiwwQ0FBMEM7QUFDMUMsTUFBTWMsZUFBZSxHQUF1QixPQUFPQyxNQUFNLEdBQUs7SUFDNUQsSUFBSUMsTUFBTSxHQUFRLEVBQUU7SUFFcEIsSUFBSTtRQUNGQSxNQUFNLEdBQUcsTUFBTUQsTUFBTSxFQUFFLENBQUM7S0FDekIsQ0FBQyxPQUFPRSxHQUFHLEVBQUU7UUFDWixJQUFJLENBQUMsQ0FBQ0EsR0FBRyxZQUFZeEIsd0RBQVcsQ0FBQyxFQUFFLE1BQU13QixHQUFHLENBQUM7UUFFN0NELE1BQU0sR0FBR0MsR0FBRyxDQUFDQyxRQUFRLENBQUNDLElBQUksQ0FBQztLQUM1QjtJQUVELE9BQU9ILE1BQU0sQ0FBQztDQUNmO0FBRU0sTUFBTSxFQUFFSSxjQUFjLEdBQUVDLGVBQWUsR0FBRSxHQUFHeEIsd0RBQVEsQ0FDekRLLFdBQVcsRUFDWFksZUFBZSxDQUNoQixDQUFDO0FBRUY7O0dBRUcsQ0FDSSxNQUFNUSxnQkFBZ0IsR0FBRyxPQUM5QkMsS0FBb0IsRUFDcEJDLE1BQWMsRUFDZEMsU0FBaUIsR0FDd0I7SUFDekMsSUFBSSxDQUFDRixLQUFLLEVBQUU7UUFDVixPQUFPO1lBQ0xHLFlBQVksRUFBRSxDQUFDO1lBQ2ZDLFFBQVEsRUFBRTtnQkFDUkMsS0FBSyxFQUFFLEVBQUU7YUFDVjtTQUNGLENBQUM7S0FDSDtJQUVELE1BQU1DLFdBQVcsR0FBRyxNQUFNVCxjQUFjLENBQUM7UUFDdkNHLEtBQUs7UUFDTE8sS0FBSyxFQUFFLENBQUM7S0FDVCxDQUFDO0lBRUYsSUFBSUMsVUFBVSxHQUFHRixXQUFXLENBQUNHLGtCQUFrQixDQUFDQyxNQUFNLENBQUNDLE1BQU0sQ0FBQyxDQUFDQyxDQUFDLEdBQUs7UUFDbkUscUNBQXFDO1FBQ3JDLElBQUksQ0FBQ0EsQ0FBQyxFQUFFLE9BQU8sS0FBSyxDQUFDO1FBRXJCLDhDQUE4QztRQUM5QyxJQUFJLENBQUNBLENBQUMsQ0FBQ1YsU0FBUyxFQUFFLE9BQU8sS0FBSyxDQUFDO1FBRS9CLHFEQUFxRDtRQUNyRCwyQkFBMkI7UUFDM0IsSUFBSVUsQ0FBQyxDQUFDWCxNQUFNLEtBQUtBLE1BQU0sSUFBSUEsTUFBTSxFQUFFLE9BQU8sS0FBSyxDQUFDO1FBRWhELE9BQU9XLENBQUMsQ0FBQ1YsU0FBUyxDQUFDVyxJQUFJLEVBQUUsQ0FBQ0MsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLWixTQUFTLENBQUNhLFFBQVEsRUFBRSxDQUFDO0tBQ2xFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFTCxJQUFJUCxVQUFVLEtBQUtRLFNBQVMsRUFBRTtRQUM1QlIsVUFBVSxHQUFHO1lBQ1hTLEVBQUUsRUFBRSxJQUFJO1lBQ1JkLFlBQVksRUFBRSxDQUFDO1lBQ2ZDLFFBQVEsRUFBRTtnQkFDUkMsS0FBSyxFQUFFLEVBQUU7YUFDVjtTQUNGLENBQUM7S0FDSDtJQUVELElBQUlHLFVBQVUsQ0FBQ0wsWUFBWSxLQUFLLElBQUksRUFBRTtRQUNwQ0ssVUFBVSxDQUFDTCxZQUFZLEdBQUdLLFVBQVUsQ0FBQ0osUUFBUSxDQUFDQyxLQUFLLENBQUNhLE1BQU0sQ0FBQztLQUM1RDtJQUVELE9BQU9WLFVBQVUsQ0FBQztDQUNuQixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW5pbWVmbGl4Ly4vc3JjL2xpYi9hcGkudHM/MmZhYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDbGllbnRFcnJvciwgR3JhcGhRTENsaWVudCB9IGZyb20gJ2dyYXBocWwtcmVxdWVzdCc7XG5cbmltcG9ydCB7IGdldFNkayBhcyBhbmlTZGsgfSBmcm9tICdAZ2VuZXJhdGVkL2FuaUxpc3QnO1xuaW1wb3J0IHtcbiAgZ2V0U2RrIGFzIGtpdHN1U2RrLFxuICBFcGlzb2Rlc0xpc3RGcmFnbWVudCxcbiAgU2RrRnVuY3Rpb25XcmFwcGVyLFxufSBmcm9tICdAZ2VuZXJhdGVkL2tpdHN1JztcbmltcG9ydCB7IGFuaUxpc3RFbmRwb2ludCwga2l0c3VFbmRwb2ludCB9IGZyb20gJ0BsaWIvY29uc3RhbnRzJztcblxuY29uc3QgYW5pTGlzdENsaWVudCA9IG5ldyBHcmFwaFFMQ2xpZW50KGFuaUxpc3RFbmRwb2ludCwge1xuICBoZWFkZXJzOiB7fSxcbn0pO1xuXG5jb25zdCBraXRzdUNsaWVudCA9IG5ldyBHcmFwaFFMQ2xpZW50KGtpdHN1RW5kcG9pbnQsIHtcbiAgaGVhZGVyczoge30sXG59KTtcblxuZXhwb3J0IGNvbnN0IHtcbiAgaW5kZXhQYWdlLFxuICBhbmltZVBhZ2UsXG4gIGdldExpc3QsXG4gIHNlYXJjaEFuaW1lLFxuICBnZXRBbmltZUluZm8sXG4gIGdldFBvcHVsYXJCYW5uZXIsXG4gIGdldEFuaW1lQmFubmVyLFxuICBnZXRBbmltZVRpdGxlLFxuICBzZWFyY2hHZW5yZSxcbiAgd2F0Y2hQYWdlLFxuICBnZXRBbmltZUJ5SWRzLFxufSA9IGFuaVNkayhhbmlMaXN0Q2xpZW50KTtcblxuLy8ga2l0c3UgbWlkZGxld2FyZSB0byBpZ25vcmUgZXJyb3IgZmllbGRzXG5jb25zdCBraXRzdU1pZGRsZXdhcmU6IFNka0Z1bmN0aW9uV3JhcHBlciA9IGFzeW5jIChhY3Rpb24pID0+IHtcbiAgbGV0IHJlc3VsdDogYW55ID0ge307XG5cbiAgdHJ5IHtcbiAgICByZXN1bHQgPSBhd2FpdCBhY3Rpb24oKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgaWYgKCEoZXJyIGluc3RhbmNlb2YgQ2xpZW50RXJyb3IpKSB0aHJvdyBlcnI7XG5cbiAgICByZXN1bHQgPSBlcnIucmVzcG9uc2UuZGF0YTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5leHBvcnQgY29uc3QgeyBnZXRBbmltZXNLaXRzdSwgZ2V0RXBpc29kZUtpdHN1IH0gPSBraXRzdVNkayhcbiAga2l0c3VDbGllbnQsXG4gIGtpdHN1TWlkZGxld2FyZVxuKTtcblxuLyoqXG4gKiBAZXhhbXBsZSAnbmFydXRvJywgc3RhcnREYXRlOiAnMjAxOScsIHNlYXNvbjogJ1dJTlRFUidcbiAqL1xuZXhwb3J0IGNvbnN0IGdldEtpdHN1RXBpc29kZXMgPSBhc3luYyAoXG4gIHRpdGxlOiBzdHJpbmcgfCBudWxsLFxuICBzZWFzb246IHN0cmluZyxcbiAgc3RhcnREYXRlOiBudW1iZXJcbik6IFByb21pc2U8RXBpc29kZXNMaXN0RnJhZ21lbnQgfCBudWxsPiA9PiB7XG4gIGlmICghdGl0bGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZXBpc29kZUNvdW50OiAwLFxuICAgICAgZXBpc29kZXM6IHtcbiAgICAgICAgbm9kZXM6IFtdLFxuICAgICAgfSxcbiAgICB9O1xuICB9XG5cbiAgY29uc3Qga2l0c3VBbmltZXMgPSBhd2FpdCBnZXRBbmltZXNLaXRzdSh7XG4gICAgdGl0bGUsXG4gICAgZmlyc3Q6IDgsXG4gIH0pO1xuXG4gIGxldCBraXRzdUFuaW1lID0ga2l0c3VBbmltZXMuc2VhcmNoQW5pbWVCeVRpdGxlLmFuaW1lcy5maWx0ZXIoKHIpID0+IHtcbiAgICAvLyByZXR1cm4gaWYgdGhlIGFuaW1lIGRvZXNuJ3QgZXhpc3RzXG4gICAgaWYgKCFyKSByZXR1cm4gZmFsc2U7XG5cbiAgICAvLyByZXR1cm4gZmFsc2UgaWYgdGhlIHN0YXJ0RGF0ZSBkb2Vzbid0IGV4aXN0XG4gICAgaWYgKCFyLnN0YXJ0RGF0ZSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgLy8gb25seSByZXR1cm4gZmFsc2UgaWYgdGhlIHNlYXNvbiBleGlzdHMgYW5kIGRvZXNuJ3RcbiAgICAvLyBtYXRjaCB3aXRoIHRoZSBraXRzdSBvbmVcbiAgICBpZiAoci5zZWFzb24gIT09IHNlYXNvbiAmJiBzZWFzb24pIHJldHVybiBmYWxzZTtcblxuICAgIHJldHVybiByLnN0YXJ0RGF0ZS50cmltKCkuc3BsaXQoJy0nKVswXSA9PT0gc3RhcnREYXRlLnRvU3RyaW5nKCk7XG4gIH0pWzBdO1xuXG4gIGlmIChraXRzdUFuaW1lID09PSB1bmRlZmluZWQpIHtcbiAgICBraXRzdUFuaW1lID0ge1xuICAgICAgaWQ6ICctMScsXG4gICAgICBlcGlzb2RlQ291bnQ6IDAsXG4gICAgICBlcGlzb2Rlczoge1xuICAgICAgICBub2RlczogW10sXG4gICAgICB9LFxuICAgIH07XG4gIH1cblxuICBpZiAoa2l0c3VBbmltZS5lcGlzb2RlQ291bnQgPT09IG51bGwpIHtcbiAgICBraXRzdUFuaW1lLmVwaXNvZGVDb3VudCA9IGtpdHN1QW5pbWUuZXBpc29kZXMubm9kZXMubGVuZ3RoO1xuICB9XG5cbiAgcmV0dXJuIGtpdHN1QW5pbWU7XG59O1xuIl0sIm5hbWVzIjpbIkNsaWVudEVycm9yIiwiR3JhcGhRTENsaWVudCIsImdldFNkayIsImFuaVNkayIsImtpdHN1U2RrIiwiYW5pTGlzdEVuZHBvaW50Iiwia2l0c3VFbmRwb2ludCIsImFuaUxpc3RDbGllbnQiLCJoZWFkZXJzIiwia2l0c3VDbGllbnQiLCJpbmRleFBhZ2UiLCJhbmltZVBhZ2UiLCJnZXRMaXN0Iiwic2VhcmNoQW5pbWUiLCJnZXRBbmltZUluZm8iLCJnZXRQb3B1bGFyQmFubmVyIiwiZ2V0QW5pbWVCYW5uZXIiLCJnZXRBbmltZVRpdGxlIiwic2VhcmNoR2VucmUiLCJ3YXRjaFBhZ2UiLCJnZXRBbmltZUJ5SWRzIiwia2l0c3VNaWRkbGV3YXJlIiwiYWN0aW9uIiwicmVzdWx0IiwiZXJyIiwicmVzcG9uc2UiLCJkYXRhIiwiZ2V0QW5pbWVzS2l0c3UiLCJnZXRFcGlzb2RlS2l0c3UiLCJnZXRLaXRzdUVwaXNvZGVzIiwidGl0bGUiLCJzZWFzb24iLCJzdGFydERhdGUiLCJlcGlzb2RlQ291bnQiLCJlcGlzb2RlcyIsIm5vZGVzIiwia2l0c3VBbmltZXMiLCJmaXJzdCIsImtpdHN1QW5pbWUiLCJzZWFyY2hBbmltZUJ5VGl0bGUiLCJhbmltZXMiLCJmaWx0ZXIiLCJyIiwidHJpbSIsInNwbGl0IiwidG9TdHJpbmciLCJ1bmRlZmluZWQiLCJpZCIsImxlbmd0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./src/lib/api.ts\n");

/***/ }),

/***/ "(api)/./src/lib/constants.ts":
/*!******************************!*\
  !*** ./src/lib/constants.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"aniListEndpoint\": () => (/* binding */ aniListEndpoint),\n/* harmony export */   \"kitsuEndpoint\": () => (/* binding */ kitsuEndpoint),\n/* harmony export */   \"proxyFreeUrls\": () => (/* binding */ proxyFreeUrls)\n/* harmony export */ });\nconst aniListEndpoint = \"https://graphql.anilist.co\";\nconst kitsuEndpoint = \"https://kitsu.io/api/graphql\";\nconst proxyFreeUrls = /(gogocdn\\.stream)|(manifest\\.prod\\.boltdns\\.net)/;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvbGliL2NvbnN0YW50cy50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBTyxNQUFNQSxlQUFlLEdBQUcsNEJBQTRCLENBQUM7QUFDckQsTUFBTUMsYUFBYSxHQUFHLDhCQUE4QixDQUFDO0FBRXJELE1BQU1DLGFBQWEscURBQXFELENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbmltZWZsaXgvLi9zcmMvbGliL2NvbnN0YW50cy50cz9mYmY5Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBhbmlMaXN0RW5kcG9pbnQgPSAnaHR0cHM6Ly9ncmFwaHFsLmFuaWxpc3QuY28nO1xuZXhwb3J0IGNvbnN0IGtpdHN1RW5kcG9pbnQgPSAnaHR0cHM6Ly9raXRzdS5pby9hcGkvZ3JhcGhxbCc7XG5cbmV4cG9ydCBjb25zdCBwcm94eUZyZWVVcmxzID0gLyhnb2dvY2RuXFwuc3RyZWFtKXwobWFuaWZlc3RcXC5wcm9kXFwuYm9sdGRuc1xcLm5ldCkvO1xuIl0sIm5hbWVzIjpbImFuaUxpc3RFbmRwb2ludCIsImtpdHN1RW5kcG9pbnQiLCJwcm94eUZyZWVVcmxzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./src/lib/constants.ts\n");

/***/ }),

/***/ "(api)/./src/lib/gogoanime.ts":
/*!******************************!*\
  !*** ./src/lib/gogoanime.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getAnime\": () => (/* binding */ getAnime),\n/* harmony export */   \"getAnimeSlug\": () => (/* binding */ getAnimeSlug)\n/* harmony export */ });\n/* harmony import */ var gogoanime_api_lib_anime_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gogoanime-api/lib/anime_parser */ \"(api)/./node_modules/gogoanime-api/lib/anime_parser.js\");\n/* harmony import */ var _lib_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @lib/api */ \"(api)/./src/lib/api.ts\");\n\n\nasync function getAnimeSlug(title, episode) {\n    var ref;\n    const emptyData = {\n        sub: {\n            Referer: \"\",\n            sources: []\n        },\n        dub: {\n            Referer: \"\",\n            sources: []\n        },\n        episodes: 0\n    };\n    if (!title || title === \"\") return emptyData;\n    const slug = title.replace(/[^0-9a-zA-Z]+/g, \" \");\n    const findAnime = await (0,gogoanime_api_lib_anime_parser__WEBPACK_IMPORTED_MODULE_0__.scrapeSearch)({\n        keyw: slug\n    });\n    if (findAnime.length === 0) return emptyData;\n    const gogoEpisodes = (await (0,gogoanime_api_lib_anime_parser__WEBPACK_IMPORTED_MODULE_0__.scrapeAnimeDetails)({\n        id: findAnime[0].animeId\n    })).episodesList;\n    const episodeSlug = (ref = gogoEpisodes[0]) === null || ref === void 0 ? void 0 : ref.episodeId.split(\"-episode\")[0];\n    // fetch animes dub and sub\n    const subAnime = (0,gogoanime_api_lib_anime_parser__WEBPACK_IMPORTED_MODULE_0__.scrapeMP4)({\n        id: `${episodeSlug}-episode-${episode}`\n    });\n    const dubAnime = (0,gogoanime_api_lib_anime_parser__WEBPACK_IMPORTED_MODULE_0__.scrapeMP4)({\n        id: `${episodeSlug.replace(/-movie$/, \"\")}-dub-episode-${episode}`\n    });\n    const [sub, dub] = await Promise.all([\n        subAnime,\n        dubAnime\n    ]);\n    sub.sources = sub.sources || [];\n    sub.sources_bk = sub.sources_bk || [];\n    dub.sources = dub.sources || [];\n    dub.sources_bk = dub.sources_bk || [];\n    return {\n        sub: {\n            Referer: sub.Referer,\n            sources: [\n                ...sub.sources,\n                ...sub.sources_bk\n            ]\n        },\n        dub: {\n            Referer: dub.Referer,\n            sources: [\n                ...dub.sources,\n                ...dub.sources_bk\n            ]\n        },\n        episodes: gogoEpisodes.length || null\n    };\n}\nasync function getAnime(id, episode) {\n    let { english , romaji  } = (await (0,_lib_api__WEBPACK_IMPORTED_MODULE_1__.getAnimeTitle)({\n        id\n    })).Media.title;\n    // ensure both of them don't have null value\n    english = english || romaji;\n    romaji = romaji || english;\n    // lower case both the titles\n    english = english.toLocaleLowerCase();\n    romaji = romaji.toLocaleLowerCase();\n    // if the titles are same run this function once\n    if (english === romaji) {\n        return getAnimeSlug(english, episode);\n    }\n    // get both romaji and english results\n    const romajiAnime = getAnimeSlug(romaji, episode);\n    const englishAnime = getAnimeSlug(english, episode);\n    // grab the one which has episodes key\n    const anime = await Promise.all([\n        englishAnime,\n        romajiAnime\n    ]).then((r)=>r[0].episodes > 0 ? r[0] : r[1]);\n    return anime;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvbGliL2dvZ29hbmltZS50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBSXdDO0FBR0M7QUFFbEMsZUFBZUksWUFBWSxDQUFDQyxLQUFhLEVBQUVDLE9BQWUsRUFBRTtRQXdCN0NDLEdBQWU7SUF2Qm5DLE1BQU1DLFNBQVMsR0FBRztRQUNoQkMsR0FBRyxFQUFFO1lBQ0hDLE9BQU8sRUFBRSxFQUFFO1lBQ1hDLE9BQU8sRUFBRSxFQUFFO1NBQ1o7UUFDREMsR0FBRyxFQUFFO1lBQ0hGLE9BQU8sRUFBRSxFQUFFO1lBQ1hDLE9BQU8sRUFBRSxFQUFFO1NBQ1o7UUFDREUsUUFBUSxFQUFFLENBQUM7S0FDWjtJQUVELElBQUksQ0FBQ1IsS0FBSyxJQUFJQSxLQUFLLEtBQUssRUFBRSxFQUFFLE9BQU9HLFNBQVMsQ0FBQztJQUU3QyxNQUFNTSxJQUFJLEdBQUdULEtBQUssQ0FBQ1UsT0FBTyxtQkFBbUIsR0FBRyxDQUFDO0lBRWpELE1BQU1DLFNBQVMsR0FBSSxNQUFNZiw0RUFBWSxDQUFDO1FBQUVnQixJQUFJLEVBQUVILElBQUk7S0FBRSxDQUFDO0lBRXJELElBQUlFLFNBQVMsQ0FBQ0UsTUFBTSxLQUFLLENBQUMsRUFBRSxPQUFPVixTQUFTLENBQUM7SUFFN0MsTUFBTUQsWUFBWSxHQUFHLENBQUMsTUFBTUwsa0ZBQWtCLENBQUM7UUFBRWlCLEVBQUUsRUFBRUgsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDSSxPQUFPO0tBQUUsQ0FBQyxDQUFDLENBQzFFQyxZQUFZO0lBRWYsTUFBTUMsV0FBVyxHQUFHZixDQUFBQSxHQUFlLEdBQWZBLFlBQVksQ0FBQyxDQUFDLENBQUMsY0FBZkEsR0FBZSxXQUFXLEdBQTFCQSxLQUFBQSxDQUEwQixHQUExQkEsR0FBZSxDQUFFZ0IsU0FBUyxDQUFDQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRW5FLDJCQUEyQjtJQUMzQixNQUFNQyxRQUFRLEdBQUd6Qix5RUFBUyxDQUFDO1FBQUVtQixFQUFFLEVBQUUsQ0FBQyxFQUFFRyxXQUFXLENBQUMsU0FBUyxFQUFFaEIsT0FBTyxDQUFDLENBQUM7S0FBRSxDQUFDO0lBQ3ZFLE1BQU1vQixRQUFRLEdBQUcxQix5RUFBUyxDQUFDO1FBQ3pCbUIsRUFBRSxFQUFFLENBQUMsRUFBRUcsV0FBVyxDQUFDUCxPQUFPLFlBQVksRUFBRSxDQUFDLENBQUMsYUFBYSxFQUFFVCxPQUFPLENBQUMsQ0FBQztLQUNuRSxDQUFDO0lBRUYsTUFBTSxDQUFDRyxHQUFHLEVBQUVHLEdBQUcsQ0FBQyxHQUFHLE1BQU1lLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDO1FBQUNILFFBQVE7UUFBRUMsUUFBUTtLQUFDLENBQUM7SUFFMURqQixHQUFHLENBQUNFLE9BQU8sR0FBR0YsR0FBRyxDQUFDRSxPQUFPLElBQUksRUFBRSxDQUFDO0lBQ2hDRixHQUFHLENBQUNvQixVQUFVLEdBQUdwQixHQUFHLENBQUNvQixVQUFVLElBQUksRUFBRSxDQUFDO0lBQ3RDakIsR0FBRyxDQUFDRCxPQUFPLEdBQUdDLEdBQUcsQ0FBQ0QsT0FBTyxJQUFJLEVBQUUsQ0FBQztJQUNoQ0MsR0FBRyxDQUFDaUIsVUFBVSxHQUFHakIsR0FBRyxDQUFDaUIsVUFBVSxJQUFJLEVBQUUsQ0FBQztJQUV0QyxPQUFPO1FBQ0xwQixHQUFHLEVBQUU7WUFDSEMsT0FBTyxFQUFFRCxHQUFHLENBQUNDLE9BQU87WUFDcEJDLE9BQU8sRUFBRTttQkFBSUYsR0FBRyxDQUFDRSxPQUFPO21CQUFLRixHQUFHLENBQUNvQixVQUFVO2FBQUM7U0FDN0M7UUFDRGpCLEdBQUcsRUFBRTtZQUNIRixPQUFPLEVBQUVFLEdBQUcsQ0FBQ0YsT0FBTztZQUNwQkMsT0FBTyxFQUFFO21CQUFJQyxHQUFHLENBQUNELE9BQU87bUJBQUtDLEdBQUcsQ0FBQ2lCLFVBQVU7YUFBQztTQUM3QztRQUNEaEIsUUFBUSxFQUFFTixZQUFZLENBQUNXLE1BQU0sSUFBSSxJQUFJO0tBQ3RDLENBQUM7Q0FDSDtBQUVNLGVBQWVZLFFBQVEsQ0FBQ1gsRUFBVSxFQUFFYixPQUFlLEVBQUU7SUFDMUQsSUFBSSxFQUFFeUIsT0FBTyxHQUFFQyxNQUFNLEdBQUUsR0FBRyxDQUFDLE1BQU03Qix1REFBYSxDQUFDO1FBQUVnQixFQUFFO0tBQUUsQ0FBQyxDQUFDLENBQUNjLEtBQUssQ0FBQzVCLEtBQUs7SUFFbkUsNENBQTRDO0lBQzVDMEIsT0FBTyxHQUFHQSxPQUFPLElBQUlDLE1BQU0sQ0FBQztJQUM1QkEsTUFBTSxHQUFHQSxNQUFNLElBQUlELE9BQU8sQ0FBQztJQUUzQiw2QkFBNkI7SUFDN0JBLE9BQU8sR0FBR0EsT0FBTyxDQUFDRyxpQkFBaUIsRUFBRSxDQUFDO0lBQ3RDRixNQUFNLEdBQUdBLE1BQU0sQ0FBQ0UsaUJBQWlCLEVBQUUsQ0FBQztJQUVwQyxnREFBZ0Q7SUFDaEQsSUFBSUgsT0FBTyxLQUFLQyxNQUFNLEVBQUU7UUFDdEIsT0FBTzVCLFlBQVksQ0FBQzJCLE9BQU8sRUFBRXpCLE9BQU8sQ0FBQyxDQUFDO0tBQ3ZDO0lBRUQsc0NBQXNDO0lBQ3RDLE1BQU02QixXQUFXLEdBQUcvQixZQUFZLENBQUM0QixNQUFNLEVBQUUxQixPQUFPLENBQUM7SUFDakQsTUFBTThCLFlBQVksR0FBR2hDLFlBQVksQ0FBQzJCLE9BQU8sRUFBRXpCLE9BQU8sQ0FBQztJQUVuRCxzQ0FBc0M7SUFDdEMsTUFBTStCLEtBQUssR0FBRyxNQUFNVixPQUFPLENBQUNDLEdBQUcsQ0FBQztRQUFDUSxZQUFZO1FBQUVELFdBQVc7S0FBQyxDQUFDLENBQUNHLElBQUksQ0FBQyxDQUFDQyxDQUFDLEdBQ2xFQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMxQixRQUFRLEdBQUcsQ0FBQyxHQUFHMEIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQ2hDO0lBRUQsT0FBT0YsS0FBSyxDQUFDO0NBQ2QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbmltZWZsaXgvLi9zcmMvbGliL2dvZ29hbmltZS50cz85NmMyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIHNjcmFwZU1QNCxcbiAgc2NyYXBlU2VhcmNoLFxuICBzY3JhcGVBbmltZURldGFpbHMsXG59IGZyb20gJ2dvZ29hbmltZS1hcGkvbGliL2FuaW1lX3BhcnNlcic7XG5pbXBvcnQgeyBBbmltZUxpc3QsIEdvZ29FcGlzb2RlIH0gZnJvbSAnZ29nb2FuaW1lLWFwaS9saWIvdHlwZXMnO1xuXG5pbXBvcnQgeyBnZXRBbmltZVRpdGxlIH0gZnJvbSAnQGxpYi9hcGknO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0QW5pbWVTbHVnKHRpdGxlOiBzdHJpbmcsIGVwaXNvZGU6IG51bWJlcikge1xuICBjb25zdCBlbXB0eURhdGEgPSB7XG4gICAgc3ViOiB7XG4gICAgICBSZWZlcmVyOiAnJyxcbiAgICAgIHNvdXJjZXM6IFtdLFxuICAgIH0sXG4gICAgZHViOiB7XG4gICAgICBSZWZlcmVyOiAnJyxcbiAgICAgIHNvdXJjZXM6IFtdLFxuICAgIH0sXG4gICAgZXBpc29kZXM6IDAsXG4gIH07XG5cbiAgaWYgKCF0aXRsZSB8fCB0aXRsZSA9PT0gJycpIHJldHVybiBlbXB0eURhdGE7XG5cbiAgY29uc3Qgc2x1ZyA9IHRpdGxlLnJlcGxhY2UoL1teMC05YS16QS1aXSsvZywgJyAnKTtcblxuICBjb25zdCBmaW5kQW5pbWUgPSAoYXdhaXQgc2NyYXBlU2VhcmNoKHsga2V5dzogc2x1ZyB9KSkgYXMgQW5pbWVMaXN0W107XG5cbiAgaWYgKGZpbmRBbmltZS5sZW5ndGggPT09IDApIHJldHVybiBlbXB0eURhdGE7XG5cbiAgY29uc3QgZ29nb0VwaXNvZGVzID0gKGF3YWl0IHNjcmFwZUFuaW1lRGV0YWlscyh7IGlkOiBmaW5kQW5pbWVbMF0uYW5pbWVJZCB9KSlcbiAgICAuZXBpc29kZXNMaXN0IGFzIEdvZ29FcGlzb2RlW107XG5cbiAgY29uc3QgZXBpc29kZVNsdWcgPSBnb2dvRXBpc29kZXNbMF0/LmVwaXNvZGVJZC5zcGxpdCgnLWVwaXNvZGUnKVswXTtcblxuICAvLyBmZXRjaCBhbmltZXMgZHViIGFuZCBzdWJcbiAgY29uc3Qgc3ViQW5pbWUgPSBzY3JhcGVNUDQoeyBpZDogYCR7ZXBpc29kZVNsdWd9LWVwaXNvZGUtJHtlcGlzb2RlfWAgfSk7XG4gIGNvbnN0IGR1YkFuaW1lID0gc2NyYXBlTVA0KHtcbiAgICBpZDogYCR7ZXBpc29kZVNsdWcucmVwbGFjZSgvLW1vdmllJC8sICcnKX0tZHViLWVwaXNvZGUtJHtlcGlzb2RlfWAsXG4gIH0pO1xuXG4gIGNvbnN0IFtzdWIsIGR1Yl0gPSBhd2FpdCBQcm9taXNlLmFsbChbc3ViQW5pbWUsIGR1YkFuaW1lXSk7XG5cbiAgc3ViLnNvdXJjZXMgPSBzdWIuc291cmNlcyB8fCBbXTtcbiAgc3ViLnNvdXJjZXNfYmsgPSBzdWIuc291cmNlc19iayB8fCBbXTtcbiAgZHViLnNvdXJjZXMgPSBkdWIuc291cmNlcyB8fCBbXTtcbiAgZHViLnNvdXJjZXNfYmsgPSBkdWIuc291cmNlc19iayB8fCBbXTtcblxuICByZXR1cm4ge1xuICAgIHN1Yjoge1xuICAgICAgUmVmZXJlcjogc3ViLlJlZmVyZXIsXG4gICAgICBzb3VyY2VzOiBbLi4uc3ViLnNvdXJjZXMsIC4uLnN1Yi5zb3VyY2VzX2JrXSxcbiAgICB9LFxuICAgIGR1Yjoge1xuICAgICAgUmVmZXJlcjogZHViLlJlZmVyZXIsXG4gICAgICBzb3VyY2VzOiBbLi4uZHViLnNvdXJjZXMsIC4uLmR1Yi5zb3VyY2VzX2JrXSxcbiAgICB9LFxuICAgIGVwaXNvZGVzOiBnb2dvRXBpc29kZXMubGVuZ3RoIHx8IG51bGwsXG4gIH07XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRBbmltZShpZDogbnVtYmVyLCBlcGlzb2RlOiBudW1iZXIpIHtcbiAgbGV0IHsgZW5nbGlzaCwgcm9tYWppIH0gPSAoYXdhaXQgZ2V0QW5pbWVUaXRsZSh7IGlkIH0pKS5NZWRpYS50aXRsZTtcblxuICAvLyBlbnN1cmUgYm90aCBvZiB0aGVtIGRvbid0IGhhdmUgbnVsbCB2YWx1ZVxuICBlbmdsaXNoID0gZW5nbGlzaCB8fCByb21hamk7XG4gIHJvbWFqaSA9IHJvbWFqaSB8fCBlbmdsaXNoO1xuXG4gIC8vIGxvd2VyIGNhc2UgYm90aCB0aGUgdGl0bGVzXG4gIGVuZ2xpc2ggPSBlbmdsaXNoLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gIHJvbWFqaSA9IHJvbWFqaS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuXG4gIC8vIGlmIHRoZSB0aXRsZXMgYXJlIHNhbWUgcnVuIHRoaXMgZnVuY3Rpb24gb25jZVxuICBpZiAoZW5nbGlzaCA9PT0gcm9tYWppKSB7XG4gICAgcmV0dXJuIGdldEFuaW1lU2x1ZyhlbmdsaXNoLCBlcGlzb2RlKTtcbiAgfVxuXG4gIC8vIGdldCBib3RoIHJvbWFqaSBhbmQgZW5nbGlzaCByZXN1bHRzXG4gIGNvbnN0IHJvbWFqaUFuaW1lID0gZ2V0QW5pbWVTbHVnKHJvbWFqaSwgZXBpc29kZSk7XG4gIGNvbnN0IGVuZ2xpc2hBbmltZSA9IGdldEFuaW1lU2x1ZyhlbmdsaXNoLCBlcGlzb2RlKTtcblxuICAvLyBncmFiIHRoZSBvbmUgd2hpY2ggaGFzIGVwaXNvZGVzIGtleVxuICBjb25zdCBhbmltZSA9IGF3YWl0IFByb21pc2UuYWxsKFtlbmdsaXNoQW5pbWUsIHJvbWFqaUFuaW1lXSkudGhlbigocikgPT5cbiAgICByWzBdLmVwaXNvZGVzID4gMCA/IHJbMF0gOiByWzFdXG4gICk7XG5cbiAgcmV0dXJuIGFuaW1lO1xufVxuIl0sIm5hbWVzIjpbInNjcmFwZU1QNCIsInNjcmFwZVNlYXJjaCIsInNjcmFwZUFuaW1lRGV0YWlscyIsImdldEFuaW1lVGl0bGUiLCJnZXRBbmltZVNsdWciLCJ0aXRsZSIsImVwaXNvZGUiLCJnb2dvRXBpc29kZXMiLCJlbXB0eURhdGEiLCJzdWIiLCJSZWZlcmVyIiwic291cmNlcyIsImR1YiIsImVwaXNvZGVzIiwic2x1ZyIsInJlcGxhY2UiLCJmaW5kQW5pbWUiLCJrZXl3IiwibGVuZ3RoIiwiaWQiLCJhbmltZUlkIiwiZXBpc29kZXNMaXN0IiwiZXBpc29kZVNsdWciLCJlcGlzb2RlSWQiLCJzcGxpdCIsInN1YkFuaW1lIiwiZHViQW5pbWUiLCJQcm9taXNlIiwiYWxsIiwic291cmNlc19iayIsImdldEFuaW1lIiwiZW5nbGlzaCIsInJvbWFqaSIsIk1lZGlhIiwidG9Mb2NhbGVMb3dlckNhc2UiLCJyb21hamlBbmltZSIsImVuZ2xpc2hBbmltZSIsImFuaW1lIiwidGhlbiIsInIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./src/lib/gogoanime.ts\n");

/***/ }),

/***/ "(api)/./src/pages/api/anime.ts":
/*!********************************!*\
  !*** ./src/pages/api/anime.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_gogoanime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @lib/gogoanime */ \"(api)/./src/lib/gogoanime.ts\");\n\nasync function handler(req, res) {\n    let { id , episode  } = req.query;\n    id = typeof id === \"string\" ? id : id.join(\"\");\n    episode = typeof episode === \"string\" ? episode : episode.join(\"\");\n    res.json(await (0,_lib_gogoanime__WEBPACK_IMPORTED_MODULE_0__.getAnime)(parseInt(id, 10), parseInt(episode, 10)));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvcGFnZXMvYXBpL2FuaW1lLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBRTBDO0FBRTNCLGVBQWVDLE9BQU8sQ0FDbkNDLEdBQW1CLEVBQ25CQyxHQUFvQixFQUNwQjtJQUNBLElBQUksRUFBRUMsRUFBRSxHQUFFQyxPQUFPLEdBQUUsR0FBR0gsR0FBRyxDQUFDSSxLQUFLO0lBRS9CRixFQUFFLEdBQUcsT0FBT0EsRUFBRSxLQUFLLFFBQVEsR0FBR0EsRUFBRSxHQUFHQSxFQUFFLENBQUNHLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUMvQ0YsT0FBTyxHQUFHLE9BQU9BLE9BQU8sS0FBSyxRQUFRLEdBQUdBLE9BQU8sR0FBR0EsT0FBTyxDQUFDRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFbkVKLEdBQUcsQ0FBQ0ssSUFBSSxDQUFDLE1BQU1SLHdEQUFRLENBQUNTLFFBQVEsQ0FBQ0wsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFSyxRQUFRLENBQUNKLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDbkUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbmltZWZsaXgvLi9zcmMvcGFnZXMvYXBpL2FuaW1lLnRzPzVjNmIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dEFwaVJlcXVlc3QsIE5leHRBcGlSZXNwb25zZSB9IGZyb20gJ25leHQnO1xuXG5pbXBvcnQgeyBnZXRBbmltZSB9IGZyb20gJ0BsaWIvZ29nb2FuaW1lJztcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gaGFuZGxlcihcbiAgcmVxOiBOZXh0QXBpUmVxdWVzdCxcbiAgcmVzOiBOZXh0QXBpUmVzcG9uc2Vcbikge1xuICBsZXQgeyBpZCwgZXBpc29kZSB9ID0gcmVxLnF1ZXJ5O1xuXG4gIGlkID0gdHlwZW9mIGlkID09PSAnc3RyaW5nJyA/IGlkIDogaWQuam9pbignJyk7XG4gIGVwaXNvZGUgPSB0eXBlb2YgZXBpc29kZSA9PT0gJ3N0cmluZycgPyBlcGlzb2RlIDogZXBpc29kZS5qb2luKCcnKTtcblxuICByZXMuanNvbihhd2FpdCBnZXRBbmltZShwYXJzZUludChpZCwgMTApLCBwYXJzZUludChlcGlzb2RlLCAxMCkpKTtcbn1cbiJdLCJuYW1lcyI6WyJnZXRBbmltZSIsImhhbmRsZXIiLCJyZXEiLCJyZXMiLCJpZCIsImVwaXNvZGUiLCJxdWVyeSIsImpvaW4iLCJqc29uIiwicGFyc2VJbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/anime.ts\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/lib/anime_parser.js":
/*!********************************************************!*\
  !*** ./node_modules/gogoanime-api/lib/anime_parser.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DownloadReferer\": () => (/* binding */ DownloadReferer),\n/* harmony export */   \"scrapeAnimeDetails\": () => (/* binding */ scrapeAnimeDetails),\n/* harmony export */   \"scrapeAnimeMovies\": () => (/* binding */ scrapeAnimeMovies),\n/* harmony export */   \"scrapeDownloadLinks\": () => (/* binding */ scrapeDownloadLinks),\n/* harmony export */   \"scrapeFembed\": () => (/* binding */ scrapeFembed),\n/* harmony export */   \"scrapeGenre\": () => (/* binding */ scrapeGenre),\n/* harmony export */   \"scrapeMP4\": () => (/* binding */ scrapeMP4),\n/* harmony export */   \"scrapeNewSeason\": () => (/* binding */ scrapeNewSeason),\n/* harmony export */   \"scrapePopularAnime\": () => (/* binding */ scrapePopularAnime),\n/* harmony export */   \"scrapeRecentRelease\": () => (/* binding */ scrapeRecentRelease),\n/* harmony export */   \"scrapeSearch\": () => (/* binding */ scrapeSearch),\n/* harmony export */   \"scrapeSeason\": () => (/* binding */ scrapeSeason),\n/* harmony export */   \"scrapeStreamSB\": () => (/* binding */ scrapeStreamSB),\n/* harmony export */   \"scrapeThread\": () => (/* binding */ scrapeThread),\n/* harmony export */   \"scrapeTopAiringAnime\": () => (/* binding */ scrapeTopAiringAnime)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"axios\");\n/* harmony import */ var cheerio__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cheerio */ \"cheerio\");\n/* harmony import */ var puppeteer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! puppeteer */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/puppeteer.js\");\n/* harmony import */ var user_agents__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! user-agents */ \"user-agents\");\n/* harmony import */ var _helpers_extractors_goload_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helpers/extractors/goload.js */ \"(api)/./node_modules/gogoanime-api/lib/helpers/extractors/goload.js\");\n/* harmony import */ var _helpers_extractors_streamsb_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./helpers/extractors/streamsb.js */ \"(api)/./node_modules/gogoanime-api/lib/helpers/extractors/streamsb.js\");\n/* harmony import */ var _helpers_extractors_fembed_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./helpers/extractors/fembed.js */ \"(api)/./node_modules/gogoanime-api/lib/helpers/extractors/fembed.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils.js */ \"(api)/./node_modules/gogoanime-api/lib/utils.js\");\n\n\n\n\n\n\n\n\n\n\n\nconst BASE_URL = \"https://gogoanime.film/\"\nconst BASE_URL2 = \"https://gogoanime.gg/\"\nconst ajax_url = \"https://ajax.gogo-load.com/\"\nconst anime_info_url = \"https://gogoanime.film/category/\"\nconst anime_movies_path = \"/anime-movies.html\"\nconst popular_path = \"/popular.html\"\nconst new_season_path = \"/new-season.html\"\nconst search_path = \"/search.html\"\nconst popular_ongoing_url = `${ajax_url}ajax/page-recent-release-ongoing.html`;\nconst recent_release_url = `${ajax_url}ajax/page-recent-release.html`\nconst list_episodes_url = `${ajax_url}ajax/load-list-episode`\nconst seasons_url = \"https://gogoanime.film/sub-category/\"\n\nconst Referer = \"https://gogoplay.io/\"\nconst goload_stream_url = \"https://goload.pro/streaming.php\"\nconst DownloadReferer = \"https://goload.pro/\"\n\nconst disqus_iframe = (episodeId) => `https://disqus.com/embed/comments/?base=default&f=gogoanimetv&t_u=https%3A%2F%2Fgogoanime.vc%2F${episodeId}&s_o=default#version=cfefa856cbcd7efb87102e7242c9a829`\nconst disqus_api = (threadId, page) => `https://disqus.com/api/3.0/threads/listPostsThreaded?limit=100&thread=${threadId}&forum=gogoanimetv&order=popular&cursor=${page}:0:0&api_key=E8Uh5l5fHZ6gD8U3KycjAIAk46f68Zw7C6eW8WSjZvCLXebZ7p0r1yrYDrLilk2F`\n\nconst Genres = [\n    \"action\",\n    \"adventure\",\n    \"cars\",\n    \"comedy\",\n    \"crime\",\n    \"dementia\",\n    \"demons\",\n    \"drama\",\n    \"dub\",\n    \"ecchi\",\n    \"family\",\n    \"fantasy\",\n    \"game\",\n    \"gourmet\",\n    \"harem\",\n    \"hentai\",\n    \"historical\",\n    \"horror\",\n    \"josei\",\n    \"kids\",\n    \"magic\",\n    \"martial-arts\",\n    \"mecha\",\n    \"military\",\n    \"Mmusic\",\n    \"mystery\",\n    \"parody\",\n    \"police\",\n    \"psychological\",\n    \"romance\",\n    \"samurai\",\n    \"school\",\n    \"sci-fi\",\n    \"seinen\",\n    \"shoujo\",\n    \"shoujo-ai\",\n    \"shounen\",\n    \"shounen-ai\",\n    \"slice-of-Life\",\n    \"space\",\n    \"sports\",\n    \"super-power\",\n    \"supernatural\",\n    \"suspense\",\n    \"thriller\",\n    \"vampire\",\n    \"yaoi\",\n    \"yuri\",\n]\n\nconst cachedDownloadLinks = {}\n\nconst scrapeFembed = async({ id }) => {\n    try {\n        const epPage = await axios__WEBPACK_IMPORTED_MODULE_0__.get(BASE_URL2 + id);\n        const $ = cheerio__WEBPACK_IMPORTED_MODULE_1__.load(epPage.data)\n\n        const server = $(\".xstreamcdn > a:nth-child(1)\").attr(\"data-video\")\n        const serverUrl = new URL(server)\n\n        const sources = await (0,_helpers_extractors_fembed_js__WEBPACK_IMPORTED_MODULE_6__.extractFembed)(serverUrl.href)\n\n        if (!sources) return { error: \"No sources found!! Try different source.\" }\n\n        return sources\n\n    } catch (e) {\n        return { error: e.message }\n    }\n\n}\n\n\nconst scrapeStreamSB = async({ id }) => {\n    try {\n        const epPage = await axios__WEBPACK_IMPORTED_MODULE_0__.get(BASE_URL2 + id);\n        const $ = cheerio__WEBPACK_IMPORTED_MODULE_1__.load(epPage.data)\n\n        const server = $('div.anime_video_body > div.anime_muti_link > ul > li.streamsb > a').attr('data-video')\n        const serverUrl = new URL(server)\n\n        const res = await (0,_helpers_extractors_streamsb_js__WEBPACK_IMPORTED_MODULE_5__.extractStreamSB)(serverUrl.href)\n\n        if (!res.stream_data) return { error: \"No sources found!! Try different source.\" }\n\n        return {\n            headers: { Referer: serverUrl.href },\n            data: [{ file: res.stream_data.file }, { backup: res.stream_data.backup }]\n        }\n\n\n    } catch (err) {\n        console.log(err)\n        return { error: err.message }\n    }\n}\n\nconst scrapeMP4 = async({ id }) => {\n    let sources = [];\n    let sources_bk = [];\n    try {\n        let epPage, server, $, serverUrl;\n\n        if (id.includes(\"episode\")) {\n            epPage = await axios__WEBPACK_IMPORTED_MODULE_0__.get(BASE_URL2 + id);\n            $ = cheerio__WEBPACK_IMPORTED_MODULE_1__.load(epPage.data)\n\n            server = $('#load_anime > div > div > iframe').attr('src')\n            serverUrl = new URL(\"https:\" + server)\n\n        } else serverUrl = new URL(`${goload_stream_url}?id=${id}`)\n\n\n        const goGoServerPage = await axios__WEBPACK_IMPORTED_MODULE_0__.get(serverUrl.href, { headers: { 'User-Agent': _utils_js__WEBPACK_IMPORTED_MODULE_7__.USER_AGENT } })\n        const $$ = cheerio__WEBPACK_IMPORTED_MODULE_1__.load(goGoServerPage.data)\n\n        const params = await (0,_helpers_extractors_goload_js__WEBPACK_IMPORTED_MODULE_4__.generateEncryptAjaxParameters)($$, serverUrl.searchParams.get('id'));\n\n        const fetchRes = await axios__WEBPACK_IMPORTED_MODULE_0__.get(`\n        ${serverUrl.protocol}//${serverUrl.hostname}/encrypt-ajax.php?${params}`, {\n            headers: {\n                'User-Agent': _utils_js__WEBPACK_IMPORTED_MODULE_7__.USER_AGENT,\n                'X-Requested-With': 'XMLHttpRequest'\n            }\n        })\n\n        const res = (0,_helpers_extractors_goload_js__WEBPACK_IMPORTED_MODULE_4__.decryptEncryptAjaxResponse)(fetchRes.data)\n\n        if (!res.source) return { error: \"No sources found!! Try different source.\" };\n\n        res.source.forEach(source => sources.push(source))\n        res.source_bk.forEach(source => sources_bk.push(source))\n\n        return {\n            Referer: serverUrl.href,\n            sources: sources,\n            sources_bk: sources_bk\n        }\n\n    } catch (err) {\n        return { error: err }\n    }\n}\n\nconst scrapeSearch = async({ list = [], keyw, page = 1 }) => {\n    try {\n        const searchPage = await axios__WEBPACK_IMPORTED_MODULE_0__.get(`${ BASE_URL + search_path }?keyword=${keyw}&page=${page}`);\n        const $ = cheerio__WEBPACK_IMPORTED_MODULE_1__.load(searchPage.data);\n\n        $('div.last_episodes > ul > li').each((i, el) => {\n            list.push({\n                animeId: $(el).find('p.name > a').attr('href').split('/')[2],\n                animeTitle: $(el).find('p.name > a').attr('title'),\n                animeUrl: BASE_URL + \"/\" + $(el).find('p.name > a').attr('href'),\n                animeImg: $(el).find('div > a > img').attr('src'),\n                status: $(el).find('p.released').text().trim()\n            });\n        });\n\n        return list;\n    } catch (err) {\n        console.log(err)\n        return { error: err }\n    }\n};\n\nconst scrapeRecentRelease = async({ list = [], page = 1, type = 1 }) => {\n    try {\n\n        const mainPage = await axios__WEBPACK_IMPORTED_MODULE_0__.get(`\n        ${recent_release_url}?page=${page}&type=${type}\n        `)\n        const $ = cheerio__WEBPACK_IMPORTED_MODULE_1__.load(mainPage.data)\n\n        $('div.last_episodes.loaddub > ul > li').each((i, el) => {\n            list.push({\n                episodeId: $(el).find('p.name > a').attr('href').split('/')[1],\n                animeTitle: $(el).find('p.name > a').attr('title'),\n                episodeNum: $(el).find('p.episode').text().replace('Episode ', '').trim(),\n                subOrDub: $(el).find('div > a > div').attr('class').replace('type ic-', ''),\n                animeImg: $(el).find('div > a > img').attr('src'),\n                episodeUrl: BASE_URL + \"/\" + $(el).find('p.name > a').attr('href')\n            })\n        })\n        return list\n\n    } catch (err) {\n        console.log(err)\n        return { error: err }\n    }\n}\n\nconst scrapeNewSeason = async({ list = [], page = 1 }) => {\n    try {\n        const popularPage = await axios__WEBPACK_IMPORTED_MODULE_0__.get(`\n        ${BASE_URL+new_season_path}?page=${page}\n        `)\n        const $ = cheerio__WEBPACK_IMPORTED_MODULE_1__.load(popularPage.data)\n\n\n        $('div.last_episodes > ul > li').each((i, el) => {\n\n            list.push({\n                animeId: $(el).find('p.name > a').attr('href').split('/')[2],\n                animeTitle: $(el).find('p.name > a').attr('title'),\n                animeImg: $(el).find('div > a > img').attr('src'),\n                releasedDate: $(el).find('p.released').text().replace('Released: ', '').trim(),\n                animeUrl: BASE_URL + \"/\" + $(el).find('p.name > a').attr('href')\n            })\n        })\n        return list\n\n    } catch (err) {\n        console.log(err)\n        return { error: err }\n    }\n}\n\nconst scrapePopularAnime = async({ list = [], page = 1 }) => {\n    try {\n        const popularPage = await axios__WEBPACK_IMPORTED_MODULE_0__.get(`\n        ${BASE_URL+popular_path}?page=${page}\n       `)\n        const $ = cheerio__WEBPACK_IMPORTED_MODULE_1__.load(popularPage.data)\n\n\n        $('div.last_episodes > ul > li').each((i, el) => {\n\n            list.push({\n                animeId: $(el).find('p.name > a').attr('href').split('/')[2],\n                animeTitle: $(el).find('p.name > a').attr('title'),\n                animeImg: $(el).find('div > a > img').attr('src'),\n                releasedDate: $(el).find('p.released').text().replace('Released: ', '').trim(),\n                animeUrl: BASE_URL + \"/\" + $(el).find('p.name > a').attr('href')\n            })\n        })\n        return list\n\n    } catch (err) {\n        console.log(err)\n        return { error: err }\n    }\n\n}\n\n\nconst scrapeAnimeMovies = async({ list = [], aph = \"\", page = 1 }) => {\n    try {\n        const popularPage = await axios__WEBPACK_IMPORTED_MODULE_0__.get(`\n        ${BASE_URL+anime_movies_path}?aph=${aph.trim().toUpperCase()}&page=${page}\n        `)\n        const $ = cheerio__WEBPACK_IMPORTED_MODULE_1__.load(popularPage.data)\n\n\n        $('div.last_episodes > ul > li').each((i, el) => {\n            list.push({\n                animeId: $(el).find('p.name > a').attr('href').split('/')[2],\n                animeTitle: $(el).find('p.name > a').attr('title'),\n                animeImg: $(el).find('div > a > img').attr('src'),\n                releasedDate: $(el).find('p.released').text().replace('Released: ', '').trim(),\n                animeUrl: BASE_URL + \"/\" + $(el).find('p.name > a').attr('href')\n            })\n        })\n        return list\n\n    } catch (err) {\n        console.log(err)\n        return { error: err }\n    }\n}\n\nconst scrapeTopAiringAnime = async({ list = [], page = 1 }) => {\n    try {\n        if (page == -1) {\n\n            let pageNum = 1\n            let hasMore = true\n            while (hasMore) {\n\n                const popular_page = await axios__WEBPACK_IMPORTED_MODULE_0__.get(`\n                ${popular_ongoing_url}?page=${pageNum}\n                `)\n                const $ = cheerio__WEBPACK_IMPORTED_MODULE_1__.load(popular_page.data)\n\n                if ($('div.added_series_body.popular > ul > li').length == 0) {\n                    hasMore = false\n                    continue\n                }\n                $('div.added_series_body.popular > ul > li').each((i, el) => {\n                    let genres = []\n                    $(el).find('p.genres > a').each((i, el) => {\n                        genres.push($(el).attr('title'))\n                    })\n                    list.push({\n                        animeId: $(el).find('a:nth-child(1)').attr('href').split('/')[2],\n                        animeTitle: $(el).find('a:nth-child(1)').attr('title'),\n                        animeImg: $(el).find('a:nth-child(1) > div').attr('style').match('(https?:\\/\\/.*\\.(?:png|jpg))')[0],\n                        latestEp: $(el).find('p:nth-child(4) > a').text().trim(),\n                        animeUrl: BASE_URL + \"/\" + $(el).find('a:nth-child(1)').attr('href'),\n                        genres: genres\n                    })\n                })\n                pageNum++\n\n            }\n            return list\n        }\n\n        const popular_page = await axios__WEBPACK_IMPORTED_MODULE_0__.get(`\n        ${popular_ongoing_url}?page=${page}\n        `)\n        const $ = cheerio__WEBPACK_IMPORTED_MODULE_1__.load(popular_page.data)\n\n        $('div.added_series_body.popular > ul > li').each((i, el) => {\n            let genres = []\n            $(el).find('p.genres > a').each((i, el) => {\n                genres.push($(el).attr('title'))\n            })\n            list.push({\n                animeId: $(el).find('a:nth-child(1)').attr('href').split('/')[2],\n                animeTitle: $(el).find('a:nth-child(1)').attr('title'),\n                animeImg: $(el).find('a:nth-child(1) > div').attr('style').match('(https?:\\/\\/.*\\.(?:png|jpg))')[0],\n                latestEp: $(el).find('p:nth-child(4) > a').text().trim(),\n                animeUrl: BASE_URL + \"/\" + $(el).find('a:nth-child(1)').attr('href'),\n                genres: genres\n            })\n        })\n\n        return list\n    } catch (err) {\n        console.log(err)\n        return { error: err }\n    }\n}\n\nconst scrapeGenre = async({ list = [], genre, page = 1 }) => {\n    try {\n        genre = genre.trim().replace(/ /g, '-').toLowerCase()\n\n        if (Genres.indexOf(genre) > -1) {\n            const genrePage = await axios__WEBPACK_IMPORTED_MODULE_0__.get(`${BASE_URL}genre/${genre}?page=${page}`)\n            const $ = cheerio__WEBPACK_IMPORTED_MODULE_1__.load(genrePage.data)\n\n            $('div.last_episodes > ul > li').each((i, elem) => {\n                list.push({\n                    animeId: $(elem).find('p.name > a').attr('href').split('/')[2],\n                    animeTitle: $(elem).find('p.name > a').attr('title'),\n                    animeImg: $(elem).find('div > a > img').attr('src'),\n                    releasedDate: $(elem).find('p.released').text().replace('Released: ', '').trim(),\n                    animeUrl: BASE_URL + \"/\" + $(elem).find('p.name > a').attr('href')\n                })\n            })\n            return list\n\n        }\n        return { error: \"Genre Not Found\" }\n\n    } catch (err) {\n        console.log(err)\n        return { error: err }\n    }\n}\n\n// scrapeGenre({ genre: \"cars\", page: 1 }).then((res) => console.log(res))\n\n\n/**\n * @param {string} id anime id.\n * @returns Resolves when the scraping is complete.\n * @example \n * scrapeGoGoAnimeInfo({id: \"naruto\"})\n * .then((res) => console.log(res)) // => The anime information is returned in an Object.\n * .catch((err) => console.log(err))\n * \n */\nconst scrapeAnimeDetails = async({ id }) => {\n    try {\n        let genres = []\n        let epList = []\n\n        const animePageTest = await axios__WEBPACK_IMPORTED_MODULE_0__.get(`https://gogoanime.gg/category/${id}`)\n\n        const $ = cheerio__WEBPACK_IMPORTED_MODULE_1__.load(animePageTest.data)\n\n        const animeTitle = $('div.anime_info_body_bg > h1').text()\n        const animeImage = $('div.anime_info_body_bg > img').attr('src')\n        const type = $('div.anime_info_body_bg > p:nth-child(4) > a').text()\n        const desc = $('div.anime_info_body_bg > p:nth-child(5)').text().replace('Plot Summary: ', '')\n        const releasedDate = $('div.anime_info_body_bg > p:nth-child(7)').text().replace('Released: ', '')\n        const status = $('div.anime_info_body_bg > p:nth-child(8) > a').text()\n        const otherName = $('div.anime_info_body_bg > p:nth-child(9)').text().replace('Other name: ', '').replace(/;/g, ',')\n\n        $('div.anime_info_body_bg > p:nth-child(6) > a').each((i, elem) => {\n            genres.push($(elem).attr('title').trim())\n        })\n\n        const ep_start = $(\"#episode_page > li\").first().find('a').attr('ep_start')\n        const ep_end = $('#episode_page > li').last().find('a').attr('ep_end')\n        const movie_id = $('#movie_id').attr('value')\n        const alias = $('#alias_anime').attr('value')\n\n        const html = await axios__WEBPACK_IMPORTED_MODULE_0__.get(`${list_episodes_url}?ep_start=${ep_start}&ep_end=${ep_end}&id=${movie_id}&default_ep=${0}&alias=${alias}`)\n        const $$ = cheerio__WEBPACK_IMPORTED_MODULE_1__.load(html.data);\n\n        $$(\"#episode_related > li\").each((i, el) => {\n            epList.push({\n                episodeId: $(el).find(\"a\").attr(\"href\").split('/')[1],\n                episodeNum: $(el).find(`div.name`).text().replace('EP ', ''),\n                episodeUrl: BASE_URL + $(el).find(`a`).attr('href').trim()\n            })\n        })\n\n        return {\n            animeTitle: animeTitle.toString(),\n            type: type.toString(),\n            releasedDate: releasedDate.toString(),\n            status: status.toString(),\n            genres: genres,\n            otherNames: otherName,\n            synopsis: desc.toString(),\n            animeImg: animeImage.toString(),\n            totalEpisodes: ep_end,\n            episodesList: epList\n        }\n\n\n\n\n    } catch (err) {\n        console.log(err)\n        return { error: err }\n    }\n}\n\nconst scrapeSeason = async({ list = [], season, page = 1 }) => {\n    try {\n        const season_page = await axios__WEBPACK_IMPORTED_MODULE_0__.get(`\n                ${seasons_url}\n        ${season}?page=${page}\n    `)\n        const $ = cheerio__WEBPACK_IMPORTED_MODULE_1__.load(season_page.data)\n\n        $('div.last_episodes > ul > li').each((i, el) => {\n            list.push({\n                animeId: $(el).find('div > a').attr('href').split('/')[2],\n                animeTitle: $(el).find('div > a').attr('title'),\n                animeImg: $(el).find('div > a > img').attr('src'),\n                animeUrl: BASE_URL + \"/\" + $(el).find('div > a').attr('href'),\n            })\n        })\n\n        return list\n    } catch (err) {\n        console.log(err)\n        return { error: err }\n    }\n}\n\n// scrapeAnimeDetails({ id: \"naruto\" }).then((res) => console.log(res))\n\n\nconst scrapeThread = async({ episodeId, page = 0 }) => {\n    try {\n        let threadId = null\n\n        const thread_page = await axios__WEBPACK_IMPORTED_MODULE_0__.get(disqus_iframe(decodeURIComponent(episodeId)))\n        const $ = cheerio__WEBPACK_IMPORTED_MODULE_1__.load(thread_page.data, { xmlMode: true })\n\n        const thread = JSON.parse($('#disqus-threadData')[0].children[0].data)\n\n        if (thread.code === 0 && thread.cursor.total > 0) {\n            threadId = thread.response.thread.id\n        }\n\n        const thread_api_res = (await axios__WEBPACK_IMPORTED_MODULE_0__.get(disqus_api(threadId, page))).data\n\n        return {\n            threadId: threadId,\n            currentPage: page,\n            hasNextPage: thread_api_res.cursor.hasNext,\n            comments: thread_api_res.response\n        }\n\n    } catch (err) {\n        if (err.response.status === 400) {\n            return { error: \"Invalid page. Try again.\" }\n        }\n        return { error: err }\n    }\n\n}\n\nconst scrapeDownloadLinks = async({ episodeId }) => {\n\n    if (!episodeId) {\n        return { error: \"No episode id provided\" }\n    }\n\n    if (cachedDownloadLinks[episodeId]) {\n        if (parseInt(new URL(cachedDownloadLinks[episodeId].sources[0].url).searchParams.get('expires')) < Date.now() + 1.08e+7) {\n            return cachedDownloadLinks[episodeId]\n        }\n    }\n\n    const browser = await puppeteer__WEBPACK_IMPORTED_MODULE_2__[\"default\"].launch({\n        args: ['--no-sandbox', '--disable-setuid-sandbox']\n    })\n\n    try {\n        const download_links = [];\n\n        const e_page = await axios__WEBPACK_IMPORTED_MODULE_0__.get(`https://gogoanime.gg/${episodeId}`)\n\n        const $ = cheerio__WEBPACK_IMPORTED_MODULE_1__.load(e_page.data)\n\n        const d_link = $(`div.anime_video_body > div.download-anime > div > ul > li.dowloads > a`).attr(\"href\")\n\n        const d_page = await browser.newPage()\n        await d_page.setUserAgent(user_agents__WEBPACK_IMPORTED_MODULE_3__.toString())\n        await d_page.goto(d_link, { waitUntil: 'networkidle2' })\n\n        const d_links = await d_page.$$eval('div.mirror_link:nth-child(1) > div.dowload', (links) => links.map(link => {\n            return { quality: link.children[0].innerHTML.split('(')[1].split('P')[0] + 'p', url: link.children[0].getAttribute('href') }\n        }))\n\n        await Promise.all(d_links.map(async(obj, i) => {\n            await axios__WEBPACK_IMPORTED_MODULE_0__.get(obj.url).catch(err => d_links.at(i).url = `${err.response.request._redirectable._options.href}`)\n        }))\n\n        cachedDownloadLinks[episodeId] = {\n            headers: {\n                Referer: DownloadReferer,\n            },\n            sources: d_links\n        }\n\n        await browser.close()\n\n        return {\n            headers: {\n                Referer: DownloadReferer,\n            },\n            sources: [...d_links],\n        }\n\n    } catch (err) {\n        await browser.close()\n        return { error: err }\n    }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/lib/anime_parser.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/lib/helpers/extractors/fembed.js":
/*!*********************************************************************!*\
  !*** ./node_modules/gogoanime-api/lib/helpers/extractors/fembed.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"extractFembed\": () => (/* binding */ extractFembed)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"axios\");\n\n\nconst extractFembed = async(url) => {\n    try {\n        url = new URL(url)\n        const fembedApiUrl = url.href.replace(\"/v/\", \"/api/source/\")\n        const res = await axios__WEBPACK_IMPORTED_MODULE_0__.post(fembedApiUrl, {\n            headers: {\n                Referer: url.href,\n\n            }\n        })\n\n        if (!res.data.success) return false\n\n        return {\n            headers: {\n                Referer: url.href,\n            },\n            data: res.data.data\n        }\n    } catch (e) {\n        return { error: \"No sources found!! Try different source\\n\\n\" + e.message }\n    }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvZ29nb2FuaW1lLWFwaS9saWIvaGVscGVycy9leHRyYWN0b3JzL2ZlbWJlZC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF5Qjs7QUFFbEI7QUFDUDtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsdUNBQVU7QUFDcEM7QUFDQTs7QUFFQTtBQUNBLFNBQVM7O0FBRVQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxNQUFNO0FBQ04saUJBQWlCO0FBQ2pCO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbmltZWZsaXgvLi9ub2RlX21vZHVsZXMvZ29nb2FuaW1lLWFwaS9saWIvaGVscGVycy9leHRyYWN0b3JzL2ZlbWJlZC5qcz9lYzA5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBheGlvcyBmcm9tICdheGlvcydcblxuZXhwb3J0IGNvbnN0IGV4dHJhY3RGZW1iZWQgPSBhc3luYyh1cmwpID0+IHtcbiAgICB0cnkge1xuICAgICAgICB1cmwgPSBuZXcgVVJMKHVybClcbiAgICAgICAgY29uc3QgZmVtYmVkQXBpVXJsID0gdXJsLmhyZWYucmVwbGFjZShcIi92L1wiLCBcIi9hcGkvc291cmNlL1wiKVxuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBheGlvcy5wb3N0KGZlbWJlZEFwaVVybCwge1xuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgIFJlZmVyZXI6IHVybC5ocmVmLFxuXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG5cbiAgICAgICAgaWYgKCFyZXMuZGF0YS5zdWNjZXNzKSByZXR1cm4gZmFsc2VcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgIFJlZmVyZXI6IHVybC5ocmVmLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGE6IHJlcy5kYXRhLmRhdGFcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIHsgZXJyb3I6IFwiTm8gc291cmNlcyBmb3VuZCEhIFRyeSBkaWZmZXJlbnQgc291cmNlXFxuXFxuXCIgKyBlLm1lc3NhZ2UgfVxuICAgIH1cbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/lib/helpers/extractors/fembed.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/lib/helpers/extractors/goload.js":
/*!*********************************************************************!*\
  !*** ./node_modules/gogoanime-api/lib/helpers/extractors/goload.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"decryptEncryptAjaxResponse\": () => (/* binding */ decryptEncryptAjaxResponse),\n/* harmony export */   \"generateEncryptAjaxParameters\": () => (/* binding */ generateEncryptAjaxParameters)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"axios\");\n/* harmony import */ var crypto_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! crypto-js */ \"crypto-js\");\n\n\n\nconst ENCRYPTION_KEYS_URL = \"https://raw.githubusercontent.com/justfoolingaround/animdl-provider-benchmarks/master/api/gogoanime.json\"\n\nlet iv = null;\nlet key = null;\nlet second_key = null;\n\nconst fetch_keys = async() => {\n    const response = await axios__WEBPACK_IMPORTED_MODULE_0__.get(ENCRYPTION_KEYS_URL);\n    const res = response.data;\n    return {\n        iv: crypto_js__WEBPACK_IMPORTED_MODULE_1__.enc.Utf8.parse(res.iv),\n        key: crypto_js__WEBPACK_IMPORTED_MODULE_1__.enc.Utf8.parse(res.key),\n        second_key: crypto_js__WEBPACK_IMPORTED_MODULE_1__.enc.Utf8.parse(res.second_key)\n    };\n}\n\n\n/**\n * Parses the embedded video URL to encrypt-ajax.php parameters\n * @param {cheerio} $ Cheerio object of the embedded video page\n * @param {string} id Id of the embedded video URL\n */\nasync function generateEncryptAjaxParameters($, id) {\n\n    const keys = await fetch_keys();\n    iv = keys.iv;\n    key = keys.key;\n    second_key = keys.second_key;\n\n    // encrypt the key\n    const encrypted_key = crypto_js__WEBPACK_IMPORTED_MODULE_1__.AES.encrypt(id, key, {\n        iv: iv,\n    });\n\n    const script = $(\"script[data-name='episode']\").data().value\n    const token = crypto_js__WEBPACK_IMPORTED_MODULE_1__.AES.decrypt(script, key, {\n        iv: iv,\n    }).toString(crypto_js__WEBPACK_IMPORTED_MODULE_1__.enc.Utf8);\n\n\n    return 'id=' + encrypted_key + '&alias=' + id + '&' + token;\n}\n/**\n * Decrypts the encrypted-ajax.php response\n * @param {object} obj Response from the server\n */\nfunction decryptEncryptAjaxResponse(obj) {\n\n    const decrypted = crypto_js__WEBPACK_IMPORTED_MODULE_1__.enc.Utf8.stringify(crypto_js__WEBPACK_IMPORTED_MODULE_1__.AES.decrypt(obj.data, second_key, {\n        iv: iv\n    }));\n    return JSON.parse(decrypted);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvZ29nb2FuaW1lLWFwaS9saWIvaGVscGVycy9leHRyYWN0b3JzL2dvbG9hZC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTBCO0FBQ007O0FBRWhDOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDJCQUEyQixzQ0FBUztBQUNwQztBQUNBO0FBQ0EsWUFBWSxxREFBdUI7QUFDbkMsYUFBYSxxREFBdUI7QUFDcEMsb0JBQW9CLHFEQUF1QjtBQUMzQztBQUNBOzs7QUFHQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsUUFBUTtBQUNuQjtBQUNPOztBQUVQO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMEJBQTBCLGtEQUF1QjtBQUNqRDtBQUNBLEtBQUs7O0FBRUw7QUFDQSxrQkFBa0Isa0RBQXVCO0FBQ3pDO0FBQ0EsS0FBSyxXQUFXLCtDQUFpQjs7O0FBR2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ087O0FBRVAsc0JBQXNCLHlEQUEyQixDQUFDLGtEQUFvQjtBQUN0RTtBQUNBLEtBQUs7QUFDTDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW5pbWVmbGl4Ly4vbm9kZV9tb2R1bGVzL2dvZ29hbmltZS1hcGkvbGliL2hlbHBlcnMvZXh0cmFjdG9ycy9nb2xvYWQuanM/MDI4MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuaW1wb3J0IENyeXB0b0pTIGZyb20gJ2NyeXB0by1qcydcblxuY29uc3QgRU5DUllQVElPTl9LRVlTX1VSTCA9IFwiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2p1c3Rmb29saW5nYXJvdW5kL2FuaW1kbC1wcm92aWRlci1iZW5jaG1hcmtzL21hc3Rlci9hcGkvZ29nb2FuaW1lLmpzb25cIlxuXG5sZXQgaXYgPSBudWxsO1xubGV0IGtleSA9IG51bGw7XG5sZXQgc2Vjb25kX2tleSA9IG51bGw7XG5cbmNvbnN0IGZldGNoX2tleXMgPSBhc3luYygpID0+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLmdldChFTkNSWVBUSU9OX0tFWVNfVVJMKTtcbiAgICBjb25zdCByZXMgPSByZXNwb25zZS5kYXRhO1xuICAgIHJldHVybiB7XG4gICAgICAgIGl2OiBDcnlwdG9KUy5lbmMuVXRmOC5wYXJzZShyZXMuaXYpLFxuICAgICAgICBrZXk6IENyeXB0b0pTLmVuYy5VdGY4LnBhcnNlKHJlcy5rZXkpLFxuICAgICAgICBzZWNvbmRfa2V5OiBDcnlwdG9KUy5lbmMuVXRmOC5wYXJzZShyZXMuc2Vjb25kX2tleSlcbiAgICB9O1xufVxuXG5cbi8qKlxuICogUGFyc2VzIHRoZSBlbWJlZGRlZCB2aWRlbyBVUkwgdG8gZW5jcnlwdC1hamF4LnBocCBwYXJhbWV0ZXJzXG4gKiBAcGFyYW0ge2NoZWVyaW99ICQgQ2hlZXJpbyBvYmplY3Qgb2YgdGhlIGVtYmVkZGVkIHZpZGVvIHBhZ2VcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCBJZCBvZiB0aGUgZW1iZWRkZWQgdmlkZW8gVVJMXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZW5lcmF0ZUVuY3J5cHRBamF4UGFyYW1ldGVycygkLCBpZCkge1xuXG4gICAgY29uc3Qga2V5cyA9IGF3YWl0IGZldGNoX2tleXMoKTtcbiAgICBpdiA9IGtleXMuaXY7XG4gICAga2V5ID0ga2V5cy5rZXk7XG4gICAgc2Vjb25kX2tleSA9IGtleXMuc2Vjb25kX2tleTtcblxuICAgIC8vIGVuY3J5cHQgdGhlIGtleVxuICAgIGNvbnN0IGVuY3J5cHRlZF9rZXkgPSBDcnlwdG9KUy5BRVNbJ2VuY3J5cHQnXShpZCwga2V5LCB7XG4gICAgICAgIGl2OiBpdixcbiAgICB9KTtcblxuICAgIGNvbnN0IHNjcmlwdCA9ICQoXCJzY3JpcHRbZGF0YS1uYW1lPSdlcGlzb2RlJ11cIikuZGF0YSgpLnZhbHVlXG4gICAgY29uc3QgdG9rZW4gPSBDcnlwdG9KUy5BRVNbJ2RlY3J5cHQnXShzY3JpcHQsIGtleSwge1xuICAgICAgICBpdjogaXYsXG4gICAgfSkudG9TdHJpbmcoQ3J5cHRvSlMuZW5jLlV0ZjgpO1xuXG5cbiAgICByZXR1cm4gJ2lkPScgKyBlbmNyeXB0ZWRfa2V5ICsgJyZhbGlhcz0nICsgaWQgKyAnJicgKyB0b2tlbjtcbn1cbi8qKlxuICogRGVjcnlwdHMgdGhlIGVuY3J5cHRlZC1hamF4LnBocCByZXNwb25zZVxuICogQHBhcmFtIHtvYmplY3R9IG9iaiBSZXNwb25zZSBmcm9tIHRoZSBzZXJ2ZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlY3J5cHRFbmNyeXB0QWpheFJlc3BvbnNlKG9iaikge1xuXG4gICAgY29uc3QgZGVjcnlwdGVkID0gQ3J5cHRvSlMuZW5jLlV0Zjguc3RyaW5naWZ5KENyeXB0b0pTLkFFUy5kZWNyeXB0KG9iai5kYXRhLCBzZWNvbmRfa2V5LCB7XG4gICAgICAgIGl2OiBpdlxuICAgIH0pKTtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShkZWNyeXB0ZWQpO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/lib/helpers/extractors/goload.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/lib/helpers/extractors/streamsb.js":
/*!***********************************************************************!*\
  !*** ./node_modules/gogoanime-api/lib/helpers/extractors/streamsb.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"extractStreamSB\": () => (/* binding */ extractStreamSB)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"axios\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils.js */ \"(api)/./node_modules/gogoanime-api/lib/utils.js\");\n\n\n\n\nconst HOST = \"https://sbplay2.com/sources43\"\n\nconst PAYLOAD = (hex) => `7361696b6f757c7c${hex}7c7c7361696b6f757c7c73747265616d7362/7361696b6f757c7c363136653639366436343663363136653639366436343663376337633631366536393664363436633631366536393664363436633763376336313665363936643634366336313665363936643634366337633763373337343732363536313664373336327c7c7361696b6f757c7c73747265616d7362`\n\nconst extractStreamSB = async(url) => {\n    url = new URL(url)\n\n    const id = url.href.split(\"/e/\").pop()\n    let arrBytes = new TextEncoder().encode(id)\n\n    const res = await axios__WEBPACK_IMPORTED_MODULE_0__.get(`${HOST}/${PAYLOAD(toHexString(Array.from(arrBytes)))}`, { headers: { watchsb: \"streamsb\", \"User-Agent\": _utils_js__WEBPACK_IMPORTED_MODULE_1__.USER_AGENT } })\n\n    return res.data\n}\n\nfunction toHexString(byteArray) {\n    return Array.from(byteArray, function(byte) {\n        return ('0' + (byte & 0xFF).toString(16)).slice(-2);\n    }).join('')\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvZ29nb2FuaW1lLWFwaS9saWIvaGVscGVycy9leHRyYWN0b3JzL3N0cmVhbXNiLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF5Qjs7QUFFa0I7O0FBRTNDOztBQUVBLDRDQUE0QyxJQUFJOztBQUV6QztBQUNQOztBQUVBO0FBQ0E7O0FBRUEsc0JBQXNCLHNDQUFTLElBQUksS0FBSyxHQUFHLDJDQUEyQyxLQUFLLFdBQVcsbUNBQW1DLGlEQUFVLElBQUk7O0FBRXZKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW5pbWVmbGl4Ly4vbm9kZV9tb2R1bGVzL2dvZ29hbmltZS1hcGkvbGliL2hlbHBlcnMvZXh0cmFjdG9ycy9zdHJlYW1zYi5qcz83NmEyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBheGlvcyBmcm9tICdheGlvcydcblxuaW1wb3J0IHsgVVNFUl9BR0VOVCB9IGZyb20gJy4uLy4uL3V0aWxzLmpzJ1xuXG5jb25zdCBIT1NUID0gXCJodHRwczovL3NicGxheTIuY29tL3NvdXJjZXM0M1wiXG5cbmNvbnN0IFBBWUxPQUQgPSAoaGV4KSA9PiBgNzM2MTY5NmI2Zjc1N2M3YyR7aGV4fTdjN2M3MzYxNjk2YjZmNzU3YzdjNzM3NDcyNjU2MTZkNzM2Mi83MzYxNjk2YjZmNzU3YzdjMzYzMTM2NjUzNjM5MzY2NDM2MzQzNjYzMzYzMTM2NjUzNjM5MzY2NDM2MzQzNjYzMzc2MzM3NjMzNjMxMzY2NTM2MzkzNjY0MzYzNDM2NjMzNjMxMzY2NTM2MzkzNjY0MzYzNDM2NjMzNzYzMzc2MzM2MzEzNjY1MzYzOTM2NjQzNjM0MzY2MzM2MzEzNjY1MzYzOTM2NjQzNjM0MzY2MzM3NjMzNzYzMzczMzM3MzQzNzMyMzYzNTM2MzEzNjY0MzczMzM2MzI3YzdjNzM2MTY5NmI2Zjc1N2M3YzczNzQ3MjY1NjE2ZDczNjJgXG5cbmV4cG9ydCBjb25zdCBleHRyYWN0U3RyZWFtU0IgPSBhc3luYyh1cmwpID0+IHtcbiAgICB1cmwgPSBuZXcgVVJMKHVybClcblxuICAgIGNvbnN0IGlkID0gdXJsLmhyZWYuc3BsaXQoXCIvZS9cIikucG9wKClcbiAgICBsZXQgYXJyQnl0ZXMgPSBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoaWQpXG5cbiAgICBjb25zdCByZXMgPSBhd2FpdCBheGlvcy5nZXQoYCR7SE9TVH0vJHtQQVlMT0FEKHRvSGV4U3RyaW5nKEFycmF5LmZyb20oYXJyQnl0ZXMpKSl9YCwgeyBoZWFkZXJzOiB7IHdhdGNoc2I6IFwic3RyZWFtc2JcIiwgXCJVc2VyLUFnZW50XCI6IFVTRVJfQUdFTlQgfSB9KVxuXG4gICAgcmV0dXJuIHJlcy5kYXRhXG59XG5cbmZ1bmN0aW9uIHRvSGV4U3RyaW5nKGJ5dGVBcnJheSkge1xuICAgIHJldHVybiBBcnJheS5mcm9tKGJ5dGVBcnJheSwgZnVuY3Rpb24oYnl0ZSkge1xuICAgICAgICByZXR1cm4gKCcwJyArIChieXRlICYgMHhGRikudG9TdHJpbmcoMTYpKS5zbGljZSgtMik7XG4gICAgfSkuam9pbignJylcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/lib/helpers/extractors/streamsb.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/lib/utils.js":
/*!*************************************************!*\
  !*** ./node_modules/gogoanime-api/lib/utils.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"USER_AGENT\": () => (/* binding */ USER_AGENT),\n/* harmony export */   \"renameKey\": () => (/* binding */ renameKey)\n/* harmony export */ });\nconst USER_AGENT = \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36\"\nconst renameKey = (obj, oldKey, newKey) => {\n    if (!obj.hasOwnProperty(oldKey)) return\n    const oldValue = obj[oldKey]\n    delete obj[oldKey]\n    obj[newKey] = oldValue\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvZ29nb2FuaW1lLWFwaS9saWIvdXRpbHMuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBTyxrREFBa0QsT0FBTztBQUN6RDtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbmltZWZsaXgvLi9ub2RlX21vZHVsZXMvZ29nb2FuaW1lLWFwaS9saWIvdXRpbHMuanM/MzJlNyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgVVNFUl9BR0VOVCA9IFwiTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzk3LjAuNDY5Mi43MSBTYWZhcmkvNTM3LjM2XCJcbmV4cG9ydCBjb25zdCByZW5hbWVLZXkgPSAob2JqLCBvbGRLZXksIG5ld0tleSkgPT4ge1xuICAgIGlmICghb2JqLmhhc093blByb3BlcnR5KG9sZEtleSkpIHJldHVyblxuICAgIGNvbnN0IG9sZFZhbHVlID0gb2JqW29sZEtleV1cbiAgICBkZWxldGUgb2JqW29sZEtleV1cbiAgICBvYmpbbmV3S2V5XSA9IG9sZFZhbHVlXG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/lib/utils.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Accessibility.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Accessibility.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Accessibility\": () => (/* binding */ Accessibility)\n/* harmony export */ });\n/**\n * Copyright 2018 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Accessibility_client, _AXNode_instances, _AXNode_richlyEditable, _AXNode_editable, _AXNode_focusable, _AXNode_hidden, _AXNode_name, _AXNode_role, _AXNode_ignored, _AXNode_cachedHasFocusableChild, _AXNode_isPlainTextField, _AXNode_isTextOnlyObject, _AXNode_hasFocusableChild;\n/**\n * The Accessibility class provides methods for inspecting Chromium's\n * accessibility tree. The accessibility tree is used by assistive technology\n * such as {@link https://en.wikipedia.org/wiki/Screen_reader | screen readers} or\n * {@link https://en.wikipedia.org/wiki/Switch_access | switches}.\n *\n * @remarks\n *\n * Accessibility is a very platform-specific thing. On different platforms,\n * there are different screen readers that might have wildly different output.\n *\n * Blink - Chrome's rendering engine - has a concept of \"accessibility tree\",\n * which is then translated into different platform-specific APIs. Accessibility\n * namespace gives users access to the Blink Accessibility Tree.\n *\n * Most of the accessibility tree gets filtered out when converting from Blink\n * AX Tree to Platform-specific AX-Tree or by assistive technologies themselves.\n * By default, Puppeteer tries to approximate this filtering, exposing only\n * the \"interesting\" nodes of the tree.\n *\n * @public\n */\nclass Accessibility {\n    /**\n     * @internal\n     */\n    constructor(client) {\n        _Accessibility_client.set(this, void 0);\n        __classPrivateFieldSet(this, _Accessibility_client, client, \"f\");\n    }\n    /**\n     * Captures the current state of the accessibility tree.\n     * The returned object represents the root accessible node of the page.\n     *\n     * @remarks\n     *\n     * **NOTE** The Chromium accessibility tree contains nodes that go unused on\n     * most platforms and by most screen readers. Puppeteer will discard them as\n     * well for an easier to process tree, unless `interestingOnly` is set to\n     * `false`.\n     *\n     * @example\n     * An example of dumping the entire accessibility tree:\n     * ```js\n     * const snapshot = await page.accessibility.snapshot();\n     * console.log(snapshot);\n     * ```\n     *\n     * @example\n     * An example of logging the focused node's name:\n     * ```js\n     * const snapshot = await page.accessibility.snapshot();\n     * const node = findFocusedNode(snapshot);\n     * console.log(node && node.name);\n     *\n     * function findFocusedNode(node) {\n     *   if (node.focused)\n     *     return node;\n     *   for (const child of node.children || []) {\n     *     const foundNode = findFocusedNode(child);\n     *     return foundNode;\n     *   }\n     *   return null;\n     * }\n     * ```\n     *\n     * @returns An AXNode object representing the snapshot.\n     *\n     */\n    async snapshot(options = {}) {\n        var _a, _b;\n        const { interestingOnly = true, root = null } = options;\n        const { nodes } = await __classPrivateFieldGet(this, _Accessibility_client, \"f\").send('Accessibility.getFullAXTree');\n        let backendNodeId;\n        if (root) {\n            const { node } = await __classPrivateFieldGet(this, _Accessibility_client, \"f\").send('DOM.describeNode', {\n                objectId: root._remoteObject.objectId,\n            });\n            backendNodeId = node.backendNodeId;\n        }\n        const defaultRoot = AXNode.createTree(nodes);\n        let needle = defaultRoot;\n        if (backendNodeId) {\n            needle = defaultRoot.find((node) => {\n                return node.payload.backendDOMNodeId === backendNodeId;\n            });\n            if (!needle) {\n                return null;\n            }\n        }\n        if (!interestingOnly) {\n            return (_a = this.serializeTree(needle)[0]) !== null && _a !== void 0 ? _a : null;\n        }\n        const interestingNodes = new Set();\n        this.collectInterestingNodes(interestingNodes, defaultRoot, false);\n        if (!interestingNodes.has(needle)) {\n            return null;\n        }\n        return (_b = this.serializeTree(needle, interestingNodes)[0]) !== null && _b !== void 0 ? _b : null;\n    }\n    serializeTree(node, interestingNodes) {\n        const children = [];\n        for (const child of node.children) {\n            children.push(...this.serializeTree(child, interestingNodes));\n        }\n        if (interestingNodes && !interestingNodes.has(node)) {\n            return children;\n        }\n        const serializedNode = node.serialize();\n        if (children.length) {\n            serializedNode.children = children;\n        }\n        return [serializedNode];\n    }\n    collectInterestingNodes(collection, node, insideControl) {\n        if (node.isInteresting(insideControl)) {\n            collection.add(node);\n        }\n        if (node.isLeafNode()) {\n            return;\n        }\n        insideControl = insideControl || node.isControl();\n        for (const child of node.children) {\n            this.collectInterestingNodes(collection, child, insideControl);\n        }\n    }\n}\n_Accessibility_client = new WeakMap();\nclass AXNode {\n    constructor(payload) {\n        _AXNode_instances.add(this);\n        this.children = [];\n        _AXNode_richlyEditable.set(this, false);\n        _AXNode_editable.set(this, false);\n        _AXNode_focusable.set(this, false);\n        _AXNode_hidden.set(this, false);\n        _AXNode_name.set(this, void 0);\n        _AXNode_role.set(this, void 0);\n        _AXNode_ignored.set(this, void 0);\n        _AXNode_cachedHasFocusableChild.set(this, void 0);\n        this.payload = payload;\n        __classPrivateFieldSet(this, _AXNode_name, this.payload.name ? this.payload.name.value : '', \"f\");\n        __classPrivateFieldSet(this, _AXNode_role, this.payload.role ? this.payload.role.value : 'Unknown', \"f\");\n        __classPrivateFieldSet(this, _AXNode_ignored, this.payload.ignored, \"f\");\n        for (const property of this.payload.properties || []) {\n            if (property.name === 'editable') {\n                __classPrivateFieldSet(this, _AXNode_richlyEditable, property.value.value === 'richtext', \"f\");\n                __classPrivateFieldSet(this, _AXNode_editable, true, \"f\");\n            }\n            if (property.name === 'focusable') {\n                __classPrivateFieldSet(this, _AXNode_focusable, property.value.value, \"f\");\n            }\n            if (property.name === 'hidden') {\n                __classPrivateFieldSet(this, _AXNode_hidden, property.value.value, \"f\");\n            }\n        }\n    }\n    find(predicate) {\n        if (predicate(this)) {\n            return this;\n        }\n        for (const child of this.children) {\n            const result = child.find(predicate);\n            if (result) {\n                return result;\n            }\n        }\n        return null;\n    }\n    isLeafNode() {\n        if (!this.children.length) {\n            return true;\n        }\n        // These types of objects may have children that we use as internal\n        // implementation details, but we want to expose them as leaves to platform\n        // accessibility APIs because screen readers might be confused if they find\n        // any children.\n        if (__classPrivateFieldGet(this, _AXNode_instances, \"m\", _AXNode_isPlainTextField).call(this) || __classPrivateFieldGet(this, _AXNode_instances, \"m\", _AXNode_isTextOnlyObject).call(this)) {\n            return true;\n        }\n        // Roles whose children are only presentational according to the ARIA and\n        // HTML5 Specs should be hidden from screen readers.\n        // (Note that whilst ARIA buttons can have only presentational children, HTML5\n        // buttons are allowed to have content.)\n        switch (__classPrivateFieldGet(this, _AXNode_role, \"f\")) {\n            case 'doc-cover':\n            case 'graphics-symbol':\n            case 'img':\n            case 'Meter':\n            case 'scrollbar':\n            case 'slider':\n            case 'separator':\n            case 'progressbar':\n                return true;\n            default:\n                break;\n        }\n        // Here and below: Android heuristics\n        if (__classPrivateFieldGet(this, _AXNode_instances, \"m\", _AXNode_hasFocusableChild).call(this)) {\n            return false;\n        }\n        if (__classPrivateFieldGet(this, _AXNode_focusable, \"f\") && __classPrivateFieldGet(this, _AXNode_name, \"f\")) {\n            return true;\n        }\n        if (__classPrivateFieldGet(this, _AXNode_role, \"f\") === 'heading' && __classPrivateFieldGet(this, _AXNode_name, \"f\")) {\n            return true;\n        }\n        return false;\n    }\n    isControl() {\n        switch (__classPrivateFieldGet(this, _AXNode_role, \"f\")) {\n            case 'button':\n            case 'checkbox':\n            case 'ColorWell':\n            case 'combobox':\n            case 'DisclosureTriangle':\n            case 'listbox':\n            case 'menu':\n            case 'menubar':\n            case 'menuitem':\n            case 'menuitemcheckbox':\n            case 'menuitemradio':\n            case 'radio':\n            case 'scrollbar':\n            case 'searchbox':\n            case 'slider':\n            case 'spinbutton':\n            case 'switch':\n            case 'tab':\n            case 'textbox':\n            case 'tree':\n            case 'treeitem':\n                return true;\n            default:\n                return false;\n        }\n    }\n    isInteresting(insideControl) {\n        const role = __classPrivateFieldGet(this, _AXNode_role, \"f\");\n        if (role === 'Ignored' || __classPrivateFieldGet(this, _AXNode_hidden, \"f\") || __classPrivateFieldGet(this, _AXNode_ignored, \"f\")) {\n            return false;\n        }\n        if (__classPrivateFieldGet(this, _AXNode_focusable, \"f\") || __classPrivateFieldGet(this, _AXNode_richlyEditable, \"f\")) {\n            return true;\n        }\n        // If it's not focusable but has a control role, then it's interesting.\n        if (this.isControl()) {\n            return true;\n        }\n        // A non focusable child of a control is not interesting\n        if (insideControl) {\n            return false;\n        }\n        return this.isLeafNode() && !!__classPrivateFieldGet(this, _AXNode_name, \"f\");\n    }\n    serialize() {\n        const properties = new Map();\n        for (const property of this.payload.properties || []) {\n            properties.set(property.name.toLowerCase(), property.value.value);\n        }\n        if (this.payload.name) {\n            properties.set('name', this.payload.name.value);\n        }\n        if (this.payload.value) {\n            properties.set('value', this.payload.value.value);\n        }\n        if (this.payload.description) {\n            properties.set('description', this.payload.description.value);\n        }\n        const node = {\n            role: __classPrivateFieldGet(this, _AXNode_role, \"f\"),\n        };\n        const userStringProperties = [\n            'name',\n            'value',\n            'description',\n            'keyshortcuts',\n            'roledescription',\n            'valuetext',\n        ];\n        const getUserStringPropertyValue = (key) => {\n            return properties.get(key);\n        };\n        for (const userStringProperty of userStringProperties) {\n            if (!properties.has(userStringProperty)) {\n                continue;\n            }\n            node[userStringProperty] = getUserStringPropertyValue(userStringProperty);\n        }\n        const booleanProperties = [\n            'disabled',\n            'expanded',\n            'focused',\n            'modal',\n            'multiline',\n            'multiselectable',\n            'readonly',\n            'required',\n            'selected',\n        ];\n        const getBooleanPropertyValue = (key) => {\n            return properties.get(key);\n        };\n        for (const booleanProperty of booleanProperties) {\n            // RootWebArea's treat focus differently than other nodes. They report whether\n            // their frame  has focus, not whether focus is specifically on the root\n            // node.\n            if (booleanProperty === 'focused' && __classPrivateFieldGet(this, _AXNode_role, \"f\") === 'RootWebArea') {\n                continue;\n            }\n            const value = getBooleanPropertyValue(booleanProperty);\n            if (!value) {\n                continue;\n            }\n            node[booleanProperty] = getBooleanPropertyValue(booleanProperty);\n        }\n        const tristateProperties = ['checked', 'pressed'];\n        for (const tristateProperty of tristateProperties) {\n            if (!properties.has(tristateProperty)) {\n                continue;\n            }\n            const value = properties.get(tristateProperty);\n            node[tristateProperty] =\n                value === 'mixed' ? 'mixed' : value === 'true' ? true : false;\n        }\n        const numericalProperties = [\n            'level',\n            'valuemax',\n            'valuemin',\n        ];\n        const getNumericalPropertyValue = (key) => {\n            return properties.get(key);\n        };\n        for (const numericalProperty of numericalProperties) {\n            if (!properties.has(numericalProperty)) {\n                continue;\n            }\n            node[numericalProperty] = getNumericalPropertyValue(numericalProperty);\n        }\n        const tokenProperties = [\n            'autocomplete',\n            'haspopup',\n            'invalid',\n            'orientation',\n        ];\n        const getTokenPropertyValue = (key) => {\n            return properties.get(key);\n        };\n        for (const tokenProperty of tokenProperties) {\n            const value = getTokenPropertyValue(tokenProperty);\n            if (!value || value === 'false') {\n                continue;\n            }\n            node[tokenProperty] = getTokenPropertyValue(tokenProperty);\n        }\n        return node;\n    }\n    static createTree(payloads) {\n        const nodeById = new Map();\n        for (const payload of payloads) {\n            nodeById.set(payload.nodeId, new AXNode(payload));\n        }\n        for (const node of nodeById.values()) {\n            for (const childId of node.payload.childIds || []) {\n                node.children.push(nodeById.get(childId));\n            }\n        }\n        return nodeById.values().next().value;\n    }\n}\n_AXNode_richlyEditable = new WeakMap(), _AXNode_editable = new WeakMap(), _AXNode_focusable = new WeakMap(), _AXNode_hidden = new WeakMap(), _AXNode_name = new WeakMap(), _AXNode_role = new WeakMap(), _AXNode_ignored = new WeakMap(), _AXNode_cachedHasFocusableChild = new WeakMap(), _AXNode_instances = new WeakSet(), _AXNode_isPlainTextField = function _AXNode_isPlainTextField() {\n    if (__classPrivateFieldGet(this, _AXNode_richlyEditable, \"f\")) {\n        return false;\n    }\n    if (__classPrivateFieldGet(this, _AXNode_editable, \"f\")) {\n        return true;\n    }\n    return __classPrivateFieldGet(this, _AXNode_role, \"f\") === 'textbox' || __classPrivateFieldGet(this, _AXNode_role, \"f\") === 'searchbox';\n}, _AXNode_isTextOnlyObject = function _AXNode_isTextOnlyObject() {\n    const role = __classPrivateFieldGet(this, _AXNode_role, \"f\");\n    return role === 'LineBreak' || role === 'text' || role === 'InlineTextBox';\n}, _AXNode_hasFocusableChild = function _AXNode_hasFocusableChild() {\n    if (__classPrivateFieldGet(this, _AXNode_cachedHasFocusableChild, \"f\") === undefined) {\n        __classPrivateFieldSet(this, _AXNode_cachedHasFocusableChild, false, \"f\");\n        for (const child of this.children) {\n            if (__classPrivateFieldGet(child, _AXNode_focusable, \"f\") || __classPrivateFieldGet(child, _AXNode_instances, \"m\", _AXNode_hasFocusableChild).call(child)) {\n                __classPrivateFieldSet(this, _AXNode_cachedHasFocusableChild, true, \"f\");\n                break;\n            }\n        }\n    }\n    return __classPrivateFieldGet(this, _AXNode_cachedHasFocusableChild, \"f\");\n};\n//# sourceMappingURL=Accessibility.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Accessibility.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/AriaQueryHandler.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/AriaQueryHandler.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"_ariaHandler\": () => (/* binding */ _ariaHandler)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./assert.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/assert.js\");\n/**\n * Copyright 2020 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nasync function queryAXTree(client, element, accessibleName, role) {\n    const { nodes } = await client.send('Accessibility.queryAXTree', {\n        objectId: element._remoteObject.objectId,\n        accessibleName,\n        role,\n    });\n    const filteredNodes = nodes.filter((node) => {\n        return !node.role || node.role.value !== 'StaticText';\n    });\n    return filteredNodes;\n}\nconst normalizeValue = (value) => {\n    return value.replace(/ +/g, ' ').trim();\n};\nconst knownAttributes = new Set(['name', 'role']);\nconst attributeRegexp = /\\[\\s*(?<attribute>\\w+)\\s*=\\s*(?<quote>\"|')(?<value>\\\\.|.*?(?=\\k<quote>))\\k<quote>\\s*\\]/g;\nfunction isKnownAttribute(attribute) {\n    return knownAttributes.has(attribute);\n}\n/*\n * The selectors consist of an accessible name to query for and optionally\n * further aria attributes on the form `[<attribute>=<value>]`.\n * Currently, we only support the `name` and `role` attribute.\n * The following examples showcase how the syntax works wrt. querying:\n * - 'title[role=\"heading\"]' queries for elements with name 'title' and role 'heading'.\n * - '[role=\"img\"]' queries for elements with role 'img' and any name.\n * - 'label' queries for elements with name 'label' and any role.\n * - '[name=\"\"][role=\"button\"]' queries for elements with no name and role 'button'.\n */\nfunction parseAriaSelector(selector) {\n    const queryOptions = {};\n    const defaultName = selector.replace(attributeRegexp, (_, attribute, _quote, value) => {\n        attribute = attribute.trim();\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(isKnownAttribute(attribute), `Unknown aria attribute \"${attribute}\" in selector`);\n        queryOptions[attribute] = normalizeValue(value);\n        return '';\n    });\n    if (defaultName && !queryOptions.name) {\n        queryOptions.name = normalizeValue(defaultName);\n    }\n    return queryOptions;\n}\nconst queryOne = async (element, selector) => {\n    const exeCtx = element.executionContext();\n    const { name, role } = parseAriaSelector(selector);\n    const res = await queryAXTree(exeCtx._client, element, name, role);\n    if (!res[0] || !res[0].backendDOMNodeId) {\n        return null;\n    }\n    return exeCtx._adoptBackendNodeId(res[0].backendDOMNodeId);\n};\nconst waitFor = async (domWorld, selector, options) => {\n    const binding = {\n        name: 'ariaQuerySelector',\n        pptrFunction: async (selector) => {\n            const root = options.root || (await domWorld._document());\n            const element = await queryOne(root, selector);\n            return element;\n        },\n    };\n    return domWorld._waitForSelectorInPage((_, selector) => {\n        return globalThis.ariaQuerySelector(selector);\n    }, selector, options, binding);\n};\nconst queryAll = async (element, selector) => {\n    const exeCtx = element.executionContext();\n    const { name, role } = parseAriaSelector(selector);\n    const res = await queryAXTree(exeCtx._client, element, name, role);\n    return Promise.all(res.map((axNode) => {\n        return exeCtx._adoptBackendNodeId(axNode.backendDOMNodeId);\n    }));\n};\nconst queryAllArray = async (element, selector) => {\n    const elementHandles = await queryAll(element, selector);\n    const exeCtx = element.executionContext();\n    const jsHandle = exeCtx.evaluateHandle((...elements) => {\n        return elements;\n    }, ...elementHandles);\n    return jsHandle;\n};\n/**\n * @internal\n */\nconst _ariaHandler = {\n    queryOne,\n    waitFor,\n    queryAll,\n    queryAllArray,\n};\n//# sourceMappingURL=AriaQueryHandler.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvZ29nb2FuaW1lLWFwaS9ub2RlX21vZHVsZXMvcHVwcGV0ZWVyL2xpYi9lc20vcHVwcGV0ZWVyL2NvbW1vbi9BcmlhUXVlcnlIYW5kbGVyLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3FDO0FBQ3JDO0FBQ0EsWUFBWSxRQUFRO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsa0RBQU0seURBQXlELFVBQVU7QUFDakY7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksYUFBYTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsWUFBWSxhQUFhO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW5pbWVmbGl4Ly4vbm9kZV9tb2R1bGVzL2dvZ29hbmltZS1hcGkvbm9kZV9tb2R1bGVzL3B1cHBldGVlci9saWIvZXNtL3B1cHBldGVlci9jb21tb24vQXJpYVF1ZXJ5SGFuZGxlci5qcz9mOTBkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IGFzc2VydCB9IGZyb20gJy4vYXNzZXJ0LmpzJztcbmFzeW5jIGZ1bmN0aW9uIHF1ZXJ5QVhUcmVlKGNsaWVudCwgZWxlbWVudCwgYWNjZXNzaWJsZU5hbWUsIHJvbGUpIHtcbiAgICBjb25zdCB7IG5vZGVzIH0gPSBhd2FpdCBjbGllbnQuc2VuZCgnQWNjZXNzaWJpbGl0eS5xdWVyeUFYVHJlZScsIHtcbiAgICAgICAgb2JqZWN0SWQ6IGVsZW1lbnQuX3JlbW90ZU9iamVjdC5vYmplY3RJZCxcbiAgICAgICAgYWNjZXNzaWJsZU5hbWUsXG4gICAgICAgIHJvbGUsXG4gICAgfSk7XG4gICAgY29uc3QgZmlsdGVyZWROb2RlcyA9IG5vZGVzLmZpbHRlcigobm9kZSkgPT4ge1xuICAgICAgICByZXR1cm4gIW5vZGUucm9sZSB8fCBub2RlLnJvbGUudmFsdWUgIT09ICdTdGF0aWNUZXh0JztcbiAgICB9KTtcbiAgICByZXR1cm4gZmlsdGVyZWROb2Rlcztcbn1cbmNvbnN0IG5vcm1hbGl6ZVZhbHVlID0gKHZhbHVlKSA9PiB7XG4gICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoLyArL2csICcgJykudHJpbSgpO1xufTtcbmNvbnN0IGtub3duQXR0cmlidXRlcyA9IG5ldyBTZXQoWyduYW1lJywgJ3JvbGUnXSk7XG5jb25zdCBhdHRyaWJ1dGVSZWdleHAgPSAvXFxbXFxzKig/PGF0dHJpYnV0ZT5cXHcrKVxccyo9XFxzKig/PHF1b3RlPlwifCcpKD88dmFsdWU+XFxcXC58Lio/KD89XFxrPHF1b3RlPikpXFxrPHF1b3RlPlxccypcXF0vZztcbmZ1bmN0aW9uIGlzS25vd25BdHRyaWJ1dGUoYXR0cmlidXRlKSB7XG4gICAgcmV0dXJuIGtub3duQXR0cmlidXRlcy5oYXMoYXR0cmlidXRlKTtcbn1cbi8qXG4gKiBUaGUgc2VsZWN0b3JzIGNvbnNpc3Qgb2YgYW4gYWNjZXNzaWJsZSBuYW1lIHRvIHF1ZXJ5IGZvciBhbmQgb3B0aW9uYWxseVxuICogZnVydGhlciBhcmlhIGF0dHJpYnV0ZXMgb24gdGhlIGZvcm0gYFs8YXR0cmlidXRlPj08dmFsdWU+XWAuXG4gKiBDdXJyZW50bHksIHdlIG9ubHkgc3VwcG9ydCB0aGUgYG5hbWVgIGFuZCBgcm9sZWAgYXR0cmlidXRlLlxuICogVGhlIGZvbGxvd2luZyBleGFtcGxlcyBzaG93Y2FzZSBob3cgdGhlIHN5bnRheCB3b3JrcyB3cnQuIHF1ZXJ5aW5nOlxuICogLSAndGl0bGVbcm9sZT1cImhlYWRpbmdcIl0nIHF1ZXJpZXMgZm9yIGVsZW1lbnRzIHdpdGggbmFtZSAndGl0bGUnIGFuZCByb2xlICdoZWFkaW5nJy5cbiAqIC0gJ1tyb2xlPVwiaW1nXCJdJyBxdWVyaWVzIGZvciBlbGVtZW50cyB3aXRoIHJvbGUgJ2ltZycgYW5kIGFueSBuYW1lLlxuICogLSAnbGFiZWwnIHF1ZXJpZXMgZm9yIGVsZW1lbnRzIHdpdGggbmFtZSAnbGFiZWwnIGFuZCBhbnkgcm9sZS5cbiAqIC0gJ1tuYW1lPVwiXCJdW3JvbGU9XCJidXR0b25cIl0nIHF1ZXJpZXMgZm9yIGVsZW1lbnRzIHdpdGggbm8gbmFtZSBhbmQgcm9sZSAnYnV0dG9uJy5cbiAqL1xuZnVuY3Rpb24gcGFyc2VBcmlhU2VsZWN0b3Ioc2VsZWN0b3IpIHtcbiAgICBjb25zdCBxdWVyeU9wdGlvbnMgPSB7fTtcbiAgICBjb25zdCBkZWZhdWx0TmFtZSA9IHNlbGVjdG9yLnJlcGxhY2UoYXR0cmlidXRlUmVnZXhwLCAoXywgYXR0cmlidXRlLCBfcXVvdGUsIHZhbHVlKSA9PiB7XG4gICAgICAgIGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZS50cmltKCk7XG4gICAgICAgIGFzc2VydChpc0tub3duQXR0cmlidXRlKGF0dHJpYnV0ZSksIGBVbmtub3duIGFyaWEgYXR0cmlidXRlIFwiJHthdHRyaWJ1dGV9XCIgaW4gc2VsZWN0b3JgKTtcbiAgICAgICAgcXVlcnlPcHRpb25zW2F0dHJpYnV0ZV0gPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSk7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9KTtcbiAgICBpZiAoZGVmYXVsdE5hbWUgJiYgIXF1ZXJ5T3B0aW9ucy5uYW1lKSB7XG4gICAgICAgIHF1ZXJ5T3B0aW9ucy5uYW1lID0gbm9ybWFsaXplVmFsdWUoZGVmYXVsdE5hbWUpO1xuICAgIH1cbiAgICByZXR1cm4gcXVlcnlPcHRpb25zO1xufVxuY29uc3QgcXVlcnlPbmUgPSBhc3luYyAoZWxlbWVudCwgc2VsZWN0b3IpID0+IHtcbiAgICBjb25zdCBleGVDdHggPSBlbGVtZW50LmV4ZWN1dGlvbkNvbnRleHQoKTtcbiAgICBjb25zdCB7IG5hbWUsIHJvbGUgfSA9IHBhcnNlQXJpYVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBxdWVyeUFYVHJlZShleGVDdHguX2NsaWVudCwgZWxlbWVudCwgbmFtZSwgcm9sZSk7XG4gICAgaWYgKCFyZXNbMF0gfHwgIXJlc1swXS5iYWNrZW5kRE9NTm9kZUlkKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gZXhlQ3R4Ll9hZG9wdEJhY2tlbmROb2RlSWQocmVzWzBdLmJhY2tlbmRET01Ob2RlSWQpO1xufTtcbmNvbnN0IHdhaXRGb3IgPSBhc3luYyAoZG9tV29ybGQsIHNlbGVjdG9yLCBvcHRpb25zKSA9PiB7XG4gICAgY29uc3QgYmluZGluZyA9IHtcbiAgICAgICAgbmFtZTogJ2FyaWFRdWVyeVNlbGVjdG9yJyxcbiAgICAgICAgcHB0ckZ1bmN0aW9uOiBhc3luYyAoc2VsZWN0b3IpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJvb3QgPSBvcHRpb25zLnJvb3QgfHwgKGF3YWl0IGRvbVdvcmxkLl9kb2N1bWVudCgpKTtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBhd2FpdCBxdWVyeU9uZShyb290LCBzZWxlY3Rvcik7XG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICAgICAgfSxcbiAgICB9O1xuICAgIHJldHVybiBkb21Xb3JsZC5fd2FpdEZvclNlbGVjdG9ySW5QYWdlKChfLCBzZWxlY3RvcikgPT4ge1xuICAgICAgICByZXR1cm4gZ2xvYmFsVGhpcy5hcmlhUXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgfSwgc2VsZWN0b3IsIG9wdGlvbnMsIGJpbmRpbmcpO1xufTtcbmNvbnN0IHF1ZXJ5QWxsID0gYXN5bmMgKGVsZW1lbnQsIHNlbGVjdG9yKSA9PiB7XG4gICAgY29uc3QgZXhlQ3R4ID0gZWxlbWVudC5leGVjdXRpb25Db250ZXh0KCk7XG4gICAgY29uc3QgeyBuYW1lLCByb2xlIH0gPSBwYXJzZUFyaWFTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgcXVlcnlBWFRyZWUoZXhlQ3R4Ll9jbGllbnQsIGVsZW1lbnQsIG5hbWUsIHJvbGUpO1xuICAgIHJldHVybiBQcm9taXNlLmFsbChyZXMubWFwKChheE5vZGUpID0+IHtcbiAgICAgICAgcmV0dXJuIGV4ZUN0eC5fYWRvcHRCYWNrZW5kTm9kZUlkKGF4Tm9kZS5iYWNrZW5kRE9NTm9kZUlkKTtcbiAgICB9KSk7XG59O1xuY29uc3QgcXVlcnlBbGxBcnJheSA9IGFzeW5jIChlbGVtZW50LCBzZWxlY3RvcikgPT4ge1xuICAgIGNvbnN0IGVsZW1lbnRIYW5kbGVzID0gYXdhaXQgcXVlcnlBbGwoZWxlbWVudCwgc2VsZWN0b3IpO1xuICAgIGNvbnN0IGV4ZUN0eCA9IGVsZW1lbnQuZXhlY3V0aW9uQ29udGV4dCgpO1xuICAgIGNvbnN0IGpzSGFuZGxlID0gZXhlQ3R4LmV2YWx1YXRlSGFuZGxlKCguLi5lbGVtZW50cykgPT4ge1xuICAgICAgICByZXR1cm4gZWxlbWVudHM7XG4gICAgfSwgLi4uZWxlbWVudEhhbmRsZXMpO1xuICAgIHJldHVybiBqc0hhbmRsZTtcbn07XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgX2FyaWFIYW5kbGVyID0ge1xuICAgIHF1ZXJ5T25lLFxuICAgIHdhaXRGb3IsXG4gICAgcXVlcnlBbGwsXG4gICAgcXVlcnlBbGxBcnJheSxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BcmlhUXVlcnlIYW5kbGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/AriaQueryHandler.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Browser.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Browser.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Browser\": () => (/* binding */ Browser),\n/* harmony export */   \"BrowserContext\": () => (/* binding */ BrowserContext)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./assert.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/assert.js\");\n/* harmony import */ var _Connection_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Connection.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Connection.js\");\n/* harmony import */ var _EventEmitter_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./EventEmitter.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/EventEmitter.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/util.js\");\n/* harmony import */ var _Target_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Target.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Target.js\");\n/* harmony import */ var _TaskQueue_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./TaskQueue.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/TaskQueue.js\");\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Browser_instances, _Browser_ignoreHTTPSErrors, _Browser_defaultViewport, _Browser_process, _Browser_connection, _Browser_closeCallback, _Browser_targetFilterCallback, _Browser_isPageTargetCallback, _Browser_defaultContext, _Browser_contexts, _Browser_screenshotTaskQueue, _Browser_targets, _Browser_ignoredTargets, _Browser_setIsPageTargetCallback, _Browser_targetCreated, _Browser_targetDestroyed, _Browser_targetInfoChanged, _Browser_getVersion, _BrowserContext_connection, _BrowserContext_browser, _BrowserContext_id;\n\n\n\n\n\n\nconst WEB_PERMISSION_TO_PROTOCOL_PERMISSION = new Map([\n    ['geolocation', 'geolocation'],\n    ['midi', 'midi'],\n    ['notifications', 'notifications'],\n    // TODO: push isn't a valid type?\n    // ['push', 'push'],\n    ['camera', 'videoCapture'],\n    ['microphone', 'audioCapture'],\n    ['background-sync', 'backgroundSync'],\n    ['ambient-light-sensor', 'sensors'],\n    ['accelerometer', 'sensors'],\n    ['gyroscope', 'sensors'],\n    ['magnetometer', 'sensors'],\n    ['accessibility-events', 'accessibilityEvents'],\n    ['clipboard-read', 'clipboardReadWrite'],\n    ['clipboard-write', 'clipboardReadWrite'],\n    ['payment-handler', 'paymentHandler'],\n    ['persistent-storage', 'durableStorage'],\n    ['idle-detection', 'idleDetection'],\n    // chrome-specific permissions we have.\n    ['midi-sysex', 'midiSysex'],\n]);\n/**\n * A Browser is created when Puppeteer connects to a Chromium instance, either through\n * {@link PuppeteerNode.launch} or {@link Puppeteer.connect}.\n *\n * @remarks\n *\n * The Browser class extends from Puppeteer's {@link EventEmitter} class and will\n * emit various events which are documented in the {@link BrowserEmittedEvents} enum.\n *\n * @example\n *\n * An example of using a {@link Browser} to create a {@link Page}:\n * ```js\n * const puppeteer = require('puppeteer');\n *\n * (async () => {\n *   const browser = await puppeteer.launch();\n *   const page = await browser.newPage();\n *   await page.goto('https://example.com');\n *   await browser.close();\n * })();\n * ```\n *\n * @example\n *\n * An example of disconnecting from and reconnecting to a {@link Browser}:\n * ```js\n * const puppeteer = require('puppeteer');\n *\n * (async () => {\n *   const browser = await puppeteer.launch();\n *   // Store the endpoint to be able to reconnect to Chromium\n *   const browserWSEndpoint = browser.wsEndpoint();\n *   // Disconnect puppeteer from Chromium\n *   browser.disconnect();\n *\n *   // Use the endpoint to reestablish a connection\n *   const browser2 = await puppeteer.connect({browserWSEndpoint});\n *   // Close Chromium\n *   await browser2.close();\n * })();\n * ```\n *\n * @public\n */\nclass Browser extends _EventEmitter_js__WEBPACK_IMPORTED_MODULE_2__.EventEmitter {\n    /**\n     * @internal\n     */\n    constructor(connection, contextIds, ignoreHTTPSErrors, defaultViewport, process, closeCallback, targetFilterCallback, isPageTargetCallback) {\n        super();\n        _Browser_instances.add(this);\n        _Browser_ignoreHTTPSErrors.set(this, void 0);\n        _Browser_defaultViewport.set(this, void 0);\n        _Browser_process.set(this, void 0);\n        _Browser_connection.set(this, void 0);\n        _Browser_closeCallback.set(this, void 0);\n        _Browser_targetFilterCallback.set(this, void 0);\n        _Browser_isPageTargetCallback.set(this, void 0);\n        _Browser_defaultContext.set(this, void 0);\n        _Browser_contexts.set(this, void 0);\n        _Browser_screenshotTaskQueue.set(this, void 0);\n        _Browser_targets.set(this, void 0);\n        _Browser_ignoredTargets.set(this, new Set());\n        __classPrivateFieldSet(this, _Browser_ignoreHTTPSErrors, ignoreHTTPSErrors, \"f\");\n        __classPrivateFieldSet(this, _Browser_defaultViewport, defaultViewport, \"f\");\n        __classPrivateFieldSet(this, _Browser_process, process, \"f\");\n        __classPrivateFieldSet(this, _Browser_screenshotTaskQueue, new _TaskQueue_js__WEBPACK_IMPORTED_MODULE_5__.TaskQueue(), \"f\");\n        __classPrivateFieldSet(this, _Browser_connection, connection, \"f\");\n        __classPrivateFieldSet(this, _Browser_closeCallback, closeCallback || function () { }, \"f\");\n        __classPrivateFieldSet(this, _Browser_targetFilterCallback, targetFilterCallback ||\n            (() => {\n                return true;\n            }), \"f\");\n        __classPrivateFieldGet(this, _Browser_instances, \"m\", _Browser_setIsPageTargetCallback).call(this, isPageTargetCallback);\n        __classPrivateFieldSet(this, _Browser_defaultContext, new BrowserContext(__classPrivateFieldGet(this, _Browser_connection, \"f\"), this), \"f\");\n        __classPrivateFieldSet(this, _Browser_contexts, new Map(), \"f\");\n        for (const contextId of contextIds) {\n            __classPrivateFieldGet(this, _Browser_contexts, \"f\").set(contextId, new BrowserContext(__classPrivateFieldGet(this, _Browser_connection, \"f\"), this, contextId));\n        }\n        __classPrivateFieldSet(this, _Browser_targets, new Map(), \"f\");\n        __classPrivateFieldGet(this, _Browser_connection, \"f\").on(_Connection_js__WEBPACK_IMPORTED_MODULE_1__.ConnectionEmittedEvents.Disconnected, () => {\n            return this.emit(\"disconnected\" /* BrowserEmittedEvents.Disconnected */);\n        });\n        __classPrivateFieldGet(this, _Browser_connection, \"f\").on('Target.targetCreated', __classPrivateFieldGet(this, _Browser_instances, \"m\", _Browser_targetCreated).bind(this));\n        __classPrivateFieldGet(this, _Browser_connection, \"f\").on('Target.targetDestroyed', __classPrivateFieldGet(this, _Browser_instances, \"m\", _Browser_targetDestroyed).bind(this));\n        __classPrivateFieldGet(this, _Browser_connection, \"f\").on('Target.targetInfoChanged', __classPrivateFieldGet(this, _Browser_instances, \"m\", _Browser_targetInfoChanged).bind(this));\n    }\n    /**\n     * @internal\n     */\n    static async _create(connection, contextIds, ignoreHTTPSErrors, defaultViewport, process, closeCallback, targetFilterCallback, isPageTargetCallback) {\n        const browser = new Browser(connection, contextIds, ignoreHTTPSErrors, defaultViewport, process, closeCallback, targetFilterCallback, isPageTargetCallback);\n        await connection.send('Target.setDiscoverTargets', { discover: true });\n        return browser;\n    }\n    /**\n     * @internal\n     */\n    get _targets() {\n        return __classPrivateFieldGet(this, _Browser_targets, \"f\");\n    }\n    /**\n     * The spawned browser process. Returns `null` if the browser instance was created with\n     * {@link Puppeteer.connect}.\n     */\n    process() {\n        var _a;\n        return (_a = __classPrivateFieldGet(this, _Browser_process, \"f\")) !== null && _a !== void 0 ? _a : null;\n    }\n    /**\n     * @internal\n     */\n    _getIsPageTargetCallback() {\n        return __classPrivateFieldGet(this, _Browser_isPageTargetCallback, \"f\");\n    }\n    /**\n     * Creates a new incognito browser context. This won't share cookies/cache with other\n     * browser contexts.\n     *\n     * @example\n     * ```js\n     * (async () => {\n     *  const browser = await puppeteer.launch();\n     *   // Create a new incognito browser context.\n     *   const context = await browser.createIncognitoBrowserContext();\n     *   // Create a new page in a pristine context.\n     *   const page = await context.newPage();\n     *   // Do stuff\n     *   await page.goto('https://example.com');\n     * })();\n     * ```\n     */\n    async createIncognitoBrowserContext(options = {}) {\n        const { proxyServer, proxyBypassList } = options;\n        const { browserContextId } = await __classPrivateFieldGet(this, _Browser_connection, \"f\").send('Target.createBrowserContext', {\n            proxyServer,\n            proxyBypassList: proxyBypassList && proxyBypassList.join(','),\n        });\n        const context = new BrowserContext(__classPrivateFieldGet(this, _Browser_connection, \"f\"), this, browserContextId);\n        __classPrivateFieldGet(this, _Browser_contexts, \"f\").set(browserContextId, context);\n        return context;\n    }\n    /**\n     * Returns an array of all open browser contexts. In a newly created browser, this will\n     * return a single instance of {@link BrowserContext}.\n     */\n    browserContexts() {\n        return [__classPrivateFieldGet(this, _Browser_defaultContext, \"f\"), ...Array.from(__classPrivateFieldGet(this, _Browser_contexts, \"f\").values())];\n    }\n    /**\n     * Returns the default browser context. The default browser context cannot be closed.\n     */\n    defaultBrowserContext() {\n        return __classPrivateFieldGet(this, _Browser_defaultContext, \"f\");\n    }\n    /**\n     * @internal\n     */\n    async _disposeContext(contextId) {\n        if (!contextId) {\n            return;\n        }\n        await __classPrivateFieldGet(this, _Browser_connection, \"f\").send('Target.disposeBrowserContext', {\n            browserContextId: contextId,\n        });\n        __classPrivateFieldGet(this, _Browser_contexts, \"f\").delete(contextId);\n    }\n    /**\n     * The browser websocket endpoint which can be used as an argument to\n     * {@link Puppeteer.connect}.\n     *\n     * @returns The Browser websocket url.\n     *\n     * @remarks\n     *\n     * The format is `ws://${host}:${port}/devtools/browser/<id>`.\n     *\n     * You can find the `webSocketDebuggerUrl` from `http://${host}:${port}/json/version`.\n     * Learn more about the\n     * {@link https://chromedevtools.github.io/devtools-protocol | devtools protocol} and\n     * the {@link\n     * https://chromedevtools.github.io/devtools-protocol/#how-do-i-access-the-browser-target\n     * | browser endpoint}.\n     */\n    wsEndpoint() {\n        return __classPrivateFieldGet(this, _Browser_connection, \"f\").url();\n    }\n    /**\n     * Promise which resolves to a new {@link Page} object. The Page is created in\n     * a default browser context.\n     */\n    async newPage() {\n        return __classPrivateFieldGet(this, _Browser_defaultContext, \"f\").newPage();\n    }\n    /**\n     * @internal\n     */\n    async _createPageInContext(contextId) {\n        const { targetId } = await __classPrivateFieldGet(this, _Browser_connection, \"f\").send('Target.createTarget', {\n            url: 'about:blank',\n            browserContextId: contextId || undefined,\n        });\n        const target = __classPrivateFieldGet(this, _Browser_targets, \"f\").get(targetId);\n        if (!target) {\n            throw new Error(`Missing target for page (id = ${targetId})`);\n        }\n        const initialized = await target._initializedPromise;\n        if (!initialized) {\n            throw new Error(`Failed to create target for page (id = ${targetId})`);\n        }\n        const page = await target.page();\n        if (!page) {\n            throw new Error(`Failed to create a page for context (id = ${contextId})`);\n        }\n        return page;\n    }\n    /**\n     * All active targets inside the Browser. In case of multiple browser contexts, returns\n     * an array with all the targets in all browser contexts.\n     */\n    targets() {\n        return Array.from(__classPrivateFieldGet(this, _Browser_targets, \"f\").values()).filter((target) => {\n            return target._isInitialized;\n        });\n    }\n    /**\n     * The target associated with the browser.\n     */\n    target() {\n        const browserTarget = this.targets().find((target) => {\n            return target.type() === 'browser';\n        });\n        if (!browserTarget) {\n            throw new Error('Browser target is not found');\n        }\n        return browserTarget;\n    }\n    /**\n     * Searches for a target in all browser contexts.\n     *\n     * @param predicate - A function to be run for every target.\n     * @returns The first target found that matches the `predicate` function.\n     *\n     * @example\n     *\n     * An example of finding a target for a page opened via `window.open`:\n     * ```js\n     * await page.evaluate(() => window.open('https://www.example.com/'));\n     * const newWindowTarget = await browser.waitForTarget(target => target.url() === 'https://www.example.com/');\n     * ```\n     */\n    async waitForTarget(predicate, options = {}) {\n        const { timeout = 30000 } = options;\n        let resolve;\n        let isResolved = false;\n        const targetPromise = new Promise((x) => {\n            return (resolve = x);\n        });\n        this.on(\"targetcreated\" /* BrowserEmittedEvents.TargetCreated */, check);\n        this.on(\"targetchanged\" /* BrowserEmittedEvents.TargetChanged */, check);\n        try {\n            if (!timeout) {\n                return await targetPromise;\n            }\n            this.targets().forEach(check);\n            return await (0,_util_js__WEBPACK_IMPORTED_MODULE_3__.waitWithTimeout)(targetPromise, 'target', timeout);\n        }\n        finally {\n            this.off(\"targetcreated\" /* BrowserEmittedEvents.TargetCreated */, check);\n            this.off(\"targetchanged\" /* BrowserEmittedEvents.TargetChanged */, check);\n        }\n        async function check(target) {\n            if ((await predicate(target)) && !isResolved) {\n                isResolved = true;\n                resolve(target);\n            }\n        }\n    }\n    /**\n     * An array of all open pages inside the Browser.\n     *\n     * @remarks\n     *\n     * In case of multiple browser contexts, returns an array with all the pages in all\n     * browser contexts. Non-visible pages, such as `\"background_page\"`, will not be listed\n     * here. You can find them using {@link Target.page}.\n     */\n    async pages() {\n        const contextPages = await Promise.all(this.browserContexts().map((context) => {\n            return context.pages();\n        }));\n        // Flatten array.\n        return contextPages.reduce((acc, x) => {\n            return acc.concat(x);\n        }, []);\n    }\n    /**\n     * A string representing the browser name and version.\n     *\n     * @remarks\n     *\n     * For headless Chromium, this is similar to `HeadlessChrome/61.0.3153.0`. For\n     * non-headless, this is similar to `Chrome/61.0.3153.0`.\n     *\n     * The format of browser.version() might change with future releases of Chromium.\n     */\n    async version() {\n        const version = await __classPrivateFieldGet(this, _Browser_instances, \"m\", _Browser_getVersion).call(this);\n        return version.product;\n    }\n    /**\n     * The browser's original user agent. Pages can override the browser user agent with\n     * {@link Page.setUserAgent}.\n     */\n    async userAgent() {\n        const version = await __classPrivateFieldGet(this, _Browser_instances, \"m\", _Browser_getVersion).call(this);\n        return version.userAgent;\n    }\n    /**\n     * Closes Chromium and all of its pages (if any were opened). The {@link Browser} object\n     * itself is considered to be disposed and cannot be used anymore.\n     */\n    async close() {\n        await __classPrivateFieldGet(this, _Browser_closeCallback, \"f\").call(null);\n        this.disconnect();\n    }\n    /**\n     * Disconnects Puppeteer from the browser, but leaves the Chromium process running.\n     * After calling `disconnect`, the {@link Browser} object is considered disposed and\n     * cannot be used anymore.\n     */\n    disconnect() {\n        __classPrivateFieldGet(this, _Browser_connection, \"f\").dispose();\n    }\n    /**\n     * Indicates that the browser is connected.\n     */\n    isConnected() {\n        return !__classPrivateFieldGet(this, _Browser_connection, \"f\")._closed;\n    }\n}\n_Browser_ignoreHTTPSErrors = new WeakMap(), _Browser_defaultViewport = new WeakMap(), _Browser_process = new WeakMap(), _Browser_connection = new WeakMap(), _Browser_closeCallback = new WeakMap(), _Browser_targetFilterCallback = new WeakMap(), _Browser_isPageTargetCallback = new WeakMap(), _Browser_defaultContext = new WeakMap(), _Browser_contexts = new WeakMap(), _Browser_screenshotTaskQueue = new WeakMap(), _Browser_targets = new WeakMap(), _Browser_ignoredTargets = new WeakMap(), _Browser_instances = new WeakSet(), _Browser_setIsPageTargetCallback = function _Browser_setIsPageTargetCallback(isPageTargetCallback) {\n    __classPrivateFieldSet(this, _Browser_isPageTargetCallback, isPageTargetCallback ||\n        ((target) => {\n            return (target.type === 'page' ||\n                target.type === 'background_page' ||\n                target.type === 'webview');\n        }), \"f\");\n}, _Browser_targetCreated = async function _Browser_targetCreated(event) {\n    var _a;\n    const targetInfo = event.targetInfo;\n    const { browserContextId } = targetInfo;\n    const context = browserContextId && __classPrivateFieldGet(this, _Browser_contexts, \"f\").has(browserContextId)\n        ? __classPrivateFieldGet(this, _Browser_contexts, \"f\").get(browserContextId)\n        : __classPrivateFieldGet(this, _Browser_defaultContext, \"f\");\n    if (!context) {\n        throw new Error('Missing browser context');\n    }\n    const shouldAttachToTarget = __classPrivateFieldGet(this, _Browser_targetFilterCallback, \"f\").call(this, targetInfo);\n    if (!shouldAttachToTarget) {\n        __classPrivateFieldGet(this, _Browser_ignoredTargets, \"f\").add(targetInfo.targetId);\n        return;\n    }\n    const target = new _Target_js__WEBPACK_IMPORTED_MODULE_4__.Target(targetInfo, context, () => {\n        return __classPrivateFieldGet(this, _Browser_connection, \"f\").createSession(targetInfo);\n    }, __classPrivateFieldGet(this, _Browser_ignoreHTTPSErrors, \"f\"), (_a = __classPrivateFieldGet(this, _Browser_defaultViewport, \"f\")) !== null && _a !== void 0 ? _a : null, __classPrivateFieldGet(this, _Browser_screenshotTaskQueue, \"f\"), __classPrivateFieldGet(this, _Browser_isPageTargetCallback, \"f\"));\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(!__classPrivateFieldGet(this, _Browser_targets, \"f\").has(event.targetInfo.targetId), 'Target should not exist before targetCreated');\n    __classPrivateFieldGet(this, _Browser_targets, \"f\").set(event.targetInfo.targetId, target);\n    if (await target._initializedPromise) {\n        this.emit(\"targetcreated\" /* BrowserEmittedEvents.TargetCreated */, target);\n        context.emit(\"targetcreated\" /* BrowserContextEmittedEvents.TargetCreated */, target);\n    }\n}, _Browser_targetDestroyed = async function _Browser_targetDestroyed(event) {\n    if (__classPrivateFieldGet(this, _Browser_ignoredTargets, \"f\").has(event.targetId)) {\n        return;\n    }\n    const target = __classPrivateFieldGet(this, _Browser_targets, \"f\").get(event.targetId);\n    if (!target) {\n        throw new Error(`Missing target in _targetDestroyed (id = ${event.targetId})`);\n    }\n    target._initializedCallback(false);\n    __classPrivateFieldGet(this, _Browser_targets, \"f\").delete(event.targetId);\n    target._closedCallback();\n    if (await target._initializedPromise) {\n        this.emit(\"targetdestroyed\" /* BrowserEmittedEvents.TargetDestroyed */, target);\n        target\n            .browserContext()\n            .emit(\"targetdestroyed\" /* BrowserContextEmittedEvents.TargetDestroyed */, target);\n    }\n}, _Browser_targetInfoChanged = function _Browser_targetInfoChanged(event) {\n    if (__classPrivateFieldGet(this, _Browser_ignoredTargets, \"f\").has(event.targetInfo.targetId)) {\n        return;\n    }\n    const target = __classPrivateFieldGet(this, _Browser_targets, \"f\").get(event.targetInfo.targetId);\n    if (!target) {\n        throw new Error(`Missing target in targetInfoChanged (id = ${event.targetInfo.targetId})`);\n    }\n    const previousURL = target.url();\n    const wasInitialized = target._isInitialized;\n    target._targetInfoChanged(event.targetInfo);\n    if (wasInitialized && previousURL !== target.url()) {\n        this.emit(\"targetchanged\" /* BrowserEmittedEvents.TargetChanged */, target);\n        target\n            .browserContext()\n            .emit(\"targetchanged\" /* BrowserContextEmittedEvents.TargetChanged */, target);\n    }\n}, _Browser_getVersion = function _Browser_getVersion() {\n    return __classPrivateFieldGet(this, _Browser_connection, \"f\").send('Browser.getVersion');\n};\n/**\n * BrowserContexts provide a way to operate multiple independent browser\n * sessions. When a browser is launched, it has a single BrowserContext used by\n * default. The method {@link Browser.newPage | Browser.newPage} creates a page\n * in the default browser context.\n *\n * @remarks\n *\n * The Browser class extends from Puppeteer's {@link EventEmitter} class and\n * will emit various events which are documented in the\n * {@link BrowserContextEmittedEvents} enum.\n *\n * If a page opens another page, e.g. with a `window.open` call, the popup will\n * belong to the parent page's browser context.\n *\n * Puppeteer allows creation of \"incognito\" browser contexts with\n * {@link Browser.createIncognitoBrowserContext | Browser.createIncognitoBrowserContext}\n * method. \"Incognito\" browser contexts don't write any browsing data to disk.\n *\n * @example\n * ```js\n * // Create a new incognito browser context\n * const context = await browser.createIncognitoBrowserContext();\n * // Create a new page inside context.\n * const page = await context.newPage();\n * // ... do stuff with page ...\n * await page.goto('https://example.com');\n * // Dispose context once it's no longer needed.\n * await context.close();\n * ```\n * @public\n */\nclass BrowserContext extends _EventEmitter_js__WEBPACK_IMPORTED_MODULE_2__.EventEmitter {\n    /**\n     * @internal\n     */\n    constructor(connection, browser, contextId) {\n        super();\n        _BrowserContext_connection.set(this, void 0);\n        _BrowserContext_browser.set(this, void 0);\n        _BrowserContext_id.set(this, void 0);\n        __classPrivateFieldSet(this, _BrowserContext_connection, connection, \"f\");\n        __classPrivateFieldSet(this, _BrowserContext_browser, browser, \"f\");\n        __classPrivateFieldSet(this, _BrowserContext_id, contextId, \"f\");\n    }\n    /**\n     * An array of all active targets inside the browser context.\n     */\n    targets() {\n        return __classPrivateFieldGet(this, _BrowserContext_browser, \"f\").targets().filter((target) => {\n            return target.browserContext() === this;\n        });\n    }\n    /**\n     * This searches for a target in this specific browser context.\n     *\n     * @example\n     * An example of finding a target for a page opened via `window.open`:\n     * ```js\n     * await page.evaluate(() => window.open('https://www.example.com/'));\n     * const newWindowTarget = await browserContext.waitForTarget(target => target.url() === 'https://www.example.com/');\n     * ```\n     *\n     * @param predicate - A function to be run for every target\n     * @param options - An object of options. Accepts a timout,\n     * which is the maximum wait time in milliseconds.\n     * Pass `0` to disable the timeout. Defaults to 30 seconds.\n     * @returns Promise which resolves to the first target found\n     * that matches the `predicate` function.\n     */\n    waitForTarget(predicate, options = {}) {\n        return __classPrivateFieldGet(this, _BrowserContext_browser, \"f\").waitForTarget((target) => {\n            return target.browserContext() === this && predicate(target);\n        }, options);\n    }\n    /**\n     * An array of all pages inside the browser context.\n     *\n     * @returns Promise which resolves to an array of all open pages.\n     * Non visible pages, such as `\"background_page\"`, will not be listed here.\n     * You can find them using {@link Target.page | the target page}.\n     */\n    async pages() {\n        const pages = await Promise.all(this.targets()\n            .filter((target) => {\n            var _a;\n            return (target.type() === 'page' ||\n                (target.type() === 'other' &&\n                    ((_a = __classPrivateFieldGet(this, _BrowserContext_browser, \"f\")._getIsPageTargetCallback()) === null || _a === void 0 ? void 0 : _a(target._getTargetInfo()))));\n        })\n            .map((target) => {\n            return target.page();\n        }));\n        return pages.filter((page) => {\n            return !!page;\n        });\n    }\n    /**\n     * Returns whether BrowserContext is incognito.\n     * The default browser context is the only non-incognito browser context.\n     *\n     * @remarks\n     * The default browser context cannot be closed.\n     */\n    isIncognito() {\n        return !!__classPrivateFieldGet(this, _BrowserContext_id, \"f\");\n    }\n    /**\n     * @example\n     * ```js\n     * const context = browser.defaultBrowserContext();\n     * await context.overridePermissions('https://html5demos.com', ['geolocation']);\n     * ```\n     *\n     * @param origin - The origin to grant permissions to, e.g. \"https://example.com\".\n     * @param permissions - An array of permissions to grant.\n     * All permissions that are not listed here will be automatically denied.\n     */\n    async overridePermissions(origin, permissions) {\n        const protocolPermissions = permissions.map((permission) => {\n            const protocolPermission = WEB_PERMISSION_TO_PROTOCOL_PERMISSION.get(permission);\n            if (!protocolPermission) {\n                throw new Error('Unknown permission: ' + permission);\n            }\n            return protocolPermission;\n        });\n        await __classPrivateFieldGet(this, _BrowserContext_connection, \"f\").send('Browser.grantPermissions', {\n            origin,\n            browserContextId: __classPrivateFieldGet(this, _BrowserContext_id, \"f\") || undefined,\n            permissions: protocolPermissions,\n        });\n    }\n    /**\n     * Clears all permission overrides for the browser context.\n     *\n     * @example\n     * ```js\n     * const context = browser.defaultBrowserContext();\n     * context.overridePermissions('https://example.com', ['clipboard-read']);\n     * // do stuff ..\n     * context.clearPermissionOverrides();\n     * ```\n     */\n    async clearPermissionOverrides() {\n        await __classPrivateFieldGet(this, _BrowserContext_connection, \"f\").send('Browser.resetPermissions', {\n            browserContextId: __classPrivateFieldGet(this, _BrowserContext_id, \"f\") || undefined,\n        });\n    }\n    /**\n     * Creates a new page in the browser context.\n     */\n    newPage() {\n        return __classPrivateFieldGet(this, _BrowserContext_browser, \"f\")._createPageInContext(__classPrivateFieldGet(this, _BrowserContext_id, \"f\"));\n    }\n    /**\n     * The browser this browser context belongs to.\n     */\n    browser() {\n        return __classPrivateFieldGet(this, _BrowserContext_browser, \"f\");\n    }\n    /**\n     * Closes the browser context. All the targets that belong to the browser context\n     * will be closed.\n     *\n     * @remarks\n     * Only incognito browser contexts can be closed.\n     */\n    async close() {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(__classPrivateFieldGet(this, _BrowserContext_id, \"f\"), 'Non-incognito profiles cannot be closed!');\n        await __classPrivateFieldGet(this, _BrowserContext_browser, \"f\")._disposeContext(__classPrivateFieldGet(this, _BrowserContext_id, \"f\"));\n    }\n}\n_BrowserContext_connection = new WeakMap(), _BrowserContext_browser = new WeakMap(), _BrowserContext_id = new WeakMap();\n//# sourceMappingURL=Browser.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Browser.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/BrowserConnector.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/BrowserConnector.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"_connectToBrowser\": () => (/* binding */ _connectToBrowser)\n/* harmony export */ });\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/util.js\");\n/* harmony import */ var _environment_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../environment.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/environment.js\");\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./assert.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/assert.js\");\n/* harmony import */ var _Browser_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Browser.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Browser.js\");\n/* harmony import */ var _Connection_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Connection.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Connection.js\");\n/* harmony import */ var _fetch_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./fetch.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/fetch.js\");\n/**\n * Copyright 2020 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\nconst getWebSocketTransportClass = async () => {\n    return _environment_js__WEBPACK_IMPORTED_MODULE_1__.isNode\n        ? (await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../node/NodeWebSocketTransport.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/node/NodeWebSocketTransport.js\"))).NodeWebSocketTransport\n        : (await __webpack_require__.e(/*! import() */ \"_api_node_modules_gogoanime-api_node_modules_puppeteer_lib_esm_puppeteer_common_BrowserWebSoc-45a675\").then(__webpack_require__.bind(__webpack_require__, /*! ./BrowserWebSocketTransport.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/BrowserWebSocketTransport.js\")))\n            .BrowserWebSocketTransport;\n};\n/**\n * Users should never call this directly; it's called when calling\n * `puppeteer.connect`.\n *\n * @internal\n */\nasync function _connectToBrowser(options) {\n    const { browserWSEndpoint, browserURL, ignoreHTTPSErrors = false, defaultViewport = { width: 800, height: 600 }, transport, slowMo = 0, targetFilter, _isPageTarget: isPageTarget, } = options;\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_2__.assert)(Number(!!browserWSEndpoint) + Number(!!browserURL) + Number(!!transport) ===\n        1, 'Exactly one of browserWSEndpoint, browserURL or transport must be passed to puppeteer.connect');\n    let connection;\n    if (transport) {\n        connection = new _Connection_js__WEBPACK_IMPORTED_MODULE_4__.Connection('', transport, slowMo);\n    }\n    else if (browserWSEndpoint) {\n        const WebSocketClass = await getWebSocketTransportClass();\n        const connectionTransport = await WebSocketClass.create(browserWSEndpoint);\n        connection = new _Connection_js__WEBPACK_IMPORTED_MODULE_4__.Connection(browserWSEndpoint, connectionTransport, slowMo);\n    }\n    else if (browserURL) {\n        const connectionURL = await getWSEndpoint(browserURL);\n        const WebSocketClass = await getWebSocketTransportClass();\n        const connectionTransport = await WebSocketClass.create(connectionURL);\n        connection = new _Connection_js__WEBPACK_IMPORTED_MODULE_4__.Connection(connectionURL, connectionTransport, slowMo);\n    }\n    const { browserContextIds } = await connection.send('Target.getBrowserContexts');\n    return _Browser_js__WEBPACK_IMPORTED_MODULE_3__.Browser._create(connection, browserContextIds, ignoreHTTPSErrors, defaultViewport, undefined, () => {\n        return connection.send('Browser.close').catch(_util_js__WEBPACK_IMPORTED_MODULE_0__.debugError);\n    }, targetFilter, isPageTarget);\n}\nasync function getWSEndpoint(browserURL) {\n    const endpointURL = new URL('/json/version', browserURL);\n    const fetch = await (0,_fetch_js__WEBPACK_IMPORTED_MODULE_5__.getFetch)();\n    try {\n        const result = await fetch(endpointURL.toString(), {\n            method: 'GET',\n        });\n        if (!result.ok) {\n            throw new Error(`HTTP ${result.statusText}`);\n        }\n        const data = await result.json();\n        return data.webSocketDebuggerUrl;\n    }\n    catch (error) {\n        if ((0,_util_js__WEBPACK_IMPORTED_MODULE_0__.isErrorLike)(error)) {\n            error.message =\n                `Failed to fetch browser webSocket URL from ${endpointURL}: ` +\n                    error.message;\n        }\n        throw error;\n    }\n}\n//# sourceMappingURL=BrowserConnector.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvZ29nb2FuaW1lLWFwaS9ub2RlX21vZHVsZXMvcHVwcGV0ZWVyL2xpYi9lc20vcHVwcGV0ZWVyL2NvbW1vbi9Ccm93c2VyQ29ubmVjdG9yLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDb0Q7QUFDVDtBQUNOO0FBQ0c7QUFDSztBQUNQO0FBQ3RDO0FBQ0EsV0FBVyxtREFBTTtBQUNqQixpQkFBaUIsMk9BQTJDO0FBQzVELGlCQUFpQiwwVkFBd0M7QUFDekQ7QUFDQTtBQUNBO0FBQ0EsMENBQTBDO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxZQUFZLDhFQUE4RSx5QkFBeUIsc0VBQXNFO0FBQ3pMLElBQUksa0RBQU07QUFDVjtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsc0RBQVU7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsc0RBQVU7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixzREFBVTtBQUNuQztBQUNBLFlBQVksb0JBQW9CO0FBQ2hDLFdBQVcsd0RBQWU7QUFDMUIsc0RBQXNELGdEQUFVO0FBQ2hFLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsbURBQVE7QUFDaEM7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0Esb0NBQW9DLGtCQUFrQjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxxREFBVztBQUN2QjtBQUNBLDhEQUE4RCxZQUFZO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FuaW1lZmxpeC8uL25vZGVfbW9kdWxlcy9nb2dvYW5pbWUtYXBpL25vZGVfbW9kdWxlcy9wdXBwZXRlZXIvbGliL2VzbS9wdXBwZXRlZXIvY29tbW9uL0Jyb3dzZXJDb25uZWN0b3IuanM/NDhkNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBkZWJ1Z0Vycm9yLCBpc0Vycm9yTGlrZSB9IGZyb20gJy4vdXRpbC5qcyc7XG5pbXBvcnQgeyBpc05vZGUgfSBmcm9tICcuLi9lbnZpcm9ubWVudC5qcyc7XG5pbXBvcnQgeyBhc3NlcnQgfSBmcm9tICcuL2Fzc2VydC5qcyc7XG5pbXBvcnQgeyBCcm93c2VyLCB9IGZyb20gJy4vQnJvd3Nlci5qcyc7XG5pbXBvcnQgeyBDb25uZWN0aW9uIH0gZnJvbSAnLi9Db25uZWN0aW9uLmpzJztcbmltcG9ydCB7IGdldEZldGNoIH0gZnJvbSAnLi9mZXRjaC5qcyc7XG5jb25zdCBnZXRXZWJTb2NrZXRUcmFuc3BvcnRDbGFzcyA9IGFzeW5jICgpID0+IHtcbiAgICByZXR1cm4gaXNOb2RlXG4gICAgICAgID8gKGF3YWl0IGltcG9ydCgnLi4vbm9kZS9Ob2RlV2ViU29ja2V0VHJhbnNwb3J0LmpzJykpLk5vZGVXZWJTb2NrZXRUcmFuc3BvcnRcbiAgICAgICAgOiAoYXdhaXQgaW1wb3J0KCcuL0Jyb3dzZXJXZWJTb2NrZXRUcmFuc3BvcnQuanMnKSlcbiAgICAgICAgICAgIC5Ccm93c2VyV2ViU29ja2V0VHJhbnNwb3J0O1xufTtcbi8qKlxuICogVXNlcnMgc2hvdWxkIG5ldmVyIGNhbGwgdGhpcyBkaXJlY3RseTsgaXQncyBjYWxsZWQgd2hlbiBjYWxsaW5nXG4gKiBgcHVwcGV0ZWVyLmNvbm5lY3RgLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gX2Nvbm5lY3RUb0Jyb3dzZXIob3B0aW9ucykge1xuICAgIGNvbnN0IHsgYnJvd3NlcldTRW5kcG9pbnQsIGJyb3dzZXJVUkwsIGlnbm9yZUhUVFBTRXJyb3JzID0gZmFsc2UsIGRlZmF1bHRWaWV3cG9ydCA9IHsgd2lkdGg6IDgwMCwgaGVpZ2h0OiA2MDAgfSwgdHJhbnNwb3J0LCBzbG93TW8gPSAwLCB0YXJnZXRGaWx0ZXIsIF9pc1BhZ2VUYXJnZXQ6IGlzUGFnZVRhcmdldCwgfSA9IG9wdGlvbnM7XG4gICAgYXNzZXJ0KE51bWJlcighIWJyb3dzZXJXU0VuZHBvaW50KSArIE51bWJlcighIWJyb3dzZXJVUkwpICsgTnVtYmVyKCEhdHJhbnNwb3J0KSA9PT1cbiAgICAgICAgMSwgJ0V4YWN0bHkgb25lIG9mIGJyb3dzZXJXU0VuZHBvaW50LCBicm93c2VyVVJMIG9yIHRyYW5zcG9ydCBtdXN0IGJlIHBhc3NlZCB0byBwdXBwZXRlZXIuY29ubmVjdCcpO1xuICAgIGxldCBjb25uZWN0aW9uO1xuICAgIGlmICh0cmFuc3BvcnQpIHtcbiAgICAgICAgY29ubmVjdGlvbiA9IG5ldyBDb25uZWN0aW9uKCcnLCB0cmFuc3BvcnQsIHNsb3dNbyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGJyb3dzZXJXU0VuZHBvaW50KSB7XG4gICAgICAgIGNvbnN0IFdlYlNvY2tldENsYXNzID0gYXdhaXQgZ2V0V2ViU29ja2V0VHJhbnNwb3J0Q2xhc3MoKTtcbiAgICAgICAgY29uc3QgY29ubmVjdGlvblRyYW5zcG9ydCA9IGF3YWl0IFdlYlNvY2tldENsYXNzLmNyZWF0ZShicm93c2VyV1NFbmRwb2ludCk7XG4gICAgICAgIGNvbm5lY3Rpb24gPSBuZXcgQ29ubmVjdGlvbihicm93c2VyV1NFbmRwb2ludCwgY29ubmVjdGlvblRyYW5zcG9ydCwgc2xvd01vKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoYnJvd3NlclVSTCkge1xuICAgICAgICBjb25zdCBjb25uZWN0aW9uVVJMID0gYXdhaXQgZ2V0V1NFbmRwb2ludChicm93c2VyVVJMKTtcbiAgICAgICAgY29uc3QgV2ViU29ja2V0Q2xhc3MgPSBhd2FpdCBnZXRXZWJTb2NrZXRUcmFuc3BvcnRDbGFzcygpO1xuICAgICAgICBjb25zdCBjb25uZWN0aW9uVHJhbnNwb3J0ID0gYXdhaXQgV2ViU29ja2V0Q2xhc3MuY3JlYXRlKGNvbm5lY3Rpb25VUkwpO1xuICAgICAgICBjb25uZWN0aW9uID0gbmV3IENvbm5lY3Rpb24oY29ubmVjdGlvblVSTCwgY29ubmVjdGlvblRyYW5zcG9ydCwgc2xvd01vKTtcbiAgICB9XG4gICAgY29uc3QgeyBicm93c2VyQ29udGV4dElkcyB9ID0gYXdhaXQgY29ubmVjdGlvbi5zZW5kKCdUYXJnZXQuZ2V0QnJvd3NlckNvbnRleHRzJyk7XG4gICAgcmV0dXJuIEJyb3dzZXIuX2NyZWF0ZShjb25uZWN0aW9uLCBicm93c2VyQ29udGV4dElkcywgaWdub3JlSFRUUFNFcnJvcnMsIGRlZmF1bHRWaWV3cG9ydCwgdW5kZWZpbmVkLCAoKSA9PiB7XG4gICAgICAgIHJldHVybiBjb25uZWN0aW9uLnNlbmQoJ0Jyb3dzZXIuY2xvc2UnKS5jYXRjaChkZWJ1Z0Vycm9yKTtcbiAgICB9LCB0YXJnZXRGaWx0ZXIsIGlzUGFnZVRhcmdldCk7XG59XG5hc3luYyBmdW5jdGlvbiBnZXRXU0VuZHBvaW50KGJyb3dzZXJVUkwpIHtcbiAgICBjb25zdCBlbmRwb2ludFVSTCA9IG5ldyBVUkwoJy9qc29uL3ZlcnNpb24nLCBicm93c2VyVVJMKTtcbiAgICBjb25zdCBmZXRjaCA9IGF3YWl0IGdldEZldGNoKCk7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZmV0Y2goZW5kcG9pbnRVUkwudG9TdHJpbmcoKSwge1xuICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghcmVzdWx0Lm9rKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEhUVFAgJHtyZXN1bHQuc3RhdHVzVGV4dH1gKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzdWx0Lmpzb24oKTtcbiAgICAgICAgcmV0dXJuIGRhdGEud2ViU29ja2V0RGVidWdnZXJVcmw7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoaXNFcnJvckxpa2UoZXJyb3IpKSB7XG4gICAgICAgICAgICBlcnJvci5tZXNzYWdlID1cbiAgICAgICAgICAgICAgICBgRmFpbGVkIHRvIGZldGNoIGJyb3dzZXIgd2ViU29ja2V0IFVSTCBmcm9tICR7ZW5kcG9pbnRVUkx9OiBgICtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IubWVzc2FnZTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Ccm93c2VyQ29ubmVjdG9yLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/BrowserConnector.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Connection.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Connection.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CDPSession\": () => (/* binding */ CDPSession),\n/* harmony export */   \"CDPSessionEmittedEvents\": () => (/* binding */ CDPSessionEmittedEvents),\n/* harmony export */   \"Connection\": () => (/* binding */ Connection),\n/* harmony export */   \"ConnectionEmittedEvents\": () => (/* binding */ ConnectionEmittedEvents)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./assert.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/assert.js\");\n/* harmony import */ var _Debug_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Debug.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Debug.js\");\n/* harmony import */ var _EventEmitter_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./EventEmitter.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/EventEmitter.js\");\n/* harmony import */ var _Errors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Errors.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Errors.js\");\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Connection_instances, _Connection_url, _Connection_transport, _Connection_delay, _Connection_lastId, _Connection_sessions, _Connection_closed, _Connection_callbacks, _Connection_onMessage, _Connection_onClose, _CDPSession_sessionId, _CDPSession_targetType, _CDPSession_callbacks, _CDPSession_connection;\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nconst debugProtocolSend = (0,_Debug_js__WEBPACK_IMPORTED_MODULE_1__.debug)('puppeteer:protocol:SEND ►');\nconst debugProtocolReceive = (0,_Debug_js__WEBPACK_IMPORTED_MODULE_1__.debug)('puppeteer:protocol:RECV ◀');\n\n\n/**\n * Internal events that the Connection class emits.\n *\n * @internal\n */\nconst ConnectionEmittedEvents = {\n    Disconnected: Symbol('Connection.Disconnected'),\n};\n/**\n * @public\n */\nclass Connection extends _EventEmitter_js__WEBPACK_IMPORTED_MODULE_2__.EventEmitter {\n    constructor(url, transport, delay = 0) {\n        super();\n        _Connection_instances.add(this);\n        _Connection_url.set(this, void 0);\n        _Connection_transport.set(this, void 0);\n        _Connection_delay.set(this, void 0);\n        _Connection_lastId.set(this, 0);\n        _Connection_sessions.set(this, new Map());\n        _Connection_closed.set(this, false);\n        _Connection_callbacks.set(this, new Map());\n        __classPrivateFieldSet(this, _Connection_url, url, \"f\");\n        __classPrivateFieldSet(this, _Connection_delay, delay, \"f\");\n        __classPrivateFieldSet(this, _Connection_transport, transport, \"f\");\n        __classPrivateFieldGet(this, _Connection_transport, \"f\").onmessage = __classPrivateFieldGet(this, _Connection_instances, \"m\", _Connection_onMessage).bind(this);\n        __classPrivateFieldGet(this, _Connection_transport, \"f\").onclose = __classPrivateFieldGet(this, _Connection_instances, \"m\", _Connection_onClose).bind(this);\n    }\n    static fromSession(session) {\n        return session.connection();\n    }\n    /**\n     * @internal\n     */\n    get _closed() {\n        return __classPrivateFieldGet(this, _Connection_closed, \"f\");\n    }\n    /**\n     * @param sessionId - The session id\n     * @returns The current CDP session if it exists\n     */\n    session(sessionId) {\n        return __classPrivateFieldGet(this, _Connection_sessions, \"f\").get(sessionId) || null;\n    }\n    url() {\n        return __classPrivateFieldGet(this, _Connection_url, \"f\");\n    }\n    send(method, ...paramArgs) {\n        // There is only ever 1 param arg passed, but the Protocol defines it as an\n        // array of 0 or 1 items See this comment:\n        // https://github.com/ChromeDevTools/devtools-protocol/pull/113#issuecomment-412603285\n        // which explains why the protocol defines the params this way for better\n        // type-inference.\n        // So now we check if there are any params or not and deal with them accordingly.\n        const params = paramArgs.length ? paramArgs[0] : undefined;\n        const id = this._rawSend({ method, params });\n        return new Promise((resolve, reject) => {\n            __classPrivateFieldGet(this, _Connection_callbacks, \"f\").set(id, {\n                resolve,\n                reject,\n                error: new _Errors_js__WEBPACK_IMPORTED_MODULE_3__.ProtocolError(),\n                method,\n            });\n        });\n    }\n    /**\n     * @internal\n     */\n    _rawSend(message) {\n        var _a;\n        const id = __classPrivateFieldSet(this, _Connection_lastId, (_a = __classPrivateFieldGet(this, _Connection_lastId, \"f\"), ++_a), \"f\");\n        const stringifiedMessage = JSON.stringify(Object.assign({}, message, { id }));\n        debugProtocolSend(stringifiedMessage);\n        __classPrivateFieldGet(this, _Connection_transport, \"f\").send(stringifiedMessage);\n        return id;\n    }\n    dispose() {\n        __classPrivateFieldGet(this, _Connection_instances, \"m\", _Connection_onClose).call(this);\n        __classPrivateFieldGet(this, _Connection_transport, \"f\").close();\n    }\n    /**\n     * @param targetInfo - The target info\n     * @returns The CDP session that is created\n     */\n    async createSession(targetInfo) {\n        const { sessionId } = await this.send('Target.attachToTarget', {\n            targetId: targetInfo.targetId,\n            flatten: true,\n        });\n        const session = __classPrivateFieldGet(this, _Connection_sessions, \"f\").get(sessionId);\n        if (!session) {\n            throw new Error('CDPSession creation failed.');\n        }\n        return session;\n    }\n}\n_Connection_url = new WeakMap(), _Connection_transport = new WeakMap(), _Connection_delay = new WeakMap(), _Connection_lastId = new WeakMap(), _Connection_sessions = new WeakMap(), _Connection_closed = new WeakMap(), _Connection_callbacks = new WeakMap(), _Connection_instances = new WeakSet(), _Connection_onMessage = async function _Connection_onMessage(message) {\n    if (__classPrivateFieldGet(this, _Connection_delay, \"f\")) {\n        await new Promise((f) => {\n            return setTimeout(f, __classPrivateFieldGet(this, _Connection_delay, \"f\"));\n        });\n    }\n    debugProtocolReceive(message);\n    const object = JSON.parse(message);\n    if (object.method === 'Target.attachedToTarget') {\n        const sessionId = object.params.sessionId;\n        const session = new CDPSession(this, object.params.targetInfo.type, sessionId);\n        __classPrivateFieldGet(this, _Connection_sessions, \"f\").set(sessionId, session);\n        this.emit('sessionattached', session);\n        const parentSession = __classPrivateFieldGet(this, _Connection_sessions, \"f\").get(object.sessionId);\n        if (parentSession) {\n            parentSession.emit('sessionattached', session);\n        }\n    }\n    else if (object.method === 'Target.detachedFromTarget') {\n        const session = __classPrivateFieldGet(this, _Connection_sessions, \"f\").get(object.params.sessionId);\n        if (session) {\n            session._onClosed();\n            __classPrivateFieldGet(this, _Connection_sessions, \"f\").delete(object.params.sessionId);\n            this.emit('sessiondetached', session);\n            const parentSession = __classPrivateFieldGet(this, _Connection_sessions, \"f\").get(object.sessionId);\n            if (parentSession) {\n                parentSession.emit('sessiondetached', session);\n            }\n        }\n    }\n    if (object.sessionId) {\n        const session = __classPrivateFieldGet(this, _Connection_sessions, \"f\").get(object.sessionId);\n        if (session) {\n            session._onMessage(object);\n        }\n    }\n    else if (object.id) {\n        const callback = __classPrivateFieldGet(this, _Connection_callbacks, \"f\").get(object.id);\n        // Callbacks could be all rejected if someone has called `.dispose()`.\n        if (callback) {\n            __classPrivateFieldGet(this, _Connection_callbacks, \"f\").delete(object.id);\n            if (object.error) {\n                callback.reject(createProtocolError(callback.error, callback.method, object));\n            }\n            else {\n                callback.resolve(object.result);\n            }\n        }\n    }\n    else {\n        this.emit(object.method, object.params);\n    }\n}, _Connection_onClose = function _Connection_onClose() {\n    if (__classPrivateFieldGet(this, _Connection_closed, \"f\")) {\n        return;\n    }\n    __classPrivateFieldSet(this, _Connection_closed, true, \"f\");\n    __classPrivateFieldGet(this, _Connection_transport, \"f\").onmessage = undefined;\n    __classPrivateFieldGet(this, _Connection_transport, \"f\").onclose = undefined;\n    for (const callback of __classPrivateFieldGet(this, _Connection_callbacks, \"f\").values()) {\n        callback.reject(rewriteError(callback.error, `Protocol error (${callback.method}): Target closed.`));\n    }\n    __classPrivateFieldGet(this, _Connection_callbacks, \"f\").clear();\n    for (const session of __classPrivateFieldGet(this, _Connection_sessions, \"f\").values()) {\n        session._onClosed();\n    }\n    __classPrivateFieldGet(this, _Connection_sessions, \"f\").clear();\n    this.emit(ConnectionEmittedEvents.Disconnected);\n};\n/**\n * Internal events that the CDPSession class emits.\n *\n * @internal\n */\nconst CDPSessionEmittedEvents = {\n    Disconnected: Symbol('CDPSession.Disconnected'),\n};\n/**\n * The `CDPSession` instances are used to talk raw Chrome Devtools Protocol.\n *\n * @remarks\n *\n * Protocol methods can be called with {@link CDPSession.send} method and protocol\n * events can be subscribed to with `CDPSession.on` method.\n *\n * Useful links: {@link https://chromedevtools.github.io/devtools-protocol/ | DevTools Protocol Viewer}\n * and {@link https://github.com/aslushnikov/getting-started-with-cdp/blob/HEAD/README.md | Getting Started with DevTools Protocol}.\n *\n * @example\n * ```js\n * const client = await page.target().createCDPSession();\n * await client.send('Animation.enable');\n * client.on('Animation.animationCreated', () => console.log('Animation created!'));\n * const response = await client.send('Animation.getPlaybackRate');\n * console.log('playback rate is ' + response.playbackRate);\n * await client.send('Animation.setPlaybackRate', {\n *   playbackRate: response.playbackRate / 2\n * });\n * ```\n *\n * @public\n */\nclass CDPSession extends _EventEmitter_js__WEBPACK_IMPORTED_MODULE_2__.EventEmitter {\n    /**\n     * @internal\n     */\n    constructor(connection, targetType, sessionId) {\n        super();\n        _CDPSession_sessionId.set(this, void 0);\n        _CDPSession_targetType.set(this, void 0);\n        _CDPSession_callbacks.set(this, new Map());\n        _CDPSession_connection.set(this, void 0);\n        __classPrivateFieldSet(this, _CDPSession_connection, connection, \"f\");\n        __classPrivateFieldSet(this, _CDPSession_targetType, targetType, \"f\");\n        __classPrivateFieldSet(this, _CDPSession_sessionId, sessionId, \"f\");\n    }\n    connection() {\n        return __classPrivateFieldGet(this, _CDPSession_connection, \"f\");\n    }\n    send(method, ...paramArgs) {\n        if (!__classPrivateFieldGet(this, _CDPSession_connection, \"f\")) {\n            return Promise.reject(new Error(`Protocol error (${method}): Session closed. Most likely the ${__classPrivateFieldGet(this, _CDPSession_targetType, \"f\")} has been closed.`));\n        }\n        // See the comment in Connection#send explaining why we do this.\n        const params = paramArgs.length ? paramArgs[0] : undefined;\n        const id = __classPrivateFieldGet(this, _CDPSession_connection, \"f\")._rawSend({\n            sessionId: __classPrivateFieldGet(this, _CDPSession_sessionId, \"f\"),\n            method,\n            params,\n        });\n        return new Promise((resolve, reject) => {\n            __classPrivateFieldGet(this, _CDPSession_callbacks, \"f\").set(id, {\n                resolve,\n                reject,\n                error: new _Errors_js__WEBPACK_IMPORTED_MODULE_3__.ProtocolError(),\n                method,\n            });\n        });\n    }\n    /**\n     * @internal\n     */\n    _onMessage(object) {\n        const callback = object.id ? __classPrivateFieldGet(this, _CDPSession_callbacks, \"f\").get(object.id) : undefined;\n        if (object.id && callback) {\n            __classPrivateFieldGet(this, _CDPSession_callbacks, \"f\").delete(object.id);\n            if (object.error) {\n                callback.reject(createProtocolError(callback.error, callback.method, object));\n            }\n            else {\n                callback.resolve(object.result);\n            }\n        }\n        else {\n            (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(!object.id);\n            this.emit(object.method, object.params);\n        }\n    }\n    /**\n     * Detaches the cdpSession from the target. Once detached, the cdpSession object\n     * won't emit any events and can't be used to send messages.\n     */\n    async detach() {\n        if (!__classPrivateFieldGet(this, _CDPSession_connection, \"f\")) {\n            throw new Error(`Session already detached. Most likely the ${__classPrivateFieldGet(this, _CDPSession_targetType, \"f\")} has been closed.`);\n        }\n        await __classPrivateFieldGet(this, _CDPSession_connection, \"f\").send('Target.detachFromTarget', {\n            sessionId: __classPrivateFieldGet(this, _CDPSession_sessionId, \"f\"),\n        });\n    }\n    /**\n     * @internal\n     */\n    _onClosed() {\n        for (const callback of __classPrivateFieldGet(this, _CDPSession_callbacks, \"f\").values()) {\n            callback.reject(rewriteError(callback.error, `Protocol error (${callback.method}): Target closed.`));\n        }\n        __classPrivateFieldGet(this, _CDPSession_callbacks, \"f\").clear();\n        __classPrivateFieldSet(this, _CDPSession_connection, undefined, \"f\");\n        this.emit(CDPSessionEmittedEvents.Disconnected);\n    }\n    /**\n     * Returns the session's id.\n     */\n    id() {\n        return __classPrivateFieldGet(this, _CDPSession_sessionId, \"f\");\n    }\n}\n_CDPSession_sessionId = new WeakMap(), _CDPSession_targetType = new WeakMap(), _CDPSession_callbacks = new WeakMap(), _CDPSession_connection = new WeakMap();\nfunction createProtocolError(error, method, object) {\n    let message = `Protocol error (${method}): ${object.error.message}`;\n    if ('data' in object.error) {\n        message += ` ${object.error.data}`;\n    }\n    return rewriteError(error, message, object.error.message);\n}\nfunction rewriteError(error, message, originalMessage) {\n    error.message = message;\n    error.originalMessage = originalMessage !== null && originalMessage !== void 0 ? originalMessage : error.originalMessage;\n    return error;\n}\n//# sourceMappingURL=Connection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Connection.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/ConsoleMessage.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/ConsoleMessage.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ConsoleMessage\": () => (/* binding */ ConsoleMessage)\n/* harmony export */ });\n/**\n * Copyright 2020 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _ConsoleMessage_type, _ConsoleMessage_text, _ConsoleMessage_args, _ConsoleMessage_stackTraceLocations;\n/**\n * ConsoleMessage objects are dispatched by page via the 'console' event.\n * @public\n */\nclass ConsoleMessage {\n    /**\n     * @public\n     */\n    constructor(type, text, args, stackTraceLocations) {\n        _ConsoleMessage_type.set(this, void 0);\n        _ConsoleMessage_text.set(this, void 0);\n        _ConsoleMessage_args.set(this, void 0);\n        _ConsoleMessage_stackTraceLocations.set(this, void 0);\n        __classPrivateFieldSet(this, _ConsoleMessage_type, type, \"f\");\n        __classPrivateFieldSet(this, _ConsoleMessage_text, text, \"f\");\n        __classPrivateFieldSet(this, _ConsoleMessage_args, args, \"f\");\n        __classPrivateFieldSet(this, _ConsoleMessage_stackTraceLocations, stackTraceLocations, \"f\");\n    }\n    /**\n     * @returns The type of the console message.\n     */\n    type() {\n        return __classPrivateFieldGet(this, _ConsoleMessage_type, \"f\");\n    }\n    /**\n     * @returns The text of the console message.\n     */\n    text() {\n        return __classPrivateFieldGet(this, _ConsoleMessage_text, \"f\");\n    }\n    /**\n     * @returns An array of arguments passed to the console.\n     */\n    args() {\n        return __classPrivateFieldGet(this, _ConsoleMessage_args, \"f\");\n    }\n    /**\n     * @returns The location of the console message.\n     */\n    location() {\n        var _a;\n        return (_a = __classPrivateFieldGet(this, _ConsoleMessage_stackTraceLocations, \"f\")[0]) !== null && _a !== void 0 ? _a : {};\n    }\n    /**\n     * @returns The array of locations on the stack of the console message.\n     */\n    stackTrace() {\n        return __classPrivateFieldGet(this, _ConsoleMessage_stackTraceLocations, \"f\");\n    }\n}\n_ConsoleMessage_type = new WeakMap(), _ConsoleMessage_text = new WeakMap(), _ConsoleMessage_args = new WeakMap(), _ConsoleMessage_stackTraceLocations = new WeakMap();\n//# sourceMappingURL=ConsoleMessage.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvZ29nb2FuaW1lLWFwaS9ub2RlX21vZHVsZXMvcHVwcGV0ZWVyL2xpYi9lc20vcHVwcGV0ZWVyL2NvbW1vbi9Db25zb2xlTWVzc2FnZS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLFNBQUksSUFBSSxTQUFJO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsU0FBSSxJQUFJLFNBQUk7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW5pbWVmbGl4Ly4vbm9kZV9tb2R1bGVzL2dvZ29hbmltZS1hcGkvbm9kZV9tb2R1bGVzL3B1cHBldGVlci9saWIvZXNtL3B1cHBldGVlci9jb21tb24vQ29uc29sZU1lc3NhZ2UuanM/ZTdlNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG52YXIgX19jbGFzc1ByaXZhdGVGaWVsZFNldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZFNldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJtXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIChraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IGYudmFsdWUgPSB2YWx1ZSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpKSwgdmFsdWU7XG59O1xudmFyIF9fY2xhc3NQcml2YXRlRmllbGRHZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRHZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcbn07XG52YXIgX0NvbnNvbGVNZXNzYWdlX3R5cGUsIF9Db25zb2xlTWVzc2FnZV90ZXh0LCBfQ29uc29sZU1lc3NhZ2VfYXJncywgX0NvbnNvbGVNZXNzYWdlX3N0YWNrVHJhY2VMb2NhdGlvbnM7XG4vKipcbiAqIENvbnNvbGVNZXNzYWdlIG9iamVjdHMgYXJlIGRpc3BhdGNoZWQgYnkgcGFnZSB2aWEgdGhlICdjb25zb2xlJyBldmVudC5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIENvbnNvbGVNZXNzYWdlIHtcbiAgICAvKipcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodHlwZSwgdGV4dCwgYXJncywgc3RhY2tUcmFjZUxvY2F0aW9ucykge1xuICAgICAgICBfQ29uc29sZU1lc3NhZ2VfdHlwZS5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX0NvbnNvbGVNZXNzYWdlX3RleHQuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9Db25zb2xlTWVzc2FnZV9hcmdzLnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBfQ29uc29sZU1lc3NhZ2Vfc3RhY2tUcmFjZUxvY2F0aW9ucy5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfQ29uc29sZU1lc3NhZ2VfdHlwZSwgdHlwZSwgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9Db25zb2xlTWVzc2FnZV90ZXh0LCB0ZXh0LCBcImZcIik7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX0NvbnNvbGVNZXNzYWdlX2FyZ3MsIGFyZ3MsIFwiZlwiKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfQ29uc29sZU1lc3NhZ2Vfc3RhY2tUcmFjZUxvY2F0aW9ucywgc3RhY2tUcmFjZUxvY2F0aW9ucywgXCJmXCIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyBUaGUgdHlwZSBvZiB0aGUgY29uc29sZSBtZXNzYWdlLlxuICAgICAqL1xuICAgIHR5cGUoKSB7XG4gICAgICAgIHJldHVybiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Db25zb2xlTWVzc2FnZV90eXBlLCBcImZcIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIFRoZSB0ZXh0IG9mIHRoZSBjb25zb2xlIG1lc3NhZ2UuXG4gICAgICovXG4gICAgdGV4dCgpIHtcbiAgICAgICAgcmV0dXJuIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0NvbnNvbGVNZXNzYWdlX3RleHQsIFwiZlwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgQW4gYXJyYXkgb2YgYXJndW1lbnRzIHBhc3NlZCB0byB0aGUgY29uc29sZS5cbiAgICAgKi9cbiAgICBhcmdzKCkge1xuICAgICAgICByZXR1cm4gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQ29uc29sZU1lc3NhZ2VfYXJncywgXCJmXCIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyBUaGUgbG9jYXRpb24gb2YgdGhlIGNvbnNvbGUgbWVzc2FnZS5cbiAgICAgKi9cbiAgICBsb2NhdGlvbigpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gKF9hID0gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQ29uc29sZU1lc3NhZ2Vfc3RhY2tUcmFjZUxvY2F0aW9ucywgXCJmXCIpWzBdKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB7fTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgVGhlIGFycmF5IG9mIGxvY2F0aW9ucyBvbiB0aGUgc3RhY2sgb2YgdGhlIGNvbnNvbGUgbWVzc2FnZS5cbiAgICAgKi9cbiAgICBzdGFja1RyYWNlKCkge1xuICAgICAgICByZXR1cm4gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQ29uc29sZU1lc3NhZ2Vfc3RhY2tUcmFjZUxvY2F0aW9ucywgXCJmXCIpO1xuICAgIH1cbn1cbl9Db25zb2xlTWVzc2FnZV90eXBlID0gbmV3IFdlYWtNYXAoKSwgX0NvbnNvbGVNZXNzYWdlX3RleHQgPSBuZXcgV2Vha01hcCgpLCBfQ29uc29sZU1lc3NhZ2VfYXJncyA9IG5ldyBXZWFrTWFwKCksIF9Db25zb2xlTWVzc2FnZV9zdGFja1RyYWNlTG9jYXRpb25zID0gbmV3IFdlYWtNYXAoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNvbnNvbGVNZXNzYWdlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/ConsoleMessage.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Coverage.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Coverage.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CSSCoverage\": () => (/* binding */ CSSCoverage),\n/* harmony export */   \"Coverage\": () => (/* binding */ Coverage),\n/* harmony export */   \"JSCoverage\": () => (/* binding */ JSCoverage)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./assert.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/assert.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/util.js\");\n/* harmony import */ var _ExecutionContext_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ExecutionContext.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/ExecutionContext.js\");\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Coverage_jsCoverage, _Coverage_cssCoverage, _JSCoverage_instances, _JSCoverage_client, _JSCoverage_enabled, _JSCoverage_scriptURLs, _JSCoverage_scriptSources, _JSCoverage_eventListeners, _JSCoverage_resetOnNavigation, _JSCoverage_reportAnonymousScripts, _JSCoverage_includeRawScriptCoverage, _JSCoverage_onExecutionContextsCleared, _JSCoverage_onScriptParsed, _CSSCoverage_instances, _CSSCoverage_client, _CSSCoverage_enabled, _CSSCoverage_stylesheetURLs, _CSSCoverage_stylesheetSources, _CSSCoverage_eventListeners, _CSSCoverage_resetOnNavigation, _CSSCoverage_onExecutionContextsCleared, _CSSCoverage_onStyleSheet;\n\n\n\n\n/**\n * The Coverage class provides methods to gathers information about parts of\n * JavaScript and CSS that were used by the page.\n *\n * @remarks\n * To output coverage in a form consumable by {@link https://github.com/istanbuljs | Istanbul},\n * see {@link https://github.com/istanbuljs/puppeteer-to-istanbul | puppeteer-to-istanbul}.\n *\n * @example\n * An example of using JavaScript and CSS coverage to get percentage of initially\n * executed code:\n * ```js\n * // Enable both JavaScript and CSS coverage\n * await Promise.all([\n *   page.coverage.startJSCoverage(),\n *   page.coverage.startCSSCoverage()\n * ]);\n * // Navigate to page\n * await page.goto('https://example.com');\n * // Disable both JavaScript and CSS coverage\n * const [jsCoverage, cssCoverage] = await Promise.all([\n *   page.coverage.stopJSCoverage(),\n *   page.coverage.stopCSSCoverage(),\n * ]);\n * let totalBytes = 0;\n * let usedBytes = 0;\n * const coverage = [...jsCoverage, ...cssCoverage];\n * for (const entry of coverage) {\n *   totalBytes += entry.text.length;\n *   for (const range of entry.ranges)\n *     usedBytes += range.end - range.start - 1;\n * }\n * console.log(`Bytes used: ${usedBytes / totalBytes * 100}%`);\n * ```\n * @public\n */\nclass Coverage {\n    constructor(client) {\n        _Coverage_jsCoverage.set(this, void 0);\n        _Coverage_cssCoverage.set(this, void 0);\n        __classPrivateFieldSet(this, _Coverage_jsCoverage, new JSCoverage(client), \"f\");\n        __classPrivateFieldSet(this, _Coverage_cssCoverage, new CSSCoverage(client), \"f\");\n    }\n    /**\n     * @param options - Set of configurable options for coverage defaults to\n     * `resetOnNavigation : true, reportAnonymousScripts : false`\n     * @returns Promise that resolves when coverage is started.\n     *\n     * @remarks\n     * Anonymous scripts are ones that don't have an associated url. These are\n     * scripts that are dynamically created on the page using `eval` or\n     * `new Function`. If `reportAnonymousScripts` is set to `true`, anonymous\n     * scripts will have `pptr://__puppeteer_evaluation_script__` as their URL.\n     */\n    async startJSCoverage(options = {}) {\n        return await __classPrivateFieldGet(this, _Coverage_jsCoverage, \"f\").start(options);\n    }\n    /**\n     * @returns Promise that resolves to the array of coverage reports for\n     * all scripts.\n     *\n     * @remarks\n     * JavaScript Coverage doesn't include anonymous scripts by default.\n     * However, scripts with sourceURLs are reported.\n     */\n    async stopJSCoverage() {\n        return await __classPrivateFieldGet(this, _Coverage_jsCoverage, \"f\").stop();\n    }\n    /**\n     * @param options - Set of configurable options for coverage, defaults to\n     * `resetOnNavigation : true`\n     * @returns Promise that resolves when coverage is started.\n     */\n    async startCSSCoverage(options = {}) {\n        return await __classPrivateFieldGet(this, _Coverage_cssCoverage, \"f\").start(options);\n    }\n    /**\n     * @returns Promise that resolves to the array of coverage reports\n     * for all stylesheets.\n     * @remarks\n     * CSS Coverage doesn't include dynamically injected style tags\n     * without sourceURLs.\n     */\n    async stopCSSCoverage() {\n        return await __classPrivateFieldGet(this, _Coverage_cssCoverage, \"f\").stop();\n    }\n}\n_Coverage_jsCoverage = new WeakMap(), _Coverage_cssCoverage = new WeakMap();\n/**\n * @public\n */\nclass JSCoverage {\n    constructor(client) {\n        _JSCoverage_instances.add(this);\n        _JSCoverage_client.set(this, void 0);\n        _JSCoverage_enabled.set(this, false);\n        _JSCoverage_scriptURLs.set(this, new Map());\n        _JSCoverage_scriptSources.set(this, new Map());\n        _JSCoverage_eventListeners.set(this, []);\n        _JSCoverage_resetOnNavigation.set(this, false);\n        _JSCoverage_reportAnonymousScripts.set(this, false);\n        _JSCoverage_includeRawScriptCoverage.set(this, false);\n        __classPrivateFieldSet(this, _JSCoverage_client, client, \"f\");\n    }\n    async start(options = {}) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(!__classPrivateFieldGet(this, _JSCoverage_enabled, \"f\"), 'JSCoverage is already enabled');\n        const { resetOnNavigation = true, reportAnonymousScripts = false, includeRawScriptCoverage = false, } = options;\n        __classPrivateFieldSet(this, _JSCoverage_resetOnNavigation, resetOnNavigation, \"f\");\n        __classPrivateFieldSet(this, _JSCoverage_reportAnonymousScripts, reportAnonymousScripts, \"f\");\n        __classPrivateFieldSet(this, _JSCoverage_includeRawScriptCoverage, includeRawScriptCoverage, \"f\");\n        __classPrivateFieldSet(this, _JSCoverage_enabled, true, \"f\");\n        __classPrivateFieldGet(this, _JSCoverage_scriptURLs, \"f\").clear();\n        __classPrivateFieldGet(this, _JSCoverage_scriptSources, \"f\").clear();\n        __classPrivateFieldSet(this, _JSCoverage_eventListeners, [\n            (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.addEventListener)(__classPrivateFieldGet(this, _JSCoverage_client, \"f\"), 'Debugger.scriptParsed', __classPrivateFieldGet(this, _JSCoverage_instances, \"m\", _JSCoverage_onScriptParsed).bind(this)),\n            (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.addEventListener)(__classPrivateFieldGet(this, _JSCoverage_client, \"f\"), 'Runtime.executionContextsCleared', __classPrivateFieldGet(this, _JSCoverage_instances, \"m\", _JSCoverage_onExecutionContextsCleared).bind(this)),\n        ], \"f\");\n        await Promise.all([\n            __classPrivateFieldGet(this, _JSCoverage_client, \"f\").send('Profiler.enable'),\n            __classPrivateFieldGet(this, _JSCoverage_client, \"f\").send('Profiler.startPreciseCoverage', {\n                callCount: __classPrivateFieldGet(this, _JSCoverage_includeRawScriptCoverage, \"f\"),\n                detailed: true,\n            }),\n            __classPrivateFieldGet(this, _JSCoverage_client, \"f\").send('Debugger.enable'),\n            __classPrivateFieldGet(this, _JSCoverage_client, \"f\").send('Debugger.setSkipAllPauses', { skip: true }),\n        ]);\n    }\n    async stop() {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(__classPrivateFieldGet(this, _JSCoverage_enabled, \"f\"), 'JSCoverage is not enabled');\n        __classPrivateFieldSet(this, _JSCoverage_enabled, false, \"f\");\n        const result = await Promise.all([\n            __classPrivateFieldGet(this, _JSCoverage_client, \"f\").send('Profiler.takePreciseCoverage'),\n            __classPrivateFieldGet(this, _JSCoverage_client, \"f\").send('Profiler.stopPreciseCoverage'),\n            __classPrivateFieldGet(this, _JSCoverage_client, \"f\").send('Profiler.disable'),\n            __classPrivateFieldGet(this, _JSCoverage_client, \"f\").send('Debugger.disable'),\n        ]);\n        (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.removeEventListeners)(__classPrivateFieldGet(this, _JSCoverage_eventListeners, \"f\"));\n        const coverage = [];\n        const profileResponse = result[0];\n        for (const entry of profileResponse.result) {\n            let url = __classPrivateFieldGet(this, _JSCoverage_scriptURLs, \"f\").get(entry.scriptId);\n            if (!url && __classPrivateFieldGet(this, _JSCoverage_reportAnonymousScripts, \"f\")) {\n                url = 'debugger://VM' + entry.scriptId;\n            }\n            const text = __classPrivateFieldGet(this, _JSCoverage_scriptSources, \"f\").get(entry.scriptId);\n            if (text === undefined || url === undefined) {\n                continue;\n            }\n            const flattenRanges = [];\n            for (const func of entry.functions) {\n                flattenRanges.push(...func.ranges);\n            }\n            const ranges = convertToDisjointRanges(flattenRanges);\n            if (!__classPrivateFieldGet(this, _JSCoverage_includeRawScriptCoverage, \"f\")) {\n                coverage.push({ url, ranges, text });\n            }\n            else {\n                coverage.push({ url, ranges, text, rawScriptCoverage: entry });\n            }\n        }\n        return coverage;\n    }\n}\n_JSCoverage_client = new WeakMap(), _JSCoverage_enabled = new WeakMap(), _JSCoverage_scriptURLs = new WeakMap(), _JSCoverage_scriptSources = new WeakMap(), _JSCoverage_eventListeners = new WeakMap(), _JSCoverage_resetOnNavigation = new WeakMap(), _JSCoverage_reportAnonymousScripts = new WeakMap(), _JSCoverage_includeRawScriptCoverage = new WeakMap(), _JSCoverage_instances = new WeakSet(), _JSCoverage_onExecutionContextsCleared = function _JSCoverage_onExecutionContextsCleared() {\n    if (!__classPrivateFieldGet(this, _JSCoverage_resetOnNavigation, \"f\")) {\n        return;\n    }\n    __classPrivateFieldGet(this, _JSCoverage_scriptURLs, \"f\").clear();\n    __classPrivateFieldGet(this, _JSCoverage_scriptSources, \"f\").clear();\n}, _JSCoverage_onScriptParsed = async function _JSCoverage_onScriptParsed(event) {\n    // Ignore puppeteer-injected scripts\n    if (event.url === _ExecutionContext_js__WEBPACK_IMPORTED_MODULE_2__.EVALUATION_SCRIPT_URL) {\n        return;\n    }\n    // Ignore other anonymous scripts unless the reportAnonymousScripts option is true.\n    if (!event.url && !__classPrivateFieldGet(this, _JSCoverage_reportAnonymousScripts, \"f\")) {\n        return;\n    }\n    try {\n        const response = await __classPrivateFieldGet(this, _JSCoverage_client, \"f\").send('Debugger.getScriptSource', {\n            scriptId: event.scriptId,\n        });\n        __classPrivateFieldGet(this, _JSCoverage_scriptURLs, \"f\").set(event.scriptId, event.url);\n        __classPrivateFieldGet(this, _JSCoverage_scriptSources, \"f\").set(event.scriptId, response.scriptSource);\n    }\n    catch (error) {\n        // This might happen if the page has already navigated away.\n        (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.debugError)(error);\n    }\n};\n/**\n * @public\n */\nclass CSSCoverage {\n    constructor(client) {\n        _CSSCoverage_instances.add(this);\n        _CSSCoverage_client.set(this, void 0);\n        _CSSCoverage_enabled.set(this, false);\n        _CSSCoverage_stylesheetURLs.set(this, new Map());\n        _CSSCoverage_stylesheetSources.set(this, new Map());\n        _CSSCoverage_eventListeners.set(this, []);\n        _CSSCoverage_resetOnNavigation.set(this, false);\n        __classPrivateFieldSet(this, _CSSCoverage_client, client, \"f\");\n    }\n    async start(options = {}) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(!__classPrivateFieldGet(this, _CSSCoverage_enabled, \"f\"), 'CSSCoverage is already enabled');\n        const { resetOnNavigation = true } = options;\n        __classPrivateFieldSet(this, _CSSCoverage_resetOnNavigation, resetOnNavigation, \"f\");\n        __classPrivateFieldSet(this, _CSSCoverage_enabled, true, \"f\");\n        __classPrivateFieldGet(this, _CSSCoverage_stylesheetURLs, \"f\").clear();\n        __classPrivateFieldGet(this, _CSSCoverage_stylesheetSources, \"f\").clear();\n        __classPrivateFieldSet(this, _CSSCoverage_eventListeners, [\n            (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.addEventListener)(__classPrivateFieldGet(this, _CSSCoverage_client, \"f\"), 'CSS.styleSheetAdded', __classPrivateFieldGet(this, _CSSCoverage_instances, \"m\", _CSSCoverage_onStyleSheet).bind(this)),\n            (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.addEventListener)(__classPrivateFieldGet(this, _CSSCoverage_client, \"f\"), 'Runtime.executionContextsCleared', __classPrivateFieldGet(this, _CSSCoverage_instances, \"m\", _CSSCoverage_onExecutionContextsCleared).bind(this)),\n        ], \"f\");\n        await Promise.all([\n            __classPrivateFieldGet(this, _CSSCoverage_client, \"f\").send('DOM.enable'),\n            __classPrivateFieldGet(this, _CSSCoverage_client, \"f\").send('CSS.enable'),\n            __classPrivateFieldGet(this, _CSSCoverage_client, \"f\").send('CSS.startRuleUsageTracking'),\n        ]);\n    }\n    async stop() {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(__classPrivateFieldGet(this, _CSSCoverage_enabled, \"f\"), 'CSSCoverage is not enabled');\n        __classPrivateFieldSet(this, _CSSCoverage_enabled, false, \"f\");\n        const ruleTrackingResponse = await __classPrivateFieldGet(this, _CSSCoverage_client, \"f\").send('CSS.stopRuleUsageTracking');\n        await Promise.all([\n            __classPrivateFieldGet(this, _CSSCoverage_client, \"f\").send('CSS.disable'),\n            __classPrivateFieldGet(this, _CSSCoverage_client, \"f\").send('DOM.disable'),\n        ]);\n        (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.removeEventListeners)(__classPrivateFieldGet(this, _CSSCoverage_eventListeners, \"f\"));\n        // aggregate by styleSheetId\n        const styleSheetIdToCoverage = new Map();\n        for (const entry of ruleTrackingResponse.ruleUsage) {\n            let ranges = styleSheetIdToCoverage.get(entry.styleSheetId);\n            if (!ranges) {\n                ranges = [];\n                styleSheetIdToCoverage.set(entry.styleSheetId, ranges);\n            }\n            ranges.push({\n                startOffset: entry.startOffset,\n                endOffset: entry.endOffset,\n                count: entry.used ? 1 : 0,\n            });\n        }\n        const coverage = [];\n        for (const styleSheetId of __classPrivateFieldGet(this, _CSSCoverage_stylesheetURLs, \"f\").keys()) {\n            const url = __classPrivateFieldGet(this, _CSSCoverage_stylesheetURLs, \"f\").get(styleSheetId);\n            (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(url);\n            const text = __classPrivateFieldGet(this, _CSSCoverage_stylesheetSources, \"f\").get(styleSheetId);\n            (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(text);\n            const ranges = convertToDisjointRanges(styleSheetIdToCoverage.get(styleSheetId) || []);\n            coverage.push({ url, ranges, text });\n        }\n        return coverage;\n    }\n}\n_CSSCoverage_client = new WeakMap(), _CSSCoverage_enabled = new WeakMap(), _CSSCoverage_stylesheetURLs = new WeakMap(), _CSSCoverage_stylesheetSources = new WeakMap(), _CSSCoverage_eventListeners = new WeakMap(), _CSSCoverage_resetOnNavigation = new WeakMap(), _CSSCoverage_instances = new WeakSet(), _CSSCoverage_onExecutionContextsCleared = function _CSSCoverage_onExecutionContextsCleared() {\n    if (!__classPrivateFieldGet(this, _CSSCoverage_resetOnNavigation, \"f\")) {\n        return;\n    }\n    __classPrivateFieldGet(this, _CSSCoverage_stylesheetURLs, \"f\").clear();\n    __classPrivateFieldGet(this, _CSSCoverage_stylesheetSources, \"f\").clear();\n}, _CSSCoverage_onStyleSheet = async function _CSSCoverage_onStyleSheet(event) {\n    const header = event.header;\n    // Ignore anonymous scripts\n    if (!header.sourceURL) {\n        return;\n    }\n    try {\n        const response = await __classPrivateFieldGet(this, _CSSCoverage_client, \"f\").send('CSS.getStyleSheetText', {\n            styleSheetId: header.styleSheetId,\n        });\n        __classPrivateFieldGet(this, _CSSCoverage_stylesheetURLs, \"f\").set(header.styleSheetId, header.sourceURL);\n        __classPrivateFieldGet(this, _CSSCoverage_stylesheetSources, \"f\").set(header.styleSheetId, response.text);\n    }\n    catch (error) {\n        // This might happen if the page has already navigated away.\n        (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.debugError)(error);\n    }\n};\nfunction convertToDisjointRanges(nestedRanges) {\n    const points = [];\n    for (const range of nestedRanges) {\n        points.push({ offset: range.startOffset, type: 0, range });\n        points.push({ offset: range.endOffset, type: 1, range });\n    }\n    // Sort points to form a valid parenthesis sequence.\n    points.sort((a, b) => {\n        // Sort with increasing offsets.\n        if (a.offset !== b.offset) {\n            return a.offset - b.offset;\n        }\n        // All \"end\" points should go before \"start\" points.\n        if (a.type !== b.type) {\n            return b.type - a.type;\n        }\n        const aLength = a.range.endOffset - a.range.startOffset;\n        const bLength = b.range.endOffset - b.range.startOffset;\n        // For two \"start\" points, the one with longer range goes first.\n        if (a.type === 0) {\n            return bLength - aLength;\n        }\n        // For two \"end\" points, the one with shorter range goes first.\n        return aLength - bLength;\n    });\n    const hitCountStack = [];\n    const results = [];\n    let lastOffset = 0;\n    // Run scanning line to intersect all ranges.\n    for (const point of points) {\n        if (hitCountStack.length &&\n            lastOffset < point.offset &&\n            hitCountStack[hitCountStack.length - 1] > 0) {\n            const lastResult = results[results.length - 1];\n            if (lastResult && lastResult.end === lastOffset) {\n                lastResult.end = point.offset;\n            }\n            else {\n                results.push({ start: lastOffset, end: point.offset });\n            }\n        }\n        lastOffset = point.offset;\n        if (point.type === 0) {\n            hitCountStack.push(point.range.count);\n        }\n        else {\n            hitCountStack.pop();\n        }\n    }\n    // Filter out empty ranges.\n    return results.filter((range) => {\n        return range.end - range.start > 1;\n    });\n}\n//# sourceMappingURL=Coverage.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Coverage.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/DOMWorld.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/DOMWorld.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DOMWorld\": () => (/* binding */ DOMWorld),\n/* harmony export */   \"WaitTask\": () => (/* binding */ WaitTask)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./assert.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/assert.js\");\n/* harmony import */ var _Errors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Errors.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Errors.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/util.js\");\n/* harmony import */ var _LifecycleWatcher_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./LifecycleWatcher.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/LifecycleWatcher.js\");\n/* harmony import */ var _QueryHandler_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./QueryHandler.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/QueryHandler.js\");\n/**\n * Copyright 2019 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _a, _DOMWorld_frameManager, _DOMWorld_client, _DOMWorld_frame, _DOMWorld_timeoutSettings, _DOMWorld_documentPromise, _DOMWorld_contextPromise, _DOMWorld_contextResolveCallback, _DOMWorld_detached, _DOMWorld_ctxBindings, _DOMWorld_boundFunctions, _DOMWorld_waitTasks, _DOMWorld_bindingIdentifier, _DOMWorld_settingUpBinding, _DOMWorld_onBindingCalled, _WaitTask_instances, _WaitTask_domWorld, _WaitTask_polling, _WaitTask_timeout, _WaitTask_predicateBody, _WaitTask_predicateAcceptsContextElement, _WaitTask_args, _WaitTask_binding, _WaitTask_runCount, _WaitTask_resolve, _WaitTask_reject, _WaitTask_timeoutTimer, _WaitTask_terminated, _WaitTask_root, _WaitTask_cleanup;\n\n\n\n\n\n/**\n * @internal\n */\nclass DOMWorld {\n    constructor(client, frameManager, frame, timeoutSettings) {\n        _DOMWorld_frameManager.set(this, void 0);\n        _DOMWorld_client.set(this, void 0);\n        _DOMWorld_frame.set(this, void 0);\n        _DOMWorld_timeoutSettings.set(this, void 0);\n        _DOMWorld_documentPromise.set(this, null);\n        _DOMWorld_contextPromise.set(this, null);\n        _DOMWorld_contextResolveCallback.set(this, null);\n        _DOMWorld_detached.set(this, false);\n        // Set of bindings that have been registered in the current context.\n        _DOMWorld_ctxBindings.set(this, new Set());\n        // Contains mapping from functions that should be bound to Puppeteer functions.\n        _DOMWorld_boundFunctions.set(this, new Map());\n        _DOMWorld_waitTasks.set(this, new Set());\n        // If multiple waitFor are set up asynchronously, we need to wait for the\n        // first one to set up the binding in the page before running the others.\n        _DOMWorld_settingUpBinding.set(this, null);\n        _DOMWorld_onBindingCalled.set(this, async (event) => {\n            let payload;\n            if (!this._hasContext()) {\n                return;\n            }\n            const context = await this.executionContext();\n            try {\n                payload = JSON.parse(event.payload);\n            }\n            catch {\n                // The binding was either called by something in the page or it was\n                // called before our wrapper was initialized.\n                return;\n            }\n            const { type, name, seq, args } = payload;\n            if (type !== 'internal' ||\n                !__classPrivateFieldGet(this, _DOMWorld_ctxBindings, \"f\").has(__classPrivateFieldGet(DOMWorld, _a, \"f\", _DOMWorld_bindingIdentifier).call(DOMWorld, name, context._contextId))) {\n                return;\n            }\n            if (context._contextId !== event.executionContextId) {\n                return;\n            }\n            try {\n                const fn = this._boundFunctions.get(name);\n                if (!fn) {\n                    throw new Error(`Bound function $name is not found`);\n                }\n                const result = await fn(...args);\n                await context.evaluate(deliverResult, name, seq, result);\n            }\n            catch (error) {\n                // The WaitTask may already have been resolved by timing out, or the\n                // exection context may have been destroyed.\n                // In both caes, the promises above are rejected with a protocol error.\n                // We can safely ignores these, as the WaitTask is re-installed in\n                // the next execution context if needed.\n                if (error.message.includes('Protocol error')) {\n                    return;\n                }\n                (0,_util_js__WEBPACK_IMPORTED_MODULE_2__.debugError)(error);\n            }\n            function deliverResult(name, seq, result) {\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                // @ts-ignore Code is evaluated in a different context.\n                globalThis[name].callbacks.get(seq).resolve(result);\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                // @ts-ignore Code is evaluated in a different context.\n                globalThis[name].callbacks.delete(seq);\n            }\n        });\n        // Keep own reference to client because it might differ from the FrameManager's\n        // client for OOP iframes.\n        __classPrivateFieldSet(this, _DOMWorld_client, client, \"f\");\n        __classPrivateFieldSet(this, _DOMWorld_frameManager, frameManager, \"f\");\n        __classPrivateFieldSet(this, _DOMWorld_frame, frame, \"f\");\n        __classPrivateFieldSet(this, _DOMWorld_timeoutSettings, timeoutSettings, \"f\");\n        this._setContext(null);\n        __classPrivateFieldGet(this, _DOMWorld_client, \"f\").on('Runtime.bindingCalled', __classPrivateFieldGet(this, _DOMWorld_onBindingCalled, \"f\"));\n    }\n    /**\n     * @internal\n     */\n    get _waitTasks() {\n        return __classPrivateFieldGet(this, _DOMWorld_waitTasks, \"f\");\n    }\n    /**\n     * @internal\n     */\n    get _boundFunctions() {\n        return __classPrivateFieldGet(this, _DOMWorld_boundFunctions, \"f\");\n    }\n    frame() {\n        return __classPrivateFieldGet(this, _DOMWorld_frame, \"f\");\n    }\n    /**\n     * @internal\n     */\n    async _setContext(context) {\n        var _b;\n        if (context) {\n            (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(__classPrivateFieldGet(this, _DOMWorld_contextResolveCallback, \"f\"), 'Execution Context has already been set.');\n            __classPrivateFieldGet(this, _DOMWorld_ctxBindings, \"f\").clear();\n            (_b = __classPrivateFieldGet(this, _DOMWorld_contextResolveCallback, \"f\")) === null || _b === void 0 ? void 0 : _b.call(null, context);\n            __classPrivateFieldSet(this, _DOMWorld_contextResolveCallback, null, \"f\");\n            for (const waitTask of this._waitTasks) {\n                waitTask.rerun();\n            }\n        }\n        else {\n            __classPrivateFieldSet(this, _DOMWorld_documentPromise, null, \"f\");\n            __classPrivateFieldSet(this, _DOMWorld_contextPromise, new Promise((fulfill) => {\n                __classPrivateFieldSet(this, _DOMWorld_contextResolveCallback, fulfill, \"f\");\n            }), \"f\");\n        }\n    }\n    /**\n     * @internal\n     */\n    _hasContext() {\n        return !__classPrivateFieldGet(this, _DOMWorld_contextResolveCallback, \"f\");\n    }\n    /**\n     * @internal\n     */\n    _detach() {\n        __classPrivateFieldSet(this, _DOMWorld_detached, true, \"f\");\n        __classPrivateFieldGet(this, _DOMWorld_client, \"f\").off('Runtime.bindingCalled', __classPrivateFieldGet(this, _DOMWorld_onBindingCalled, \"f\"));\n        for (const waitTask of this._waitTasks) {\n            waitTask.terminate(new Error('waitForFunction failed: frame got detached.'));\n        }\n    }\n    executionContext() {\n        if (__classPrivateFieldGet(this, _DOMWorld_detached, \"f\")) {\n            throw new Error(`Execution context is not available in detached frame \"${__classPrivateFieldGet(this, _DOMWorld_frame, \"f\").url()}\" (are you trying to evaluate?)`);\n        }\n        if (__classPrivateFieldGet(this, _DOMWorld_contextPromise, \"f\") === null) {\n            throw new Error(`Execution content promise is missing`);\n        }\n        return __classPrivateFieldGet(this, _DOMWorld_contextPromise, \"f\");\n    }\n    async evaluateHandle(pageFunction, ...args) {\n        const context = await this.executionContext();\n        return context.evaluateHandle(pageFunction, ...args);\n    }\n    async evaluate(pageFunction, ...args) {\n        const context = await this.executionContext();\n        return context.evaluate(pageFunction, ...args);\n    }\n    async $(selector) {\n        const document = await this._document();\n        const value = await document.$(selector);\n        return value;\n    }\n    /**\n     * @internal\n     */\n    async _document() {\n        if (__classPrivateFieldGet(this, _DOMWorld_documentPromise, \"f\")) {\n            return __classPrivateFieldGet(this, _DOMWorld_documentPromise, \"f\");\n        }\n        __classPrivateFieldSet(this, _DOMWorld_documentPromise, this.executionContext().then(async (context) => {\n            const document = await context.evaluateHandle('document');\n            const element = document.asElement();\n            if (element === null) {\n                throw new Error('Document is null');\n            }\n            return element;\n        }), \"f\");\n        return __classPrivateFieldGet(this, _DOMWorld_documentPromise, \"f\");\n    }\n    async $x(expression) {\n        const document = await this._document();\n        const value = await document.$x(expression);\n        return value;\n    }\n    async $eval(selector, pageFunction, ...args) {\n        const document = await this._document();\n        return document.$eval(selector, pageFunction, ...args);\n    }\n    async $$eval(selector, pageFunction, ...args) {\n        const document = await this._document();\n        const value = await document.$$eval(selector, pageFunction, ...args);\n        return value;\n    }\n    async $$(selector) {\n        const document = await this._document();\n        const value = await document.$$(selector);\n        return value;\n    }\n    async content() {\n        return await this.evaluate(() => {\n            let retVal = '';\n            if (document.doctype) {\n                retVal = new XMLSerializer().serializeToString(document.doctype);\n            }\n            if (document.documentElement) {\n                retVal += document.documentElement.outerHTML;\n            }\n            return retVal;\n        });\n    }\n    async setContent(html, options = {}) {\n        const { waitUntil = ['load'], timeout = __classPrivateFieldGet(this, _DOMWorld_timeoutSettings, \"f\").navigationTimeout(), } = options;\n        // We rely upon the fact that document.open() will reset frame lifecycle with \"init\"\n        // lifecycle event. @see https://crrev.com/608658\n        await this.evaluate((html) => {\n            document.open();\n            document.write(html);\n            document.close();\n        }, html);\n        const watcher = new _LifecycleWatcher_js__WEBPACK_IMPORTED_MODULE_3__.LifecycleWatcher(__classPrivateFieldGet(this, _DOMWorld_frameManager, \"f\"), __classPrivateFieldGet(this, _DOMWorld_frame, \"f\"), waitUntil, timeout);\n        const error = await Promise.race([\n            watcher.timeoutOrTerminationPromise(),\n            watcher.lifecyclePromise(),\n        ]);\n        watcher.dispose();\n        if (error) {\n            throw error;\n        }\n    }\n    /**\n     * Adds a script tag into the current context.\n     *\n     * @remarks\n     *\n     * You can pass a URL, filepath or string of contents. Note that when running Puppeteer\n     * in a browser environment you cannot pass a filepath and should use either\n     * `url` or `content`.\n     */\n    async addScriptTag(options) {\n        const { url = null, path = null, content = null, id = '', type = '', } = options;\n        if (url !== null) {\n            try {\n                const context = await this.executionContext();\n                const handle = await context.evaluateHandle(addScriptUrl, url, id, type);\n                const elementHandle = handle.asElement();\n                if (elementHandle === null) {\n                    throw new Error('Script element is not found');\n                }\n                return elementHandle;\n            }\n            catch (error) {\n                throw new Error(`Loading script from ${url} failed`);\n            }\n        }\n        if (path !== null) {\n            let fs;\n            try {\n                fs = (await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! fs */ \"fs\", 19))).promises;\n            }\n            catch (error) {\n                if (error instanceof TypeError) {\n                    throw new Error('Can only pass a filepath to addScriptTag in a Node-like environment.');\n                }\n                throw error;\n            }\n            let contents = await fs.readFile(path, 'utf8');\n            contents += '//# sourceURL=' + path.replace(/\\n/g, '');\n            const context = await this.executionContext();\n            const handle = await context.evaluateHandle(addScriptContent, contents, id, type);\n            const elementHandle = handle.asElement();\n            if (elementHandle === null) {\n                throw new Error('Script element is not found');\n            }\n            return elementHandle;\n        }\n        if (content !== null) {\n            const context = await this.executionContext();\n            const handle = await context.evaluateHandle(addScriptContent, content, id, type);\n            const elementHandle = handle.asElement();\n            if (elementHandle === null) {\n                throw new Error('Script element is not found');\n            }\n            return elementHandle;\n        }\n        throw new Error('Provide an object with a `url`, `path` or `content` property');\n        async function addScriptUrl(url, id, type) {\n            const script = document.createElement('script');\n            script.src = url;\n            if (id) {\n                script.id = id;\n            }\n            if (type) {\n                script.type = type;\n            }\n            const promise = new Promise((res, rej) => {\n                script.onload = res;\n                script.onerror = rej;\n            });\n            document.head.appendChild(script);\n            await promise;\n            return script;\n        }\n        function addScriptContent(content, id, type = 'text/javascript') {\n            const script = document.createElement('script');\n            script.type = type;\n            script.text = content;\n            if (id) {\n                script.id = id;\n            }\n            let error = null;\n            script.onerror = (e) => {\n                return (error = e);\n            };\n            document.head.appendChild(script);\n            if (error) {\n                throw error;\n            }\n            return script;\n        }\n    }\n    /**\n     * Adds a style tag into the current context.\n     *\n     * @remarks\n     *\n     * You can pass a URL, filepath or string of contents. Note that when running Puppeteer\n     * in a browser environment you cannot pass a filepath and should use either\n     * `url` or `content`.\n     *\n     */\n    async addStyleTag(options) {\n        const { url = null, path = null, content = null } = options;\n        if (url !== null) {\n            try {\n                const context = await this.executionContext();\n                const handle = await context.evaluateHandle(addStyleUrl, url);\n                const elementHandle = handle.asElement();\n                if (elementHandle === null) {\n                    throw new Error('Style element is not found');\n                }\n                return elementHandle;\n            }\n            catch (error) {\n                throw new Error(`Loading style from ${url} failed`);\n            }\n        }\n        if (path !== null) {\n            let fs;\n            try {\n                fs = (await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! fs */ \"fs\", 19))).promises;\n            }\n            catch (error) {\n                if (error instanceof TypeError) {\n                    throw new Error('Cannot pass a filepath to addStyleTag in the browser environment.');\n                }\n                throw error;\n            }\n            let contents = await fs.readFile(path, 'utf8');\n            contents += '/*# sourceURL=' + path.replace(/\\n/g, '') + '*/';\n            const context = await this.executionContext();\n            const handle = await context.evaluateHandle(addStyleContent, contents);\n            const elementHandle = handle.asElement();\n            if (elementHandle === null) {\n                throw new Error('Style element is not found');\n            }\n            return elementHandle;\n        }\n        if (content !== null) {\n            const context = await this.executionContext();\n            const handle = await context.evaluateHandle(addStyleContent, content);\n            const elementHandle = handle.asElement();\n            if (elementHandle === null) {\n                throw new Error('Style element is not found');\n            }\n            return elementHandle;\n        }\n        throw new Error('Provide an object with a `url`, `path` or `content` property');\n        async function addStyleUrl(url) {\n            const link = document.createElement('link');\n            link.rel = 'stylesheet';\n            link.href = url;\n            const promise = new Promise((res, rej) => {\n                link.onload = res;\n                link.onerror = rej;\n            });\n            document.head.appendChild(link);\n            await promise;\n            return link;\n        }\n        async function addStyleContent(content) {\n            const style = document.createElement('style');\n            style.type = 'text/css';\n            style.appendChild(document.createTextNode(content));\n            const promise = new Promise((res, rej) => {\n                style.onload = res;\n                style.onerror = rej;\n            });\n            document.head.appendChild(style);\n            await promise;\n            return style;\n        }\n    }\n    async click(selector, options) {\n        const handle = await this.$(selector);\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(handle, `No element found for selector: ${selector}`);\n        await handle.click(options);\n        await handle.dispose();\n    }\n    async focus(selector) {\n        const handle = await this.$(selector);\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(handle, `No element found for selector: ${selector}`);\n        await handle.focus();\n        await handle.dispose();\n    }\n    async hover(selector) {\n        const handle = await this.$(selector);\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(handle, `No element found for selector: ${selector}`);\n        await handle.hover();\n        await handle.dispose();\n    }\n    async select(selector, ...values) {\n        const handle = await this.$(selector);\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(handle, `No element found for selector: ${selector}`);\n        const result = await handle.select(...values);\n        await handle.dispose();\n        return result;\n    }\n    async tap(selector) {\n        const handle = await this.$(selector);\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(handle, `No element found for selector: ${selector}`);\n        await handle.tap();\n        await handle.dispose();\n    }\n    async type(selector, text, options) {\n        const handle = await this.$(selector);\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(handle, `No element found for selector: ${selector}`);\n        await handle.type(text, options);\n        await handle.dispose();\n    }\n    async waitForSelector(selector, options) {\n        const { updatedSelector, queryHandler } = (0,_QueryHandler_js__WEBPACK_IMPORTED_MODULE_4__._getQueryHandlerAndSelector)(selector);\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(queryHandler.waitFor, 'Query handler does not support waiting');\n        return queryHandler.waitFor(this, updatedSelector, options);\n    }\n    /**\n     * @internal\n     */\n    async _addBindingToContext(context, name) {\n        // Previous operation added the binding so we are done.\n        if (__classPrivateFieldGet(this, _DOMWorld_ctxBindings, \"f\").has(__classPrivateFieldGet(DOMWorld, _a, \"f\", _DOMWorld_bindingIdentifier).call(DOMWorld, name, context._contextId))) {\n            return;\n        }\n        // Wait for other operation to finish\n        if (__classPrivateFieldGet(this, _DOMWorld_settingUpBinding, \"f\")) {\n            await __classPrivateFieldGet(this, _DOMWorld_settingUpBinding, \"f\");\n            return this._addBindingToContext(context, name);\n        }\n        const bind = async (name) => {\n            const expression = (0,_util_js__WEBPACK_IMPORTED_MODULE_2__.pageBindingInitString)('internal', name);\n            try {\n                // TODO: In theory, it would be enough to call this just once\n                await context._client.send('Runtime.addBinding', {\n                    name,\n                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                    // @ts-ignore The protocol definition is not up to date.\n                    executionContextName: context._contextName,\n                });\n                await context.evaluate(expression);\n            }\n            catch (error) {\n                // We could have tried to evaluate in a context which was already\n                // destroyed. This happens, for example, if the page is navigated while\n                // we are trying to add the binding\n                const ctxDestroyed = error.message.includes('Execution context was destroyed');\n                const ctxNotFound = error.message.includes('Cannot find context with specified id');\n                if (ctxDestroyed || ctxNotFound) {\n                    return;\n                }\n                else {\n                    (0,_util_js__WEBPACK_IMPORTED_MODULE_2__.debugError)(error);\n                    return;\n                }\n            }\n            __classPrivateFieldGet(this, _DOMWorld_ctxBindings, \"f\").add(__classPrivateFieldGet(DOMWorld, _a, \"f\", _DOMWorld_bindingIdentifier).call(DOMWorld, name, context._contextId));\n        };\n        __classPrivateFieldSet(this, _DOMWorld_settingUpBinding, bind(name), \"f\");\n        await __classPrivateFieldGet(this, _DOMWorld_settingUpBinding, \"f\");\n        __classPrivateFieldSet(this, _DOMWorld_settingUpBinding, null, \"f\");\n    }\n    /**\n     * @internal\n     */\n    async _waitForSelectorInPage(queryOne, selector, options, binding) {\n        const { visible: waitForVisible = false, hidden: waitForHidden = false, timeout = __classPrivateFieldGet(this, _DOMWorld_timeoutSettings, \"f\").timeout(), } = options;\n        const polling = waitForVisible || waitForHidden ? 'raf' : 'mutation';\n        const title = `selector \\`${selector}\\`${waitForHidden ? ' to be hidden' : ''}`;\n        async function predicate(root, selector, waitForVisible, waitForHidden) {\n            const node = predicateQueryHandler\n                ? (await predicateQueryHandler(root, selector))\n                : root.querySelector(selector);\n            return checkWaitForOptions(node, waitForVisible, waitForHidden);\n        }\n        const waitTaskOptions = {\n            domWorld: this,\n            predicateBody: (0,_util_js__WEBPACK_IMPORTED_MODULE_2__.makePredicateString)(predicate, queryOne),\n            predicateAcceptsContextElement: true,\n            title,\n            polling,\n            timeout,\n            args: [selector, waitForVisible, waitForHidden],\n            binding,\n            root: options.root,\n        };\n        const waitTask = new WaitTask(waitTaskOptions);\n        const jsHandle = await waitTask.promise;\n        const elementHandle = jsHandle.asElement();\n        if (!elementHandle) {\n            await jsHandle.dispose();\n            return null;\n        }\n        return elementHandle;\n    }\n    async waitForXPath(xpath, options) {\n        const { visible: waitForVisible = false, hidden: waitForHidden = false, timeout = __classPrivateFieldGet(this, _DOMWorld_timeoutSettings, \"f\").timeout(), } = options;\n        const polling = waitForVisible || waitForHidden ? 'raf' : 'mutation';\n        const title = `XPath \\`${xpath}\\`${waitForHidden ? ' to be hidden' : ''}`;\n        function predicate(root, xpath, waitForVisible, waitForHidden) {\n            const node = document.evaluate(xpath, root, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;\n            return checkWaitForOptions(node, waitForVisible, waitForHidden);\n        }\n        const waitTaskOptions = {\n            domWorld: this,\n            predicateBody: (0,_util_js__WEBPACK_IMPORTED_MODULE_2__.makePredicateString)(predicate),\n            predicateAcceptsContextElement: true,\n            title,\n            polling,\n            timeout,\n            args: [xpath, waitForVisible, waitForHidden],\n            root: options.root,\n        };\n        const waitTask = new WaitTask(waitTaskOptions);\n        const jsHandle = await waitTask.promise;\n        const elementHandle = jsHandle.asElement();\n        if (!elementHandle) {\n            await jsHandle.dispose();\n            return null;\n        }\n        return elementHandle;\n    }\n    waitForFunction(pageFunction, options = {}, ...args) {\n        const { polling = 'raf', timeout = __classPrivateFieldGet(this, _DOMWorld_timeoutSettings, \"f\").timeout() } = options;\n        const waitTaskOptions = {\n            domWorld: this,\n            predicateBody: pageFunction,\n            predicateAcceptsContextElement: false,\n            title: 'function',\n            polling,\n            timeout,\n            args,\n        };\n        const waitTask = new WaitTask(waitTaskOptions);\n        return waitTask.promise;\n    }\n    async title() {\n        return this.evaluate(() => {\n            return document.title;\n        });\n    }\n}\n_a = DOMWorld, _DOMWorld_frameManager = new WeakMap(), _DOMWorld_client = new WeakMap(), _DOMWorld_frame = new WeakMap(), _DOMWorld_timeoutSettings = new WeakMap(), _DOMWorld_documentPromise = new WeakMap(), _DOMWorld_contextPromise = new WeakMap(), _DOMWorld_contextResolveCallback = new WeakMap(), _DOMWorld_detached = new WeakMap(), _DOMWorld_ctxBindings = new WeakMap(), _DOMWorld_boundFunctions = new WeakMap(), _DOMWorld_waitTasks = new WeakMap(), _DOMWorld_settingUpBinding = new WeakMap(), _DOMWorld_onBindingCalled = new WeakMap();\n_DOMWorld_bindingIdentifier = { value: (name, contextId) => {\n        return `${name}_${contextId}`;\n    } };\nconst noop = () => { };\n/**\n * @internal\n */\nclass WaitTask {\n    constructor(options) {\n        _WaitTask_instances.add(this);\n        _WaitTask_domWorld.set(this, void 0);\n        _WaitTask_polling.set(this, void 0);\n        _WaitTask_timeout.set(this, void 0);\n        _WaitTask_predicateBody.set(this, void 0);\n        _WaitTask_predicateAcceptsContextElement.set(this, void 0);\n        _WaitTask_args.set(this, void 0);\n        _WaitTask_binding.set(this, void 0);\n        _WaitTask_runCount.set(this, 0);\n        _WaitTask_resolve.set(this, noop);\n        _WaitTask_reject.set(this, noop);\n        _WaitTask_timeoutTimer.set(this, void 0);\n        _WaitTask_terminated.set(this, false);\n        _WaitTask_root.set(this, null);\n        if ((0,_util_js__WEBPACK_IMPORTED_MODULE_2__.isString)(options.polling)) {\n            (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(options.polling === 'raf' || options.polling === 'mutation', 'Unknown polling option: ' + options.polling);\n        }\n        else if ((0,_util_js__WEBPACK_IMPORTED_MODULE_2__.isNumber)(options.polling)) {\n            (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(options.polling > 0, 'Cannot poll with non-positive interval: ' + options.polling);\n        }\n        else {\n            throw new Error('Unknown polling options: ' + options.polling);\n        }\n        function getPredicateBody(predicateBody) {\n            if ((0,_util_js__WEBPACK_IMPORTED_MODULE_2__.isString)(predicateBody)) {\n                return `return (${predicateBody});`;\n            }\n            return `return (${predicateBody})(...args);`;\n        }\n        __classPrivateFieldSet(this, _WaitTask_domWorld, options.domWorld, \"f\");\n        __classPrivateFieldSet(this, _WaitTask_polling, options.polling, \"f\");\n        __classPrivateFieldSet(this, _WaitTask_timeout, options.timeout, \"f\");\n        __classPrivateFieldSet(this, _WaitTask_root, options.root || null, \"f\");\n        __classPrivateFieldSet(this, _WaitTask_predicateBody, getPredicateBody(options.predicateBody), \"f\");\n        __classPrivateFieldSet(this, _WaitTask_predicateAcceptsContextElement, options.predicateAcceptsContextElement, \"f\");\n        __classPrivateFieldSet(this, _WaitTask_args, options.args, \"f\");\n        __classPrivateFieldSet(this, _WaitTask_binding, options.binding, \"f\");\n        __classPrivateFieldSet(this, _WaitTask_runCount, 0, \"f\");\n        __classPrivateFieldGet(this, _WaitTask_domWorld, \"f\")._waitTasks.add(this);\n        if (__classPrivateFieldGet(this, _WaitTask_binding, \"f\")) {\n            __classPrivateFieldGet(this, _WaitTask_domWorld, \"f\")._boundFunctions.set(__classPrivateFieldGet(this, _WaitTask_binding, \"f\").name, __classPrivateFieldGet(this, _WaitTask_binding, \"f\").pptrFunction);\n        }\n        this.promise = new Promise((resolve, reject) => {\n            __classPrivateFieldSet(this, _WaitTask_resolve, resolve, \"f\");\n            __classPrivateFieldSet(this, _WaitTask_reject, reject, \"f\");\n        });\n        // Since page navigation requires us to re-install the pageScript, we should track\n        // timeout on our end.\n        if (options.timeout) {\n            const timeoutError = new _Errors_js__WEBPACK_IMPORTED_MODULE_1__.TimeoutError(`waiting for ${options.title} failed: timeout ${options.timeout}ms exceeded`);\n            __classPrivateFieldSet(this, _WaitTask_timeoutTimer, setTimeout(() => {\n                return this.terminate(timeoutError);\n            }, options.timeout), \"f\");\n        }\n        this.rerun();\n    }\n    terminate(error) {\n        __classPrivateFieldSet(this, _WaitTask_terminated, true, \"f\");\n        __classPrivateFieldGet(this, _WaitTask_reject, \"f\").call(this, error);\n        __classPrivateFieldGet(this, _WaitTask_instances, \"m\", _WaitTask_cleanup).call(this);\n    }\n    async rerun() {\n        var _b;\n        const runCount = __classPrivateFieldSet(this, _WaitTask_runCount, (_b = __classPrivateFieldGet(this, _WaitTask_runCount, \"f\"), ++_b), \"f\");\n        let success = null;\n        let error = null;\n        const context = await __classPrivateFieldGet(this, _WaitTask_domWorld, \"f\").executionContext();\n        if (__classPrivateFieldGet(this, _WaitTask_terminated, \"f\") || runCount !== __classPrivateFieldGet(this, _WaitTask_runCount, \"f\")) {\n            return;\n        }\n        if (__classPrivateFieldGet(this, _WaitTask_binding, \"f\")) {\n            await __classPrivateFieldGet(this, _WaitTask_domWorld, \"f\")._addBindingToContext(context, __classPrivateFieldGet(this, _WaitTask_binding, \"f\").name);\n        }\n        if (__classPrivateFieldGet(this, _WaitTask_terminated, \"f\") || runCount !== __classPrivateFieldGet(this, _WaitTask_runCount, \"f\")) {\n            return;\n        }\n        try {\n            success = await context.evaluateHandle(waitForPredicatePageFunction, __classPrivateFieldGet(this, _WaitTask_root, \"f\") || null, __classPrivateFieldGet(this, _WaitTask_predicateBody, \"f\"), __classPrivateFieldGet(this, _WaitTask_predicateAcceptsContextElement, \"f\"), __classPrivateFieldGet(this, _WaitTask_polling, \"f\"), __classPrivateFieldGet(this, _WaitTask_timeout, \"f\"), ...__classPrivateFieldGet(this, _WaitTask_args, \"f\"));\n        }\n        catch (error_) {\n            error = error_;\n        }\n        if (__classPrivateFieldGet(this, _WaitTask_terminated, \"f\") || runCount !== __classPrivateFieldGet(this, _WaitTask_runCount, \"f\")) {\n            if (success) {\n                await success.dispose();\n            }\n            return;\n        }\n        // Ignore timeouts in pageScript - we track timeouts ourselves.\n        // If the frame's execution context has already changed, `frame.evaluate` will\n        // throw an error - ignore this predicate run altogether.\n        if (!error &&\n            (await __classPrivateFieldGet(this, _WaitTask_domWorld, \"f\")\n                .evaluate((s) => {\n                return !s;\n            }, success)\n                .catch(() => {\n                return true;\n            }))) {\n            if (!success) {\n                throw new Error('Assertion: result handle is not available');\n            }\n            await success.dispose();\n            return;\n        }\n        if (error) {\n            if (error.message.includes('TypeError: binding is not a function')) {\n                return this.rerun();\n            }\n            // When frame is detached the task should have been terminated by the DOMWorld.\n            // This can fail if we were adding this task while the frame was detached,\n            // so we terminate here instead.\n            if (error.message.includes('Execution context is not available in detached frame')) {\n                this.terminate(new Error('waitForFunction failed: frame got detached.'));\n                return;\n            }\n            // When the page is navigated, the promise is rejected.\n            // We will try again in the new execution context.\n            if (error.message.includes('Execution context was destroyed')) {\n                return;\n            }\n            // We could have tried to evaluate in a context which was already\n            // destroyed.\n            if (error.message.includes('Cannot find context with specified id')) {\n                return;\n            }\n            __classPrivateFieldGet(this, _WaitTask_reject, \"f\").call(this, error);\n        }\n        else {\n            if (!success) {\n                throw new Error('Assertion: result handle is not available');\n            }\n            __classPrivateFieldGet(this, _WaitTask_resolve, \"f\").call(this, success);\n        }\n        __classPrivateFieldGet(this, _WaitTask_instances, \"m\", _WaitTask_cleanup).call(this);\n    }\n}\n_WaitTask_domWorld = new WeakMap(), _WaitTask_polling = new WeakMap(), _WaitTask_timeout = new WeakMap(), _WaitTask_predicateBody = new WeakMap(), _WaitTask_predicateAcceptsContextElement = new WeakMap(), _WaitTask_args = new WeakMap(), _WaitTask_binding = new WeakMap(), _WaitTask_runCount = new WeakMap(), _WaitTask_resolve = new WeakMap(), _WaitTask_reject = new WeakMap(), _WaitTask_timeoutTimer = new WeakMap(), _WaitTask_terminated = new WeakMap(), _WaitTask_root = new WeakMap(), _WaitTask_instances = new WeakSet(), _WaitTask_cleanup = function _WaitTask_cleanup() {\n    __classPrivateFieldGet(this, _WaitTask_timeoutTimer, \"f\") !== undefined && clearTimeout(__classPrivateFieldGet(this, _WaitTask_timeoutTimer, \"f\"));\n    __classPrivateFieldGet(this, _WaitTask_domWorld, \"f\")._waitTasks.delete(this);\n};\nasync function waitForPredicatePageFunction(root, predicateBody, predicateAcceptsContextElement, polling, timeout, ...args) {\n    root = root || document;\n    const predicate = new Function('...args', predicateBody);\n    let timedOut = false;\n    if (timeout) {\n        setTimeout(() => {\n            return (timedOut = true);\n        }, timeout);\n    }\n    switch (polling) {\n        case 'raf':\n            return await pollRaf();\n        case 'mutation':\n            return await pollMutation();\n        default:\n            return await pollInterval(polling);\n    }\n    async function pollMutation() {\n        const success = predicateAcceptsContextElement\n            ? await predicate(root, ...args)\n            : await predicate(...args);\n        if (success) {\n            return Promise.resolve(success);\n        }\n        let fulfill = (_) => { };\n        const result = new Promise((x) => {\n            return (fulfill = x);\n        });\n        const observer = new MutationObserver(async () => {\n            if (timedOut) {\n                observer.disconnect();\n                fulfill();\n            }\n            const success = predicateAcceptsContextElement\n                ? await predicate(root, ...args)\n                : await predicate(...args);\n            if (success) {\n                observer.disconnect();\n                fulfill(success);\n            }\n        });\n        if (!root) {\n            throw new Error('Root element is not found.');\n        }\n        observer.observe(root, {\n            childList: true,\n            subtree: true,\n            attributes: true,\n        });\n        return result;\n    }\n    async function pollRaf() {\n        let fulfill = (_) => { };\n        const result = new Promise((x) => {\n            return (fulfill = x);\n        });\n        await onRaf();\n        return result;\n        async function onRaf() {\n            if (timedOut) {\n                fulfill();\n                return;\n            }\n            const success = predicateAcceptsContextElement\n                ? await predicate(root, ...args)\n                : await predicate(...args);\n            if (success) {\n                fulfill(success);\n            }\n            else {\n                requestAnimationFrame(onRaf);\n            }\n        }\n    }\n    async function pollInterval(pollInterval) {\n        let fulfill = (_) => { };\n        const result = new Promise((x) => {\n            return (fulfill = x);\n        });\n        await onTimeout();\n        return result;\n        async function onTimeout() {\n            if (timedOut) {\n                fulfill();\n                return;\n            }\n            const success = predicateAcceptsContextElement\n                ? await predicate(root, ...args)\n                : await predicate(...args);\n            if (success) {\n                fulfill(success);\n            }\n            else {\n                setTimeout(onTimeout, pollInterval);\n            }\n        }\n    }\n}\n//# sourceMappingURL=DOMWorld.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/DOMWorld.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Debug.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Debug.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"debug\": () => (/* binding */ debug)\n/* harmony export */ });\n/* harmony import */ var _environment_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../environment.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/environment.js\");\n/**\n * Copyright 2020 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A debug function that can be used in any environment.\n *\n * @remarks\n *\n * If used in Node, it falls back to the\n * {@link https://www.npmjs.com/package/debug | debug module}. In the browser it\n * uses `console.log`.\n *\n * @param prefix - this will be prefixed to each log.\n * @returns a function that can be called to log to that debug channel.\n *\n * In Node, use the `DEBUG` environment variable to control logging:\n *\n * ```\n * DEBUG=* // logs all channels\n * DEBUG=foo // logs the `foo` channel\n * DEBUG=foo* // logs any channels starting with `foo`\n * ```\n *\n * In the browser, set `window.__PUPPETEER_DEBUG` to a string:\n *\n * ```\n * window.__PUPPETEER_DEBUG='*'; // logs all channels\n * window.__PUPPETEER_DEBUG='foo'; // logs the `foo` channel\n * window.__PUPPETEER_DEBUG='foo*'; // logs any channels starting with `foo`\n * ```\n *\n * @example\n * ```\n * const log = debug('Page');\n *\n * log('new page created')\n * // logs \"Page: new page created\"\n * ```\n */\nconst debug = (prefix) => {\n    if (_environment_js__WEBPACK_IMPORTED_MODULE_0__.isNode) {\n        return async (...logArgs) => {\n            (await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! debug */ \"debug\", 19))).default(prefix)(logArgs);\n        };\n    }\n    return (...logArgs) => {\n        const debugLevel = globalThis.__PUPPETEER_DEBUG;\n        if (!debugLevel) {\n            return;\n        }\n        const everythingShouldBeLogged = debugLevel === '*';\n        const prefixMatchesDebugLevel = everythingShouldBeLogged ||\n            /**\n             * If the debug level is `foo*`, that means we match any prefix that\n             * starts with `foo`. If the level is `foo`, we match only the prefix\n             * `foo`.\n             */\n            (debugLevel.endsWith('*')\n                ? prefix.startsWith(debugLevel)\n                : prefix === debugLevel);\n        if (!prefixMatchesDebugLevel) {\n            return;\n        }\n        // eslint-disable-next-line no-console\n        console.log(`${prefix}:`, ...logArgs);\n    };\n};\n//# sourceMappingURL=Debug.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvZ29nb2FuaW1lLWFwaS9ub2RlX21vZHVsZXMvcHVwcGV0ZWVyL2xpYi9lc20vcHVwcGV0ZWVyL2NvbW1vbi9EZWJ1Zy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUMyQztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLHlEQUF5RDtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQyxtQ0FBbUM7QUFDbkMsb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxRQUFRLG1EQUFNO0FBQ2Q7QUFDQSxtQkFBbUIsZ0hBQWU7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLE9BQU87QUFDOUI7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW5pbWVmbGl4Ly4vbm9kZV9tb2R1bGVzL2dvZ29hbmltZS1hcGkvbm9kZV9tb2R1bGVzL3B1cHBldGVlci9saWIvZXNtL3B1cHBldGVlci9jb21tb24vRGVidWcuanM/ZDI0NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBpc05vZGUgfSBmcm9tICcuLi9lbnZpcm9ubWVudC5qcyc7XG4vKipcbiAqIEEgZGVidWcgZnVuY3Rpb24gdGhhdCBjYW4gYmUgdXNlZCBpbiBhbnkgZW52aXJvbm1lbnQuXG4gKlxuICogQHJlbWFya3NcbiAqXG4gKiBJZiB1c2VkIGluIE5vZGUsIGl0IGZhbGxzIGJhY2sgdG8gdGhlXG4gKiB7QGxpbmsgaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZGVidWcgfCBkZWJ1ZyBtb2R1bGV9LiBJbiB0aGUgYnJvd3NlciBpdFxuICogdXNlcyBgY29uc29sZS5sb2dgLlxuICpcbiAqIEBwYXJhbSBwcmVmaXggLSB0aGlzIHdpbGwgYmUgcHJlZml4ZWQgdG8gZWFjaCBsb2cuXG4gKiBAcmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgY2FuIGJlIGNhbGxlZCB0byBsb2cgdG8gdGhhdCBkZWJ1ZyBjaGFubmVsLlxuICpcbiAqIEluIE5vZGUsIHVzZSB0aGUgYERFQlVHYCBlbnZpcm9ubWVudCB2YXJpYWJsZSB0byBjb250cm9sIGxvZ2dpbmc6XG4gKlxuICogYGBgXG4gKiBERUJVRz0qIC8vIGxvZ3MgYWxsIGNoYW5uZWxzXG4gKiBERUJVRz1mb28gLy8gbG9ncyB0aGUgYGZvb2AgY2hhbm5lbFxuICogREVCVUc9Zm9vKiAvLyBsb2dzIGFueSBjaGFubmVscyBzdGFydGluZyB3aXRoIGBmb29gXG4gKiBgYGBcbiAqXG4gKiBJbiB0aGUgYnJvd3Nlciwgc2V0IGB3aW5kb3cuX19QVVBQRVRFRVJfREVCVUdgIHRvIGEgc3RyaW5nOlxuICpcbiAqIGBgYFxuICogd2luZG93Ll9fUFVQUEVURUVSX0RFQlVHPScqJzsgLy8gbG9ncyBhbGwgY2hhbm5lbHNcbiAqIHdpbmRvdy5fX1BVUFBFVEVFUl9ERUJVRz0nZm9vJzsgLy8gbG9ncyB0aGUgYGZvb2AgY2hhbm5lbFxuICogd2luZG93Ll9fUFVQUEVURUVSX0RFQlVHPSdmb28qJzsgLy8gbG9ncyBhbnkgY2hhbm5lbHMgc3RhcnRpbmcgd2l0aCBgZm9vYFxuICogYGBgXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYFxuICogY29uc3QgbG9nID0gZGVidWcoJ1BhZ2UnKTtcbiAqXG4gKiBsb2coJ25ldyBwYWdlIGNyZWF0ZWQnKVxuICogLy8gbG9ncyBcIlBhZ2U6IG5ldyBwYWdlIGNyZWF0ZWRcIlxuICogYGBgXG4gKi9cbmV4cG9ydCBjb25zdCBkZWJ1ZyA9IChwcmVmaXgpID0+IHtcbiAgICBpZiAoaXNOb2RlKSB7XG4gICAgICAgIHJldHVybiBhc3luYyAoLi4ubG9nQXJncykgPT4ge1xuICAgICAgICAgICAgKGF3YWl0IGltcG9ydCgnZGVidWcnKSkuZGVmYXVsdChwcmVmaXgpKGxvZ0FyZ3MpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gKC4uLmxvZ0FyZ3MpID0+IHtcbiAgICAgICAgY29uc3QgZGVidWdMZXZlbCA9IGdsb2JhbFRoaXMuX19QVVBQRVRFRVJfREVCVUc7XG4gICAgICAgIGlmICghZGVidWdMZXZlbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGV2ZXJ5dGhpbmdTaG91bGRCZUxvZ2dlZCA9IGRlYnVnTGV2ZWwgPT09ICcqJztcbiAgICAgICAgY29uc3QgcHJlZml4TWF0Y2hlc0RlYnVnTGV2ZWwgPSBldmVyeXRoaW5nU2hvdWxkQmVMb2dnZWQgfHxcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgdGhlIGRlYnVnIGxldmVsIGlzIGBmb28qYCwgdGhhdCBtZWFucyB3ZSBtYXRjaCBhbnkgcHJlZml4IHRoYXRcbiAgICAgICAgICAgICAqIHN0YXJ0cyB3aXRoIGBmb29gLiBJZiB0aGUgbGV2ZWwgaXMgYGZvb2AsIHdlIG1hdGNoIG9ubHkgdGhlIHByZWZpeFxuICAgICAgICAgICAgICogYGZvb2AuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIChkZWJ1Z0xldmVsLmVuZHNXaXRoKCcqJylcbiAgICAgICAgICAgICAgICA/IHByZWZpeC5zdGFydHNXaXRoKGRlYnVnTGV2ZWwpXG4gICAgICAgICAgICAgICAgOiBwcmVmaXggPT09IGRlYnVnTGV2ZWwpO1xuICAgICAgICBpZiAoIXByZWZpeE1hdGNoZXNEZWJ1Z0xldmVsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgY29uc29sZS5sb2coYCR7cHJlZml4fTpgLCAuLi5sb2dBcmdzKTtcbiAgICB9O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPURlYnVnLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Debug.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/DeviceDescriptors.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/DeviceDescriptors.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"_devicesMap\": () => (/* binding */ _devicesMap)\n/* harmony export */ });\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst devices = [\n    {\n        name: 'Blackberry PlayBook',\n        userAgent: 'Mozilla/5.0 (PlayBook; U; RIM Tablet OS 2.1.0; en-US) AppleWebKit/536.2+ (KHTML like Gecko) Version/7.2.1.0 Safari/536.2+',\n        viewport: {\n            width: 600,\n            height: 1024,\n            deviceScaleFactor: 1,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'Blackberry PlayBook landscape',\n        userAgent: 'Mozilla/5.0 (PlayBook; U; RIM Tablet OS 2.1.0; en-US) AppleWebKit/536.2+ (KHTML like Gecko) Version/7.2.1.0 Safari/536.2+',\n        viewport: {\n            width: 1024,\n            height: 600,\n            deviceScaleFactor: 1,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'BlackBerry Z30',\n        userAgent: 'Mozilla/5.0 (BB10; Touch) AppleWebKit/537.10+ (KHTML, like Gecko) Version/10.0.9.2372 Mobile Safari/537.10+',\n        viewport: {\n            width: 360,\n            height: 640,\n            deviceScaleFactor: 2,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'BlackBerry Z30 landscape',\n        userAgent: 'Mozilla/5.0 (BB10; Touch) AppleWebKit/537.10+ (KHTML, like Gecko) Version/10.0.9.2372 Mobile Safari/537.10+',\n        viewport: {\n            width: 640,\n            height: 360,\n            deviceScaleFactor: 2,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'Galaxy Note 3',\n        userAgent: 'Mozilla/5.0 (Linux; U; Android 4.3; en-us; SM-N900T Build/JSS15J) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30',\n        viewport: {\n            width: 360,\n            height: 640,\n            deviceScaleFactor: 3,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'Galaxy Note 3 landscape',\n        userAgent: 'Mozilla/5.0 (Linux; U; Android 4.3; en-us; SM-N900T Build/JSS15J) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30',\n        viewport: {\n            width: 640,\n            height: 360,\n            deviceScaleFactor: 3,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'Galaxy Note II',\n        userAgent: 'Mozilla/5.0 (Linux; U; Android 4.1; en-us; GT-N7100 Build/JRO03C) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30',\n        viewport: {\n            width: 360,\n            height: 640,\n            deviceScaleFactor: 2,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'Galaxy Note II landscape',\n        userAgent: 'Mozilla/5.0 (Linux; U; Android 4.1; en-us; GT-N7100 Build/JRO03C) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30',\n        viewport: {\n            width: 640,\n            height: 360,\n            deviceScaleFactor: 2,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'Galaxy S III',\n        userAgent: 'Mozilla/5.0 (Linux; U; Android 4.0; en-us; GT-I9300 Build/IMM76D) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30',\n        viewport: {\n            width: 360,\n            height: 640,\n            deviceScaleFactor: 2,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'Galaxy S III landscape',\n        userAgent: 'Mozilla/5.0 (Linux; U; Android 4.0; en-us; GT-I9300 Build/IMM76D) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30',\n        viewport: {\n            width: 640,\n            height: 360,\n            deviceScaleFactor: 2,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'Galaxy S5',\n        userAgent: 'Mozilla/5.0 (Linux; Android 5.0; SM-G900P Build/LRX21T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3765.0 Mobile Safari/537.36',\n        viewport: {\n            width: 360,\n            height: 640,\n            deviceScaleFactor: 3,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'Galaxy S5 landscape',\n        userAgent: 'Mozilla/5.0 (Linux; Android 5.0; SM-G900P Build/LRX21T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3765.0 Mobile Safari/537.36',\n        viewport: {\n            width: 640,\n            height: 360,\n            deviceScaleFactor: 3,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'Galaxy S8',\n        userAgent: 'Mozilla/5.0 (Linux; Android 7.0; SM-G950U Build/NRD90M) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.84 Mobile Safari/537.36',\n        viewport: {\n            width: 360,\n            height: 740,\n            deviceScaleFactor: 3,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'Galaxy S8 landscape',\n        userAgent: 'Mozilla/5.0 (Linux; Android 7.0; SM-G950U Build/NRD90M) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.84 Mobile Safari/537.36',\n        viewport: {\n            width: 740,\n            height: 360,\n            deviceScaleFactor: 3,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'Galaxy S9+',\n        userAgent: 'Mozilla/5.0 (Linux; Android 8.0.0; SM-G965U Build/R16NW) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.111 Mobile Safari/537.36',\n        viewport: {\n            width: 320,\n            height: 658,\n            deviceScaleFactor: 4.5,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'Galaxy S9+ landscape',\n        userAgent: 'Mozilla/5.0 (Linux; Android 8.0.0; SM-G965U Build/R16NW) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.111 Mobile Safari/537.36',\n        viewport: {\n            width: 658,\n            height: 320,\n            deviceScaleFactor: 4.5,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'Galaxy Tab S4',\n        userAgent: 'Mozilla/5.0 (Linux; Android 8.1.0; SM-T837A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.80 Safari/537.36',\n        viewport: {\n            width: 712,\n            height: 1138,\n            deviceScaleFactor: 2.25,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'Galaxy Tab S4 landscape',\n        userAgent: 'Mozilla/5.0 (Linux; Android 8.1.0; SM-T837A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.80 Safari/537.36',\n        viewport: {\n            width: 1138,\n            height: 712,\n            deviceScaleFactor: 2.25,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'iPad',\n        userAgent: 'Mozilla/5.0 (iPad; CPU OS 11_0 like Mac OS X) AppleWebKit/604.1.34 (KHTML, like Gecko) Version/11.0 Mobile/15A5341f Safari/604.1',\n        viewport: {\n            width: 768,\n            height: 1024,\n            deviceScaleFactor: 2,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'iPad landscape',\n        userAgent: 'Mozilla/5.0 (iPad; CPU OS 11_0 like Mac OS X) AppleWebKit/604.1.34 (KHTML, like Gecko) Version/11.0 Mobile/15A5341f Safari/604.1',\n        viewport: {\n            width: 1024,\n            height: 768,\n            deviceScaleFactor: 2,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'iPad (gen 6)',\n        userAgent: 'Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.4 Mobile/15E148 Safari/604.1',\n        viewport: {\n            width: 768,\n            height: 1024,\n            deviceScaleFactor: 2,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'iPad (gen 6) landscape',\n        userAgent: 'Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.4 Mobile/15E148 Safari/604.1',\n        viewport: {\n            width: 1024,\n            height: 768,\n            deviceScaleFactor: 2,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'iPad (gen 7)',\n        userAgent: 'Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.4 Mobile/15E148 Safari/604.1',\n        viewport: {\n            width: 810,\n            height: 1080,\n            deviceScaleFactor: 2,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'iPad (gen 7) landscape',\n        userAgent: 'Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.4 Mobile/15E148 Safari/604.1',\n        viewport: {\n            width: 1080,\n            height: 810,\n            deviceScaleFactor: 2,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'iPad Mini',\n        userAgent: 'Mozilla/5.0 (iPad; CPU OS 11_0 like Mac OS X) AppleWebKit/604.1.34 (KHTML, like Gecko) Version/11.0 Mobile/15A5341f Safari/604.1',\n        viewport: {\n            width: 768,\n            height: 1024,\n            deviceScaleFactor: 2,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'iPad Mini landscape',\n        userAgent: 'Mozilla/5.0 (iPad; CPU OS 11_0 like Mac OS X) AppleWebKit/604.1.34 (KHTML, like Gecko) Version/11.0 Mobile/15A5341f Safari/604.1',\n        viewport: {\n            width: 1024,\n            height: 768,\n            deviceScaleFactor: 2,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'iPad Pro',\n        userAgent: 'Mozilla/5.0 (iPad; CPU OS 11_0 like Mac OS X) AppleWebKit/604.1.34 (KHTML, like Gecko) Version/11.0 Mobile/15A5341f Safari/604.1',\n        viewport: {\n            width: 1024,\n            height: 1366,\n            deviceScaleFactor: 2,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'iPad Pro landscape',\n        userAgent: 'Mozilla/5.0 (iPad; CPU OS 11_0 like Mac OS X) AppleWebKit/604.1.34 (KHTML, like Gecko) Version/11.0 Mobile/15A5341f Safari/604.1',\n        viewport: {\n            width: 1366,\n            height: 1024,\n            deviceScaleFactor: 2,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'iPad Pro 11',\n        userAgent: 'Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.4 Mobile/15E148 Safari/604.1',\n        viewport: {\n            width: 834,\n            height: 1194,\n            deviceScaleFactor: 2,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'iPad Pro 11 landscape',\n        userAgent: 'Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.4 Mobile/15E148 Safari/604.1',\n        viewport: {\n            width: 1194,\n            height: 834,\n            deviceScaleFactor: 2,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'iPhone 4',\n        userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 7_1_2 like Mac OS X) AppleWebKit/537.51.2 (KHTML, like Gecko) Version/7.0 Mobile/11D257 Safari/9537.53',\n        viewport: {\n            width: 320,\n            height: 480,\n            deviceScaleFactor: 2,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'iPhone 4 landscape',\n        userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 7_1_2 like Mac OS X) AppleWebKit/537.51.2 (KHTML, like Gecko) Version/7.0 Mobile/11D257 Safari/9537.53',\n        viewport: {\n            width: 480,\n            height: 320,\n            deviceScaleFactor: 2,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'iPhone 5',\n        userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 10_3_1 like Mac OS X) AppleWebKit/603.1.30 (KHTML, like Gecko) Version/10.0 Mobile/14E304 Safari/602.1',\n        viewport: {\n            width: 320,\n            height: 568,\n            deviceScaleFactor: 2,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'iPhone 5 landscape',\n        userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 10_3_1 like Mac OS X) AppleWebKit/603.1.30 (KHTML, like Gecko) Version/10.0 Mobile/14E304 Safari/602.1',\n        viewport: {\n            width: 568,\n            height: 320,\n            deviceScaleFactor: 2,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'iPhone 6',\n        userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1',\n        viewport: {\n            width: 375,\n            height: 667,\n            deviceScaleFactor: 2,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'iPhone 6 landscape',\n        userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1',\n        viewport: {\n            width: 667,\n            height: 375,\n            deviceScaleFactor: 2,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'iPhone 6 Plus',\n        userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1',\n        viewport: {\n            width: 414,\n            height: 736,\n            deviceScaleFactor: 3,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'iPhone 6 Plus landscape',\n        userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1',\n        viewport: {\n            width: 736,\n            height: 414,\n            deviceScaleFactor: 3,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'iPhone 7',\n        userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1',\n        viewport: {\n            width: 375,\n            height: 667,\n            deviceScaleFactor: 2,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'iPhone 7 landscape',\n        userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1',\n        viewport: {\n            width: 667,\n            height: 375,\n            deviceScaleFactor: 2,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'iPhone 7 Plus',\n        userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1',\n        viewport: {\n            width: 414,\n            height: 736,\n            deviceScaleFactor: 3,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'iPhone 7 Plus landscape',\n        userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1',\n        viewport: {\n            width: 736,\n            height: 414,\n            deviceScaleFactor: 3,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'iPhone 8',\n        userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1',\n        viewport: {\n            width: 375,\n            height: 667,\n            deviceScaleFactor: 2,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'iPhone 8 landscape',\n        userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1',\n        viewport: {\n            width: 667,\n            height: 375,\n            deviceScaleFactor: 2,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'iPhone 8 Plus',\n        userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1',\n        viewport: {\n            width: 414,\n            height: 736,\n            deviceScaleFactor: 3,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'iPhone 8 Plus landscape',\n        userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1',\n        viewport: {\n            width: 736,\n            height: 414,\n            deviceScaleFactor: 3,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'iPhone SE',\n        userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 10_3_1 like Mac OS X) AppleWebKit/603.1.30 (KHTML, like Gecko) Version/10.0 Mobile/14E304 Safari/602.1',\n        viewport: {\n            width: 320,\n            height: 568,\n            deviceScaleFactor: 2,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'iPhone SE landscape',\n        userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 10_3_1 like Mac OS X) AppleWebKit/603.1.30 (KHTML, like Gecko) Version/10.0 Mobile/14E304 Safari/602.1',\n        viewport: {\n            width: 568,\n            height: 320,\n            deviceScaleFactor: 2,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'iPhone X',\n        userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1',\n        viewport: {\n            width: 375,\n            height: 812,\n            deviceScaleFactor: 3,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'iPhone X landscape',\n        userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1',\n        viewport: {\n            width: 812,\n            height: 375,\n            deviceScaleFactor: 3,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'iPhone XR',\n        userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 12_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0 Mobile/15E148 Safari/604.1',\n        viewport: {\n            width: 414,\n            height: 896,\n            deviceScaleFactor: 3,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'iPhone XR landscape',\n        userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 12_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0 Mobile/15E148 Safari/604.1',\n        viewport: {\n            width: 896,\n            height: 414,\n            deviceScaleFactor: 3,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'iPhone 11',\n        userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 13_7 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.1 Mobile/15E148 Safari/604.1',\n        viewport: {\n            width: 414,\n            height: 828,\n            deviceScaleFactor: 2,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'iPhone 11 landscape',\n        userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 13_7 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.1 Mobile/15E148 Safari/604.1',\n        viewport: {\n            width: 828,\n            height: 414,\n            deviceScaleFactor: 2,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'iPhone 11 Pro',\n        userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 13_7 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.1 Mobile/15E148 Safari/604.1',\n        viewport: {\n            width: 375,\n            height: 812,\n            deviceScaleFactor: 3,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'iPhone 11 Pro landscape',\n        userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 13_7 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.1 Mobile/15E148 Safari/604.1',\n        viewport: {\n            width: 812,\n            height: 375,\n            deviceScaleFactor: 3,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'iPhone 11 Pro Max',\n        userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 13_7 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.1 Mobile/15E148 Safari/604.1',\n        viewport: {\n            width: 414,\n            height: 896,\n            deviceScaleFactor: 3,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'iPhone 11 Pro Max landscape',\n        userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 13_7 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.1 Mobile/15E148 Safari/604.1',\n        viewport: {\n            width: 896,\n            height: 414,\n            deviceScaleFactor: 3,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'iPhone 12',\n        userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.4 Mobile/15E148 Safari/604.1',\n        viewport: {\n            width: 390,\n            height: 844,\n            deviceScaleFactor: 3,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'iPhone 12 landscape',\n        userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.4 Mobile/15E148 Safari/604.1',\n        viewport: {\n            width: 844,\n            height: 390,\n            deviceScaleFactor: 3,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'iPhone 12 Pro',\n        userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.4 Mobile/15E148 Safari/604.1',\n        viewport: {\n            width: 390,\n            height: 844,\n            deviceScaleFactor: 3,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'iPhone 12 Pro landscape',\n        userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.4 Mobile/15E148 Safari/604.1',\n        viewport: {\n            width: 844,\n            height: 390,\n            deviceScaleFactor: 3,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'iPhone 12 Pro Max',\n        userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.4 Mobile/15E148 Safari/604.1',\n        viewport: {\n            width: 428,\n            height: 926,\n            deviceScaleFactor: 3,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'iPhone 12 Pro Max landscape',\n        userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.4 Mobile/15E148 Safari/604.1',\n        viewport: {\n            width: 926,\n            height: 428,\n            deviceScaleFactor: 3,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'iPhone 12 Mini',\n        userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.4 Mobile/15E148 Safari/604.1',\n        viewport: {\n            width: 375,\n            height: 812,\n            deviceScaleFactor: 3,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'iPhone 12 Mini landscape',\n        userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.4 Mobile/15E148 Safari/604.1',\n        viewport: {\n            width: 812,\n            height: 375,\n            deviceScaleFactor: 3,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'iPhone 13',\n        userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.4 Mobile/15E148 Safari/604.1',\n        viewport: {\n            width: 390,\n            height: 844,\n            deviceScaleFactor: 3,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'iPhone 13 landscape',\n        userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.4 Mobile/15E148 Safari/604.1',\n        viewport: {\n            width: 844,\n            height: 390,\n            deviceScaleFactor: 3,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'iPhone 13 Pro',\n        userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.4 Mobile/15E148 Safari/604.1',\n        viewport: {\n            width: 390,\n            height: 844,\n            deviceScaleFactor: 3,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'iPhone 13 Pro landscape',\n        userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.4 Mobile/15E148 Safari/604.1',\n        viewport: {\n            width: 844,\n            height: 390,\n            deviceScaleFactor: 3,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'iPhone 13 Pro Max',\n        userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.4 Mobile/15E148 Safari/604.1',\n        viewport: {\n            width: 428,\n            height: 926,\n            deviceScaleFactor: 3,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'iPhone 13 Pro Max landscape',\n        userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.4 Mobile/15E148 Safari/604.1',\n        viewport: {\n            width: 926,\n            height: 428,\n            deviceScaleFactor: 3,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'iPhone 13 Mini',\n        userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.4 Mobile/15E148 Safari/604.1',\n        viewport: {\n            width: 375,\n            height: 812,\n            deviceScaleFactor: 3,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'iPhone 13 Mini landscape',\n        userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.4 Mobile/15E148 Safari/604.1',\n        viewport: {\n            width: 812,\n            height: 375,\n            deviceScaleFactor: 3,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'JioPhone 2',\n        userAgent: 'Mozilla/5.0 (Mobile; LYF/F300B/LYF-F300B-001-01-15-130718-i;Android; rv:48.0) Gecko/48.0 Firefox/48.0 KAIOS/2.5',\n        viewport: {\n            width: 240,\n            height: 320,\n            deviceScaleFactor: 1,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'JioPhone 2 landscape',\n        userAgent: 'Mozilla/5.0 (Mobile; LYF/F300B/LYF-F300B-001-01-15-130718-i;Android; rv:48.0) Gecko/48.0 Firefox/48.0 KAIOS/2.5',\n        viewport: {\n            width: 320,\n            height: 240,\n            deviceScaleFactor: 1,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'Kindle Fire HDX',\n        userAgent: 'Mozilla/5.0 (Linux; U; en-us; KFAPWI Build/JDQ39) AppleWebKit/535.19 (KHTML, like Gecko) Silk/3.13 Safari/535.19 Silk-Accelerated=true',\n        viewport: {\n            width: 800,\n            height: 1280,\n            deviceScaleFactor: 2,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'Kindle Fire HDX landscape',\n        userAgent: 'Mozilla/5.0 (Linux; U; en-us; KFAPWI Build/JDQ39) AppleWebKit/535.19 (KHTML, like Gecko) Silk/3.13 Safari/535.19 Silk-Accelerated=true',\n        viewport: {\n            width: 1280,\n            height: 800,\n            deviceScaleFactor: 2,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'LG Optimus L70',\n        userAgent: 'Mozilla/5.0 (Linux; U; Android 4.4.2; en-us; LGMS323 Build/KOT49I.MS32310c) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/75.0.3765.0 Mobile Safari/537.36',\n        viewport: {\n            width: 384,\n            height: 640,\n            deviceScaleFactor: 1.25,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'LG Optimus L70 landscape',\n        userAgent: 'Mozilla/5.0 (Linux; U; Android 4.4.2; en-us; LGMS323 Build/KOT49I.MS32310c) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/75.0.3765.0 Mobile Safari/537.36',\n        viewport: {\n            width: 640,\n            height: 384,\n            deviceScaleFactor: 1.25,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'Microsoft Lumia 550',\n        userAgent: 'Mozilla/5.0 (Windows Phone 10.0; Android 4.2.1; Microsoft; Lumia 550) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2486.0 Mobile Safari/537.36 Edge/14.14263',\n        viewport: {\n            width: 640,\n            height: 360,\n            deviceScaleFactor: 2,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'Microsoft Lumia 950',\n        userAgent: 'Mozilla/5.0 (Windows Phone 10.0; Android 4.2.1; Microsoft; Lumia 950) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2486.0 Mobile Safari/537.36 Edge/14.14263',\n        viewport: {\n            width: 360,\n            height: 640,\n            deviceScaleFactor: 4,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'Microsoft Lumia 950 landscape',\n        userAgent: 'Mozilla/5.0 (Windows Phone 10.0; Android 4.2.1; Microsoft; Lumia 950) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2486.0 Mobile Safari/537.36 Edge/14.14263',\n        viewport: {\n            width: 640,\n            height: 360,\n            deviceScaleFactor: 4,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'Nexus 10',\n        userAgent: 'Mozilla/5.0 (Linux; Android 6.0.1; Nexus 10 Build/MOB31T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3765.0 Safari/537.36',\n        viewport: {\n            width: 800,\n            height: 1280,\n            deviceScaleFactor: 2,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'Nexus 10 landscape',\n        userAgent: 'Mozilla/5.0 (Linux; Android 6.0.1; Nexus 10 Build/MOB31T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3765.0 Safari/537.36',\n        viewport: {\n            width: 1280,\n            height: 800,\n            deviceScaleFactor: 2,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'Nexus 4',\n        userAgent: 'Mozilla/5.0 (Linux; Android 4.4.2; Nexus 4 Build/KOT49H) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3765.0 Mobile Safari/537.36',\n        viewport: {\n            width: 384,\n            height: 640,\n            deviceScaleFactor: 2,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'Nexus 4 landscape',\n        userAgent: 'Mozilla/5.0 (Linux; Android 4.4.2; Nexus 4 Build/KOT49H) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3765.0 Mobile Safari/537.36',\n        viewport: {\n            width: 640,\n            height: 384,\n            deviceScaleFactor: 2,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'Nexus 5',\n        userAgent: 'Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3765.0 Mobile Safari/537.36',\n        viewport: {\n            width: 360,\n            height: 640,\n            deviceScaleFactor: 3,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'Nexus 5 landscape',\n        userAgent: 'Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3765.0 Mobile Safari/537.36',\n        viewport: {\n            width: 640,\n            height: 360,\n            deviceScaleFactor: 3,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'Nexus 5X',\n        userAgent: 'Mozilla/5.0 (Linux; Android 8.0.0; Nexus 5X Build/OPR4.170623.006) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3765.0 Mobile Safari/537.36',\n        viewport: {\n            width: 412,\n            height: 732,\n            deviceScaleFactor: 2.625,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'Nexus 5X landscape',\n        userAgent: 'Mozilla/5.0 (Linux; Android 8.0.0; Nexus 5X Build/OPR4.170623.006) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3765.0 Mobile Safari/537.36',\n        viewport: {\n            width: 732,\n            height: 412,\n            deviceScaleFactor: 2.625,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'Nexus 6',\n        userAgent: 'Mozilla/5.0 (Linux; Android 7.1.1; Nexus 6 Build/N6F26U) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3765.0 Mobile Safari/537.36',\n        viewport: {\n            width: 412,\n            height: 732,\n            deviceScaleFactor: 3.5,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'Nexus 6 landscape',\n        userAgent: 'Mozilla/5.0 (Linux; Android 7.1.1; Nexus 6 Build/N6F26U) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3765.0 Mobile Safari/537.36',\n        viewport: {\n            width: 732,\n            height: 412,\n            deviceScaleFactor: 3.5,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'Nexus 6P',\n        userAgent: 'Mozilla/5.0 (Linux; Android 8.0.0; Nexus 6P Build/OPP3.170518.006) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3765.0 Mobile Safari/537.36',\n        viewport: {\n            width: 412,\n            height: 732,\n            deviceScaleFactor: 3.5,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'Nexus 6P landscape',\n        userAgent: 'Mozilla/5.0 (Linux; Android 8.0.0; Nexus 6P Build/OPP3.170518.006) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3765.0 Mobile Safari/537.36',\n        viewport: {\n            width: 732,\n            height: 412,\n            deviceScaleFactor: 3.5,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'Nexus 7',\n        userAgent: 'Mozilla/5.0 (Linux; Android 6.0.1; Nexus 7 Build/MOB30X) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3765.0 Safari/537.36',\n        viewport: {\n            width: 600,\n            height: 960,\n            deviceScaleFactor: 2,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'Nexus 7 landscape',\n        userAgent: 'Mozilla/5.0 (Linux; Android 6.0.1; Nexus 7 Build/MOB30X) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3765.0 Safari/537.36',\n        viewport: {\n            width: 960,\n            height: 600,\n            deviceScaleFactor: 2,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'Nokia Lumia 520',\n        userAgent: 'Mozilla/5.0 (compatible; MSIE 10.0; Windows Phone 8.0; Trident/6.0; IEMobile/10.0; ARM; Touch; NOKIA; Lumia 520)',\n        viewport: {\n            width: 320,\n            height: 533,\n            deviceScaleFactor: 1.5,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'Nokia Lumia 520 landscape',\n        userAgent: 'Mozilla/5.0 (compatible; MSIE 10.0; Windows Phone 8.0; Trident/6.0; IEMobile/10.0; ARM; Touch; NOKIA; Lumia 520)',\n        viewport: {\n            width: 533,\n            height: 320,\n            deviceScaleFactor: 1.5,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'Nokia N9',\n        userAgent: 'Mozilla/5.0 (MeeGo; NokiaN9) AppleWebKit/534.13 (KHTML, like Gecko) NokiaBrowser/8.5.0 Mobile Safari/534.13',\n        viewport: {\n            width: 480,\n            height: 854,\n            deviceScaleFactor: 1,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'Nokia N9 landscape',\n        userAgent: 'Mozilla/5.0 (MeeGo; NokiaN9) AppleWebKit/534.13 (KHTML, like Gecko) NokiaBrowser/8.5.0 Mobile Safari/534.13',\n        viewport: {\n            width: 854,\n            height: 480,\n            deviceScaleFactor: 1,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'Pixel 2',\n        userAgent: 'Mozilla/5.0 (Linux; Android 8.0; Pixel 2 Build/OPD3.170816.012) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3765.0 Mobile Safari/537.36',\n        viewport: {\n            width: 411,\n            height: 731,\n            deviceScaleFactor: 2.625,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'Pixel 2 landscape',\n        userAgent: 'Mozilla/5.0 (Linux; Android 8.0; Pixel 2 Build/OPD3.170816.012) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3765.0 Mobile Safari/537.36',\n        viewport: {\n            width: 731,\n            height: 411,\n            deviceScaleFactor: 2.625,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'Pixel 2 XL',\n        userAgent: 'Mozilla/5.0 (Linux; Android 8.0.0; Pixel 2 XL Build/OPD1.170816.004) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3765.0 Mobile Safari/537.36',\n        viewport: {\n            width: 411,\n            height: 823,\n            deviceScaleFactor: 3.5,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'Pixel 2 XL landscape',\n        userAgent: 'Mozilla/5.0 (Linux; Android 8.0.0; Pixel 2 XL Build/OPD1.170816.004) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3765.0 Mobile Safari/537.36',\n        viewport: {\n            width: 823,\n            height: 411,\n            deviceScaleFactor: 3.5,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'Pixel 3',\n        userAgent: 'Mozilla/5.0 (Linux; Android 9; Pixel 3 Build/PQ1A.181105.017.A1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.158 Mobile Safari/537.36',\n        viewport: {\n            width: 393,\n            height: 786,\n            deviceScaleFactor: 2.75,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'Pixel 3 landscape',\n        userAgent: 'Mozilla/5.0 (Linux; Android 9; Pixel 3 Build/PQ1A.181105.017.A1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.158 Mobile Safari/537.36',\n        viewport: {\n            width: 786,\n            height: 393,\n            deviceScaleFactor: 2.75,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'Pixel 4',\n        userAgent: 'Mozilla/5.0 (Linux; Android 10; Pixel 4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Mobile Safari/537.36',\n        viewport: {\n            width: 353,\n            height: 745,\n            deviceScaleFactor: 3,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'Pixel 4 landscape',\n        userAgent: 'Mozilla/5.0 (Linux; Android 10; Pixel 4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Mobile Safari/537.36',\n        viewport: {\n            width: 745,\n            height: 353,\n            deviceScaleFactor: 3,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'Pixel 4a (5G)',\n        userAgent: 'Mozilla/5.0 (Linux; Android 11; Pixel 4a (5G)) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4812.0 Mobile Safari/537.36',\n        viewport: {\n            width: 353,\n            height: 745,\n            deviceScaleFactor: 3,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'Pixel 4a (5G) landscape',\n        userAgent: 'Mozilla/5.0 (Linux; Android 11; Pixel 4a (5G)) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4812.0 Mobile Safari/537.36',\n        viewport: {\n            width: 745,\n            height: 353,\n            deviceScaleFactor: 3,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'Pixel 5',\n        userAgent: 'Mozilla/5.0 (Linux; Android 11; Pixel 5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4812.0 Mobile Safari/537.36',\n        viewport: {\n            width: 393,\n            height: 851,\n            deviceScaleFactor: 3,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'Pixel 5 landscape',\n        userAgent: 'Mozilla/5.0 (Linux; Android 11; Pixel 5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4812.0 Mobile Safari/537.36',\n        viewport: {\n            width: 851,\n            height: 393,\n            deviceScaleFactor: 3,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n    {\n        name: 'Moto G4',\n        userAgent: 'Mozilla/5.0 (Linux; Android 7.0; Moto G (4)) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4812.0 Mobile Safari/537.36',\n        viewport: {\n            width: 360,\n            height: 640,\n            deviceScaleFactor: 3,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: false,\n        },\n    },\n    {\n        name: 'Moto G4 landscape',\n        userAgent: 'Mozilla/5.0 (Linux; Android 7.0; Moto G (4)) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4812.0 Mobile Safari/537.36',\n        viewport: {\n            width: 640,\n            height: 360,\n            deviceScaleFactor: 3,\n            isMobile: true,\n            hasTouch: true,\n            isLandscape: true,\n        },\n    },\n];\n/**\n * @internal\n */\nconst _devicesMap = {};\nfor (const device of devices) {\n    _devicesMap[device.name] = device;\n}\n//# sourceMappingURL=DeviceDescriptors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/DeviceDescriptors.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Dialog.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Dialog.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Dialog\": () => (/* binding */ Dialog)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./assert.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/assert.js\");\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Dialog_client, _Dialog_type, _Dialog_message, _Dialog_defaultValue, _Dialog_handled;\n\n/**\n * Dialog instances are dispatched by the {@link Page} via the `dialog` event.\n *\n * @remarks\n *\n * @example\n * ```js\n * const puppeteer = require('puppeteer');\n *\n * (async () => {\n *   const browser = await puppeteer.launch();\n *   const page = await browser.newPage();\n *   page.on('dialog', async dialog => {\n *     console.log(dialog.message());\n *     await dialog.dismiss();\n *     await browser.close();\n *   });\n *   page.evaluate(() => alert('1'));\n * })();\n * ```\n * @public\n */\nclass Dialog {\n    /**\n     * @internal\n     */\n    constructor(client, type, message, defaultValue = '') {\n        _Dialog_client.set(this, void 0);\n        _Dialog_type.set(this, void 0);\n        _Dialog_message.set(this, void 0);\n        _Dialog_defaultValue.set(this, void 0);\n        _Dialog_handled.set(this, false);\n        __classPrivateFieldSet(this, _Dialog_client, client, \"f\");\n        __classPrivateFieldSet(this, _Dialog_type, type, \"f\");\n        __classPrivateFieldSet(this, _Dialog_message, message, \"f\");\n        __classPrivateFieldSet(this, _Dialog_defaultValue, defaultValue, \"f\");\n    }\n    /**\n     * @returns The type of the dialog.\n     */\n    type() {\n        return __classPrivateFieldGet(this, _Dialog_type, \"f\");\n    }\n    /**\n     * @returns The message displayed in the dialog.\n     */\n    message() {\n        return __classPrivateFieldGet(this, _Dialog_message, \"f\");\n    }\n    /**\n     * @returns The default value of the prompt, or an empty string if the dialog\n     * is not a `prompt`.\n     */\n    defaultValue() {\n        return __classPrivateFieldGet(this, _Dialog_defaultValue, \"f\");\n    }\n    /**\n     * @param promptText - optional text that will be entered in the dialog\n     * prompt. Has no effect if the dialog's type is not `prompt`.\n     *\n     * @returns A promise that resolves when the dialog has been accepted.\n     */\n    async accept(promptText) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(!__classPrivateFieldGet(this, _Dialog_handled, \"f\"), 'Cannot accept dialog which is already handled!');\n        __classPrivateFieldSet(this, _Dialog_handled, true, \"f\");\n        await __classPrivateFieldGet(this, _Dialog_client, \"f\").send('Page.handleJavaScriptDialog', {\n            accept: true,\n            promptText: promptText,\n        });\n    }\n    /**\n     * @returns A promise which will resolve once the dialog has been dismissed\n     */\n    async dismiss() {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(!__classPrivateFieldGet(this, _Dialog_handled, \"f\"), 'Cannot dismiss dialog which is already handled!');\n        __classPrivateFieldSet(this, _Dialog_handled, true, \"f\");\n        await __classPrivateFieldGet(this, _Dialog_client, \"f\").send('Page.handleJavaScriptDialog', {\n            accept: false,\n        });\n    }\n}\n_Dialog_client = new WeakMap(), _Dialog_type = new WeakMap(), _Dialog_message = new WeakMap(), _Dialog_defaultValue = new WeakMap(), _Dialog_handled = new WeakMap();\n//# sourceMappingURL=Dialog.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvZ29nb2FuaW1lLWFwaS9ub2RlX21vZHVsZXMvcHVwcGV0ZWVyL2xpYi9lc20vcHVwcGV0ZWVyL2NvbW1vbi9EaWFsb2cuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsU0FBSSxJQUFJLFNBQUk7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixTQUFJLElBQUksU0FBSTtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3FDO0FBQ3JDO0FBQ0EsMkNBQTJDLFlBQVk7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxrREFBTTtBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLGtEQUFNO0FBQ2Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW5pbWVmbGl4Ly4vbm9kZV9tb2R1bGVzL2dvZ29hbmltZS1hcGkvbm9kZV9tb2R1bGVzL3B1cHBldGVlci9saWIvZXNtL3B1cHBldGVlci9jb21tb24vRGlhbG9nLmpzP2I5ZDQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xudmFyIF9fY2xhc3NQcml2YXRlRmllbGRTZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRTZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xufTtcbnZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XG59O1xudmFyIF9EaWFsb2dfY2xpZW50LCBfRGlhbG9nX3R5cGUsIF9EaWFsb2dfbWVzc2FnZSwgX0RpYWxvZ19kZWZhdWx0VmFsdWUsIF9EaWFsb2dfaGFuZGxlZDtcbmltcG9ydCB7IGFzc2VydCB9IGZyb20gJy4vYXNzZXJ0LmpzJztcbi8qKlxuICogRGlhbG9nIGluc3RhbmNlcyBhcmUgZGlzcGF0Y2hlZCBieSB0aGUge0BsaW5rIFBhZ2V9IHZpYSB0aGUgYGRpYWxvZ2AgZXZlbnQuXG4gKlxuICogQHJlbWFya3NcbiAqXG4gKiBAZXhhbXBsZVxuICogYGBganNcbiAqIGNvbnN0IHB1cHBldGVlciA9IHJlcXVpcmUoJ3B1cHBldGVlcicpO1xuICpcbiAqIChhc3luYyAoKSA9PiB7XG4gKiAgIGNvbnN0IGJyb3dzZXIgPSBhd2FpdCBwdXBwZXRlZXIubGF1bmNoKCk7XG4gKiAgIGNvbnN0IHBhZ2UgPSBhd2FpdCBicm93c2VyLm5ld1BhZ2UoKTtcbiAqICAgcGFnZS5vbignZGlhbG9nJywgYXN5bmMgZGlhbG9nID0+IHtcbiAqICAgICBjb25zb2xlLmxvZyhkaWFsb2cubWVzc2FnZSgpKTtcbiAqICAgICBhd2FpdCBkaWFsb2cuZGlzbWlzcygpO1xuICogICAgIGF3YWl0IGJyb3dzZXIuY2xvc2UoKTtcbiAqICAgfSk7XG4gKiAgIHBhZ2UuZXZhbHVhdGUoKCkgPT4gYWxlcnQoJzEnKSk7XG4gKiB9KSgpO1xuICogYGBgXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBEaWFsb2cge1xuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGNsaWVudCwgdHlwZSwgbWVzc2FnZSwgZGVmYXVsdFZhbHVlID0gJycpIHtcbiAgICAgICAgX0RpYWxvZ19jbGllbnQuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9EaWFsb2dfdHlwZS5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX0RpYWxvZ19tZXNzYWdlLnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBfRGlhbG9nX2RlZmF1bHRWYWx1ZS5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX0RpYWxvZ19oYW5kbGVkLnNldCh0aGlzLCBmYWxzZSk7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX0RpYWxvZ19jbGllbnQsIGNsaWVudCwgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9EaWFsb2dfdHlwZSwgdHlwZSwgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9EaWFsb2dfbWVzc2FnZSwgbWVzc2FnZSwgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9EaWFsb2dfZGVmYXVsdFZhbHVlLCBkZWZhdWx0VmFsdWUsIFwiZlwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgVGhlIHR5cGUgb2YgdGhlIGRpYWxvZy5cbiAgICAgKi9cbiAgICB0eXBlKCkge1xuICAgICAgICByZXR1cm4gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfRGlhbG9nX3R5cGUsIFwiZlwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgVGhlIG1lc3NhZ2UgZGlzcGxheWVkIGluIHRoZSBkaWFsb2cuXG4gICAgICovXG4gICAgbWVzc2FnZSgpIHtcbiAgICAgICAgcmV0dXJuIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0RpYWxvZ19tZXNzYWdlLCBcImZcIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIFRoZSBkZWZhdWx0IHZhbHVlIG9mIHRoZSBwcm9tcHQsIG9yIGFuIGVtcHR5IHN0cmluZyBpZiB0aGUgZGlhbG9nXG4gICAgICogaXMgbm90IGEgYHByb21wdGAuXG4gICAgICovXG4gICAgZGVmYXVsdFZhbHVlKCkge1xuICAgICAgICByZXR1cm4gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfRGlhbG9nX2RlZmF1bHRWYWx1ZSwgXCJmXCIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gcHJvbXB0VGV4dCAtIG9wdGlvbmFsIHRleHQgdGhhdCB3aWxsIGJlIGVudGVyZWQgaW4gdGhlIGRpYWxvZ1xuICAgICAqIHByb21wdC4gSGFzIG5vIGVmZmVjdCBpZiB0aGUgZGlhbG9nJ3MgdHlwZSBpcyBub3QgYHByb21wdGAuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSBkaWFsb2cgaGFzIGJlZW4gYWNjZXB0ZWQuXG4gICAgICovXG4gICAgYXN5bmMgYWNjZXB0KHByb21wdFRleHQpIHtcbiAgICAgICAgYXNzZXJ0KCFfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9EaWFsb2dfaGFuZGxlZCwgXCJmXCIpLCAnQ2Fubm90IGFjY2VwdCBkaWFsb2cgd2hpY2ggaXMgYWxyZWFkeSBoYW5kbGVkIScpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9EaWFsb2dfaGFuZGxlZCwgdHJ1ZSwgXCJmXCIpO1xuICAgICAgICBhd2FpdCBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9EaWFsb2dfY2xpZW50LCBcImZcIikuc2VuZCgnUGFnZS5oYW5kbGVKYXZhU2NyaXB0RGlhbG9nJywge1xuICAgICAgICAgICAgYWNjZXB0OiB0cnVlLFxuICAgICAgICAgICAgcHJvbXB0VGV4dDogcHJvbXB0VGV4dCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIEEgcHJvbWlzZSB3aGljaCB3aWxsIHJlc29sdmUgb25jZSB0aGUgZGlhbG9nIGhhcyBiZWVuIGRpc21pc3NlZFxuICAgICAqL1xuICAgIGFzeW5jIGRpc21pc3MoKSB7XG4gICAgICAgIGFzc2VydCghX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfRGlhbG9nX2hhbmRsZWQsIFwiZlwiKSwgJ0Nhbm5vdCBkaXNtaXNzIGRpYWxvZyB3aGljaCBpcyBhbHJlYWR5IGhhbmRsZWQhJyk7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX0RpYWxvZ19oYW5kbGVkLCB0cnVlLCBcImZcIik7XG4gICAgICAgIGF3YWl0IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0RpYWxvZ19jbGllbnQsIFwiZlwiKS5zZW5kKCdQYWdlLmhhbmRsZUphdmFTY3JpcHREaWFsb2cnLCB7XG4gICAgICAgICAgICBhY2NlcHQ6IGZhbHNlLFxuICAgICAgICB9KTtcbiAgICB9XG59XG5fRGlhbG9nX2NsaWVudCA9IG5ldyBXZWFrTWFwKCksIF9EaWFsb2dfdHlwZSA9IG5ldyBXZWFrTWFwKCksIF9EaWFsb2dfbWVzc2FnZSA9IG5ldyBXZWFrTWFwKCksIF9EaWFsb2dfZGVmYXVsdFZhbHVlID0gbmV3IFdlYWtNYXAoKSwgX0RpYWxvZ19oYW5kbGVkID0gbmV3IFdlYWtNYXAoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPURpYWxvZy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Dialog.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/EmulationManager.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/EmulationManager.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"EmulationManager\": () => (/* binding */ EmulationManager)\n/* harmony export */ });\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _EmulationManager_client, _EmulationManager_emulatingMobile, _EmulationManager_hasTouch;\nclass EmulationManager {\n    constructor(client) {\n        _EmulationManager_client.set(this, void 0);\n        _EmulationManager_emulatingMobile.set(this, false);\n        _EmulationManager_hasTouch.set(this, false);\n        __classPrivateFieldSet(this, _EmulationManager_client, client, \"f\");\n    }\n    async emulateViewport(viewport) {\n        const mobile = viewport.isMobile || false;\n        const width = viewport.width;\n        const height = viewport.height;\n        const deviceScaleFactor = viewport.deviceScaleFactor || 1;\n        const screenOrientation = viewport.isLandscape\n            ? { angle: 90, type: 'landscapePrimary' }\n            : { angle: 0, type: 'portraitPrimary' };\n        const hasTouch = viewport.hasTouch || false;\n        await Promise.all([\n            __classPrivateFieldGet(this, _EmulationManager_client, \"f\").send('Emulation.setDeviceMetricsOverride', {\n                mobile,\n                width,\n                height,\n                deviceScaleFactor,\n                screenOrientation,\n            }),\n            __classPrivateFieldGet(this, _EmulationManager_client, \"f\").send('Emulation.setTouchEmulationEnabled', {\n                enabled: hasTouch,\n            }),\n        ]);\n        const reloadNeeded = __classPrivateFieldGet(this, _EmulationManager_emulatingMobile, \"f\") !== mobile || __classPrivateFieldGet(this, _EmulationManager_hasTouch, \"f\") !== hasTouch;\n        __classPrivateFieldSet(this, _EmulationManager_emulatingMobile, mobile, \"f\");\n        __classPrivateFieldSet(this, _EmulationManager_hasTouch, hasTouch, \"f\");\n        return reloadNeeded;\n    }\n}\n_EmulationManager_client = new WeakMap(), _EmulationManager_emulatingMobile = new WeakMap(), _EmulationManager_hasTouch = new WeakMap();\n//# sourceMappingURL=EmulationManager.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvZ29nb2FuaW1lLWFwaS9ub2RlX21vZHVsZXMvcHVwcGV0ZWVyL2xpYi9lc20vcHVwcGV0ZWVyL2NvbW1vbi9FbXVsYXRpb25NYW5hZ2VyLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSw4QkFBOEIsU0FBSSxJQUFJLFNBQUk7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixTQUFJLElBQUksU0FBSTtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbmltZWZsaXgvLi9ub2RlX21vZHVsZXMvZ29nb2FuaW1lLWFwaS9ub2RlX21vZHVsZXMvcHVwcGV0ZWVyL2xpYi9lc20vcHVwcGV0ZWVyL2NvbW1vbi9FbXVsYXRpb25NYW5hZ2VyLmpzPzEyMDgiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fY2xhc3NQcml2YXRlRmllbGRTZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRTZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xufTtcbnZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XG59O1xudmFyIF9FbXVsYXRpb25NYW5hZ2VyX2NsaWVudCwgX0VtdWxhdGlvbk1hbmFnZXJfZW11bGF0aW5nTW9iaWxlLCBfRW11bGF0aW9uTWFuYWdlcl9oYXNUb3VjaDtcbmV4cG9ydCBjbGFzcyBFbXVsYXRpb25NYW5hZ2VyIHtcbiAgICBjb25zdHJ1Y3RvcihjbGllbnQpIHtcbiAgICAgICAgX0VtdWxhdGlvbk1hbmFnZXJfY2xpZW50LnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBfRW11bGF0aW9uTWFuYWdlcl9lbXVsYXRpbmdNb2JpbGUuc2V0KHRoaXMsIGZhbHNlKTtcbiAgICAgICAgX0VtdWxhdGlvbk1hbmFnZXJfaGFzVG91Y2guc2V0KHRoaXMsIGZhbHNlKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfRW11bGF0aW9uTWFuYWdlcl9jbGllbnQsIGNsaWVudCwgXCJmXCIpO1xuICAgIH1cbiAgICBhc3luYyBlbXVsYXRlVmlld3BvcnQodmlld3BvcnQpIHtcbiAgICAgICAgY29uc3QgbW9iaWxlID0gdmlld3BvcnQuaXNNb2JpbGUgfHwgZmFsc2U7XG4gICAgICAgIGNvbnN0IHdpZHRoID0gdmlld3BvcnQud2lkdGg7XG4gICAgICAgIGNvbnN0IGhlaWdodCA9IHZpZXdwb3J0LmhlaWdodDtcbiAgICAgICAgY29uc3QgZGV2aWNlU2NhbGVGYWN0b3IgPSB2aWV3cG9ydC5kZXZpY2VTY2FsZUZhY3RvciB8fCAxO1xuICAgICAgICBjb25zdCBzY3JlZW5PcmllbnRhdGlvbiA9IHZpZXdwb3J0LmlzTGFuZHNjYXBlXG4gICAgICAgICAgICA/IHsgYW5nbGU6IDkwLCB0eXBlOiAnbGFuZHNjYXBlUHJpbWFyeScgfVxuICAgICAgICAgICAgOiB7IGFuZ2xlOiAwLCB0eXBlOiAncG9ydHJhaXRQcmltYXJ5JyB9O1xuICAgICAgICBjb25zdCBoYXNUb3VjaCA9IHZpZXdwb3J0Lmhhc1RvdWNoIHx8IGZhbHNlO1xuICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9FbXVsYXRpb25NYW5hZ2VyX2NsaWVudCwgXCJmXCIpLnNlbmQoJ0VtdWxhdGlvbi5zZXREZXZpY2VNZXRyaWNzT3ZlcnJpZGUnLCB7XG4gICAgICAgICAgICAgICAgbW9iaWxlLFxuICAgICAgICAgICAgICAgIHdpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodCxcbiAgICAgICAgICAgICAgICBkZXZpY2VTY2FsZUZhY3RvcixcbiAgICAgICAgICAgICAgICBzY3JlZW5PcmllbnRhdGlvbixcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfRW11bGF0aW9uTWFuYWdlcl9jbGllbnQsIFwiZlwiKS5zZW5kKCdFbXVsYXRpb24uc2V0VG91Y2hFbXVsYXRpb25FbmFibGVkJywge1xuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGhhc1RvdWNoLFxuICAgICAgICAgICAgfSksXG4gICAgICAgIF0pO1xuICAgICAgICBjb25zdCByZWxvYWROZWVkZWQgPSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9FbXVsYXRpb25NYW5hZ2VyX2VtdWxhdGluZ01vYmlsZSwgXCJmXCIpICE9PSBtb2JpbGUgfHwgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfRW11bGF0aW9uTWFuYWdlcl9oYXNUb3VjaCwgXCJmXCIpICE9PSBoYXNUb3VjaDtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfRW11bGF0aW9uTWFuYWdlcl9lbXVsYXRpbmdNb2JpbGUsIG1vYmlsZSwgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9FbXVsYXRpb25NYW5hZ2VyX2hhc1RvdWNoLCBoYXNUb3VjaCwgXCJmXCIpO1xuICAgICAgICByZXR1cm4gcmVsb2FkTmVlZGVkO1xuICAgIH1cbn1cbl9FbXVsYXRpb25NYW5hZ2VyX2NsaWVudCA9IG5ldyBXZWFrTWFwKCksIF9FbXVsYXRpb25NYW5hZ2VyX2VtdWxhdGluZ01vYmlsZSA9IG5ldyBXZWFrTWFwKCksIF9FbXVsYXRpb25NYW5hZ2VyX2hhc1RvdWNoID0gbmV3IFdlYWtNYXAoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUVtdWxhdGlvbk1hbmFnZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/EmulationManager.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Errors.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Errors.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CustomError\": () => (/* binding */ CustomError),\n/* harmony export */   \"ProtocolError\": () => (/* binding */ ProtocolError),\n/* harmony export */   \"TimeoutError\": () => (/* binding */ TimeoutError),\n/* harmony export */   \"puppeteerErrors\": () => (/* binding */ puppeteerErrors)\n/* harmony export */ });\n/**\n * Copyright 2018 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @public\n */\nclass CustomError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = this.constructor.name;\n        Error.captureStackTrace(this, this.constructor);\n    }\n}\n/**\n * TimeoutError is emitted whenever certain operations are terminated due to timeout.\n *\n * @remarks\n *\n * Example operations are {@link Page.waitForSelector | page.waitForSelector}\n * or {@link PuppeteerNode.launch | puppeteer.launch}.\n *\n * @public\n */\nclass TimeoutError extends CustomError {\n}\n/**\n * ProtocolError is emitted whenever there is an error from the protocol.\n *\n * @public\n */\nclass ProtocolError extends CustomError {\n    constructor() {\n        super(...arguments);\n        this.originalMessage = '';\n    }\n}\n/**\n * @public\n */\nconst puppeteerErrors = Object.freeze({\n    TimeoutError,\n    ProtocolError,\n});\n//# sourceMappingURL=Errors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvZ29nb2FuaW1lLWFwaS9ub2RlX21vZHVsZXMvcHVwcGV0ZWVyL2xpYi9lc20vcHVwcGV0ZWVyL2NvbW1vbi9FcnJvcnMuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQixPQUFPLDhDQUE4QztBQUNyRDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBLENBQUM7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL2FuaW1lZmxpeC8uL25vZGVfbW9kdWxlcy9nb2dvYW5pbWUtYXBpL25vZGVfbW9kdWxlcy9wdXBwZXRlZXIvbGliL2VzbS9wdXBwZXRlZXIvY29tbW9uL0Vycm9ycy5qcz84YmM0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgQ3VzdG9tRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5uYW1lID0gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lO1xuICAgICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCB0aGlzLmNvbnN0cnVjdG9yKTtcbiAgICB9XG59XG4vKipcbiAqIFRpbWVvdXRFcnJvciBpcyBlbWl0dGVkIHdoZW5ldmVyIGNlcnRhaW4gb3BlcmF0aW9ucyBhcmUgdGVybWluYXRlZCBkdWUgdG8gdGltZW91dC5cbiAqXG4gKiBAcmVtYXJrc1xuICpcbiAqIEV4YW1wbGUgb3BlcmF0aW9ucyBhcmUge0BsaW5rIFBhZ2Uud2FpdEZvclNlbGVjdG9yIHwgcGFnZS53YWl0Rm9yU2VsZWN0b3J9XG4gKiBvciB7QGxpbmsgUHVwcGV0ZWVyTm9kZS5sYXVuY2ggfCBwdXBwZXRlZXIubGF1bmNofS5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBUaW1lb3V0RXJyb3IgZXh0ZW5kcyBDdXN0b21FcnJvciB7XG59XG4vKipcbiAqIFByb3RvY29sRXJyb3IgaXMgZW1pdHRlZCB3aGVuZXZlciB0aGVyZSBpcyBhbiBlcnJvciBmcm9tIHRoZSBwcm90b2NvbC5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBQcm90b2NvbEVycm9yIGV4dGVuZHMgQ3VzdG9tRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLm9yaWdpbmFsTWVzc2FnZSA9ICcnO1xuICAgIH1cbn1cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgcHVwcGV0ZWVyRXJyb3JzID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgVGltZW91dEVycm9yLFxuICAgIFByb3RvY29sRXJyb3IsXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUVycm9ycy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Errors.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/EventEmitter.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/EventEmitter.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"EventEmitter\": () => (/* binding */ EventEmitter)\n/* harmony export */ });\n/* harmony import */ var _vendor_mitt_src_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../vendor/mitt/src/index.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/vendor/mitt/src/index.js\");\n\n/**\n * The EventEmitter class that many Puppeteer classes extend.\n *\n * @remarks\n *\n * This allows you to listen to events that Puppeteer classes fire and act\n * accordingly. Therefore you'll mostly use {@link EventEmitter.on | on} and\n * {@link EventEmitter.off | off} to bind\n * and unbind to event listeners.\n *\n * @public\n */\nclass EventEmitter {\n    /**\n     * @internal\n     */\n    constructor() {\n        this.eventsMap = new Map();\n        this.emitter = (0,_vendor_mitt_src_index_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this.eventsMap);\n    }\n    /**\n     * Bind an event listener to fire when an event occurs.\n     * @param event - the event type you'd like to listen to. Can be a string or symbol.\n     * @param handler  - the function to be called when the event occurs.\n     * @returns `this` to enable you to chain method calls.\n     */\n    on(event, handler) {\n        this.emitter.on(event, handler);\n        return this;\n    }\n    /**\n     * Remove an event listener from firing.\n     * @param event - the event type you'd like to stop listening to.\n     * @param handler  - the function that should be removed.\n     * @returns `this` to enable you to chain method calls.\n     */\n    off(event, handler) {\n        this.emitter.off(event, handler);\n        return this;\n    }\n    /**\n     * Remove an event listener.\n     * @deprecated please use {@link EventEmitter.off} instead.\n     */\n    removeListener(event, handler) {\n        this.off(event, handler);\n        return this;\n    }\n    /**\n     * Add an event listener.\n     * @deprecated please use {@link EventEmitter.on} instead.\n     */\n    addListener(event, handler) {\n        this.on(event, handler);\n        return this;\n    }\n    /**\n     * Emit an event and call any associated listeners.\n     *\n     * @param event - the event you'd like to emit\n     * @param eventData - any data you'd like to emit with the event\n     * @returns `true` if there are any listeners, `false` if there are not.\n     */\n    emit(event, eventData) {\n        this.emitter.emit(event, eventData);\n        return this.eventListenersCount(event) > 0;\n    }\n    /**\n     * Like `on` but the listener will only be fired once and then it will be removed.\n     * @param event - the event you'd like to listen to\n     * @param handler - the handler function to run when the event occurs\n     * @returns `this` to enable you to chain method calls.\n     */\n    once(event, handler) {\n        const onceHandler = (eventData) => {\n            handler(eventData);\n            this.off(event, onceHandler);\n        };\n        return this.on(event, onceHandler);\n    }\n    /**\n     * Gets the number of listeners for a given event.\n     *\n     * @param event - the event to get the listener count for\n     * @returns the number of listeners bound to the given event\n     */\n    listenerCount(event) {\n        return this.eventListenersCount(event);\n    }\n    /**\n     * Removes all listeners. If given an event argument, it will remove only\n     * listeners for that event.\n     * @param event - the event to remove listeners for.\n     * @returns `this` to enable you to chain method calls.\n     */\n    removeAllListeners(event) {\n        if (event) {\n            this.eventsMap.delete(event);\n        }\n        else {\n            this.eventsMap.clear();\n        }\n        return this;\n    }\n    eventListenersCount(event) {\n        var _a;\n        return ((_a = this.eventsMap.get(event)) === null || _a === void 0 ? void 0 : _a.length) || 0;\n    }\n}\n//# sourceMappingURL=EventEmitter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvZ29nb2FuaW1lLWFwaS9ub2RlX21vZHVsZXMvcHVwcGV0ZWVyL2xpYi9lc20vcHVwcGV0ZWVyL2NvbW1vbi9FdmVudEVtaXR0ZXIuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBa0Q7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLDRCQUE0QjtBQUN6RSxJQUFJLDhCQUE4QjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixxRUFBSTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLHdCQUF3QjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQix1QkFBdUI7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FuaW1lZmxpeC8uL25vZGVfbW9kdWxlcy9nb2dvYW5pbWUtYXBpL25vZGVfbW9kdWxlcy9wdXBwZXRlZXIvbGliL2VzbS9wdXBwZXRlZXIvY29tbW9uL0V2ZW50RW1pdHRlci5qcz80ZTRmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtaXR0IGZyb20gJy4uLy4uL3ZlbmRvci9taXR0L3NyYy9pbmRleC5qcyc7XG4vKipcbiAqIFRoZSBFdmVudEVtaXR0ZXIgY2xhc3MgdGhhdCBtYW55IFB1cHBldGVlciBjbGFzc2VzIGV4dGVuZC5cbiAqXG4gKiBAcmVtYXJrc1xuICpcbiAqIFRoaXMgYWxsb3dzIHlvdSB0byBsaXN0ZW4gdG8gZXZlbnRzIHRoYXQgUHVwcGV0ZWVyIGNsYXNzZXMgZmlyZSBhbmQgYWN0XG4gKiBhY2NvcmRpbmdseS4gVGhlcmVmb3JlIHlvdSdsbCBtb3N0bHkgdXNlIHtAbGluayBFdmVudEVtaXR0ZXIub24gfCBvbn0gYW5kXG4gKiB7QGxpbmsgRXZlbnRFbWl0dGVyLm9mZiB8IG9mZn0gdG8gYmluZFxuICogYW5kIHVuYmluZCB0byBldmVudCBsaXN0ZW5lcnMuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgRXZlbnRFbWl0dGVyIHtcbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5ldmVudHNNYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuZW1pdHRlciA9IG1pdHQodGhpcy5ldmVudHNNYXApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBCaW5kIGFuIGV2ZW50IGxpc3RlbmVyIHRvIGZpcmUgd2hlbiBhbiBldmVudCBvY2N1cnMuXG4gICAgICogQHBhcmFtIGV2ZW50IC0gdGhlIGV2ZW50IHR5cGUgeW91J2QgbGlrZSB0byBsaXN0ZW4gdG8uIENhbiBiZSBhIHN0cmluZyBvciBzeW1ib2wuXG4gICAgICogQHBhcmFtIGhhbmRsZXIgIC0gdGhlIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aGVuIHRoZSBldmVudCBvY2N1cnMuXG4gICAgICogQHJldHVybnMgYHRoaXNgIHRvIGVuYWJsZSB5b3UgdG8gY2hhaW4gbWV0aG9kIGNhbGxzLlxuICAgICAqL1xuICAgIG9uKGV2ZW50LCBoYW5kbGVyKSB7XG4gICAgICAgIHRoaXMuZW1pdHRlci5vbihldmVudCwgaGFuZGxlcik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYW4gZXZlbnQgbGlzdGVuZXIgZnJvbSBmaXJpbmcuXG4gICAgICogQHBhcmFtIGV2ZW50IC0gdGhlIGV2ZW50IHR5cGUgeW91J2QgbGlrZSB0byBzdG9wIGxpc3RlbmluZyB0by5cbiAgICAgKiBAcGFyYW0gaGFuZGxlciAgLSB0aGUgZnVuY3Rpb24gdGhhdCBzaG91bGQgYmUgcmVtb3ZlZC5cbiAgICAgKiBAcmV0dXJucyBgdGhpc2AgdG8gZW5hYmxlIHlvdSB0byBjaGFpbiBtZXRob2QgY2FsbHMuXG4gICAgICovXG4gICAgb2ZmKGV2ZW50LCBoYW5kbGVyKSB7XG4gICAgICAgIHRoaXMuZW1pdHRlci5vZmYoZXZlbnQsIGhhbmRsZXIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGFuIGV2ZW50IGxpc3RlbmVyLlxuICAgICAqIEBkZXByZWNhdGVkIHBsZWFzZSB1c2Uge0BsaW5rIEV2ZW50RW1pdHRlci5vZmZ9IGluc3RlYWQuXG4gICAgICovXG4gICAgcmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIpIHtcbiAgICAgICAgdGhpcy5vZmYoZXZlbnQsIGhhbmRsZXIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkIGFuIGV2ZW50IGxpc3RlbmVyLlxuICAgICAqIEBkZXByZWNhdGVkIHBsZWFzZSB1c2Uge0BsaW5rIEV2ZW50RW1pdHRlci5vbn0gaW5zdGVhZC5cbiAgICAgKi9cbiAgICBhZGRMaXN0ZW5lcihldmVudCwgaGFuZGxlcikge1xuICAgICAgICB0aGlzLm9uKGV2ZW50LCBoYW5kbGVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEVtaXQgYW4gZXZlbnQgYW5kIGNhbGwgYW55IGFzc29jaWF0ZWQgbGlzdGVuZXJzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGV2ZW50IC0gdGhlIGV2ZW50IHlvdSdkIGxpa2UgdG8gZW1pdFxuICAgICAqIEBwYXJhbSBldmVudERhdGEgLSBhbnkgZGF0YSB5b3UnZCBsaWtlIHRvIGVtaXQgd2l0aCB0aGUgZXZlbnRcbiAgICAgKiBAcmV0dXJucyBgdHJ1ZWAgaWYgdGhlcmUgYXJlIGFueSBsaXN0ZW5lcnMsIGBmYWxzZWAgaWYgdGhlcmUgYXJlIG5vdC5cbiAgICAgKi9cbiAgICBlbWl0KGV2ZW50LCBldmVudERhdGEpIHtcbiAgICAgICAgdGhpcy5lbWl0dGVyLmVtaXQoZXZlbnQsIGV2ZW50RGF0YSk7XG4gICAgICAgIHJldHVybiB0aGlzLmV2ZW50TGlzdGVuZXJzQ291bnQoZXZlbnQpID4gMDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTGlrZSBgb25gIGJ1dCB0aGUgbGlzdGVuZXIgd2lsbCBvbmx5IGJlIGZpcmVkIG9uY2UgYW5kIHRoZW4gaXQgd2lsbCBiZSByZW1vdmVkLlxuICAgICAqIEBwYXJhbSBldmVudCAtIHRoZSBldmVudCB5b3UnZCBsaWtlIHRvIGxpc3RlbiB0b1xuICAgICAqIEBwYXJhbSBoYW5kbGVyIC0gdGhlIGhhbmRsZXIgZnVuY3Rpb24gdG8gcnVuIHdoZW4gdGhlIGV2ZW50IG9jY3Vyc1xuICAgICAqIEByZXR1cm5zIGB0aGlzYCB0byBlbmFibGUgeW91IHRvIGNoYWluIG1ldGhvZCBjYWxscy5cbiAgICAgKi9cbiAgICBvbmNlKGV2ZW50LCBoYW5kbGVyKSB7XG4gICAgICAgIGNvbnN0IG9uY2VIYW5kbGVyID0gKGV2ZW50RGF0YSkgPT4ge1xuICAgICAgICAgICAgaGFuZGxlcihldmVudERhdGEpO1xuICAgICAgICAgICAgdGhpcy5vZmYoZXZlbnQsIG9uY2VIYW5kbGVyKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHRoaXMub24oZXZlbnQsIG9uY2VIYW5kbGVyKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbnVtYmVyIG9mIGxpc3RlbmVycyBmb3IgYSBnaXZlbiBldmVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBldmVudCAtIHRoZSBldmVudCB0byBnZXQgdGhlIGxpc3RlbmVyIGNvdW50IGZvclxuICAgICAqIEByZXR1cm5zIHRoZSBudW1iZXIgb2YgbGlzdGVuZXJzIGJvdW5kIHRvIHRoZSBnaXZlbiBldmVudFxuICAgICAqL1xuICAgIGxpc3RlbmVyQ291bnQoZXZlbnQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXZlbnRMaXN0ZW5lcnNDb3VudChldmVudCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGxpc3RlbmVycy4gSWYgZ2l2ZW4gYW4gZXZlbnQgYXJndW1lbnQsIGl0IHdpbGwgcmVtb3ZlIG9ubHlcbiAgICAgKiBsaXN0ZW5lcnMgZm9yIHRoYXQgZXZlbnQuXG4gICAgICogQHBhcmFtIGV2ZW50IC0gdGhlIGV2ZW50IHRvIHJlbW92ZSBsaXN0ZW5lcnMgZm9yLlxuICAgICAqIEByZXR1cm5zIGB0aGlzYCB0byBlbmFibGUgeW91IHRvIGNoYWluIG1ldGhvZCBjYWxscy5cbiAgICAgKi9cbiAgICByZW1vdmVBbGxMaXN0ZW5lcnMoZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgICAgICB0aGlzLmV2ZW50c01hcC5kZWxldGUoZXZlbnQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5ldmVudHNNYXAuY2xlYXIoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZXZlbnRMaXN0ZW5lcnNDb3VudChldmVudCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiAoKF9hID0gdGhpcy5ldmVudHNNYXAuZ2V0KGV2ZW50KSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmxlbmd0aCkgfHwgMDtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1FdmVudEVtaXR0ZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/EventEmitter.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/ExecutionContext.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/ExecutionContext.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"EVALUATION_SCRIPT_URL\": () => (/* binding */ EVALUATION_SCRIPT_URL),\n/* harmony export */   \"ExecutionContext\": () => (/* binding */ ExecutionContext)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./assert.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/assert.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/util.js\");\n/* harmony import */ var _JSHandle_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./JSHandle.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/JSHandle.js\");\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _ExecutionContext_instances, _ExecutionContext_evaluate;\n\n\n\n/**\n * @public\n */\nconst EVALUATION_SCRIPT_URL = 'pptr://__puppeteer_evaluation_script__';\nconst SOURCE_URL_REGEX = /^[\\040\\t]*\\/\\/[@#] sourceURL=\\s*(\\S*?)\\s*$/m;\n/**\n * This class represents a context for JavaScript execution. A [Page] might have\n * many execution contexts:\n * - each\n *   {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe |\n *   frame } has \"default\" execution context that is always created after frame is\n *   attached to DOM. This context is returned by the\n *   {@link Frame.executionContext} method.\n * - {@link https://developer.chrome.com/extensions | Extension}'s content scripts\n *   create additional execution contexts.\n *\n * Besides pages, execution contexts can be found in\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API |\n * workers }.\n *\n * @public\n */\nclass ExecutionContext {\n    /**\n     * @internal\n     */\n    constructor(client, contextPayload, world) {\n        _ExecutionContext_instances.add(this);\n        this._client = client;\n        this._world = world;\n        this._contextId = contextPayload.id;\n        this._contextName = contextPayload.name;\n    }\n    /**\n     * @remarks\n     *\n     * Not every execution context is associated with a frame. For\n     * example, workers and extensions have execution contexts that are not\n     * associated with frames.\n     *\n     * @returns The frame associated with this execution context.\n     */\n    frame() {\n        return this._world ? this._world.frame() : null;\n    }\n    /**\n     * @remarks\n     * If the function passed to the `executionContext.evaluate` returns a\n     * Promise, then `executionContext.evaluate` would wait for the promise to\n     * resolve and return its value. If the function passed to the\n     * `executionContext.evaluate` returns a non-serializable value, then\n     * `executionContext.evaluate` resolves to `undefined`. DevTools Protocol also\n     * supports transferring some additional values that are not serializable by\n     * `JSON`: `-0`, `NaN`, `Infinity`, `-Infinity`, and bigint literals.\n     *\n     *\n     * @example\n     * ```js\n     * const executionContext = await page.mainFrame().executionContext();\n     * const result = await executionContext.evaluate(() => Promise.resolve(8 * 7))* ;\n     * console.log(result); // prints \"56\"\n     * ```\n     *\n     * @example\n     * A string can also be passed in instead of a function.\n     *\n     * ```js\n     * console.log(await executionContext.evaluate('1 + 2')); // prints \"3\"\n     * ```\n     *\n     * @example\n     * {@link JSHandle} instances can be passed as arguments to the\n     * `executionContext.* evaluate`:\n     * ```js\n     * const oneHandle = await executionContext.evaluateHandle(() => 1);\n     * const twoHandle = await executionContext.evaluateHandle(() => 2);\n     * const result = await executionContext.evaluate(\n     *    (a, b) => a + b, oneHandle, * twoHandle\n     * );\n     * await oneHandle.dispose();\n     * await twoHandle.dispose();\n     * console.log(result); // prints '3'.\n     * ```\n     * @param pageFunction - a function to be evaluated in the `executionContext`\n     * @param args - argument to pass to the page function\n     *\n     * @returns A promise that resolves to the return value of the given function.\n     */\n    async evaluate(pageFunction, ...args) {\n        return await __classPrivateFieldGet(this, _ExecutionContext_instances, \"m\", _ExecutionContext_evaluate).call(this, true, pageFunction, ...args);\n    }\n    /**\n     * @remarks\n     * The only difference between `executionContext.evaluate` and\n     * `executionContext.evaluateHandle` is that `executionContext.evaluateHandle`\n     * returns an in-page object (a {@link JSHandle}).\n     * If the function passed to the `executionContext.evaluateHandle` returns a\n     * Promise, then `executionContext.evaluateHandle` would wait for the\n     * promise to resolve and return its value.\n     *\n     * @example\n     * ```js\n     * const context = await page.mainFrame().executionContext();\n     * const aHandle = await context.evaluateHandle(() => Promise.resolve(self));\n     * aHandle; // Handle for the global object.\n     * ```\n     *\n     * @example\n     * A string can also be passed in instead of a function.\n     *\n     * ```js\n     * // Handle for the '3' * object.\n     * const aHandle = await context.evaluateHandle('1 + 2');\n     * ```\n     *\n     * @example\n     * JSHandle instances can be passed as arguments\n     * to the `executionContext.* evaluateHandle`:\n     *\n     * ```js\n     * const aHandle = await context.evaluateHandle(() => document.body);\n     * const resultHandle = await context.evaluateHandle(body => body.innerHTML, * aHandle);\n     * console.log(await resultHandle.jsonValue()); // prints body's innerHTML\n     * await aHandle.dispose();\n     * await resultHandle.dispose();\n     * ```\n     *\n     * @param pageFunction - a function to be evaluated in the `executionContext`\n     * @param args - argument to pass to the page function\n     *\n     * @returns A promise that resolves to the return value of the given function\n     * as an in-page object (a {@link JSHandle}).\n     */\n    async evaluateHandle(pageFunction, ...args) {\n        return __classPrivateFieldGet(this, _ExecutionContext_instances, \"m\", _ExecutionContext_evaluate).call(this, false, pageFunction, ...args);\n    }\n    /**\n     * This method iterates the JavaScript heap and finds all the objects with the\n     * given prototype.\n     * @remarks\n     * @example\n     * ```js\n     * // Create a Map object\n     * await page.evaluate(() => window.map = new Map());\n     * // Get a handle to the Map object prototype\n     * const mapPrototype = await page.evaluateHandle(() => Map.prototype);\n     * // Query all map instances into an array\n     * const mapInstances = await page.queryObjects(mapPrototype);\n     * // Count amount of map objects in heap\n     * const count = await page.evaluate(maps => maps.length, mapInstances);\n     * await mapInstances.dispose();\n     * await mapPrototype.dispose();\n     * ```\n     *\n     * @param prototypeHandle - a handle to the object prototype\n     *\n     * @returns A handle to an array of objects with the given prototype.\n     */\n    async queryObjects(prototypeHandle) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(!prototypeHandle._disposed, 'Prototype JSHandle is disposed!');\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(prototypeHandle._remoteObject.objectId, 'Prototype JSHandle must not be referencing primitive value');\n        const response = await this._client.send('Runtime.queryObjects', {\n            prototypeObjectId: prototypeHandle._remoteObject.objectId,\n        });\n        return (0,_JSHandle_js__WEBPACK_IMPORTED_MODULE_2__._createJSHandle)(this, response.objects);\n    }\n    /**\n     * @internal\n     */\n    async _adoptBackendNodeId(backendNodeId) {\n        const { object } = await this._client.send('DOM.resolveNode', {\n            backendNodeId: backendNodeId,\n            executionContextId: this._contextId,\n        });\n        return (0,_JSHandle_js__WEBPACK_IMPORTED_MODULE_2__._createJSHandle)(this, object);\n    }\n    /**\n     * @internal\n     */\n    async _adoptElementHandle(elementHandle) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(elementHandle.executionContext() !== this, 'Cannot adopt handle that already belongs to this execution context');\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(this._world, 'Cannot adopt handle without DOMWorld');\n        const nodeInfo = await this._client.send('DOM.describeNode', {\n            objectId: elementHandle._remoteObject.objectId,\n        });\n        return this._adoptBackendNodeId(nodeInfo.node.backendNodeId);\n    }\n}\n_ExecutionContext_instances = new WeakSet(), _ExecutionContext_evaluate = async function _ExecutionContext_evaluate(returnByValue, pageFunction, ...args) {\n    const suffix = `//# sourceURL=${EVALUATION_SCRIPT_URL}`;\n    if ((0,_util_js__WEBPACK_IMPORTED_MODULE_1__.isString)(pageFunction)) {\n        const contextId = this._contextId;\n        const expression = pageFunction;\n        const expressionWithSourceUrl = SOURCE_URL_REGEX.test(expression)\n            ? expression\n            : expression + '\\n' + suffix;\n        const { exceptionDetails, result: remoteObject } = await this._client\n            .send('Runtime.evaluate', {\n            expression: expressionWithSourceUrl,\n            contextId,\n            returnByValue,\n            awaitPromise: true,\n            userGesture: true,\n        })\n            .catch(rewriteError);\n        if (exceptionDetails) {\n            throw new Error('Evaluation failed: ' + (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.getExceptionMessage)(exceptionDetails));\n        }\n        return returnByValue\n            ? (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.valueFromRemoteObject)(remoteObject)\n            : (0,_JSHandle_js__WEBPACK_IMPORTED_MODULE_2__._createJSHandle)(this, remoteObject);\n    }\n    if (typeof pageFunction !== 'function') {\n        throw new Error(`Expected to get |string| or |function| as the first argument, but got \"${pageFunction}\" instead.`);\n    }\n    let functionText = pageFunction.toString();\n    try {\n        new Function('(' + functionText + ')');\n    }\n    catch (error) {\n        // This means we might have a function shorthand. Try another\n        // time prefixing 'function '.\n        if (functionText.startsWith('async ')) {\n            functionText =\n                'async function ' + functionText.substring('async '.length);\n        }\n        else {\n            functionText = 'function ' + functionText;\n        }\n        try {\n            new Function('(' + functionText + ')');\n        }\n        catch (error) {\n            // We tried hard to serialize, but there's a weird beast here.\n            throw new Error('Passed function is not well-serializable!');\n        }\n    }\n    let callFunctionOnPromise;\n    try {\n        callFunctionOnPromise = this._client.send('Runtime.callFunctionOn', {\n            functionDeclaration: functionText + '\\n' + suffix + '\\n',\n            executionContextId: this._contextId,\n            arguments: args.map(convertArgument.bind(this)),\n            returnByValue,\n            awaitPromise: true,\n            userGesture: true,\n        });\n    }\n    catch (error) {\n        if (error instanceof TypeError &&\n            error.message.startsWith('Converting circular structure to JSON')) {\n            error.message += ' Recursive objects are not allowed.';\n        }\n        throw error;\n    }\n    const { exceptionDetails, result: remoteObject } = await callFunctionOnPromise.catch(rewriteError);\n    if (exceptionDetails) {\n        throw new Error('Evaluation failed: ' + (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.getExceptionMessage)(exceptionDetails));\n    }\n    return returnByValue\n        ? (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.valueFromRemoteObject)(remoteObject)\n        : (0,_JSHandle_js__WEBPACK_IMPORTED_MODULE_2__._createJSHandle)(this, remoteObject);\n    function convertArgument(arg) {\n        if (typeof arg === 'bigint') {\n            // eslint-disable-line valid-typeof\n            return { unserializableValue: `${arg.toString()}n` };\n        }\n        if (Object.is(arg, -0)) {\n            return { unserializableValue: '-0' };\n        }\n        if (Object.is(arg, Infinity)) {\n            return { unserializableValue: 'Infinity' };\n        }\n        if (Object.is(arg, -Infinity)) {\n            return { unserializableValue: '-Infinity' };\n        }\n        if (Object.is(arg, NaN)) {\n            return { unserializableValue: 'NaN' };\n        }\n        const objectHandle = arg && arg instanceof _JSHandle_js__WEBPACK_IMPORTED_MODULE_2__.JSHandle ? arg : null;\n        if (objectHandle) {\n            if (objectHandle._context !== this) {\n                throw new Error('JSHandles can be evaluated only in the context they were created!');\n            }\n            if (objectHandle._disposed) {\n                throw new Error('JSHandle is disposed!');\n            }\n            if (objectHandle._remoteObject.unserializableValue) {\n                return {\n                    unserializableValue: objectHandle._remoteObject.unserializableValue,\n                };\n            }\n            if (!objectHandle._remoteObject.objectId) {\n                return { value: objectHandle._remoteObject.value };\n            }\n            return { objectId: objectHandle._remoteObject.objectId };\n        }\n        return { value: arg };\n    }\n    function rewriteError(error) {\n        if (error.message.includes('Object reference chain is too long')) {\n            return { result: { type: 'undefined' } };\n        }\n        if (error.message.includes(\"Object couldn't be returned by value\")) {\n            return { result: { type: 'undefined' } };\n        }\n        if (error.message.endsWith('Cannot find context with specified id') ||\n            error.message.endsWith('Inspected target navigated or closed')) {\n            throw new Error('Execution context was destroyed, most likely because of a navigation.');\n        }\n        throw error;\n    }\n};\n//# sourceMappingURL=ExecutionContext.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/ExecutionContext.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/FileChooser.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/FileChooser.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"FileChooser\": () => (/* binding */ FileChooser)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./assert.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/assert.js\");\n/**\n * Copyright 2020 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _FileChooser_element, _FileChooser_multiple, _FileChooser_handled;\n\n/**\n * File choosers let you react to the page requesting for a file.\n * @remarks\n * `FileChooser` objects are returned via the `page.waitForFileChooser` method.\n * @example\n * An example of using `FileChooser`:\n * ```js\n * const [fileChooser] = await Promise.all([\n *   page.waitForFileChooser(),\n *   page.click('#upload-file-button'), // some button that triggers file selection\n * ]);\n * await fileChooser.accept(['/tmp/myfile.pdf']);\n * ```\n * **NOTE** In browsers, only one file chooser can be opened at a time.\n * All file choosers must be accepted or canceled. Not doing so will prevent\n * subsequent file choosers from appearing.\n * @public\n */\nclass FileChooser {\n    /**\n     * @internal\n     */\n    constructor(element, event) {\n        _FileChooser_element.set(this, void 0);\n        _FileChooser_multiple.set(this, void 0);\n        _FileChooser_handled.set(this, false);\n        __classPrivateFieldSet(this, _FileChooser_element, element, \"f\");\n        __classPrivateFieldSet(this, _FileChooser_multiple, event.mode !== 'selectSingle', \"f\");\n    }\n    /**\n     * Whether file chooser allow for {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#attr-multiple | multiple} file selection.\n     */\n    isMultiple() {\n        return __classPrivateFieldGet(this, _FileChooser_multiple, \"f\");\n    }\n    /**\n     * Accept the file chooser request with given paths.\n     * @param filePaths - If some of the  `filePaths` are relative paths,\n     * then they are resolved relative to the {@link https://nodejs.org/api/process.html#process_process_cwd | current working directory}.\n     */\n    async accept(filePaths) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(!__classPrivateFieldGet(this, _FileChooser_handled, \"f\"), 'Cannot accept FileChooser which is already handled!');\n        __classPrivateFieldSet(this, _FileChooser_handled, true, \"f\");\n        await __classPrivateFieldGet(this, _FileChooser_element, \"f\").uploadFile(...filePaths);\n    }\n    /**\n     * Closes the file chooser without selecting any files.\n     */\n    cancel() {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(!__classPrivateFieldGet(this, _FileChooser_handled, \"f\"), 'Cannot cancel FileChooser which is already handled!');\n        __classPrivateFieldSet(this, _FileChooser_handled, true, \"f\");\n    }\n}\n_FileChooser_element = new WeakMap(), _FileChooser_multiple = new WeakMap(), _FileChooser_handled = new WeakMap();\n//# sourceMappingURL=FileChooser.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvZ29nb2FuaW1lLWFwaS9ub2RlX21vZHVsZXMvcHVwcGV0ZWVyL2xpYi9lc20vcHVwcGV0ZWVyL2NvbW1vbi9GaWxlQ2hvb3Nlci5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixTQUFJLElBQUksU0FBSTtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLFNBQUksSUFBSSxTQUFJO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLHFHQUFxRztBQUM1STtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQywwRkFBMEY7QUFDekk7QUFDQTtBQUNBLFFBQVEsa0RBQU07QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsa0RBQU07QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW5pbWVmbGl4Ly4vbm9kZV9tb2R1bGVzL2dvZ29hbmltZS1hcGkvbm9kZV9tb2R1bGVzL3B1cHBldGVlci9saWIvZXNtL3B1cHBldGVlci9jb21tb24vRmlsZUNob29zZXIuanM/Y2JlZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG52YXIgX19jbGFzc1ByaXZhdGVGaWVsZFNldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZFNldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJtXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIChraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IGYudmFsdWUgPSB2YWx1ZSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpKSwgdmFsdWU7XG59O1xudmFyIF9fY2xhc3NQcml2YXRlRmllbGRHZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRHZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcbn07XG52YXIgX0ZpbGVDaG9vc2VyX2VsZW1lbnQsIF9GaWxlQ2hvb3Nlcl9tdWx0aXBsZSwgX0ZpbGVDaG9vc2VyX2hhbmRsZWQ7XG5pbXBvcnQgeyBhc3NlcnQgfSBmcm9tICcuL2Fzc2VydC5qcyc7XG4vKipcbiAqIEZpbGUgY2hvb3NlcnMgbGV0IHlvdSByZWFjdCB0byB0aGUgcGFnZSByZXF1ZXN0aW5nIGZvciBhIGZpbGUuXG4gKiBAcmVtYXJrc1xuICogYEZpbGVDaG9vc2VyYCBvYmplY3RzIGFyZSByZXR1cm5lZCB2aWEgdGhlIGBwYWdlLndhaXRGb3JGaWxlQ2hvb3NlcmAgbWV0aG9kLlxuICogQGV4YW1wbGVcbiAqIEFuIGV4YW1wbGUgb2YgdXNpbmcgYEZpbGVDaG9vc2VyYDpcbiAqIGBgYGpzXG4gKiBjb25zdCBbZmlsZUNob29zZXJdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICogICBwYWdlLndhaXRGb3JGaWxlQ2hvb3NlcigpLFxuICogICBwYWdlLmNsaWNrKCcjdXBsb2FkLWZpbGUtYnV0dG9uJyksIC8vIHNvbWUgYnV0dG9uIHRoYXQgdHJpZ2dlcnMgZmlsZSBzZWxlY3Rpb25cbiAqIF0pO1xuICogYXdhaXQgZmlsZUNob29zZXIuYWNjZXB0KFsnL3RtcC9teWZpbGUucGRmJ10pO1xuICogYGBgXG4gKiAqKk5PVEUqKiBJbiBicm93c2Vycywgb25seSBvbmUgZmlsZSBjaG9vc2VyIGNhbiBiZSBvcGVuZWQgYXQgYSB0aW1lLlxuICogQWxsIGZpbGUgY2hvb3NlcnMgbXVzdCBiZSBhY2NlcHRlZCBvciBjYW5jZWxlZC4gTm90IGRvaW5nIHNvIHdpbGwgcHJldmVudFxuICogc3Vic2VxdWVudCBmaWxlIGNob29zZXJzIGZyb20gYXBwZWFyaW5nLlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgRmlsZUNob29zZXIge1xuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQsIGV2ZW50KSB7XG4gICAgICAgIF9GaWxlQ2hvb3Nlcl9lbGVtZW50LnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBfRmlsZUNob29zZXJfbXVsdGlwbGUuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9GaWxlQ2hvb3Nlcl9oYW5kbGVkLnNldCh0aGlzLCBmYWxzZSk7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX0ZpbGVDaG9vc2VyX2VsZW1lbnQsIGVsZW1lbnQsIFwiZlwiKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfRmlsZUNob29zZXJfbXVsdGlwbGUsIGV2ZW50Lm1vZGUgIT09ICdzZWxlY3RTaW5nbGUnLCBcImZcIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgZmlsZSBjaG9vc2VyIGFsbG93IGZvciB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0L2ZpbGUjYXR0ci1tdWx0aXBsZSB8IG11bHRpcGxlfSBmaWxlIHNlbGVjdGlvbi5cbiAgICAgKi9cbiAgICBpc011bHRpcGxlKCkge1xuICAgICAgICByZXR1cm4gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfRmlsZUNob29zZXJfbXVsdGlwbGUsIFwiZlwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWNjZXB0IHRoZSBmaWxlIGNob29zZXIgcmVxdWVzdCB3aXRoIGdpdmVuIHBhdGhzLlxuICAgICAqIEBwYXJhbSBmaWxlUGF0aHMgLSBJZiBzb21lIG9mIHRoZSAgYGZpbGVQYXRoc2AgYXJlIHJlbGF0aXZlIHBhdGhzLFxuICAgICAqIHRoZW4gdGhleSBhcmUgcmVzb2x2ZWQgcmVsYXRpdmUgdG8gdGhlIHtAbGluayBodHRwczovL25vZGVqcy5vcmcvYXBpL3Byb2Nlc3MuaHRtbCNwcm9jZXNzX3Byb2Nlc3NfY3dkIHwgY3VycmVudCB3b3JraW5nIGRpcmVjdG9yeX0uXG4gICAgICovXG4gICAgYXN5bmMgYWNjZXB0KGZpbGVQYXRocykge1xuICAgICAgICBhc3NlcnQoIV9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0ZpbGVDaG9vc2VyX2hhbmRsZWQsIFwiZlwiKSwgJ0Nhbm5vdCBhY2NlcHQgRmlsZUNob29zZXIgd2hpY2ggaXMgYWxyZWFkeSBoYW5kbGVkIScpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9GaWxlQ2hvb3Nlcl9oYW5kbGVkLCB0cnVlLCBcImZcIik7XG4gICAgICAgIGF3YWl0IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0ZpbGVDaG9vc2VyX2VsZW1lbnQsIFwiZlwiKS51cGxvYWRGaWxlKC4uLmZpbGVQYXRocyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENsb3NlcyB0aGUgZmlsZSBjaG9vc2VyIHdpdGhvdXQgc2VsZWN0aW5nIGFueSBmaWxlcy5cbiAgICAgKi9cbiAgICBjYW5jZWwoKSB7XG4gICAgICAgIGFzc2VydCghX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfRmlsZUNob29zZXJfaGFuZGxlZCwgXCJmXCIpLCAnQ2Fubm90IGNhbmNlbCBGaWxlQ2hvb3NlciB3aGljaCBpcyBhbHJlYWR5IGhhbmRsZWQhJyk7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX0ZpbGVDaG9vc2VyX2hhbmRsZWQsIHRydWUsIFwiZlwiKTtcbiAgICB9XG59XG5fRmlsZUNob29zZXJfZWxlbWVudCA9IG5ldyBXZWFrTWFwKCksIF9GaWxlQ2hvb3Nlcl9tdWx0aXBsZSA9IG5ldyBXZWFrTWFwKCksIF9GaWxlQ2hvb3Nlcl9oYW5kbGVkID0gbmV3IFdlYWtNYXAoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUZpbGVDaG9vc2VyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/FileChooser.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/FrameManager.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/FrameManager.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Frame\": () => (/* binding */ Frame),\n/* harmony export */   \"FrameManager\": () => (/* binding */ FrameManager),\n/* harmony export */   \"FrameManagerEmittedEvents\": () => (/* binding */ FrameManagerEmittedEvents)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./assert.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/assert.js\");\n/* harmony import */ var _Connection_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Connection.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Connection.js\");\n/* harmony import */ var _DOMWorld_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DOMWorld.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/DOMWorld.js\");\n/* harmony import */ var _EventEmitter_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./EventEmitter.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/EventEmitter.js\");\n/* harmony import */ var _ExecutionContext_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ExecutionContext.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/ExecutionContext.js\");\n/* harmony import */ var _LifecycleWatcher_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./LifecycleWatcher.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/LifecycleWatcher.js\");\n/* harmony import */ var _NetworkManager_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./NetworkManager.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/NetworkManager.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./util.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/util.js\");\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _FrameManager_instances, _FrameManager_page, _FrameManager_networkManager, _FrameManager_timeoutSettings, _FrameManager_frames, _FrameManager_contextIdToContext, _FrameManager_isolatedWorlds, _FrameManager_mainFrame, _FrameManager_client, _FrameManager_onAttachedToTarget, _FrameManager_onDetachedFromTarget, _FrameManager_onLifecycleEvent, _FrameManager_onFrameStartedLoading, _FrameManager_onFrameStoppedLoading, _FrameManager_handleFrameTree, _FrameManager_onFrameAttached, _FrameManager_onFrameNavigated, _FrameManager_onFrameNavigatedWithinDocument, _FrameManager_onFrameDetached, _FrameManager_onExecutionContextCreated, _FrameManager_onExecutionContextDestroyed, _FrameManager_onExecutionContextsCleared, _FrameManager_removeFramesRecursively, _Frame_parentFrame, _Frame_url, _Frame_detached, _Frame_client;\n\n\n\n\n\n\n\n\nconst UTILITY_WORLD_NAME = '__puppeteer_utility_world__';\nconst xPathPattern = /^\\(\\/\\/[^\\)]+\\)|^\\/\\//;\n/**\n * We use symbols to prevent external parties listening to these events.\n * They are internal to Puppeteer.\n *\n * @internal\n */\nconst FrameManagerEmittedEvents = {\n    FrameAttached: Symbol('FrameManager.FrameAttached'),\n    FrameNavigated: Symbol('FrameManager.FrameNavigated'),\n    FrameDetached: Symbol('FrameManager.FrameDetached'),\n    FrameSwapped: Symbol('FrameManager.FrameSwapped'),\n    LifecycleEvent: Symbol('FrameManager.LifecycleEvent'),\n    FrameNavigatedWithinDocument: Symbol('FrameManager.FrameNavigatedWithinDocument'),\n    ExecutionContextCreated: Symbol('FrameManager.ExecutionContextCreated'),\n    ExecutionContextDestroyed: Symbol('FrameManager.ExecutionContextDestroyed'),\n};\n/**\n * @internal\n */\nclass FrameManager extends _EventEmitter_js__WEBPACK_IMPORTED_MODULE_3__.EventEmitter {\n    constructor(client, page, ignoreHTTPSErrors, timeoutSettings) {\n        super();\n        _FrameManager_instances.add(this);\n        _FrameManager_page.set(this, void 0);\n        _FrameManager_networkManager.set(this, void 0);\n        _FrameManager_timeoutSettings.set(this, void 0);\n        _FrameManager_frames.set(this, new Map());\n        _FrameManager_contextIdToContext.set(this, new Map());\n        _FrameManager_isolatedWorlds.set(this, new Set());\n        _FrameManager_mainFrame.set(this, void 0);\n        _FrameManager_client.set(this, void 0);\n        __classPrivateFieldSet(this, _FrameManager_client, client, \"f\");\n        __classPrivateFieldSet(this, _FrameManager_page, page, \"f\");\n        __classPrivateFieldSet(this, _FrameManager_networkManager, new _NetworkManager_js__WEBPACK_IMPORTED_MODULE_6__.NetworkManager(client, ignoreHTTPSErrors, this), \"f\");\n        __classPrivateFieldSet(this, _FrameManager_timeoutSettings, timeoutSettings, \"f\");\n        this.setupEventListeners(__classPrivateFieldGet(this, _FrameManager_client, \"f\"));\n    }\n    /**\n     * @internal\n     */\n    get _timeoutSettings() {\n        return __classPrivateFieldGet(this, _FrameManager_timeoutSettings, \"f\");\n    }\n    /**\n     * @internal\n     */\n    get _client() {\n        return __classPrivateFieldGet(this, _FrameManager_client, \"f\");\n    }\n    setupEventListeners(session) {\n        session.on('Page.frameAttached', (event) => {\n            __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_onFrameAttached).call(this, session, event.frameId, event.parentFrameId);\n        });\n        session.on('Page.frameNavigated', (event) => {\n            __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_onFrameNavigated).call(this, event.frame);\n        });\n        session.on('Page.navigatedWithinDocument', (event) => {\n            __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_onFrameNavigatedWithinDocument).call(this, event.frameId, event.url);\n        });\n        session.on('Page.frameDetached', (event) => {\n            __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_onFrameDetached).call(this, event.frameId, event.reason);\n        });\n        session.on('Page.frameStartedLoading', (event) => {\n            __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_onFrameStartedLoading).call(this, event.frameId);\n        });\n        session.on('Page.frameStoppedLoading', (event) => {\n            __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_onFrameStoppedLoading).call(this, event.frameId);\n        });\n        session.on('Runtime.executionContextCreated', (event) => {\n            __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_onExecutionContextCreated).call(this, event.context, session);\n        });\n        session.on('Runtime.executionContextDestroyed', (event) => {\n            __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_onExecutionContextDestroyed).call(this, event.executionContextId, session);\n        });\n        session.on('Runtime.executionContextsCleared', () => {\n            __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_onExecutionContextsCleared).call(this, session);\n        });\n        session.on('Page.lifecycleEvent', (event) => {\n            __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_onLifecycleEvent).call(this, event);\n        });\n        session.on('Target.attachedToTarget', async (event) => {\n            __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_onAttachedToTarget).call(this, event);\n        });\n        session.on('Target.detachedFromTarget', async (event) => {\n            __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_onDetachedFromTarget).call(this, event);\n        });\n    }\n    async initialize(client = __classPrivateFieldGet(this, _FrameManager_client, \"f\")) {\n        try {\n            const result = await Promise.all([\n                client.send('Page.enable'),\n                client.send('Page.getFrameTree'),\n                client !== __classPrivateFieldGet(this, _FrameManager_client, \"f\")\n                    ? client.send('Target.setAutoAttach', {\n                        autoAttach: true,\n                        waitForDebuggerOnStart: false,\n                        flatten: true,\n                    })\n                    : Promise.resolve(),\n            ]);\n            const { frameTree } = result[1];\n            __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_handleFrameTree).call(this, client, frameTree);\n            await Promise.all([\n                client.send('Page.setLifecycleEventsEnabled', { enabled: true }),\n                client.send('Runtime.enable').then(() => {\n                    return this._ensureIsolatedWorld(client, UTILITY_WORLD_NAME);\n                }),\n                // TODO: Network manager is not aware of OOP iframes yet.\n                client === __classPrivateFieldGet(this, _FrameManager_client, \"f\")\n                    ? __classPrivateFieldGet(this, _FrameManager_networkManager, \"f\").initialize()\n                    : Promise.resolve(),\n            ]);\n        }\n        catch (error) {\n            // The target might have been closed before the initialization finished.\n            if ((0,_util_js__WEBPACK_IMPORTED_MODULE_7__.isErrorLike)(error) &&\n                (error.message.includes('Target closed') ||\n                    error.message.includes('Session closed'))) {\n                return;\n            }\n            throw error;\n        }\n    }\n    networkManager() {\n        return __classPrivateFieldGet(this, _FrameManager_networkManager, \"f\");\n    }\n    async navigateFrame(frame, url, options = {}) {\n        assertNoLegacyNavigationOptions(options);\n        const { referer = __classPrivateFieldGet(this, _FrameManager_networkManager, \"f\").extraHTTPHeaders()['referer'], waitUntil = ['load'], timeout = __classPrivateFieldGet(this, _FrameManager_timeoutSettings, \"f\").navigationTimeout(), } = options;\n        const watcher = new _LifecycleWatcher_js__WEBPACK_IMPORTED_MODULE_5__.LifecycleWatcher(this, frame, waitUntil, timeout);\n        let error = await Promise.race([\n            navigate(__classPrivateFieldGet(this, _FrameManager_client, \"f\"), url, referer, frame._id),\n            watcher.timeoutOrTerminationPromise(),\n        ]);\n        if (!error) {\n            error = await Promise.race([\n                watcher.timeoutOrTerminationPromise(),\n                watcher.newDocumentNavigationPromise(),\n                watcher.sameDocumentNavigationPromise(),\n            ]);\n        }\n        watcher.dispose();\n        if (error) {\n            throw error;\n        }\n        return await watcher.navigationResponse();\n        async function navigate(client, url, referrer, frameId) {\n            try {\n                const response = await client.send('Page.navigate', {\n                    url,\n                    referrer,\n                    frameId,\n                });\n                return response.errorText\n                    ? new Error(`${response.errorText} at ${url}`)\n                    : null;\n            }\n            catch (error) {\n                if ((0,_util_js__WEBPACK_IMPORTED_MODULE_7__.isErrorLike)(error)) {\n                    return error;\n                }\n                throw error;\n            }\n        }\n    }\n    async waitForFrameNavigation(frame, options = {}) {\n        assertNoLegacyNavigationOptions(options);\n        const { waitUntil = ['load'], timeout = __classPrivateFieldGet(this, _FrameManager_timeoutSettings, \"f\").navigationTimeout(), } = options;\n        const watcher = new _LifecycleWatcher_js__WEBPACK_IMPORTED_MODULE_5__.LifecycleWatcher(this, frame, waitUntil, timeout);\n        const error = await Promise.race([\n            watcher.timeoutOrTerminationPromise(),\n            watcher.sameDocumentNavigationPromise(),\n            watcher.newDocumentNavigationPromise(),\n        ]);\n        watcher.dispose();\n        if (error) {\n            throw error;\n        }\n        return await watcher.navigationResponse();\n    }\n    page() {\n        return __classPrivateFieldGet(this, _FrameManager_page, \"f\");\n    }\n    mainFrame() {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(__classPrivateFieldGet(this, _FrameManager_mainFrame, \"f\"), 'Requesting main frame too early!');\n        return __classPrivateFieldGet(this, _FrameManager_mainFrame, \"f\");\n    }\n    frames() {\n        return Array.from(__classPrivateFieldGet(this, _FrameManager_frames, \"f\").values());\n    }\n    frame(frameId) {\n        return __classPrivateFieldGet(this, _FrameManager_frames, \"f\").get(frameId) || null;\n    }\n    async _ensureIsolatedWorld(session, name) {\n        const key = `${session.id()}:${name}`;\n        if (__classPrivateFieldGet(this, _FrameManager_isolatedWorlds, \"f\").has(key)) {\n            return;\n        }\n        __classPrivateFieldGet(this, _FrameManager_isolatedWorlds, \"f\").add(key);\n        await session.send('Page.addScriptToEvaluateOnNewDocument', {\n            source: `//# sourceURL=${_ExecutionContext_js__WEBPACK_IMPORTED_MODULE_4__.EVALUATION_SCRIPT_URL}`,\n            worldName: name,\n        });\n        // Frames might be removed before we send this.\n        await Promise.all(this.frames()\n            .filter((frame) => {\n            return frame._client() === session;\n        })\n            .map((frame) => {\n            return session\n                .send('Page.createIsolatedWorld', {\n                frameId: frame._id,\n                worldName: name,\n                grantUniveralAccess: true,\n            })\n                .catch(_util_js__WEBPACK_IMPORTED_MODULE_7__.debugError);\n        }));\n    }\n    executionContextById(contextId, session = __classPrivateFieldGet(this, _FrameManager_client, \"f\")) {\n        const key = `${session.id()}:${contextId}`;\n        const context = __classPrivateFieldGet(this, _FrameManager_contextIdToContext, \"f\").get(key);\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(context, 'INTERNAL ERROR: missing context with id = ' + contextId);\n        return context;\n    }\n}\n_FrameManager_page = new WeakMap(), _FrameManager_networkManager = new WeakMap(), _FrameManager_timeoutSettings = new WeakMap(), _FrameManager_frames = new WeakMap(), _FrameManager_contextIdToContext = new WeakMap(), _FrameManager_isolatedWorlds = new WeakMap(), _FrameManager_mainFrame = new WeakMap(), _FrameManager_client = new WeakMap(), _FrameManager_instances = new WeakSet(), _FrameManager_onAttachedToTarget = async function _FrameManager_onAttachedToTarget(event) {\n    if (event.targetInfo.type !== 'iframe') {\n        return;\n    }\n    const frame = __classPrivateFieldGet(this, _FrameManager_frames, \"f\").get(event.targetInfo.targetId);\n    const connection = _Connection_js__WEBPACK_IMPORTED_MODULE_1__.Connection.fromSession(__classPrivateFieldGet(this, _FrameManager_client, \"f\"));\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(connection);\n    const session = connection.session(event.sessionId);\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(session);\n    if (frame) {\n        frame._updateClient(session);\n    }\n    this.setupEventListeners(session);\n    await this.initialize(session);\n}, _FrameManager_onDetachedFromTarget = async function _FrameManager_onDetachedFromTarget(event) {\n    if (!event.targetId) {\n        return;\n    }\n    const frame = __classPrivateFieldGet(this, _FrameManager_frames, \"f\").get(event.targetId);\n    if (frame && frame.isOOPFrame()) {\n        // When an OOP iframe is removed from the page, it\n        // will only get a Target.detachedFromTarget event.\n        __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_removeFramesRecursively).call(this, frame);\n    }\n}, _FrameManager_onLifecycleEvent = function _FrameManager_onLifecycleEvent(event) {\n    const frame = __classPrivateFieldGet(this, _FrameManager_frames, \"f\").get(event.frameId);\n    if (!frame) {\n        return;\n    }\n    frame._onLifecycleEvent(event.loaderId, event.name);\n    this.emit(FrameManagerEmittedEvents.LifecycleEvent, frame);\n}, _FrameManager_onFrameStartedLoading = function _FrameManager_onFrameStartedLoading(frameId) {\n    const frame = __classPrivateFieldGet(this, _FrameManager_frames, \"f\").get(frameId);\n    if (!frame) {\n        return;\n    }\n    frame._onLoadingStarted();\n}, _FrameManager_onFrameStoppedLoading = function _FrameManager_onFrameStoppedLoading(frameId) {\n    const frame = __classPrivateFieldGet(this, _FrameManager_frames, \"f\").get(frameId);\n    if (!frame) {\n        return;\n    }\n    frame._onLoadingStopped();\n    this.emit(FrameManagerEmittedEvents.LifecycleEvent, frame);\n}, _FrameManager_handleFrameTree = function _FrameManager_handleFrameTree(session, frameTree) {\n    if (frameTree.frame.parentId) {\n        __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_onFrameAttached).call(this, session, frameTree.frame.id, frameTree.frame.parentId);\n    }\n    __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_onFrameNavigated).call(this, frameTree.frame);\n    if (!frameTree.childFrames) {\n        return;\n    }\n    for (const child of frameTree.childFrames) {\n        __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_handleFrameTree).call(this, session, child);\n    }\n}, _FrameManager_onFrameAttached = function _FrameManager_onFrameAttached(session, frameId, parentFrameId) {\n    if (__classPrivateFieldGet(this, _FrameManager_frames, \"f\").has(frameId)) {\n        const frame = __classPrivateFieldGet(this, _FrameManager_frames, \"f\").get(frameId);\n        if (session && frame.isOOPFrame()) {\n            // If an OOP iframes becomes a normal iframe again\n            // it is first attached to the parent page before\n            // the target is removed.\n            frame._updateClient(session);\n        }\n        return;\n    }\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(parentFrameId);\n    const parentFrame = __classPrivateFieldGet(this, _FrameManager_frames, \"f\").get(parentFrameId);\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(parentFrame);\n    const frame = new Frame(this, parentFrame, frameId, session);\n    __classPrivateFieldGet(this, _FrameManager_frames, \"f\").set(frame._id, frame);\n    this.emit(FrameManagerEmittedEvents.FrameAttached, frame);\n}, _FrameManager_onFrameNavigated = function _FrameManager_onFrameNavigated(framePayload) {\n    const isMainFrame = !framePayload.parentId;\n    let frame = isMainFrame\n        ? __classPrivateFieldGet(this, _FrameManager_mainFrame, \"f\")\n        : __classPrivateFieldGet(this, _FrameManager_frames, \"f\").get(framePayload.id);\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(isMainFrame || frame, 'We either navigate top level or have old version of the navigated frame');\n    // Detach all child frames first.\n    if (frame) {\n        for (const child of frame.childFrames()) {\n            __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_removeFramesRecursively).call(this, child);\n        }\n    }\n    // Update or create main frame.\n    if (isMainFrame) {\n        if (frame) {\n            // Update frame id to retain frame identity on cross-process navigation.\n            __classPrivateFieldGet(this, _FrameManager_frames, \"f\").delete(frame._id);\n            frame._id = framePayload.id;\n        }\n        else {\n            // Initial main frame navigation.\n            frame = new Frame(this, null, framePayload.id, __classPrivateFieldGet(this, _FrameManager_client, \"f\"));\n        }\n        __classPrivateFieldGet(this, _FrameManager_frames, \"f\").set(framePayload.id, frame);\n        __classPrivateFieldSet(this, _FrameManager_mainFrame, frame, \"f\");\n    }\n    // Update frame payload.\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(frame);\n    frame._navigated(framePayload);\n    this.emit(FrameManagerEmittedEvents.FrameNavigated, frame);\n}, _FrameManager_onFrameNavigatedWithinDocument = function _FrameManager_onFrameNavigatedWithinDocument(frameId, url) {\n    const frame = __classPrivateFieldGet(this, _FrameManager_frames, \"f\").get(frameId);\n    if (!frame) {\n        return;\n    }\n    frame._navigatedWithinDocument(url);\n    this.emit(FrameManagerEmittedEvents.FrameNavigatedWithinDocument, frame);\n    this.emit(FrameManagerEmittedEvents.FrameNavigated, frame);\n}, _FrameManager_onFrameDetached = function _FrameManager_onFrameDetached(frameId, reason) {\n    const frame = __classPrivateFieldGet(this, _FrameManager_frames, \"f\").get(frameId);\n    if (reason === 'remove') {\n        // Only remove the frame if the reason for the detached event is\n        // an actual removement of the frame.\n        // For frames that become OOP iframes, the reason would be 'swap'.\n        if (frame) {\n            __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_removeFramesRecursively).call(this, frame);\n        }\n    }\n    else if (reason === 'swap') {\n        this.emit(FrameManagerEmittedEvents.FrameSwapped, frame);\n    }\n}, _FrameManager_onExecutionContextCreated = function _FrameManager_onExecutionContextCreated(contextPayload, session) {\n    const auxData = contextPayload.auxData;\n    const frameId = auxData && auxData.frameId;\n    const frame = typeof frameId === 'string' ? __classPrivateFieldGet(this, _FrameManager_frames, \"f\").get(frameId) : undefined;\n    let world;\n    if (frame) {\n        // Only care about execution contexts created for the current session.\n        if (frame._client() !== session) {\n            return;\n        }\n        if (contextPayload.auxData && !!contextPayload.auxData['isDefault']) {\n            world = frame._mainWorld;\n        }\n        else if (contextPayload.name === UTILITY_WORLD_NAME &&\n            !frame._secondaryWorld._hasContext()) {\n            // In case of multiple sessions to the same target, there's a race between\n            // connections so we might end up creating multiple isolated worlds.\n            // We can use either.\n            world = frame._secondaryWorld;\n        }\n    }\n    const context = new _ExecutionContext_js__WEBPACK_IMPORTED_MODULE_4__.ExecutionContext((frame === null || frame === void 0 ? void 0 : frame._client()) || __classPrivateFieldGet(this, _FrameManager_client, \"f\"), contextPayload, world);\n    if (world) {\n        world._setContext(context);\n    }\n    const key = `${session.id()}:${contextPayload.id}`;\n    __classPrivateFieldGet(this, _FrameManager_contextIdToContext, \"f\").set(key, context);\n}, _FrameManager_onExecutionContextDestroyed = function _FrameManager_onExecutionContextDestroyed(executionContextId, session) {\n    const key = `${session.id()}:${executionContextId}`;\n    const context = __classPrivateFieldGet(this, _FrameManager_contextIdToContext, \"f\").get(key);\n    if (!context) {\n        return;\n    }\n    __classPrivateFieldGet(this, _FrameManager_contextIdToContext, \"f\").delete(key);\n    if (context._world) {\n        context._world._setContext(null);\n    }\n}, _FrameManager_onExecutionContextsCleared = function _FrameManager_onExecutionContextsCleared(session) {\n    for (const [key, context] of __classPrivateFieldGet(this, _FrameManager_contextIdToContext, \"f\").entries()) {\n        // Make sure to only clear execution contexts that belong\n        // to the current session.\n        if (context._client !== session) {\n            continue;\n        }\n        if (context._world) {\n            context._world._setContext(null);\n        }\n        __classPrivateFieldGet(this, _FrameManager_contextIdToContext, \"f\").delete(key);\n    }\n}, _FrameManager_removeFramesRecursively = function _FrameManager_removeFramesRecursively(frame) {\n    for (const child of frame.childFrames()) {\n        __classPrivateFieldGet(this, _FrameManager_instances, \"m\", _FrameManager_removeFramesRecursively).call(this, child);\n    }\n    frame._detach();\n    __classPrivateFieldGet(this, _FrameManager_frames, \"f\").delete(frame._id);\n    this.emit(FrameManagerEmittedEvents.FrameDetached, frame);\n};\n/**\n * At every point of time, page exposes its current frame tree via the\n * {@link Page.mainFrame | page.mainFrame} and\n * {@link Frame.childFrames | frame.childFrames} methods.\n *\n * @remarks\n *\n * `Frame` object lifecycles are controlled by three events that are all\n * dispatched on the page object:\n *\n * - {@link PageEmittedEvents.FrameAttached}\n *\n * - {@link PageEmittedEvents.FrameNavigated}\n *\n * - {@link PageEmittedEvents.FrameDetached}\n *\n * @Example\n * An example of dumping frame tree:\n *\n * ```js\n * const puppeteer = require('puppeteer');\n *\n * (async () => {\n *   const browser = await puppeteer.launch();\n *   const page = await browser.newPage();\n *   await page.goto('https://www.google.com/chrome/browser/canary.html');\n *   dumpFrameTree(page.mainFrame(), '');\n *   await browser.close();\n *\n *   function dumpFrameTree(frame, indent) {\n *     console.log(indent + frame.url());\n *     for (const child of frame.childFrames()) {\n *     dumpFrameTree(child, indent + '  ');\n *     }\n *   }\n * })();\n * ```\n *\n * @Example\n * An example of getting text from an iframe element:\n *\n * ```js\n * const frame = page.frames().find(frame => frame.name() === 'myframe');\n * const text = await frame.$eval('.selector', element => element.textContent);\n * console.log(text);\n * ```\n *\n * @public\n */\nclass Frame {\n    /**\n     * @internal\n     */\n    constructor(frameManager, parentFrame, frameId, client) {\n        _Frame_parentFrame.set(this, void 0);\n        _Frame_url.set(this, '');\n        _Frame_detached.set(this, false);\n        _Frame_client.set(this, void 0);\n        /**\n         * @internal\n         */\n        this._loaderId = '';\n        /**\n         * @internal\n         */\n        this._hasStartedLoading = false;\n        /**\n         * @internal\n         */\n        this._lifecycleEvents = new Set();\n        this._frameManager = frameManager;\n        __classPrivateFieldSet(this, _Frame_parentFrame, parentFrame !== null && parentFrame !== void 0 ? parentFrame : null, \"f\");\n        __classPrivateFieldSet(this, _Frame_url, '', \"f\");\n        this._id = frameId;\n        __classPrivateFieldSet(this, _Frame_detached, false, \"f\");\n        this._loaderId = '';\n        this._childFrames = new Set();\n        if (__classPrivateFieldGet(this, _Frame_parentFrame, \"f\")) {\n            __classPrivateFieldGet(this, _Frame_parentFrame, \"f\")._childFrames.add(this);\n        }\n        this._updateClient(client);\n    }\n    /**\n     * @internal\n     */\n    _updateClient(client) {\n        __classPrivateFieldSet(this, _Frame_client, client, \"f\");\n        this._mainWorld = new _DOMWorld_js__WEBPACK_IMPORTED_MODULE_2__.DOMWorld(__classPrivateFieldGet(this, _Frame_client, \"f\"), this._frameManager, this, this._frameManager._timeoutSettings);\n        this._secondaryWorld = new _DOMWorld_js__WEBPACK_IMPORTED_MODULE_2__.DOMWorld(__classPrivateFieldGet(this, _Frame_client, \"f\"), this._frameManager, this, this._frameManager._timeoutSettings);\n    }\n    /**\n     * @remarks\n     *\n     * @returns `true` if the frame is an OOP frame, or `false` otherwise.\n     */\n    isOOPFrame() {\n        return __classPrivateFieldGet(this, _Frame_client, \"f\") !== this._frameManager._client;\n    }\n    /**\n     * @remarks\n     *\n     * `frame.goto` will throw an error if:\n     * - there's an SSL error (e.g. in case of self-signed certificates).\n     *\n     * - target URL is invalid.\n     *\n     * - the `timeout` is exceeded during navigation.\n     *\n     * - the remote server does not respond or is unreachable.\n     *\n     * - the main resource failed to load.\n     *\n     * `frame.goto` will not throw an error when any valid HTTP status code is\n     * returned by the remote server, including 404 \"Not Found\" and 500 \"Internal\n     * Server Error\".  The status code for such responses can be retrieved by\n     * calling {@link HTTPResponse.status}.\n     *\n     * NOTE: `frame.goto` either throws an error or returns a main resource\n     * response. The only exceptions are navigation to `about:blank` or\n     * navigation to the same URL with a different hash, which would succeed and\n     * return `null`.\n     *\n     * NOTE: Headless mode doesn't support navigation to a PDF document. See\n     * the {@link https://bugs.chromium.org/p/chromium/issues/detail?id=761295 | upstream\n     * issue}.\n     *\n     * @param url - the URL to navigate the frame to. This should include the\n     * scheme, e.g. `https://`.\n     * @param options - navigation options. `waitUntil` is useful to define when\n     * the navigation should be considered successful - see the docs for\n     * {@link PuppeteerLifeCycleEvent} for more details.\n     *\n     * @returns A promise which resolves to the main resource response. In case of\n     * multiple redirects, the navigation will resolve with the response of the\n     * last redirect.\n     */\n    async goto(url, options = {}) {\n        return await this._frameManager.navigateFrame(this, url, options);\n    }\n    /**\n     * @remarks\n     *\n     * This resolves when the frame navigates to a new URL. It is useful for when\n     * you run code which will indirectly cause the frame to navigate. Consider\n     * this example:\n     *\n     * ```js\n     * const [response] = await Promise.all([\n     *   // The navigation promise resolves after navigation has finished\n     *   frame.waitForNavigation(),\n     *   // Clicking the link will indirectly cause a navigation\n     *   frame.click('a.my-link'),\n     * ]);\n     * ```\n     *\n     * Usage of the {@link https://developer.mozilla.org/en-US/docs/Web/API/History_API | History API} to change the URL is considered a navigation.\n     *\n     * @param options - options to configure when the navigation is consided finished.\n     * @returns a promise that resolves when the frame navigates to a new URL.\n     */\n    async waitForNavigation(options = {}) {\n        return await this._frameManager.waitForFrameNavigation(this, options);\n    }\n    /**\n     * @internal\n     */\n    _client() {\n        return __classPrivateFieldGet(this, _Frame_client, \"f\");\n    }\n    /**\n     * @returns a promise that resolves to the frame's default execution context.\n     */\n    executionContext() {\n        return this._mainWorld.executionContext();\n    }\n    /**\n     * @remarks\n     *\n     * The only difference between {@link Frame.evaluate} and\n     * `frame.evaluateHandle` is that `evaluateHandle` will return the value\n     * wrapped in an in-page object.\n     *\n     * This method behaves identically to {@link Page.evaluateHandle} except it's\n     * run within the context of the `frame`, rather than the entire page.\n     *\n     * @param pageFunction - a function that is run within the frame\n     * @param args - arguments to be passed to the pageFunction\n     */\n    async evaluateHandle(pageFunction, ...args) {\n        return this._mainWorld.evaluateHandle(pageFunction, ...args);\n    }\n    /**\n     * @remarks\n     *\n     * This method behaves identically to {@link Page.evaluate} except it's run\n     * within the context of the `frame`, rather than the entire page.\n     *\n     * @param pageFunction - a function that is run within the frame\n     * @param args - arguments to be passed to the pageFunction\n     */\n    async evaluate(pageFunction, ...args) {\n        return this._mainWorld.evaluate(pageFunction, ...args);\n    }\n    /**\n     * This method queries the frame for the given selector.\n     *\n     * @param selector - a selector to query for.\n     * @returns A promise which resolves to an `ElementHandle` pointing at the\n     * element, or `null` if it was not found.\n     */\n    async $(selector) {\n        return this._mainWorld.$(selector);\n    }\n    /**\n     * This method evaluates the given XPath expression and returns the results.\n     *\n     * @param expression - the XPath expression to evaluate.\n     */\n    async $x(expression) {\n        return this._mainWorld.$x(expression);\n    }\n    /**\n     * @remarks\n     *\n     * This method runs `document.querySelector` within\n     * the frame and passes it as the first argument to `pageFunction`.\n     *\n     * If `pageFunction` returns a Promise, then `frame.$eval` would wait for\n     * the promise to resolve and return its value.\n     *\n     * @example\n     *\n     * ```js\n     * const searchValue = await frame.$eval('#search', el => el.value);\n     * ```\n     *\n     * @param selector - the selector to query for\n     * @param pageFunction - the function to be evaluated in the frame's context\n     * @param args - additional arguments to pass to `pageFunction`\n     */\n    async $eval(selector, pageFunction, ...args) {\n        return this._mainWorld.$eval(selector, pageFunction, ...args);\n    }\n    /**\n     * @remarks\n     *\n     * This method runs `Array.from(document.querySelectorAll(selector))` within\n     * the frame and passes it as the first argument to `pageFunction`.\n     *\n     * If `pageFunction` returns a Promise, then `frame.$$eval` would wait for\n     * the promise to resolve and return its value.\n     *\n     * @example\n     *\n     * ```js\n     * const divsCounts = await frame.$$eval('div', divs => divs.length);\n     * ```\n     *\n     * @param selector - the selector to query for\n     * @param pageFunction - the function to be evaluated in the frame's context\n     * @param args - additional arguments to pass to `pageFunction`\n     */\n    async $$eval(selector, pageFunction, ...args) {\n        return this._mainWorld.$$eval(selector, pageFunction, ...args);\n    }\n    /**\n     * This runs `document.querySelectorAll` in the frame and returns the result.\n     *\n     * @param selector - a selector to search for\n     * @returns An array of element handles pointing to the found frame elements.\n     */\n    async $$(selector) {\n        return this._mainWorld.$$(selector);\n    }\n    /**\n     * @returns the full HTML contents of the frame, including the doctype.\n     */\n    async content() {\n        return this._secondaryWorld.content();\n    }\n    /**\n     * Set the content of the frame.\n     *\n     * @param html - HTML markup to assign to the page.\n     * @param options - options to configure how long before timing out and at\n     * what point to consider the content setting successful.\n     */\n    async setContent(html, options = {}) {\n        return this._secondaryWorld.setContent(html, options);\n    }\n    /**\n     * @remarks\n     *\n     * If the name is empty, it returns the `id` attribute instead.\n     *\n     * Note: This value is calculated once when the frame is created, and will not\n     * update if the attribute is changed later.\n     *\n     * @returns the frame's `name` attribute as specified in the tag.\n     */\n    name() {\n        return this._name || '';\n    }\n    /**\n     * @returns the frame's URL.\n     */\n    url() {\n        return __classPrivateFieldGet(this, _Frame_url, \"f\");\n    }\n    /**\n     * @returns the parent `Frame`, if any. Detached and main frames return `null`.\n     */\n    parentFrame() {\n        return __classPrivateFieldGet(this, _Frame_parentFrame, \"f\");\n    }\n    /**\n     * @returns an array of child frames.\n     */\n    childFrames() {\n        return Array.from(this._childFrames);\n    }\n    /**\n     * @returns `true` if the frame has been detached, or `false` otherwise.\n     */\n    isDetached() {\n        return __classPrivateFieldGet(this, _Frame_detached, \"f\");\n    }\n    /**\n     * Adds a `<script>` tag into the page with the desired url or content.\n     *\n     * @param options - configure the script to add to the page.\n     *\n     * @returns a promise that resolves to the added tag when the script's\n     * `onload` event fires or when the script content was injected into the\n     * frame.\n     */\n    async addScriptTag(options) {\n        return this._mainWorld.addScriptTag(options);\n    }\n    /**\n     * Adds a `<link rel=\"stylesheet\">` tag into the page with the desired url or\n     * a `<style type=\"text/css\">` tag with the content.\n     *\n     * @param options - configure the CSS to add to the page.\n     *\n     * @returns a promise that resolves to the added tag when the stylesheets's\n     * `onload` event fires or when the CSS content was injected into the\n     * frame.\n     */\n    async addStyleTag(options) {\n        return this._mainWorld.addStyleTag(options);\n    }\n    /**\n     *\n     * This method clicks the first element found that matches `selector`.\n     *\n     * @remarks\n     *\n     * This method scrolls the element into view if needed, and then uses\n     * {@link Page.mouse} to click in the center of the element. If there's no\n     * element matching `selector`, the method throws an error.\n     *\n     * Bear in mind that if `click()` triggers a navigation event and there's a\n     * separate `page.waitForNavigation()` promise to be resolved, you may end up\n     * with a race condition that yields unexpected results. The correct pattern\n     * for click and wait for navigation is the following:\n     *\n     * ```javascript\n     * const [response] = await Promise.all([\n     *   page.waitForNavigation(waitOptions),\n     *   frame.click(selector, clickOptions),\n     * ]);\n     * ```\n     * @param selector - the selector to search for to click. If there are\n     * multiple elements, the first will be clicked.\n     */\n    async click(selector, options = {}) {\n        return this._secondaryWorld.click(selector, options);\n    }\n    /**\n     * This method fetches an element with `selector` and focuses it.\n     *\n     * @remarks\n     * If there's no element matching `selector`, the method throws an error.\n     *\n     * @param selector - the selector for the element to focus. If there are\n     * multiple elements, the first will be focused.\n     */\n    async focus(selector) {\n        return this._secondaryWorld.focus(selector);\n    }\n    /**\n     * This method fetches an element with `selector`, scrolls it into view if\n     * needed, and then uses {@link Page.mouse} to hover over the center of the\n     * element.\n     *\n     * @remarks\n     * If there's no element matching `selector`, the method throws an\n     *\n     * @param selector - the selector for the element to hover. If there are\n     * multiple elements, the first will be hovered.\n     */\n    async hover(selector) {\n        return this._secondaryWorld.hover(selector);\n    }\n    /**\n     * Triggers a `change` and `input` event once all the provided options have\n     * been selected.\n     *\n     * @remarks\n     *\n     * If there's no `<select>` element matching `selector`, the\n     * method throws an error.\n     *\n     * @example\n     * ```js\n     * frame.select('select#colors', 'blue'); // single selection\n     * frame.select('select#colors', 'red', 'green', 'blue'); // multiple selections\n     * ```\n     *\n     * @param selector - a selector to query the frame for\n     * @param values - an array of values to select. If the `<select>` has the\n     * `multiple` attribute, all values are considered, otherwise only the first\n     * one is taken into account.\n     * @returns the list of values that were successfully selected.\n     */\n    select(selector, ...values) {\n        return this._secondaryWorld.select(selector, ...values);\n    }\n    /**\n     * This method fetches an element with `selector`, scrolls it into view if\n     * needed, and then uses {@link Page.touchscreen} to tap in the center of the\n     * element.\n     *\n     * @remarks\n     *\n     * If there's no element matching `selector`, the method throws an error.\n     *\n     * @param selector - the selector to tap.\n     * @returns a promise that resolves when the element has been tapped.\n     */\n    async tap(selector) {\n        return this._secondaryWorld.tap(selector);\n    }\n    /**\n     * Sends a `keydown`, `keypress`/`input`, and `keyup` event for each character\n     * in the text.\n     *\n     * @remarks\n     * To press a special key, like `Control` or `ArrowDown`, use\n     * {@link Keyboard.press}.\n     *\n     * @example\n     * ```js\n     * await frame.type('#mytextarea', 'Hello'); // Types instantly\n     * await frame.type('#mytextarea', 'World', {delay: 100}); // Types slower, like a user\n     * ```\n     *\n     * @param selector - the selector for the element to type into. If there are\n     * multiple the first will be used.\n     * @param text - text to type into the element\n     * @param options - takes one option, `delay`, which sets the time to wait\n     * between key presses in milliseconds. Defaults to `0`.\n     *\n     * @returns a promise that resolves when the typing is complete.\n     */\n    async type(selector, text, options) {\n        return this._mainWorld.type(selector, text, options);\n    }\n    /**\n     * @remarks\n     *\n     * This method behaves differently depending on the first parameter. If it's a\n     * `string`, it will be treated as a `selector` or `xpath` (if the string\n     * starts with `//`). This method then is a shortcut for\n     * {@link Frame.waitForSelector} or {@link Frame.waitForXPath}.\n     *\n     * If the first argument is a function this method is a shortcut for\n     * {@link Frame.waitForFunction}.\n     *\n     * If the first argument is a `number`, it's treated as a timeout in\n     * milliseconds and the method returns a promise which resolves after the\n     * timeout.\n     *\n     * @param selectorOrFunctionOrTimeout - a selector, predicate or timeout to\n     * wait for.\n     * @param options - optional waiting parameters.\n     * @param args - arguments to pass to `pageFunction`.\n     *\n     * @deprecated Don't use this method directly. Instead use the more explicit\n     * methods available: {@link Frame.waitForSelector},\n     * {@link Frame.waitForXPath}, {@link Frame.waitForFunction} or\n     * {@link Frame.waitForTimeout}.\n     */\n    waitFor(selectorOrFunctionOrTimeout, options = {}, ...args) {\n        console.warn('waitFor is deprecated and will be removed in a future release. See https://github.com/puppeteer/puppeteer/issues/6214 for details and how to migrate your code.');\n        if ((0,_util_js__WEBPACK_IMPORTED_MODULE_7__.isString)(selectorOrFunctionOrTimeout)) {\n            const string = selectorOrFunctionOrTimeout;\n            if (xPathPattern.test(string)) {\n                return this.waitForXPath(string, options);\n            }\n            return this.waitForSelector(string, options);\n        }\n        if ((0,_util_js__WEBPACK_IMPORTED_MODULE_7__.isNumber)(selectorOrFunctionOrTimeout)) {\n            return new Promise((fulfill) => {\n                return setTimeout(fulfill, selectorOrFunctionOrTimeout);\n            });\n        }\n        if (typeof selectorOrFunctionOrTimeout === 'function') {\n            return this.waitForFunction(selectorOrFunctionOrTimeout, options, ...args);\n        }\n        return Promise.reject(new Error('Unsupported target type: ' + typeof selectorOrFunctionOrTimeout));\n    }\n    /**\n     * Causes your script to wait for the given number of milliseconds.\n     *\n     * @remarks\n     * It's generally recommended to not wait for a number of seconds, but instead\n     * use {@link Frame.waitForSelector}, {@link Frame.waitForXPath} or\n     * {@link Frame.waitForFunction} to wait for exactly the conditions you want.\n     *\n     * @example\n     *\n     * Wait for 1 second:\n     *\n     * ```\n     * await frame.waitForTimeout(1000);\n     * ```\n     *\n     * @param milliseconds - the number of milliseconds to wait.\n     */\n    waitForTimeout(milliseconds) {\n        return new Promise((resolve) => {\n            setTimeout(resolve, milliseconds);\n        });\n    }\n    /**\n     * @remarks\n     *\n     *\n     * Wait for the `selector` to appear in page. If at the moment of calling the\n     * method the `selector` already exists, the method will return immediately.\n     * If the selector doesn't appear after the `timeout` milliseconds of waiting,\n     * the function will throw.\n     *\n     * This method works across navigations.\n     *\n     * @example\n     * ```js\n     * const puppeteer = require('puppeteer');\n     *\n     * (async () => {\n     *   const browser = await puppeteer.launch();\n     *   const page = await browser.newPage();\n     *   let currentURL;\n     *   page.mainFrame()\n     *   .waitForSelector('img')\n     *   .then(() => console.log('First URL with image: ' + currentURL));\n     *\n     *   for (currentURL of ['https://example.com', 'https://google.com', 'https://bbc.com']) {\n     *     await page.goto(currentURL);\n     *   }\n     *   await browser.close();\n     * })();\n     * ```\n     * @param selector - the selector to wait for.\n     * @param options - options to define if the element should be visible and how\n     * long to wait before timing out.\n     * @returns a promise which resolves when an element matching the selector\n     * string is added to the DOM.\n     */\n    async waitForSelector(selector, options = {}) {\n        const handle = await this._secondaryWorld.waitForSelector(selector, options);\n        if (!handle) {\n            return null;\n        }\n        const mainExecutionContext = await this._mainWorld.executionContext();\n        const result = await mainExecutionContext._adoptElementHandle(handle);\n        await handle.dispose();\n        return result;\n    }\n    /**\n     * @remarks\n     * Wait for the `xpath` to appear in page. If at the moment of calling the\n     * method the `xpath` already exists, the method will return immediately. If\n     * the xpath doesn't appear after the `timeout` milliseconds of waiting, the\n     * function will throw.\n     *\n     * For a code example, see the example for {@link Frame.waitForSelector}. That\n     * function behaves identically other than taking a CSS selector rather than\n     * an XPath.\n     *\n     * @param xpath - the XPath expression to wait for.\n     * @param options  - options to configure the visiblity of the element and how\n     * long to wait before timing out.\n     */\n    async waitForXPath(xpath, options = {}) {\n        const handle = await this._secondaryWorld.waitForXPath(xpath, options);\n        if (!handle) {\n            return null;\n        }\n        const mainExecutionContext = await this._mainWorld.executionContext();\n        const result = await mainExecutionContext._adoptElementHandle(handle);\n        await handle.dispose();\n        return result;\n    }\n    /**\n     * @remarks\n     *\n     * @example\n     *\n     * The `waitForFunction` can be used to observe viewport size change:\n     * ```js\n     * const puppeteer = require('puppeteer');\n     *\n     * (async () => {\n     * .  const browser = await puppeteer.launch();\n     * .  const page = await browser.newPage();\n     * .  const watchDog = page.mainFrame().waitForFunction('window.innerWidth < 100');\n     * .  page.setViewport({width: 50, height: 50});\n     * .  await watchDog;\n     * .  await browser.close();\n     * })();\n     * ```\n     *\n     * To pass arguments from Node.js to the predicate of `page.waitForFunction` function:\n     *\n     * ```js\n     * const selector = '.foo';\n     * await frame.waitForFunction(\n     *   selector => !!document.querySelector(selector),\n     *   {}, // empty options object\n     *   selector\n     *);\n     * ```\n     *\n     * @param pageFunction - the function to evaluate in the frame context.\n     * @param options - options to configure the polling method and timeout.\n     * @param args - arguments to pass to the `pageFunction`.\n     * @returns the promise which resolve when the `pageFunction` returns a truthy value.\n     */\n    waitForFunction(pageFunction, options = {}, ...args) {\n        return this._mainWorld.waitForFunction(pageFunction, options, ...args);\n    }\n    /**\n     * @returns the frame's title.\n     */\n    async title() {\n        return this._secondaryWorld.title();\n    }\n    /**\n     * @internal\n     */\n    _navigated(framePayload) {\n        this._name = framePayload.name;\n        __classPrivateFieldSet(this, _Frame_url, `${framePayload.url}${framePayload.urlFragment || ''}`, \"f\");\n    }\n    /**\n     * @internal\n     */\n    _navigatedWithinDocument(url) {\n        __classPrivateFieldSet(this, _Frame_url, url, \"f\");\n    }\n    /**\n     * @internal\n     */\n    _onLifecycleEvent(loaderId, name) {\n        if (name === 'init') {\n            this._loaderId = loaderId;\n            this._lifecycleEvents.clear();\n        }\n        this._lifecycleEvents.add(name);\n    }\n    /**\n     * @internal\n     */\n    _onLoadingStopped() {\n        this._lifecycleEvents.add('DOMContentLoaded');\n        this._lifecycleEvents.add('load');\n    }\n    /**\n     * @internal\n     */\n    _onLoadingStarted() {\n        this._hasStartedLoading = true;\n    }\n    /**\n     * @internal\n     */\n    _detach() {\n        __classPrivateFieldSet(this, _Frame_detached, true, \"f\");\n        this._mainWorld._detach();\n        this._secondaryWorld._detach();\n        if (__classPrivateFieldGet(this, _Frame_parentFrame, \"f\")) {\n            __classPrivateFieldGet(this, _Frame_parentFrame, \"f\")._childFrames.delete(this);\n        }\n        __classPrivateFieldSet(this, _Frame_parentFrame, null, \"f\");\n    }\n}\n_Frame_parentFrame = new WeakMap(), _Frame_url = new WeakMap(), _Frame_detached = new WeakMap(), _Frame_client = new WeakMap();\nfunction assertNoLegacyNavigationOptions(options) {\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(options['networkIdleTimeout'] === undefined, 'ERROR: networkIdleTimeout option is no longer supported.');\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(options['networkIdleInflight'] === undefined, 'ERROR: networkIdleInflight option is no longer supported.');\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(options['waitUntil'] !== 'networkidle', 'ERROR: \"networkidle\" option is no longer supported. Use \"networkidle2\" instead');\n}\n//# sourceMappingURL=FrameManager.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/FrameManager.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/HTTPRequest.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/HTTPRequest.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DEFAULT_INTERCEPT_RESOLUTION_PRIORITY\": () => (/* binding */ DEFAULT_INTERCEPT_RESOLUTION_PRIORITY),\n/* harmony export */   \"HTTPRequest\": () => (/* binding */ HTTPRequest),\n/* harmony export */   \"InterceptResolutionAction\": () => (/* binding */ InterceptResolutionAction)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./assert.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/assert.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/util.js\");\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _HTTPRequest_instances, _HTTPRequest_client, _HTTPRequest_isNavigationRequest, _HTTPRequest_allowInterception, _HTTPRequest_interceptionHandled, _HTTPRequest_url, _HTTPRequest_resourceType, _HTTPRequest_method, _HTTPRequest_postData, _HTTPRequest_headers, _HTTPRequest_frame, _HTTPRequest_continueRequestOverrides, _HTTPRequest_responseForRequest, _HTTPRequest_abortErrorReason, _HTTPRequest_interceptResolutionState, _HTTPRequest_interceptHandlers, _HTTPRequest_initiator, _HTTPRequest_continue, _HTTPRequest_respond, _HTTPRequest_abort;\n\n\n/**\n * The default cooperative request interception resolution priority\n *\n * @public\n */\nconst DEFAULT_INTERCEPT_RESOLUTION_PRIORITY = 0;\n/**\n *\n * Represents an HTTP request sent by a page.\n * @remarks\n *\n * Whenever the page sends a request, such as for a network resource, the\n * following events are emitted by Puppeteer's `page`:\n *\n * - `request`:  emitted when the request is issued by the page.\n * - `requestfinished` - emitted when the response body is downloaded and the\n *   request is complete.\n *\n * If request fails at some point, then instead of `requestfinished` event the\n * `requestfailed` event is emitted.\n *\n * All of these events provide an instance of `HTTPRequest` representing the\n * request that occurred:\n *\n * ```\n * page.on('request', request => ...)\n * ```\n *\n * NOTE: HTTP Error responses, such as 404 or 503, are still successful\n * responses from HTTP standpoint, so request will complete with\n * `requestfinished` event.\n *\n * If request gets a 'redirect' response, the request is successfully finished\n * with the `requestfinished` event, and a new request is issued to a\n * redirected url.\n *\n * @public\n */\nclass HTTPRequest {\n    /**\n     * @internal\n     */\n    constructor(client, frame, interceptionId, allowInterception, event, redirectChain) {\n        _HTTPRequest_instances.add(this);\n        /**\n         * @internal\n         */\n        this._failureText = null;\n        /**\n         * @internal\n         */\n        this._response = null;\n        /**\n         * @internal\n         */\n        this._fromMemoryCache = false;\n        _HTTPRequest_client.set(this, void 0);\n        _HTTPRequest_isNavigationRequest.set(this, void 0);\n        _HTTPRequest_allowInterception.set(this, void 0);\n        _HTTPRequest_interceptionHandled.set(this, false);\n        _HTTPRequest_url.set(this, void 0);\n        _HTTPRequest_resourceType.set(this, void 0);\n        _HTTPRequest_method.set(this, void 0);\n        _HTTPRequest_postData.set(this, void 0);\n        _HTTPRequest_headers.set(this, {});\n        _HTTPRequest_frame.set(this, void 0);\n        _HTTPRequest_continueRequestOverrides.set(this, void 0);\n        _HTTPRequest_responseForRequest.set(this, null);\n        _HTTPRequest_abortErrorReason.set(this, null);\n        _HTTPRequest_interceptResolutionState.set(this, {\n            action: InterceptResolutionAction.None,\n        });\n        _HTTPRequest_interceptHandlers.set(this, void 0);\n        _HTTPRequest_initiator.set(this, void 0);\n        __classPrivateFieldSet(this, _HTTPRequest_client, client, \"f\");\n        this._requestId = event.requestId;\n        __classPrivateFieldSet(this, _HTTPRequest_isNavigationRequest, event.requestId === event.loaderId && event.type === 'Document', \"f\");\n        this._interceptionId = interceptionId;\n        __classPrivateFieldSet(this, _HTTPRequest_allowInterception, allowInterception, \"f\");\n        __classPrivateFieldSet(this, _HTTPRequest_url, event.request.url, \"f\");\n        __classPrivateFieldSet(this, _HTTPRequest_resourceType, (event.type || 'other').toLowerCase(), \"f\");\n        __classPrivateFieldSet(this, _HTTPRequest_method, event.request.method, \"f\");\n        __classPrivateFieldSet(this, _HTTPRequest_postData, event.request.postData, \"f\");\n        __classPrivateFieldSet(this, _HTTPRequest_frame, frame, \"f\");\n        this._redirectChain = redirectChain;\n        __classPrivateFieldSet(this, _HTTPRequest_continueRequestOverrides, {}, \"f\");\n        __classPrivateFieldSet(this, _HTTPRequest_interceptHandlers, [], \"f\");\n        __classPrivateFieldSet(this, _HTTPRequest_initiator, event.initiator, \"f\");\n        for (const [key, value] of Object.entries(event.request.headers)) {\n            __classPrivateFieldGet(this, _HTTPRequest_headers, \"f\")[key.toLowerCase()] = value;\n        }\n    }\n    /**\n     * @returns the URL of the request\n     */\n    url() {\n        return __classPrivateFieldGet(this, _HTTPRequest_url, \"f\");\n    }\n    /**\n     * @returns the `ContinueRequestOverrides` that will be used\n     * if the interception is allowed to continue (ie, `abort()` and\n     * `respond()` aren't called).\n     */\n    continueRequestOverrides() {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(__classPrivateFieldGet(this, _HTTPRequest_allowInterception, \"f\"), 'Request Interception is not enabled!');\n        return __classPrivateFieldGet(this, _HTTPRequest_continueRequestOverrides, \"f\");\n    }\n    /**\n     * @returns The `ResponseForRequest` that gets used if the\n     * interception is allowed to respond (ie, `abort()` is not called).\n     */\n    responseForRequest() {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(__classPrivateFieldGet(this, _HTTPRequest_allowInterception, \"f\"), 'Request Interception is not enabled!');\n        return __classPrivateFieldGet(this, _HTTPRequest_responseForRequest, \"f\");\n    }\n    /**\n     * @returns the most recent reason for aborting the request\n     */\n    abortErrorReason() {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(__classPrivateFieldGet(this, _HTTPRequest_allowInterception, \"f\"), 'Request Interception is not enabled!');\n        return __classPrivateFieldGet(this, _HTTPRequest_abortErrorReason, \"f\");\n    }\n    /**\n     * @returns An InterceptResolutionState object describing the current resolution\n     *  action and priority.\n     *\n     *  InterceptResolutionState contains:\n     *    action: InterceptResolutionAction\n     *    priority?: number\n     *\n     *  InterceptResolutionAction is one of: `abort`, `respond`, `continue`,\n     *  `disabled`, `none`, or `already-handled`.\n     */\n    interceptResolutionState() {\n        if (!__classPrivateFieldGet(this, _HTTPRequest_allowInterception, \"f\")) {\n            return { action: InterceptResolutionAction.Disabled };\n        }\n        if (__classPrivateFieldGet(this, _HTTPRequest_interceptionHandled, \"f\")) {\n            return { action: InterceptResolutionAction.AlreadyHandled };\n        }\n        return { ...__classPrivateFieldGet(this, _HTTPRequest_interceptResolutionState, \"f\") };\n    }\n    /**\n     * @returns `true` if the intercept resolution has already been handled,\n     * `false` otherwise.\n     */\n    isInterceptResolutionHandled() {\n        return __classPrivateFieldGet(this, _HTTPRequest_interceptionHandled, \"f\");\n    }\n    /**\n     * Adds an async request handler to the processing queue.\n     * Deferred handlers are not guaranteed to execute in any particular order,\n     * but they are guaranteed to resolve before the request interception\n     * is finalized.\n     */\n    enqueueInterceptAction(pendingHandler) {\n        __classPrivateFieldGet(this, _HTTPRequest_interceptHandlers, \"f\").push(pendingHandler);\n    }\n    /**\n     * Awaits pending interception handlers and then decides how to fulfill\n     * the request interception.\n     */\n    async finalizeInterceptions() {\n        await __classPrivateFieldGet(this, _HTTPRequest_interceptHandlers, \"f\").reduce((promiseChain, interceptAction) => {\n            return promiseChain.then(interceptAction);\n        }, Promise.resolve());\n        const { action } = this.interceptResolutionState();\n        switch (action) {\n            case 'abort':\n                return __classPrivateFieldGet(this, _HTTPRequest_instances, \"m\", _HTTPRequest_abort).call(this, __classPrivateFieldGet(this, _HTTPRequest_abortErrorReason, \"f\"));\n            case 'respond':\n                if (__classPrivateFieldGet(this, _HTTPRequest_responseForRequest, \"f\") === null) {\n                    throw new Error('Response is missing for the interception');\n                }\n                return __classPrivateFieldGet(this, _HTTPRequest_instances, \"m\", _HTTPRequest_respond).call(this, __classPrivateFieldGet(this, _HTTPRequest_responseForRequest, \"f\"));\n            case 'continue':\n                return __classPrivateFieldGet(this, _HTTPRequest_instances, \"m\", _HTTPRequest_continue).call(this, __classPrivateFieldGet(this, _HTTPRequest_continueRequestOverrides, \"f\"));\n        }\n    }\n    /**\n     * Contains the request's resource type as it was perceived by the rendering\n     * engine.\n     */\n    resourceType() {\n        return __classPrivateFieldGet(this, _HTTPRequest_resourceType, \"f\");\n    }\n    /**\n     * @returns the method used (`GET`, `POST`, etc.)\n     */\n    method() {\n        return __classPrivateFieldGet(this, _HTTPRequest_method, \"f\");\n    }\n    /**\n     * @returns the request's post body, if any.\n     */\n    postData() {\n        return __classPrivateFieldGet(this, _HTTPRequest_postData, \"f\");\n    }\n    /**\n     * @returns an object with HTTP headers associated with the request. All\n     * header names are lower-case.\n     */\n    headers() {\n        return __classPrivateFieldGet(this, _HTTPRequest_headers, \"f\");\n    }\n    /**\n     * @returns A matching `HTTPResponse` object, or null if the response has not\n     * been received yet.\n     */\n    response() {\n        return this._response;\n    }\n    /**\n     * @returns the frame that initiated the request, or null if navigating to\n     * error pages.\n     */\n    frame() {\n        return __classPrivateFieldGet(this, _HTTPRequest_frame, \"f\");\n    }\n    /**\n     * @returns true if the request is the driver of the current frame's navigation.\n     */\n    isNavigationRequest() {\n        return __classPrivateFieldGet(this, _HTTPRequest_isNavigationRequest, \"f\");\n    }\n    /**\n     * @returns the initiator of the request.\n     */\n    initiator() {\n        return __classPrivateFieldGet(this, _HTTPRequest_initiator, \"f\");\n    }\n    /**\n     * A `redirectChain` is a chain of requests initiated to fetch a resource.\n     * @remarks\n     *\n     * `redirectChain` is shared between all the requests of the same chain.\n     *\n     * For example, if the website `http://example.com` has a single redirect to\n     * `https://example.com`, then the chain will contain one request:\n     *\n     * ```js\n     * const response = await page.goto('http://example.com');\n     * const chain = response.request().redirectChain();\n     * console.log(chain.length); // 1\n     * console.log(chain[0].url()); // 'http://example.com'\n     * ```\n     *\n     * If the website `https://google.com` has no redirects, then the chain will be empty:\n     *\n     * ```js\n     * const response = await page.goto('https://google.com');\n     * const chain = response.request().redirectChain();\n     * console.log(chain.length); // 0\n     * ```\n     *\n     * @returns the chain of requests - if a server responds with at least a\n     * single redirect, this chain will contain all requests that were redirected.\n     */\n    redirectChain() {\n        return this._redirectChain.slice();\n    }\n    /**\n     * Access information about the request's failure.\n     *\n     * @remarks\n     *\n     * @example\n     *\n     * Example of logging all failed requests:\n     *\n     * ```js\n     * page.on('requestfailed', request => {\n     *   console.log(request.url() + ' ' + request.failure().errorText);\n     * });\n     * ```\n     *\n     * @returns `null` unless the request failed. If the request fails this can\n     * return an object with `errorText` containing a human-readable error\n     * message, e.g. `net::ERR_FAILED`. It is not guaranteed that there will be\n     * failure text if the request fails.\n     */\n    failure() {\n        if (!this._failureText) {\n            return null;\n        }\n        return {\n            errorText: this._failureText,\n        };\n    }\n    /**\n     * Continues request with optional request overrides.\n     *\n     * @remarks\n     *\n     * To use this, request\n     * interception should be enabled with {@link Page.setRequestInterception}.\n     *\n     * Exception is immediately thrown if the request interception is not enabled.\n     *\n     * @example\n     * ```js\n     * await page.setRequestInterception(true);\n     * page.on('request', request => {\n     *   // Override headers\n     *   const headers = Object.assign({}, request.headers(), {\n     *     foo: 'bar', // set \"foo\" header\n     *     origin: undefined, // remove \"origin\" header\n     *   });\n     *   request.continue({headers});\n     * });\n     * ```\n     *\n     * @param overrides - optional overrides to apply to the request.\n     * @param priority - If provided, intercept is resolved using\n     * cooperative handling rules. Otherwise, intercept is resolved\n     * immediately.\n     */\n    async continue(overrides = {}, priority) {\n        // Request interception is not supported for data: urls.\n        if (__classPrivateFieldGet(this, _HTTPRequest_url, \"f\").startsWith('data:')) {\n            return;\n        }\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(__classPrivateFieldGet(this, _HTTPRequest_allowInterception, \"f\"), 'Request Interception is not enabled!');\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(!__classPrivateFieldGet(this, _HTTPRequest_interceptionHandled, \"f\"), 'Request is already handled!');\n        if (priority === undefined) {\n            return __classPrivateFieldGet(this, _HTTPRequest_instances, \"m\", _HTTPRequest_continue).call(this, overrides);\n        }\n        __classPrivateFieldSet(this, _HTTPRequest_continueRequestOverrides, overrides, \"f\");\n        if (__classPrivateFieldGet(this, _HTTPRequest_interceptResolutionState, \"f\").priority === undefined ||\n            priority > __classPrivateFieldGet(this, _HTTPRequest_interceptResolutionState, \"f\").priority) {\n            __classPrivateFieldSet(this, _HTTPRequest_interceptResolutionState, {\n                action: InterceptResolutionAction.Continue,\n                priority,\n            }, \"f\");\n            return;\n        }\n        if (priority === __classPrivateFieldGet(this, _HTTPRequest_interceptResolutionState, \"f\").priority) {\n            if (__classPrivateFieldGet(this, _HTTPRequest_interceptResolutionState, \"f\").action === 'abort' ||\n                __classPrivateFieldGet(this, _HTTPRequest_interceptResolutionState, \"f\").action === 'respond') {\n                return;\n            }\n            __classPrivateFieldGet(this, _HTTPRequest_interceptResolutionState, \"f\").action =\n                InterceptResolutionAction.Continue;\n        }\n        return;\n    }\n    /**\n     * Fulfills a request with the given response.\n     *\n     * @remarks\n     *\n     * To use this, request\n     * interception should be enabled with {@link Page.setRequestInterception}.\n     *\n     * Exception is immediately thrown if the request interception is not enabled.\n     *\n     * @example\n     * An example of fulfilling all requests with 404 responses:\n     * ```js\n     * await page.setRequestInterception(true);\n     * page.on('request', request => {\n     *   request.respond({\n     *     status: 404,\n     *     contentType: 'text/plain',\n     *     body: 'Not Found!'\n     *   });\n     * });\n     * ```\n     *\n     * NOTE: Mocking responses for dataURL requests is not supported.\n     * Calling `request.respond` for a dataURL request is a noop.\n     *\n     * @param response - the response to fulfill the request with.\n     * @param priority - If provided, intercept is resolved using\n     * cooperative handling rules. Otherwise, intercept is resolved\n     * immediately.\n     */\n    async respond(response, priority) {\n        // Mocking responses for dataURL requests is not currently supported.\n        if (__classPrivateFieldGet(this, _HTTPRequest_url, \"f\").startsWith('data:')) {\n            return;\n        }\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(__classPrivateFieldGet(this, _HTTPRequest_allowInterception, \"f\"), 'Request Interception is not enabled!');\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(!__classPrivateFieldGet(this, _HTTPRequest_interceptionHandled, \"f\"), 'Request is already handled!');\n        if (priority === undefined) {\n            return __classPrivateFieldGet(this, _HTTPRequest_instances, \"m\", _HTTPRequest_respond).call(this, response);\n        }\n        __classPrivateFieldSet(this, _HTTPRequest_responseForRequest, response, \"f\");\n        if (__classPrivateFieldGet(this, _HTTPRequest_interceptResolutionState, \"f\").priority === undefined ||\n            priority > __classPrivateFieldGet(this, _HTTPRequest_interceptResolutionState, \"f\").priority) {\n            __classPrivateFieldSet(this, _HTTPRequest_interceptResolutionState, {\n                action: InterceptResolutionAction.Respond,\n                priority,\n            }, \"f\");\n            return;\n        }\n        if (priority === __classPrivateFieldGet(this, _HTTPRequest_interceptResolutionState, \"f\").priority) {\n            if (__classPrivateFieldGet(this, _HTTPRequest_interceptResolutionState, \"f\").action === 'abort') {\n                return;\n            }\n            __classPrivateFieldGet(this, _HTTPRequest_interceptResolutionState, \"f\").action = InterceptResolutionAction.Respond;\n        }\n    }\n    /**\n     * Aborts a request.\n     *\n     * @remarks\n     * To use this, request interception should be enabled with\n     * {@link Page.setRequestInterception}. If it is not enabled, this method will\n     * throw an exception immediately.\n     *\n     * @param errorCode - optional error code to provide.\n     * @param priority - If provided, intercept is resolved using\n     * cooperative handling rules. Otherwise, intercept is resolved\n     * immediately.\n     */\n    async abort(errorCode = 'failed', priority) {\n        // Request interception is not supported for data: urls.\n        if (__classPrivateFieldGet(this, _HTTPRequest_url, \"f\").startsWith('data:')) {\n            return;\n        }\n        const errorReason = errorReasons[errorCode];\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(errorReason, 'Unknown error code: ' + errorCode);\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(__classPrivateFieldGet(this, _HTTPRequest_allowInterception, \"f\"), 'Request Interception is not enabled!');\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(!__classPrivateFieldGet(this, _HTTPRequest_interceptionHandled, \"f\"), 'Request is already handled!');\n        if (priority === undefined) {\n            return __classPrivateFieldGet(this, _HTTPRequest_instances, \"m\", _HTTPRequest_abort).call(this, errorReason);\n        }\n        __classPrivateFieldSet(this, _HTTPRequest_abortErrorReason, errorReason, \"f\");\n        if (__classPrivateFieldGet(this, _HTTPRequest_interceptResolutionState, \"f\").priority === undefined ||\n            priority >= __classPrivateFieldGet(this, _HTTPRequest_interceptResolutionState, \"f\").priority) {\n            __classPrivateFieldSet(this, _HTTPRequest_interceptResolutionState, {\n                action: InterceptResolutionAction.Abort,\n                priority,\n            }, \"f\");\n            return;\n        }\n    }\n}\n_HTTPRequest_client = new WeakMap(), _HTTPRequest_isNavigationRequest = new WeakMap(), _HTTPRequest_allowInterception = new WeakMap(), _HTTPRequest_interceptionHandled = new WeakMap(), _HTTPRequest_url = new WeakMap(), _HTTPRequest_resourceType = new WeakMap(), _HTTPRequest_method = new WeakMap(), _HTTPRequest_postData = new WeakMap(), _HTTPRequest_headers = new WeakMap(), _HTTPRequest_frame = new WeakMap(), _HTTPRequest_continueRequestOverrides = new WeakMap(), _HTTPRequest_responseForRequest = new WeakMap(), _HTTPRequest_abortErrorReason = new WeakMap(), _HTTPRequest_interceptResolutionState = new WeakMap(), _HTTPRequest_interceptHandlers = new WeakMap(), _HTTPRequest_initiator = new WeakMap(), _HTTPRequest_instances = new WeakSet(), _HTTPRequest_continue = async function _HTTPRequest_continue(overrides = {}) {\n    const { url, method, postData, headers } = overrides;\n    __classPrivateFieldSet(this, _HTTPRequest_interceptionHandled, true, \"f\");\n    const postDataBinaryBase64 = postData\n        ? Buffer.from(postData).toString('base64')\n        : undefined;\n    if (this._interceptionId === undefined) {\n        throw new Error('HTTPRequest is missing _interceptionId needed for Fetch.continueRequest');\n    }\n    await __classPrivateFieldGet(this, _HTTPRequest_client, \"f\")\n        .send('Fetch.continueRequest', {\n        requestId: this._interceptionId,\n        url,\n        method,\n        postData: postDataBinaryBase64,\n        headers: headers ? headersArray(headers) : undefined,\n    })\n        .catch((error) => {\n        __classPrivateFieldSet(this, _HTTPRequest_interceptionHandled, false, \"f\");\n        return handleError(error);\n    });\n}, _HTTPRequest_respond = async function _HTTPRequest_respond(response) {\n    __classPrivateFieldSet(this, _HTTPRequest_interceptionHandled, true, \"f\");\n    const responseBody = response.body && (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.isString)(response.body)\n        ? Buffer.from(response.body)\n        : response.body || null;\n    const responseHeaders = {};\n    if (response.headers) {\n        for (const header of Object.keys(response.headers)) {\n            const value = response.headers[header];\n            responseHeaders[header.toLowerCase()] = Array.isArray(value)\n                ? value.map((item) => {\n                    return String(item);\n                })\n                : String(value);\n        }\n    }\n    if (response.contentType) {\n        responseHeaders['content-type'] = response.contentType;\n    }\n    if (responseBody && !('content-length' in responseHeaders)) {\n        responseHeaders['content-length'] = String(Buffer.byteLength(responseBody));\n    }\n    const status = response.status || 200;\n    if (this._interceptionId === undefined) {\n        throw new Error('HTTPRequest is missing _interceptionId needed for Fetch.fulfillRequest');\n    }\n    await __classPrivateFieldGet(this, _HTTPRequest_client, \"f\")\n        .send('Fetch.fulfillRequest', {\n        requestId: this._interceptionId,\n        responseCode: status,\n        responsePhrase: STATUS_TEXTS[status],\n        responseHeaders: headersArray(responseHeaders),\n        body: responseBody ? responseBody.toString('base64') : undefined,\n    })\n        .catch((error) => {\n        __classPrivateFieldSet(this, _HTTPRequest_interceptionHandled, false, \"f\");\n        return handleError(error);\n    });\n}, _HTTPRequest_abort = async function _HTTPRequest_abort(errorReason) {\n    __classPrivateFieldSet(this, _HTTPRequest_interceptionHandled, true, \"f\");\n    if (this._interceptionId === undefined) {\n        throw new Error('HTTPRequest is missing _interceptionId needed for Fetch.failRequest');\n    }\n    await __classPrivateFieldGet(this, _HTTPRequest_client, \"f\")\n        .send('Fetch.failRequest', {\n        requestId: this._interceptionId,\n        errorReason: errorReason || 'Failed',\n    })\n        .catch(handleError);\n};\n/**\n * @public\n */\nvar InterceptResolutionAction;\n(function (InterceptResolutionAction) {\n    InterceptResolutionAction[\"Abort\"] = \"abort\";\n    InterceptResolutionAction[\"Respond\"] = \"respond\";\n    InterceptResolutionAction[\"Continue\"] = \"continue\";\n    InterceptResolutionAction[\"Disabled\"] = \"disabled\";\n    InterceptResolutionAction[\"None\"] = \"none\";\n    InterceptResolutionAction[\"AlreadyHandled\"] = \"already-handled\";\n})(InterceptResolutionAction || (InterceptResolutionAction = {}));\nconst errorReasons = {\n    aborted: 'Aborted',\n    accessdenied: 'AccessDenied',\n    addressunreachable: 'AddressUnreachable',\n    blockedbyclient: 'BlockedByClient',\n    blockedbyresponse: 'BlockedByResponse',\n    connectionaborted: 'ConnectionAborted',\n    connectionclosed: 'ConnectionClosed',\n    connectionfailed: 'ConnectionFailed',\n    connectionrefused: 'ConnectionRefused',\n    connectionreset: 'ConnectionReset',\n    internetdisconnected: 'InternetDisconnected',\n    namenotresolved: 'NameNotResolved',\n    timedout: 'TimedOut',\n    failed: 'Failed',\n};\nfunction headersArray(headers) {\n    const result = [];\n    for (const name in headers) {\n        const value = headers[name];\n        if (!Object.is(value, undefined)) {\n            const values = Array.isArray(value) ? value : [value];\n            result.push(...values.map((value) => {\n                return { name, value: value + '' };\n            }));\n        }\n    }\n    return result;\n}\nasync function handleError(error) {\n    if (['Invalid header'].includes(error.originalMessage)) {\n        throw error;\n    }\n    // In certain cases, protocol will return error if the request was\n    // already canceled or the page was closed. We should tolerate these\n    // errors.\n    (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.debugError)(error);\n}\n// List taken from\n// https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml\n// with extra 306 and 418 codes.\nconst STATUS_TEXTS = {\n    '100': 'Continue',\n    '101': 'Switching Protocols',\n    '102': 'Processing',\n    '103': 'Early Hints',\n    '200': 'OK',\n    '201': 'Created',\n    '202': 'Accepted',\n    '203': 'Non-Authoritative Information',\n    '204': 'No Content',\n    '205': 'Reset Content',\n    '206': 'Partial Content',\n    '207': 'Multi-Status',\n    '208': 'Already Reported',\n    '226': 'IM Used',\n    '300': 'Multiple Choices',\n    '301': 'Moved Permanently',\n    '302': 'Found',\n    '303': 'See Other',\n    '304': 'Not Modified',\n    '305': 'Use Proxy',\n    '306': 'Switch Proxy',\n    '307': 'Temporary Redirect',\n    '308': 'Permanent Redirect',\n    '400': 'Bad Request',\n    '401': 'Unauthorized',\n    '402': 'Payment Required',\n    '403': 'Forbidden',\n    '404': 'Not Found',\n    '405': 'Method Not Allowed',\n    '406': 'Not Acceptable',\n    '407': 'Proxy Authentication Required',\n    '408': 'Request Timeout',\n    '409': 'Conflict',\n    '410': 'Gone',\n    '411': 'Length Required',\n    '412': 'Precondition Failed',\n    '413': 'Payload Too Large',\n    '414': 'URI Too Long',\n    '415': 'Unsupported Media Type',\n    '416': 'Range Not Satisfiable',\n    '417': 'Expectation Failed',\n    '418': \"I'm a teapot\",\n    '421': 'Misdirected Request',\n    '422': 'Unprocessable Entity',\n    '423': 'Locked',\n    '424': 'Failed Dependency',\n    '425': 'Too Early',\n    '426': 'Upgrade Required',\n    '428': 'Precondition Required',\n    '429': 'Too Many Requests',\n    '431': 'Request Header Fields Too Large',\n    '451': 'Unavailable For Legal Reasons',\n    '500': 'Internal Server Error',\n    '501': 'Not Implemented',\n    '502': 'Bad Gateway',\n    '503': 'Service Unavailable',\n    '504': 'Gateway Timeout',\n    '505': 'HTTP Version Not Supported',\n    '506': 'Variant Also Negotiates',\n    '507': 'Insufficient Storage',\n    '508': 'Loop Detected',\n    '510': 'Not Extended',\n    '511': 'Network Authentication Required',\n};\n//# sourceMappingURL=HTTPRequest.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/HTTPRequest.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/HTTPResponse.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/HTTPResponse.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"HTTPResponse\": () => (/* binding */ HTTPResponse)\n/* harmony export */ });\n/* harmony import */ var _SecurityDetails_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SecurityDetails.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/SecurityDetails.js\");\n/* harmony import */ var _Errors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Errors.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Errors.js\");\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _HTTPResponse_instances, _HTTPResponse_client, _HTTPResponse_request, _HTTPResponse_contentPromise, _HTTPResponse_bodyLoadedPromise, _HTTPResponse_bodyLoadedPromiseFulfill, _HTTPResponse_remoteAddress, _HTTPResponse_status, _HTTPResponse_statusText, _HTTPResponse_url, _HTTPResponse_fromDiskCache, _HTTPResponse_fromServiceWorker, _HTTPResponse_headers, _HTTPResponse_securityDetails, _HTTPResponse_timing, _HTTPResponse_parseStatusTextFromExtrInfo;\n\n\n/**\n * The HTTPResponse class represents responses which are received by the\n * {@link Page} class.\n *\n * @public\n */\nclass HTTPResponse {\n    /**\n     * @internal\n     */\n    constructor(client, request, responsePayload, extraInfo) {\n        _HTTPResponse_instances.add(this);\n        _HTTPResponse_client.set(this, void 0);\n        _HTTPResponse_request.set(this, void 0);\n        _HTTPResponse_contentPromise.set(this, null);\n        _HTTPResponse_bodyLoadedPromise.set(this, void 0);\n        _HTTPResponse_bodyLoadedPromiseFulfill.set(this, () => { });\n        _HTTPResponse_remoteAddress.set(this, void 0);\n        _HTTPResponse_status.set(this, void 0);\n        _HTTPResponse_statusText.set(this, void 0);\n        _HTTPResponse_url.set(this, void 0);\n        _HTTPResponse_fromDiskCache.set(this, void 0);\n        _HTTPResponse_fromServiceWorker.set(this, void 0);\n        _HTTPResponse_headers.set(this, {});\n        _HTTPResponse_securityDetails.set(this, void 0);\n        _HTTPResponse_timing.set(this, void 0);\n        __classPrivateFieldSet(this, _HTTPResponse_client, client, \"f\");\n        __classPrivateFieldSet(this, _HTTPResponse_request, request, \"f\");\n        __classPrivateFieldSet(this, _HTTPResponse_bodyLoadedPromise, new Promise((fulfill) => {\n            __classPrivateFieldSet(this, _HTTPResponse_bodyLoadedPromiseFulfill, fulfill, \"f\");\n        }), \"f\");\n        __classPrivateFieldSet(this, _HTTPResponse_remoteAddress, {\n            ip: responsePayload.remoteIPAddress,\n            port: responsePayload.remotePort,\n        }, \"f\");\n        __classPrivateFieldSet(this, _HTTPResponse_statusText, __classPrivateFieldGet(this, _HTTPResponse_instances, \"m\", _HTTPResponse_parseStatusTextFromExtrInfo).call(this, extraInfo) ||\n            responsePayload.statusText, \"f\");\n        __classPrivateFieldSet(this, _HTTPResponse_url, request.url(), \"f\");\n        __classPrivateFieldSet(this, _HTTPResponse_fromDiskCache, !!responsePayload.fromDiskCache, \"f\");\n        __classPrivateFieldSet(this, _HTTPResponse_fromServiceWorker, !!responsePayload.fromServiceWorker, \"f\");\n        __classPrivateFieldSet(this, _HTTPResponse_status, extraInfo ? extraInfo.statusCode : responsePayload.status, \"f\");\n        const headers = extraInfo ? extraInfo.headers : responsePayload.headers;\n        for (const [key, value] of Object.entries(headers)) {\n            __classPrivateFieldGet(this, _HTTPResponse_headers, \"f\")[key.toLowerCase()] = value;\n        }\n        __classPrivateFieldSet(this, _HTTPResponse_securityDetails, responsePayload.securityDetails\n            ? new _SecurityDetails_js__WEBPACK_IMPORTED_MODULE_0__.SecurityDetails(responsePayload.securityDetails)\n            : null, \"f\");\n        __classPrivateFieldSet(this, _HTTPResponse_timing, responsePayload.timing || null, \"f\");\n    }\n    /**\n     * @internal\n     */\n    _resolveBody(err) {\n        if (err) {\n            return __classPrivateFieldGet(this, _HTTPResponse_bodyLoadedPromiseFulfill, \"f\").call(this, err);\n        }\n        return __classPrivateFieldGet(this, _HTTPResponse_bodyLoadedPromiseFulfill, \"f\").call(this);\n    }\n    /**\n     * @returns The IP address and port number used to connect to the remote\n     * server.\n     */\n    remoteAddress() {\n        return __classPrivateFieldGet(this, _HTTPResponse_remoteAddress, \"f\");\n    }\n    /**\n     * @returns The URL of the response.\n     */\n    url() {\n        return __classPrivateFieldGet(this, _HTTPResponse_url, \"f\");\n    }\n    /**\n     * @returns True if the response was successful (status in the range 200-299).\n     */\n    ok() {\n        // TODO: document === 0 case?\n        return __classPrivateFieldGet(this, _HTTPResponse_status, \"f\") === 0 || (__classPrivateFieldGet(this, _HTTPResponse_status, \"f\") >= 200 && __classPrivateFieldGet(this, _HTTPResponse_status, \"f\") <= 299);\n    }\n    /**\n     * @returns The status code of the response (e.g., 200 for a success).\n     */\n    status() {\n        return __classPrivateFieldGet(this, _HTTPResponse_status, \"f\");\n    }\n    /**\n     * @returns  The status text of the response (e.g. usually an \"OK\" for a\n     * success).\n     */\n    statusText() {\n        return __classPrivateFieldGet(this, _HTTPResponse_statusText, \"f\");\n    }\n    /**\n     * @returns An object with HTTP headers associated with the response. All\n     * header names are lower-case.\n     */\n    headers() {\n        return __classPrivateFieldGet(this, _HTTPResponse_headers, \"f\");\n    }\n    /**\n     * @returns {@link SecurityDetails} if the response was received over the\n     * secure connection, or `null` otherwise.\n     */\n    securityDetails() {\n        return __classPrivateFieldGet(this, _HTTPResponse_securityDetails, \"f\");\n    }\n    /**\n     * @returns Timing information related to the response.\n     */\n    timing() {\n        return __classPrivateFieldGet(this, _HTTPResponse_timing, \"f\");\n    }\n    /**\n     * @returns Promise which resolves to a buffer with response body.\n     */\n    buffer() {\n        if (!__classPrivateFieldGet(this, _HTTPResponse_contentPromise, \"f\")) {\n            __classPrivateFieldSet(this, _HTTPResponse_contentPromise, __classPrivateFieldGet(this, _HTTPResponse_bodyLoadedPromise, \"f\").then(async (error) => {\n                if (error) {\n                    throw error;\n                }\n                try {\n                    const response = await __classPrivateFieldGet(this, _HTTPResponse_client, \"f\").send('Network.getResponseBody', {\n                        requestId: __classPrivateFieldGet(this, _HTTPResponse_request, \"f\")._requestId,\n                    });\n                    return Buffer.from(response.body, response.base64Encoded ? 'base64' : 'utf8');\n                }\n                catch (error) {\n                    if (error instanceof _Errors_js__WEBPACK_IMPORTED_MODULE_1__.ProtocolError &&\n                        error.originalMessage === 'No resource with given identifier found') {\n                        throw new _Errors_js__WEBPACK_IMPORTED_MODULE_1__.ProtocolError('Could not load body for this request. This might happen if the request is a preflight request.');\n                    }\n                    throw error;\n                }\n            }), \"f\");\n        }\n        return __classPrivateFieldGet(this, _HTTPResponse_contentPromise, \"f\");\n    }\n    /**\n     * @returns Promise which resolves to a text representation of response body.\n     */\n    async text() {\n        const content = await this.buffer();\n        return content.toString('utf8');\n    }\n    /**\n     *\n     * @returns Promise which resolves to a JSON representation of response body.\n     *\n     * @remarks\n     *\n     * This method will throw if the response body is not parsable via\n     * `JSON.parse`.\n     */\n    async json() {\n        const content = await this.text();\n        return JSON.parse(content);\n    }\n    /**\n     * @returns A matching {@link HTTPRequest} object.\n     */\n    request() {\n        return __classPrivateFieldGet(this, _HTTPResponse_request, \"f\");\n    }\n    /**\n     * @returns True if the response was served from either the browser's disk\n     * cache or memory cache.\n     */\n    fromCache() {\n        return __classPrivateFieldGet(this, _HTTPResponse_fromDiskCache, \"f\") || __classPrivateFieldGet(this, _HTTPResponse_request, \"f\")._fromMemoryCache;\n    }\n    /**\n     * @returns True if the response was served by a service worker.\n     */\n    fromServiceWorker() {\n        return __classPrivateFieldGet(this, _HTTPResponse_fromServiceWorker, \"f\");\n    }\n    /**\n     * @returns A {@link Frame} that initiated this response, or `null` if\n     * navigating to error pages.\n     */\n    frame() {\n        return __classPrivateFieldGet(this, _HTTPResponse_request, \"f\").frame();\n    }\n}\n_HTTPResponse_client = new WeakMap(), _HTTPResponse_request = new WeakMap(), _HTTPResponse_contentPromise = new WeakMap(), _HTTPResponse_bodyLoadedPromise = new WeakMap(), _HTTPResponse_bodyLoadedPromiseFulfill = new WeakMap(), _HTTPResponse_remoteAddress = new WeakMap(), _HTTPResponse_status = new WeakMap(), _HTTPResponse_statusText = new WeakMap(), _HTTPResponse_url = new WeakMap(), _HTTPResponse_fromDiskCache = new WeakMap(), _HTTPResponse_fromServiceWorker = new WeakMap(), _HTTPResponse_headers = new WeakMap(), _HTTPResponse_securityDetails = new WeakMap(), _HTTPResponse_timing = new WeakMap(), _HTTPResponse_instances = new WeakSet(), _HTTPResponse_parseStatusTextFromExtrInfo = function _HTTPResponse_parseStatusTextFromExtrInfo(extraInfo) {\n    if (!extraInfo || !extraInfo.headersText) {\n        return;\n    }\n    const firstLine = extraInfo.headersText.split('\\r', 1)[0];\n    if (!firstLine) {\n        return;\n    }\n    const match = firstLine.match(/[^ ]* [^ ]* (.*)/);\n    if (!match) {\n        return;\n    }\n    const statusText = match[1];\n    if (!statusText) {\n        return;\n    }\n    return statusText;\n};\n//# sourceMappingURL=HTTPResponse.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/HTTPResponse.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Input.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Input.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Keyboard\": () => (/* binding */ Keyboard),\n/* harmony export */   \"Mouse\": () => (/* binding */ Mouse),\n/* harmony export */   \"Touchscreen\": () => (/* binding */ Touchscreen)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./assert.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/assert.js\");\n/* harmony import */ var _USKeyboardLayout_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./USKeyboardLayout.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/USKeyboardLayout.js\");\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Keyboard_instances, _Keyboard_client, _Keyboard_pressedKeys, _Keyboard_modifierBit, _Keyboard_keyDescriptionForString, _Mouse_client, _Mouse_keyboard, _Mouse_x, _Mouse_y, _Mouse_button, _Touchscreen_client, _Touchscreen_keyboard;\n\n\n/**\n * Keyboard provides an api for managing a virtual keyboard.\n * The high level api is {@link Keyboard.\"type\"},\n * which takes raw characters and generates proper keydown, keypress/input,\n * and keyup events on your page.\n *\n * @remarks\n * For finer control, you can use {@link Keyboard.down},\n * {@link Keyboard.up}, and {@link Keyboard.sendCharacter}\n * to manually fire events as if they were generated from a real keyboard.\n *\n * On MacOS, keyboard shortcuts like `⌘ A` -\\> Select All do not work.\n * See {@link https://github.com/puppeteer/puppeteer/issues/1313 | #1313}.\n *\n * @example\n * An example of holding down `Shift` in order to select and delete some text:\n * ```js\n * await page.keyboard.type('Hello World!');\n * await page.keyboard.press('ArrowLeft');\n *\n * await page.keyboard.down('Shift');\n * for (let i = 0; i < ' World'.length; i++)\n *   await page.keyboard.press('ArrowLeft');\n * await page.keyboard.up('Shift');\n *\n * await page.keyboard.press('Backspace');\n * // Result text will end up saying 'Hello!'\n * ```\n *\n * @example\n * An example of pressing `A`\n * ```js\n * await page.keyboard.down('Shift');\n * await page.keyboard.press('KeyA');\n * await page.keyboard.up('Shift');\n * ```\n *\n * @public\n */\nclass Keyboard {\n    /**\n     * @internal\n     */\n    constructor(client) {\n        _Keyboard_instances.add(this);\n        _Keyboard_client.set(this, void 0);\n        _Keyboard_pressedKeys.set(this, new Set());\n        /**\n         * @internal\n         */\n        this._modifiers = 0;\n        __classPrivateFieldSet(this, _Keyboard_client, client, \"f\");\n    }\n    /**\n     * Dispatches a `keydown` event.\n     *\n     * @remarks\n     * If `key` is a single character and no modifier keys besides `Shift`\n     * are being held down, a `keypress`/`input` event will also generated.\n     * The `text` option can be specified to force an input event to be generated.\n     * If `key` is a modifier key, `Shift`, `Meta`, `Control`, or `Alt`,\n     * subsequent key presses will be sent with that modifier active.\n     * To release the modifier key, use {@link Keyboard.up}.\n     *\n     * After the key is pressed once, subsequent calls to\n     * {@link Keyboard.down} will have\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/repeat | repeat}\n     * set to true. To release the key, use {@link Keyboard.up}.\n     *\n     * Modifier keys DO influence {@link Keyboard.down}.\n     * Holding down `Shift` will type the text in upper case.\n     *\n     * @param key - Name of key to press, such as `ArrowLeft`.\n     * See {@link KeyInput} for a list of all key names.\n     *\n     * @param options - An object of options. Accepts text which, if specified,\n     * generates an input event with this text.\n     */\n    async down(key, options = { text: undefined }) {\n        const description = __classPrivateFieldGet(this, _Keyboard_instances, \"m\", _Keyboard_keyDescriptionForString).call(this, key);\n        const autoRepeat = __classPrivateFieldGet(this, _Keyboard_pressedKeys, \"f\").has(description.code);\n        __classPrivateFieldGet(this, _Keyboard_pressedKeys, \"f\").add(description.code);\n        this._modifiers |= __classPrivateFieldGet(this, _Keyboard_instances, \"m\", _Keyboard_modifierBit).call(this, description.key);\n        const text = options.text === undefined ? description.text : options.text;\n        await __classPrivateFieldGet(this, _Keyboard_client, \"f\").send('Input.dispatchKeyEvent', {\n            type: text ? 'keyDown' : 'rawKeyDown',\n            modifiers: this._modifiers,\n            windowsVirtualKeyCode: description.keyCode,\n            code: description.code,\n            key: description.key,\n            text: text,\n            unmodifiedText: text,\n            autoRepeat,\n            location: description.location,\n            isKeypad: description.location === 3,\n        });\n    }\n    /**\n     * Dispatches a `keyup` event.\n     *\n     * @param key - Name of key to release, such as `ArrowLeft`.\n     * See {@link KeyInput | KeyInput}\n     * for a list of all key names.\n     */\n    async up(key) {\n        const description = __classPrivateFieldGet(this, _Keyboard_instances, \"m\", _Keyboard_keyDescriptionForString).call(this, key);\n        this._modifiers &= ~__classPrivateFieldGet(this, _Keyboard_instances, \"m\", _Keyboard_modifierBit).call(this, description.key);\n        __classPrivateFieldGet(this, _Keyboard_pressedKeys, \"f\").delete(description.code);\n        await __classPrivateFieldGet(this, _Keyboard_client, \"f\").send('Input.dispatchKeyEvent', {\n            type: 'keyUp',\n            modifiers: this._modifiers,\n            key: description.key,\n            windowsVirtualKeyCode: description.keyCode,\n            code: description.code,\n            location: description.location,\n        });\n    }\n    /**\n     * Dispatches a `keypress` and `input` event.\n     * This does not send a `keydown` or `keyup` event.\n     *\n     * @remarks\n     * Modifier keys DO NOT effect {@link Keyboard.sendCharacter | Keyboard.sendCharacter}.\n     * Holding down `Shift` will not type the text in upper case.\n     *\n     * @example\n     * ```js\n     * page.keyboard.sendCharacter('嗨');\n     * ```\n     *\n     * @param char - Character to send into the page.\n     */\n    async sendCharacter(char) {\n        await __classPrivateFieldGet(this, _Keyboard_client, \"f\").send('Input.insertText', { text: char });\n    }\n    charIsKey(char) {\n        return !!_USKeyboardLayout_js__WEBPACK_IMPORTED_MODULE_1__._keyDefinitions[char];\n    }\n    /**\n     * Sends a `keydown`, `keypress`/`input`,\n     * and `keyup` event for each character in the text.\n     *\n     * @remarks\n     * To press a special key, like `Control` or `ArrowDown`,\n     * use {@link Keyboard.press}.\n     *\n     * Modifier keys DO NOT effect `keyboard.type`.\n     * Holding down `Shift` will not type the text in upper case.\n     *\n     * @example\n     * ```js\n     * await page.keyboard.type('Hello'); // Types instantly\n     * await page.keyboard.type('World', {delay: 100}); // Types slower, like a user\n     * ```\n     *\n     * @param text - A text to type into a focused element.\n     * @param options - An object of options. Accepts delay which,\n     * if specified, is the time to wait between `keydown` and `keyup` in milliseconds.\n     * Defaults to 0.\n     */\n    async type(text, options = {}) {\n        const delay = options.delay || undefined;\n        for (const char of text) {\n            if (this.charIsKey(char)) {\n                await this.press(char, { delay });\n            }\n            else {\n                if (delay) {\n                    await new Promise((f) => {\n                        return setTimeout(f, delay);\n                    });\n                }\n                await this.sendCharacter(char);\n            }\n        }\n    }\n    /**\n     * Shortcut for {@link Keyboard.down}\n     * and {@link Keyboard.up}.\n     *\n     * @remarks\n     * If `key` is a single character and no modifier keys besides `Shift`\n     * are being held down, a `keypress`/`input` event will also generated.\n     * The `text` option can be specified to force an input event to be generated.\n     *\n     * Modifier keys DO effect {@link Keyboard.press}.\n     * Holding down `Shift` will type the text in upper case.\n     *\n     * @param key - Name of key to press, such as `ArrowLeft`.\n     * See {@link KeyInput} for a list of all key names.\n     *\n     * @param options - An object of options. Accepts text which, if specified,\n     * generates an input event with this text. Accepts delay which,\n     * if specified, is the time to wait between `keydown` and `keyup` in milliseconds.\n     * Defaults to 0.\n     */\n    async press(key, options = {}) {\n        const { delay = null } = options;\n        await this.down(key, options);\n        if (delay) {\n            await new Promise((f) => {\n                return setTimeout(f, options.delay);\n            });\n        }\n        await this.up(key);\n    }\n}\n_Keyboard_client = new WeakMap(), _Keyboard_pressedKeys = new WeakMap(), _Keyboard_instances = new WeakSet(), _Keyboard_modifierBit = function _Keyboard_modifierBit(key) {\n    if (key === 'Alt') {\n        return 1;\n    }\n    if (key === 'Control') {\n        return 2;\n    }\n    if (key === 'Meta') {\n        return 4;\n    }\n    if (key === 'Shift') {\n        return 8;\n    }\n    return 0;\n}, _Keyboard_keyDescriptionForString = function _Keyboard_keyDescriptionForString(keyString) {\n    const shift = this._modifiers & 8;\n    const description = {\n        key: '',\n        keyCode: 0,\n        code: '',\n        text: '',\n        location: 0,\n    };\n    const definition = _USKeyboardLayout_js__WEBPACK_IMPORTED_MODULE_1__._keyDefinitions[keyString];\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(definition, `Unknown key: \"${keyString}\"`);\n    if (definition.key) {\n        description.key = definition.key;\n    }\n    if (shift && definition.shiftKey) {\n        description.key = definition.shiftKey;\n    }\n    if (definition.keyCode) {\n        description.keyCode = definition.keyCode;\n    }\n    if (shift && definition.shiftKeyCode) {\n        description.keyCode = definition.shiftKeyCode;\n    }\n    if (definition.code) {\n        description.code = definition.code;\n    }\n    if (definition.location) {\n        description.location = definition.location;\n    }\n    if (description.key.length === 1) {\n        description.text = description.key;\n    }\n    if (definition.text) {\n        description.text = definition.text;\n    }\n    if (shift && definition.shiftText) {\n        description.text = definition.shiftText;\n    }\n    // if any modifiers besides shift are pressed, no text should be sent\n    if (this._modifiers & ~8) {\n        description.text = '';\n    }\n    return description;\n};\n/**\n * The Mouse class operates in main-frame CSS pixels\n * relative to the top-left corner of the viewport.\n * @remarks\n * Every `page` object has its own Mouse, accessible with [`page.mouse`](#pagemouse).\n *\n * @example\n * ```js\n * // Using ‘page.mouse’ to trace a 100x100 square.\n * await page.mouse.move(0, 0);\n * await page.mouse.down();\n * await page.mouse.move(0, 100);\n * await page.mouse.move(100, 100);\n * await page.mouse.move(100, 0);\n * await page.mouse.move(0, 0);\n * await page.mouse.up();\n * ```\n *\n * **Note**: The mouse events trigger synthetic `MouseEvent`s.\n * This means that it does not fully replicate the functionality of what a normal user\n * would be able to do with their mouse.\n *\n * For example, dragging and selecting text is not possible using `page.mouse`.\n * Instead, you can use the {@link https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/getSelection | `DocumentOrShadowRoot.getSelection()`} functionality implemented in the platform.\n *\n * @example\n * For example, if you want to select all content between nodes:\n * ```js\n * await page.evaluate((from, to) => {\n *   const selection = from.getRootNode().getSelection();\n *   const range = document.createRange();\n *   range.setStartBefore(from);\n *   range.setEndAfter(to);\n *   selection.removeAllRanges();\n *   selection.addRange(range);\n * }, fromJSHandle, toJSHandle);\n * ```\n * If you then would want to copy-paste your selection, you can use the clipboard api:\n * ```js\n * // The clipboard api does not allow you to copy, unless the tab is focused.\n * await page.bringToFront();\n * await page.evaluate(() => {\n *   // Copy the selected content to the clipboard\n *   document.execCommand('copy');\n *   // Obtain the content of the clipboard as a string\n *   return navigator.clipboard.readText();\n * });\n * ```\n * **Note**: If you want access to the clipboard API,\n * you have to give it permission to do so:\n * ```js\n * await browser.defaultBrowserContext().overridePermissions(\n *   '<your origin>', ['clipboard-read', 'clipboard-write']\n * );\n * ```\n * @public\n */\nclass Mouse {\n    /**\n     * @internal\n     */\n    constructor(client, keyboard) {\n        _Mouse_client.set(this, void 0);\n        _Mouse_keyboard.set(this, void 0);\n        _Mouse_x.set(this, 0);\n        _Mouse_y.set(this, 0);\n        _Mouse_button.set(this, 'none');\n        __classPrivateFieldSet(this, _Mouse_client, client, \"f\");\n        __classPrivateFieldSet(this, _Mouse_keyboard, keyboard, \"f\");\n    }\n    /**\n     * Dispatches a `mousemove` event.\n     * @param x - Horizontal position of the mouse.\n     * @param y - Vertical position of the mouse.\n     * @param options - Optional object. If specified, the `steps` property\n     * sends intermediate `mousemove` events when set to `1` (default).\n     */\n    async move(x, y, options = {}) {\n        const { steps = 1 } = options;\n        const fromX = __classPrivateFieldGet(this, _Mouse_x, \"f\"), fromY = __classPrivateFieldGet(this, _Mouse_y, \"f\");\n        __classPrivateFieldSet(this, _Mouse_x, x, \"f\");\n        __classPrivateFieldSet(this, _Mouse_y, y, \"f\");\n        for (let i = 1; i <= steps; i++) {\n            await __classPrivateFieldGet(this, _Mouse_client, \"f\").send('Input.dispatchMouseEvent', {\n                type: 'mouseMoved',\n                button: __classPrivateFieldGet(this, _Mouse_button, \"f\"),\n                x: fromX + (__classPrivateFieldGet(this, _Mouse_x, \"f\") - fromX) * (i / steps),\n                y: fromY + (__classPrivateFieldGet(this, _Mouse_y, \"f\") - fromY) * (i / steps),\n                modifiers: __classPrivateFieldGet(this, _Mouse_keyboard, \"f\")._modifiers,\n            });\n        }\n    }\n    /**\n     * Shortcut for `mouse.move`, `mouse.down` and `mouse.up`.\n     * @param x - Horizontal position of the mouse.\n     * @param y - Vertical position of the mouse.\n     * @param options - Optional `MouseOptions`.\n     */\n    async click(x, y, options = {}) {\n        const { delay = null } = options;\n        if (delay !== null) {\n            await this.move(x, y);\n            await this.down(options);\n            await new Promise((f) => {\n                return setTimeout(f, delay);\n            });\n            await this.up(options);\n        }\n        else {\n            await this.move(x, y);\n            await this.down(options);\n            await this.up(options);\n        }\n    }\n    /**\n     * Dispatches a `mousedown` event.\n     * @param options - Optional `MouseOptions`.\n     */\n    async down(options = {}) {\n        const { button = 'left', clickCount = 1 } = options;\n        __classPrivateFieldSet(this, _Mouse_button, button, \"f\");\n        await __classPrivateFieldGet(this, _Mouse_client, \"f\").send('Input.dispatchMouseEvent', {\n            type: 'mousePressed',\n            button,\n            x: __classPrivateFieldGet(this, _Mouse_x, \"f\"),\n            y: __classPrivateFieldGet(this, _Mouse_y, \"f\"),\n            modifiers: __classPrivateFieldGet(this, _Mouse_keyboard, \"f\")._modifiers,\n            clickCount,\n        });\n    }\n    /**\n     * Dispatches a `mouseup` event.\n     * @param options - Optional `MouseOptions`.\n     */\n    async up(options = {}) {\n        const { button = 'left', clickCount = 1 } = options;\n        __classPrivateFieldSet(this, _Mouse_button, 'none', \"f\");\n        await __classPrivateFieldGet(this, _Mouse_client, \"f\").send('Input.dispatchMouseEvent', {\n            type: 'mouseReleased',\n            button,\n            x: __classPrivateFieldGet(this, _Mouse_x, \"f\"),\n            y: __classPrivateFieldGet(this, _Mouse_y, \"f\"),\n            modifiers: __classPrivateFieldGet(this, _Mouse_keyboard, \"f\")._modifiers,\n            clickCount,\n        });\n    }\n    /**\n     * Dispatches a `mousewheel` event.\n     * @param options - Optional: `MouseWheelOptions`.\n     *\n     * @example\n     * An example of zooming into an element:\n     * ```js\n     * await page.goto('https://mdn.mozillademos.org/en-US/docs/Web/API/Element/wheel_event$samples/Scaling_an_element_via_the_wheel?revision=1587366');\n     *\n     * const elem = await page.$('div');\n     * const boundingBox = await elem.boundingBox();\n     * await page.mouse.move(\n     *   boundingBox.x + boundingBox.width / 2,\n     *   boundingBox.y + boundingBox.height / 2\n     * );\n     *\n     * await page.mouse.wheel({ deltaY: -100 })\n     * ```\n     */\n    async wheel(options = {}) {\n        const { deltaX = 0, deltaY = 0 } = options;\n        await __classPrivateFieldGet(this, _Mouse_client, \"f\").send('Input.dispatchMouseEvent', {\n            type: 'mouseWheel',\n            x: __classPrivateFieldGet(this, _Mouse_x, \"f\"),\n            y: __classPrivateFieldGet(this, _Mouse_y, \"f\"),\n            deltaX,\n            deltaY,\n            modifiers: __classPrivateFieldGet(this, _Mouse_keyboard, \"f\")._modifiers,\n            pointerType: 'mouse',\n        });\n    }\n    /**\n     * Dispatches a `drag` event.\n     * @param start - starting point for drag\n     * @param target - point to drag to\n     */\n    async drag(start, target) {\n        const promise = new Promise((resolve) => {\n            __classPrivateFieldGet(this, _Mouse_client, \"f\").once('Input.dragIntercepted', (event) => {\n                return resolve(event.data);\n            });\n        });\n        await this.move(start.x, start.y);\n        await this.down();\n        await this.move(target.x, target.y);\n        return promise;\n    }\n    /**\n     * Dispatches a `dragenter` event.\n     * @param target - point for emitting `dragenter` event\n     * @param data - drag data containing items and operations mask\n     */\n    async dragEnter(target, data) {\n        await __classPrivateFieldGet(this, _Mouse_client, \"f\").send('Input.dispatchDragEvent', {\n            type: 'dragEnter',\n            x: target.x,\n            y: target.y,\n            modifiers: __classPrivateFieldGet(this, _Mouse_keyboard, \"f\")._modifiers,\n            data,\n        });\n    }\n    /**\n     * Dispatches a `dragover` event.\n     * @param target - point for emitting `dragover` event\n     * @param data - drag data containing items and operations mask\n     */\n    async dragOver(target, data) {\n        await __classPrivateFieldGet(this, _Mouse_client, \"f\").send('Input.dispatchDragEvent', {\n            type: 'dragOver',\n            x: target.x,\n            y: target.y,\n            modifiers: __classPrivateFieldGet(this, _Mouse_keyboard, \"f\")._modifiers,\n            data,\n        });\n    }\n    /**\n     * Performs a dragenter, dragover, and drop in sequence.\n     * @param target - point to drop on\n     * @param data - drag data containing items and operations mask\n     */\n    async drop(target, data) {\n        await __classPrivateFieldGet(this, _Mouse_client, \"f\").send('Input.dispatchDragEvent', {\n            type: 'drop',\n            x: target.x,\n            y: target.y,\n            modifiers: __classPrivateFieldGet(this, _Mouse_keyboard, \"f\")._modifiers,\n            data,\n        });\n    }\n    /**\n     * Performs a drag, dragenter, dragover, and drop in sequence.\n     * @param target - point to drag from\n     * @param target - point to drop on\n     * @param options - An object of options. Accepts delay which,\n     * if specified, is the time to wait between `dragover` and `drop` in milliseconds.\n     * Defaults to 0.\n     */\n    async dragAndDrop(start, target, options = {}) {\n        const { delay = null } = options;\n        const data = await this.drag(start, target);\n        await this.dragEnter(target, data);\n        await this.dragOver(target, data);\n        if (delay) {\n            await new Promise((resolve) => {\n                return setTimeout(resolve, delay);\n            });\n        }\n        await this.drop(target, data);\n        await this.up();\n    }\n}\n_Mouse_client = new WeakMap(), _Mouse_keyboard = new WeakMap(), _Mouse_x = new WeakMap(), _Mouse_y = new WeakMap(), _Mouse_button = new WeakMap();\n/**\n * The Touchscreen class exposes touchscreen events.\n * @public\n */\nclass Touchscreen {\n    /**\n     * @internal\n     */\n    constructor(client, keyboard) {\n        _Touchscreen_client.set(this, void 0);\n        _Touchscreen_keyboard.set(this, void 0);\n        __classPrivateFieldSet(this, _Touchscreen_client, client, \"f\");\n        __classPrivateFieldSet(this, _Touchscreen_keyboard, keyboard, \"f\");\n    }\n    /**\n     * Dispatches a `touchstart` and `touchend` event.\n     * @param x - Horizontal position of the tap.\n     * @param y - Vertical position of the tap.\n     */\n    async tap(x, y) {\n        const touchPoints = [{ x: Math.round(x), y: Math.round(y) }];\n        await __classPrivateFieldGet(this, _Touchscreen_client, \"f\").send('Input.dispatchTouchEvent', {\n            type: 'touchStart',\n            touchPoints,\n            modifiers: __classPrivateFieldGet(this, _Touchscreen_keyboard, \"f\")._modifiers,\n        });\n        await __classPrivateFieldGet(this, _Touchscreen_client, \"f\").send('Input.dispatchTouchEvent', {\n            type: 'touchEnd',\n            touchPoints: [],\n            modifiers: __classPrivateFieldGet(this, _Touchscreen_keyboard, \"f\")._modifiers,\n        });\n    }\n}\n_Touchscreen_client = new WeakMap(), _Touchscreen_keyboard = new WeakMap();\n//# sourceMappingURL=Input.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvZ29nb2FuaW1lLWFwaS9ub2RlX21vZHVsZXMvcHVwcGV0ZWVyL2xpYi9lc20vcHVwcGV0ZWVyL2NvbW1vbi9JbnB1dC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixTQUFJLElBQUksU0FBSTtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLFNBQUksSUFBSSxTQUFJO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDcUM7QUFDb0I7QUFDekQ7QUFDQTtBQUNBLDBCQUEwQixzQkFBc0I7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsb0JBQW9CO0FBQ3ZELElBQUksa0JBQWtCLE9BQU87QUFDN0I7QUFDQTtBQUNBO0FBQ0EsUUFBUSxpRUFBaUU7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixxQkFBcUI7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsa0JBQWtCO0FBQzNEO0FBQ0E7QUFDQSxRQUFRLHFCQUFxQjtBQUM3QixRQUFRO0FBQ1IsNkNBQTZDLGtCQUFrQjtBQUMvRDtBQUNBLG1DQUFtQyxvQkFBb0I7QUFDdkQ7QUFDQTtBQUNBO0FBQ0EsWUFBWSxnQkFBZ0I7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsaUJBQWlCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLHNEQUFzRDtBQUMxRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZGQUE2RixZQUFZO0FBQ3pHO0FBQ0E7QUFDQSxpQkFBaUIsaUVBQWU7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHFCQUFxQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEM7QUFDMUMsMENBQTBDLFdBQVcsR0FBRztBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsT0FBTztBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQixZQUFZLGtCQUFrQjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MscUJBQXFCO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBLFlBQVksZ0JBQWdCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQyxnQkFBZ0IsZUFBZTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixpRUFBZTtBQUN0QyxJQUFJLGtEQUFNLDhCQUE4QixVQUFVO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsa0lBQWtJO0FBQy9KO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDLGdCQUFnQixZQUFZO0FBQzVCO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixZQUFZO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDLGdCQUFnQixlQUFlO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCLGdCQUFnQixrQ0FBa0M7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCLGdCQUFnQixrQ0FBa0M7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLGNBQWM7QUFDOUM7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QixnQkFBZ0IseUJBQXlCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlEO0FBQ2pELGdCQUFnQixlQUFlO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLG9DQUFvQztBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FuaW1lZmxpeC8uL25vZGVfbW9kdWxlcy9nb2dvYW5pbWUtYXBpL25vZGVfbW9kdWxlcy9wdXBwZXRlZXIvbGliL2VzbS9wdXBwZXRlZXIvY29tbW9uL0lucHV0LmpzPzkzOWIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAnTGljZW5zZScpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICdBUyBJUycgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG52YXIgX19jbGFzc1ByaXZhdGVGaWVsZFNldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZFNldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJtXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIChraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IGYudmFsdWUgPSB2YWx1ZSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpKSwgdmFsdWU7XG59O1xudmFyIF9fY2xhc3NQcml2YXRlRmllbGRHZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRHZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcbn07XG52YXIgX0tleWJvYXJkX2luc3RhbmNlcywgX0tleWJvYXJkX2NsaWVudCwgX0tleWJvYXJkX3ByZXNzZWRLZXlzLCBfS2V5Ym9hcmRfbW9kaWZpZXJCaXQsIF9LZXlib2FyZF9rZXlEZXNjcmlwdGlvbkZvclN0cmluZywgX01vdXNlX2NsaWVudCwgX01vdXNlX2tleWJvYXJkLCBfTW91c2VfeCwgX01vdXNlX3ksIF9Nb3VzZV9idXR0b24sIF9Ub3VjaHNjcmVlbl9jbGllbnQsIF9Ub3VjaHNjcmVlbl9rZXlib2FyZDtcbmltcG9ydCB7IGFzc2VydCB9IGZyb20gJy4vYXNzZXJ0LmpzJztcbmltcG9ydCB7IF9rZXlEZWZpbml0aW9ucywgfSBmcm9tICcuL1VTS2V5Ym9hcmRMYXlvdXQuanMnO1xuLyoqXG4gKiBLZXlib2FyZCBwcm92aWRlcyBhbiBhcGkgZm9yIG1hbmFnaW5nIGEgdmlydHVhbCBrZXlib2FyZC5cbiAqIFRoZSBoaWdoIGxldmVsIGFwaSBpcyB7QGxpbmsgS2V5Ym9hcmQuXCJ0eXBlXCJ9LFxuICogd2hpY2ggdGFrZXMgcmF3IGNoYXJhY3RlcnMgYW5kIGdlbmVyYXRlcyBwcm9wZXIga2V5ZG93biwga2V5cHJlc3MvaW5wdXQsXG4gKiBhbmQga2V5dXAgZXZlbnRzIG9uIHlvdXIgcGFnZS5cbiAqXG4gKiBAcmVtYXJrc1xuICogRm9yIGZpbmVyIGNvbnRyb2wsIHlvdSBjYW4gdXNlIHtAbGluayBLZXlib2FyZC5kb3dufSxcbiAqIHtAbGluayBLZXlib2FyZC51cH0sIGFuZCB7QGxpbmsgS2V5Ym9hcmQuc2VuZENoYXJhY3Rlcn1cbiAqIHRvIG1hbnVhbGx5IGZpcmUgZXZlbnRzIGFzIGlmIHRoZXkgd2VyZSBnZW5lcmF0ZWQgZnJvbSBhIHJlYWwga2V5Ym9hcmQuXG4gKlxuICogT24gTWFjT1MsIGtleWJvYXJkIHNob3J0Y3V0cyBsaWtlIGDijJggQWAgLVxcPiBTZWxlY3QgQWxsIGRvIG5vdCB3b3JrLlxuICogU2VlIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vcHVwcGV0ZWVyL3B1cHBldGVlci9pc3N1ZXMvMTMxMyB8ICMxMzEzfS5cbiAqXG4gKiBAZXhhbXBsZVxuICogQW4gZXhhbXBsZSBvZiBob2xkaW5nIGRvd24gYFNoaWZ0YCBpbiBvcmRlciB0byBzZWxlY3QgYW5kIGRlbGV0ZSBzb21lIHRleHQ6XG4gKiBgYGBqc1xuICogYXdhaXQgcGFnZS5rZXlib2FyZC50eXBlKCdIZWxsbyBXb3JsZCEnKTtcbiAqIGF3YWl0IHBhZ2Uua2V5Ym9hcmQucHJlc3MoJ0Fycm93TGVmdCcpO1xuICpcbiAqIGF3YWl0IHBhZ2Uua2V5Ym9hcmQuZG93bignU2hpZnQnKTtcbiAqIGZvciAobGV0IGkgPSAwOyBpIDwgJyBXb3JsZCcubGVuZ3RoOyBpKyspXG4gKiAgIGF3YWl0IHBhZ2Uua2V5Ym9hcmQucHJlc3MoJ0Fycm93TGVmdCcpO1xuICogYXdhaXQgcGFnZS5rZXlib2FyZC51cCgnU2hpZnQnKTtcbiAqXG4gKiBhd2FpdCBwYWdlLmtleWJvYXJkLnByZXNzKCdCYWNrc3BhY2UnKTtcbiAqIC8vIFJlc3VsdCB0ZXh0IHdpbGwgZW5kIHVwIHNheWluZyAnSGVsbG8hJ1xuICogYGBgXG4gKlxuICogQGV4YW1wbGVcbiAqIEFuIGV4YW1wbGUgb2YgcHJlc3NpbmcgYEFgXG4gKiBgYGBqc1xuICogYXdhaXQgcGFnZS5rZXlib2FyZC5kb3duKCdTaGlmdCcpO1xuICogYXdhaXQgcGFnZS5rZXlib2FyZC5wcmVzcygnS2V5QScpO1xuICogYXdhaXQgcGFnZS5rZXlib2FyZC51cCgnU2hpZnQnKTtcbiAqIGBgYFxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIEtleWJvYXJkIHtcbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihjbGllbnQpIHtcbiAgICAgICAgX0tleWJvYXJkX2luc3RhbmNlcy5hZGQodGhpcyk7XG4gICAgICAgIF9LZXlib2FyZF9jbGllbnQuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9LZXlib2FyZF9wcmVzc2VkS2V5cy5zZXQodGhpcywgbmV3IFNldCgpKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fbW9kaWZpZXJzID0gMDtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfS2V5Ym9hcmRfY2xpZW50LCBjbGllbnQsIFwiZlwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGlzcGF0Y2hlcyBhIGBrZXlkb3duYCBldmVudC5cbiAgICAgKlxuICAgICAqIEByZW1hcmtzXG4gICAgICogSWYgYGtleWAgaXMgYSBzaW5nbGUgY2hhcmFjdGVyIGFuZCBubyBtb2RpZmllciBrZXlzIGJlc2lkZXMgYFNoaWZ0YFxuICAgICAqIGFyZSBiZWluZyBoZWxkIGRvd24sIGEgYGtleXByZXNzYC9gaW5wdXRgIGV2ZW50IHdpbGwgYWxzbyBnZW5lcmF0ZWQuXG4gICAgICogVGhlIGB0ZXh0YCBvcHRpb24gY2FuIGJlIHNwZWNpZmllZCB0byBmb3JjZSBhbiBpbnB1dCBldmVudCB0byBiZSBnZW5lcmF0ZWQuXG4gICAgICogSWYgYGtleWAgaXMgYSBtb2RpZmllciBrZXksIGBTaGlmdGAsIGBNZXRhYCwgYENvbnRyb2xgLCBvciBgQWx0YCxcbiAgICAgKiBzdWJzZXF1ZW50IGtleSBwcmVzc2VzIHdpbGwgYmUgc2VudCB3aXRoIHRoYXQgbW9kaWZpZXIgYWN0aXZlLlxuICAgICAqIFRvIHJlbGVhc2UgdGhlIG1vZGlmaWVyIGtleSwgdXNlIHtAbGluayBLZXlib2FyZC51cH0uXG4gICAgICpcbiAgICAgKiBBZnRlciB0aGUga2V5IGlzIHByZXNzZWQgb25jZSwgc3Vic2VxdWVudCBjYWxscyB0b1xuICAgICAqIHtAbGluayBLZXlib2FyZC5kb3dufSB3aWxsIGhhdmVcbiAgICAgKiB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0tleWJvYXJkRXZlbnQvcmVwZWF0IHwgcmVwZWF0fVxuICAgICAqIHNldCB0byB0cnVlLiBUbyByZWxlYXNlIHRoZSBrZXksIHVzZSB7QGxpbmsgS2V5Ym9hcmQudXB9LlxuICAgICAqXG4gICAgICogTW9kaWZpZXIga2V5cyBETyBpbmZsdWVuY2Uge0BsaW5rIEtleWJvYXJkLmRvd259LlxuICAgICAqIEhvbGRpbmcgZG93biBgU2hpZnRgIHdpbGwgdHlwZSB0aGUgdGV4dCBpbiB1cHBlciBjYXNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGtleSAtIE5hbWUgb2Yga2V5IHRvIHByZXNzLCBzdWNoIGFzIGBBcnJvd0xlZnRgLlxuICAgICAqIFNlZSB7QGxpbmsgS2V5SW5wdXR9IGZvciBhIGxpc3Qgb2YgYWxsIGtleSBuYW1lcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gQW4gb2JqZWN0IG9mIG9wdGlvbnMuIEFjY2VwdHMgdGV4dCB3aGljaCwgaWYgc3BlY2lmaWVkLFxuICAgICAqIGdlbmVyYXRlcyBhbiBpbnB1dCBldmVudCB3aXRoIHRoaXMgdGV4dC5cbiAgICAgKi9cbiAgICBhc3luYyBkb3duKGtleSwgb3B0aW9ucyA9IHsgdGV4dDogdW5kZWZpbmVkIH0pIHtcbiAgICAgICAgY29uc3QgZGVzY3JpcHRpb24gPSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9LZXlib2FyZF9pbnN0YW5jZXMsIFwibVwiLCBfS2V5Ym9hcmRfa2V5RGVzY3JpcHRpb25Gb3JTdHJpbmcpLmNhbGwodGhpcywga2V5KTtcbiAgICAgICAgY29uc3QgYXV0b1JlcGVhdCA9IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0tleWJvYXJkX3ByZXNzZWRLZXlzLCBcImZcIikuaGFzKGRlc2NyaXB0aW9uLmNvZGUpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9LZXlib2FyZF9wcmVzc2VkS2V5cywgXCJmXCIpLmFkZChkZXNjcmlwdGlvbi5jb2RlKTtcbiAgICAgICAgdGhpcy5fbW9kaWZpZXJzIHw9IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0tleWJvYXJkX2luc3RhbmNlcywgXCJtXCIsIF9LZXlib2FyZF9tb2RpZmllckJpdCkuY2FsbCh0aGlzLCBkZXNjcmlwdGlvbi5rZXkpO1xuICAgICAgICBjb25zdCB0ZXh0ID0gb3B0aW9ucy50ZXh0ID09PSB1bmRlZmluZWQgPyBkZXNjcmlwdGlvbi50ZXh0IDogb3B0aW9ucy50ZXh0O1xuICAgICAgICBhd2FpdCBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9LZXlib2FyZF9jbGllbnQsIFwiZlwiKS5zZW5kKCdJbnB1dC5kaXNwYXRjaEtleUV2ZW50Jywge1xuICAgICAgICAgICAgdHlwZTogdGV4dCA/ICdrZXlEb3duJyA6ICdyYXdLZXlEb3duJyxcbiAgICAgICAgICAgIG1vZGlmaWVyczogdGhpcy5fbW9kaWZpZXJzLFxuICAgICAgICAgICAgd2luZG93c1ZpcnR1YWxLZXlDb2RlOiBkZXNjcmlwdGlvbi5rZXlDb2RlLFxuICAgICAgICAgICAgY29kZTogZGVzY3JpcHRpb24uY29kZSxcbiAgICAgICAgICAgIGtleTogZGVzY3JpcHRpb24ua2V5LFxuICAgICAgICAgICAgdGV4dDogdGV4dCxcbiAgICAgICAgICAgIHVubW9kaWZpZWRUZXh0OiB0ZXh0LFxuICAgICAgICAgICAgYXV0b1JlcGVhdCxcbiAgICAgICAgICAgIGxvY2F0aW9uOiBkZXNjcmlwdGlvbi5sb2NhdGlvbixcbiAgICAgICAgICAgIGlzS2V5cGFkOiBkZXNjcmlwdGlvbi5sb2NhdGlvbiA9PT0gMyxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERpc3BhdGNoZXMgYSBga2V5dXBgIGV2ZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIGtleSAtIE5hbWUgb2Yga2V5IHRvIHJlbGVhc2UsIHN1Y2ggYXMgYEFycm93TGVmdGAuXG4gICAgICogU2VlIHtAbGluayBLZXlJbnB1dCB8IEtleUlucHV0fVxuICAgICAqIGZvciBhIGxpc3Qgb2YgYWxsIGtleSBuYW1lcy5cbiAgICAgKi9cbiAgICBhc3luYyB1cChrZXkpIHtcbiAgICAgICAgY29uc3QgZGVzY3JpcHRpb24gPSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9LZXlib2FyZF9pbnN0YW5jZXMsIFwibVwiLCBfS2V5Ym9hcmRfa2V5RGVzY3JpcHRpb25Gb3JTdHJpbmcpLmNhbGwodGhpcywga2V5KTtcbiAgICAgICAgdGhpcy5fbW9kaWZpZXJzICY9IH5fX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9LZXlib2FyZF9pbnN0YW5jZXMsIFwibVwiLCBfS2V5Ym9hcmRfbW9kaWZpZXJCaXQpLmNhbGwodGhpcywgZGVzY3JpcHRpb24ua2V5KTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfS2V5Ym9hcmRfcHJlc3NlZEtleXMsIFwiZlwiKS5kZWxldGUoZGVzY3JpcHRpb24uY29kZSk7XG4gICAgICAgIGF3YWl0IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0tleWJvYXJkX2NsaWVudCwgXCJmXCIpLnNlbmQoJ0lucHV0LmRpc3BhdGNoS2V5RXZlbnQnLCB7XG4gICAgICAgICAgICB0eXBlOiAna2V5VXAnLFxuICAgICAgICAgICAgbW9kaWZpZXJzOiB0aGlzLl9tb2RpZmllcnMsXG4gICAgICAgICAgICBrZXk6IGRlc2NyaXB0aW9uLmtleSxcbiAgICAgICAgICAgIHdpbmRvd3NWaXJ0dWFsS2V5Q29kZTogZGVzY3JpcHRpb24ua2V5Q29kZSxcbiAgICAgICAgICAgIGNvZGU6IGRlc2NyaXB0aW9uLmNvZGUsXG4gICAgICAgICAgICBsb2NhdGlvbjogZGVzY3JpcHRpb24ubG9jYXRpb24sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEaXNwYXRjaGVzIGEgYGtleXByZXNzYCBhbmQgYGlucHV0YCBldmVudC5cbiAgICAgKiBUaGlzIGRvZXMgbm90IHNlbmQgYSBga2V5ZG93bmAgb3IgYGtleXVwYCBldmVudC5cbiAgICAgKlxuICAgICAqIEByZW1hcmtzXG4gICAgICogTW9kaWZpZXIga2V5cyBETyBOT1QgZWZmZWN0IHtAbGluayBLZXlib2FyZC5zZW5kQ2hhcmFjdGVyIHwgS2V5Ym9hcmQuc2VuZENoYXJhY3Rlcn0uXG4gICAgICogSG9sZGluZyBkb3duIGBTaGlmdGAgd2lsbCBub3QgdHlwZSB0aGUgdGV4dCBpbiB1cHBlciBjYXNlLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGBqc1xuICAgICAqIHBhZ2Uua2V5Ym9hcmQuc2VuZENoYXJhY3Rlcign5ZeoJyk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY2hhciAtIENoYXJhY3RlciB0byBzZW5kIGludG8gdGhlIHBhZ2UuXG4gICAgICovXG4gICAgYXN5bmMgc2VuZENoYXJhY3RlcihjaGFyKSB7XG4gICAgICAgIGF3YWl0IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0tleWJvYXJkX2NsaWVudCwgXCJmXCIpLnNlbmQoJ0lucHV0Lmluc2VydFRleHQnLCB7IHRleHQ6IGNoYXIgfSk7XG4gICAgfVxuICAgIGNoYXJJc0tleShjaGFyKSB7XG4gICAgICAgIHJldHVybiAhIV9rZXlEZWZpbml0aW9uc1tjaGFyXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VuZHMgYSBga2V5ZG93bmAsIGBrZXlwcmVzc2AvYGlucHV0YCxcbiAgICAgKiBhbmQgYGtleXVwYCBldmVudCBmb3IgZWFjaCBjaGFyYWN0ZXIgaW4gdGhlIHRleHQuXG4gICAgICpcbiAgICAgKiBAcmVtYXJrc1xuICAgICAqIFRvIHByZXNzIGEgc3BlY2lhbCBrZXksIGxpa2UgYENvbnRyb2xgIG9yIGBBcnJvd0Rvd25gLFxuICAgICAqIHVzZSB7QGxpbmsgS2V5Ym9hcmQucHJlc3N9LlxuICAgICAqXG4gICAgICogTW9kaWZpZXIga2V5cyBETyBOT1QgZWZmZWN0IGBrZXlib2FyZC50eXBlYC5cbiAgICAgKiBIb2xkaW5nIGRvd24gYFNoaWZ0YCB3aWxsIG5vdCB0eXBlIHRoZSB0ZXh0IGluIHVwcGVyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYGpzXG4gICAgICogYXdhaXQgcGFnZS5rZXlib2FyZC50eXBlKCdIZWxsbycpOyAvLyBUeXBlcyBpbnN0YW50bHlcbiAgICAgKiBhd2FpdCBwYWdlLmtleWJvYXJkLnR5cGUoJ1dvcmxkJywge2RlbGF5OiAxMDB9KTsgLy8gVHlwZXMgc2xvd2VyLCBsaWtlIGEgdXNlclxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIHRleHQgLSBBIHRleHQgdG8gdHlwZSBpbnRvIGEgZm9jdXNlZCBlbGVtZW50LlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gQW4gb2JqZWN0IG9mIG9wdGlvbnMuIEFjY2VwdHMgZGVsYXkgd2hpY2gsXG4gICAgICogaWYgc3BlY2lmaWVkLCBpcyB0aGUgdGltZSB0byB3YWl0IGJldHdlZW4gYGtleWRvd25gIGFuZCBga2V5dXBgIGluIG1pbGxpc2Vjb25kcy5cbiAgICAgKiBEZWZhdWx0cyB0byAwLlxuICAgICAqL1xuICAgIGFzeW5jIHR5cGUodGV4dCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIGNvbnN0IGRlbGF5ID0gb3B0aW9ucy5kZWxheSB8fCB1bmRlZmluZWQ7XG4gICAgICAgIGZvciAoY29uc3QgY2hhciBvZiB0ZXh0KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jaGFySXNLZXkoY2hhcikpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnByZXNzKGNoYXIsIHsgZGVsYXkgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoZGVsYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgbmV3IFByb21pc2UoKGYpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGYsIGRlbGF5KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuc2VuZENoYXJhY3RlcihjaGFyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBTaG9ydGN1dCBmb3Ige0BsaW5rIEtleWJvYXJkLmRvd259XG4gICAgICogYW5kIHtAbGluayBLZXlib2FyZC51cH0uXG4gICAgICpcbiAgICAgKiBAcmVtYXJrc1xuICAgICAqIElmIGBrZXlgIGlzIGEgc2luZ2xlIGNoYXJhY3RlciBhbmQgbm8gbW9kaWZpZXIga2V5cyBiZXNpZGVzIGBTaGlmdGBcbiAgICAgKiBhcmUgYmVpbmcgaGVsZCBkb3duLCBhIGBrZXlwcmVzc2AvYGlucHV0YCBldmVudCB3aWxsIGFsc28gZ2VuZXJhdGVkLlxuICAgICAqIFRoZSBgdGV4dGAgb3B0aW9uIGNhbiBiZSBzcGVjaWZpZWQgdG8gZm9yY2UgYW4gaW5wdXQgZXZlbnQgdG8gYmUgZ2VuZXJhdGVkLlxuICAgICAqXG4gICAgICogTW9kaWZpZXIga2V5cyBETyBlZmZlY3Qge0BsaW5rIEtleWJvYXJkLnByZXNzfS5cbiAgICAgKiBIb2xkaW5nIGRvd24gYFNoaWZ0YCB3aWxsIHR5cGUgdGhlIHRleHQgaW4gdXBwZXIgY2FzZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBrZXkgLSBOYW1lIG9mIGtleSB0byBwcmVzcywgc3VjaCBhcyBgQXJyb3dMZWZ0YC5cbiAgICAgKiBTZWUge0BsaW5rIEtleUlucHV0fSBmb3IgYSBsaXN0IG9mIGFsbCBrZXkgbmFtZXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIEFuIG9iamVjdCBvZiBvcHRpb25zLiBBY2NlcHRzIHRleHQgd2hpY2gsIGlmIHNwZWNpZmllZCxcbiAgICAgKiBnZW5lcmF0ZXMgYW4gaW5wdXQgZXZlbnQgd2l0aCB0aGlzIHRleHQuIEFjY2VwdHMgZGVsYXkgd2hpY2gsXG4gICAgICogaWYgc3BlY2lmaWVkLCBpcyB0aGUgdGltZSB0byB3YWl0IGJldHdlZW4gYGtleWRvd25gIGFuZCBga2V5dXBgIGluIG1pbGxpc2Vjb25kcy5cbiAgICAgKiBEZWZhdWx0cyB0byAwLlxuICAgICAqL1xuICAgIGFzeW5jIHByZXNzKGtleSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIGNvbnN0IHsgZGVsYXkgPSBudWxsIH0gPSBvcHRpb25zO1xuICAgICAgICBhd2FpdCB0aGlzLmRvd24oa2V5LCBvcHRpb25zKTtcbiAgICAgICAgaWYgKGRlbGF5KSB7XG4gICAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZSgoZikgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGYsIG9wdGlvbnMuZGVsYXkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgdGhpcy51cChrZXkpO1xuICAgIH1cbn1cbl9LZXlib2FyZF9jbGllbnQgPSBuZXcgV2Vha01hcCgpLCBfS2V5Ym9hcmRfcHJlc3NlZEtleXMgPSBuZXcgV2Vha01hcCgpLCBfS2V5Ym9hcmRfaW5zdGFuY2VzID0gbmV3IFdlYWtTZXQoKSwgX0tleWJvYXJkX21vZGlmaWVyQml0ID0gZnVuY3Rpb24gX0tleWJvYXJkX21vZGlmaWVyQml0KGtleSkge1xuICAgIGlmIChrZXkgPT09ICdBbHQnKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgICBpZiAoa2V5ID09PSAnQ29udHJvbCcpIHtcbiAgICAgICAgcmV0dXJuIDI7XG4gICAgfVxuICAgIGlmIChrZXkgPT09ICdNZXRhJykge1xuICAgICAgICByZXR1cm4gNDtcbiAgICB9XG4gICAgaWYgKGtleSA9PT0gJ1NoaWZ0Jykge1xuICAgICAgICByZXR1cm4gODtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG59LCBfS2V5Ym9hcmRfa2V5RGVzY3JpcHRpb25Gb3JTdHJpbmcgPSBmdW5jdGlvbiBfS2V5Ym9hcmRfa2V5RGVzY3JpcHRpb25Gb3JTdHJpbmcoa2V5U3RyaW5nKSB7XG4gICAgY29uc3Qgc2hpZnQgPSB0aGlzLl9tb2RpZmllcnMgJiA4O1xuICAgIGNvbnN0IGRlc2NyaXB0aW9uID0ge1xuICAgICAgICBrZXk6ICcnLFxuICAgICAgICBrZXlDb2RlOiAwLFxuICAgICAgICBjb2RlOiAnJyxcbiAgICAgICAgdGV4dDogJycsXG4gICAgICAgIGxvY2F0aW9uOiAwLFxuICAgIH07XG4gICAgY29uc3QgZGVmaW5pdGlvbiA9IF9rZXlEZWZpbml0aW9uc1trZXlTdHJpbmddO1xuICAgIGFzc2VydChkZWZpbml0aW9uLCBgVW5rbm93biBrZXk6IFwiJHtrZXlTdHJpbmd9XCJgKTtcbiAgICBpZiAoZGVmaW5pdGlvbi5rZXkpIHtcbiAgICAgICAgZGVzY3JpcHRpb24ua2V5ID0gZGVmaW5pdGlvbi5rZXk7XG4gICAgfVxuICAgIGlmIChzaGlmdCAmJiBkZWZpbml0aW9uLnNoaWZ0S2V5KSB7XG4gICAgICAgIGRlc2NyaXB0aW9uLmtleSA9IGRlZmluaXRpb24uc2hpZnRLZXk7XG4gICAgfVxuICAgIGlmIChkZWZpbml0aW9uLmtleUNvZGUpIHtcbiAgICAgICAgZGVzY3JpcHRpb24ua2V5Q29kZSA9IGRlZmluaXRpb24ua2V5Q29kZTtcbiAgICB9XG4gICAgaWYgKHNoaWZ0ICYmIGRlZmluaXRpb24uc2hpZnRLZXlDb2RlKSB7XG4gICAgICAgIGRlc2NyaXB0aW9uLmtleUNvZGUgPSBkZWZpbml0aW9uLnNoaWZ0S2V5Q29kZTtcbiAgICB9XG4gICAgaWYgKGRlZmluaXRpb24uY29kZSkge1xuICAgICAgICBkZXNjcmlwdGlvbi5jb2RlID0gZGVmaW5pdGlvbi5jb2RlO1xuICAgIH1cbiAgICBpZiAoZGVmaW5pdGlvbi5sb2NhdGlvbikge1xuICAgICAgICBkZXNjcmlwdGlvbi5sb2NhdGlvbiA9IGRlZmluaXRpb24ubG9jYXRpb247XG4gICAgfVxuICAgIGlmIChkZXNjcmlwdGlvbi5rZXkubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGRlc2NyaXB0aW9uLnRleHQgPSBkZXNjcmlwdGlvbi5rZXk7XG4gICAgfVxuICAgIGlmIChkZWZpbml0aW9uLnRleHQpIHtcbiAgICAgICAgZGVzY3JpcHRpb24udGV4dCA9IGRlZmluaXRpb24udGV4dDtcbiAgICB9XG4gICAgaWYgKHNoaWZ0ICYmIGRlZmluaXRpb24uc2hpZnRUZXh0KSB7XG4gICAgICAgIGRlc2NyaXB0aW9uLnRleHQgPSBkZWZpbml0aW9uLnNoaWZ0VGV4dDtcbiAgICB9XG4gICAgLy8gaWYgYW55IG1vZGlmaWVycyBiZXNpZGVzIHNoaWZ0IGFyZSBwcmVzc2VkLCBubyB0ZXh0IHNob3VsZCBiZSBzZW50XG4gICAgaWYgKHRoaXMuX21vZGlmaWVycyAmIH44KSB7XG4gICAgICAgIGRlc2NyaXB0aW9uLnRleHQgPSAnJztcbiAgICB9XG4gICAgcmV0dXJuIGRlc2NyaXB0aW9uO1xufTtcbi8qKlxuICogVGhlIE1vdXNlIGNsYXNzIG9wZXJhdGVzIGluIG1haW4tZnJhbWUgQ1NTIHBpeGVsc1xuICogcmVsYXRpdmUgdG8gdGhlIHRvcC1sZWZ0IGNvcm5lciBvZiB0aGUgdmlld3BvcnQuXG4gKiBAcmVtYXJrc1xuICogRXZlcnkgYHBhZ2VgIG9iamVjdCBoYXMgaXRzIG93biBNb3VzZSwgYWNjZXNzaWJsZSB3aXRoIFtgcGFnZS5tb3VzZWBdKCNwYWdlbW91c2UpLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqc1xuICogLy8gVXNpbmcg4oCYcGFnZS5tb3VzZeKAmSB0byB0cmFjZSBhIDEwMHgxMDAgc3F1YXJlLlxuICogYXdhaXQgcGFnZS5tb3VzZS5tb3ZlKDAsIDApO1xuICogYXdhaXQgcGFnZS5tb3VzZS5kb3duKCk7XG4gKiBhd2FpdCBwYWdlLm1vdXNlLm1vdmUoMCwgMTAwKTtcbiAqIGF3YWl0IHBhZ2UubW91c2UubW92ZSgxMDAsIDEwMCk7XG4gKiBhd2FpdCBwYWdlLm1vdXNlLm1vdmUoMTAwLCAwKTtcbiAqIGF3YWl0IHBhZ2UubW91c2UubW92ZSgwLCAwKTtcbiAqIGF3YWl0IHBhZ2UubW91c2UudXAoKTtcbiAqIGBgYFxuICpcbiAqICoqTm90ZSoqOiBUaGUgbW91c2UgZXZlbnRzIHRyaWdnZXIgc3ludGhldGljIGBNb3VzZUV2ZW50YHMuXG4gKiBUaGlzIG1lYW5zIHRoYXQgaXQgZG9lcyBub3QgZnVsbHkgcmVwbGljYXRlIHRoZSBmdW5jdGlvbmFsaXR5IG9mIHdoYXQgYSBub3JtYWwgdXNlclxuICogd291bGQgYmUgYWJsZSB0byBkbyB3aXRoIHRoZWlyIG1vdXNlLlxuICpcbiAqIEZvciBleGFtcGxlLCBkcmFnZ2luZyBhbmQgc2VsZWN0aW5nIHRleHQgaXMgbm90IHBvc3NpYmxlIHVzaW5nIGBwYWdlLm1vdXNlYC5cbiAqIEluc3RlYWQsIHlvdSBjYW4gdXNlIHRoZSB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0RvY3VtZW50T3JTaGFkb3dSb290L2dldFNlbGVjdGlvbiB8IGBEb2N1bWVudE9yU2hhZG93Um9vdC5nZXRTZWxlY3Rpb24oKWB9IGZ1bmN0aW9uYWxpdHkgaW1wbGVtZW50ZWQgaW4gdGhlIHBsYXRmb3JtLlxuICpcbiAqIEBleGFtcGxlXG4gKiBGb3IgZXhhbXBsZSwgaWYgeW91IHdhbnQgdG8gc2VsZWN0IGFsbCBjb250ZW50IGJldHdlZW4gbm9kZXM6XG4gKiBgYGBqc1xuICogYXdhaXQgcGFnZS5ldmFsdWF0ZSgoZnJvbSwgdG8pID0+IHtcbiAqICAgY29uc3Qgc2VsZWN0aW9uID0gZnJvbS5nZXRSb290Tm9kZSgpLmdldFNlbGVjdGlvbigpO1xuICogICBjb25zdCByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gKiAgIHJhbmdlLnNldFN0YXJ0QmVmb3JlKGZyb20pO1xuICogICByYW5nZS5zZXRFbmRBZnRlcih0byk7XG4gKiAgIHNlbGVjdGlvbi5yZW1vdmVBbGxSYW5nZXMoKTtcbiAqICAgc2VsZWN0aW9uLmFkZFJhbmdlKHJhbmdlKTtcbiAqIH0sIGZyb21KU0hhbmRsZSwgdG9KU0hhbmRsZSk7XG4gKiBgYGBcbiAqIElmIHlvdSB0aGVuIHdvdWxkIHdhbnQgdG8gY29weS1wYXN0ZSB5b3VyIHNlbGVjdGlvbiwgeW91IGNhbiB1c2UgdGhlIGNsaXBib2FyZCBhcGk6XG4gKiBgYGBqc1xuICogLy8gVGhlIGNsaXBib2FyZCBhcGkgZG9lcyBub3QgYWxsb3cgeW91IHRvIGNvcHksIHVubGVzcyB0aGUgdGFiIGlzIGZvY3VzZWQuXG4gKiBhd2FpdCBwYWdlLmJyaW5nVG9Gcm9udCgpO1xuICogYXdhaXQgcGFnZS5ldmFsdWF0ZSgoKSA9PiB7XG4gKiAgIC8vIENvcHkgdGhlIHNlbGVjdGVkIGNvbnRlbnQgdG8gdGhlIGNsaXBib2FyZFxuICogICBkb2N1bWVudC5leGVjQ29tbWFuZCgnY29weScpO1xuICogICAvLyBPYnRhaW4gdGhlIGNvbnRlbnQgb2YgdGhlIGNsaXBib2FyZCBhcyBhIHN0cmluZ1xuICogICByZXR1cm4gbmF2aWdhdG9yLmNsaXBib2FyZC5yZWFkVGV4dCgpO1xuICogfSk7XG4gKiBgYGBcbiAqICoqTm90ZSoqOiBJZiB5b3Ugd2FudCBhY2Nlc3MgdG8gdGhlIGNsaXBib2FyZCBBUEksXG4gKiB5b3UgaGF2ZSB0byBnaXZlIGl0IHBlcm1pc3Npb24gdG8gZG8gc286XG4gKiBgYGBqc1xuICogYXdhaXQgYnJvd3Nlci5kZWZhdWx0QnJvd3NlckNvbnRleHQoKS5vdmVycmlkZVBlcm1pc3Npb25zKFxuICogICAnPHlvdXIgb3JpZ2luPicsIFsnY2xpcGJvYXJkLXJlYWQnLCAnY2xpcGJvYXJkLXdyaXRlJ11cbiAqICk7XG4gKiBgYGBcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIE1vdXNlIHtcbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihjbGllbnQsIGtleWJvYXJkKSB7XG4gICAgICAgIF9Nb3VzZV9jbGllbnQuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9Nb3VzZV9rZXlib2FyZC5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX01vdXNlX3guc2V0KHRoaXMsIDApO1xuICAgICAgICBfTW91c2VfeS5zZXQodGhpcywgMCk7XG4gICAgICAgIF9Nb3VzZV9idXR0b24uc2V0KHRoaXMsICdub25lJyk7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX01vdXNlX2NsaWVudCwgY2xpZW50LCBcImZcIik7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX01vdXNlX2tleWJvYXJkLCBrZXlib2FyZCwgXCJmXCIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEaXNwYXRjaGVzIGEgYG1vdXNlbW92ZWAgZXZlbnQuXG4gICAgICogQHBhcmFtIHggLSBIb3Jpem9udGFsIHBvc2l0aW9uIG9mIHRoZSBtb3VzZS5cbiAgICAgKiBAcGFyYW0geSAtIFZlcnRpY2FsIHBvc2l0aW9uIG9mIHRoZSBtb3VzZS5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbmFsIG9iamVjdC4gSWYgc3BlY2lmaWVkLCB0aGUgYHN0ZXBzYCBwcm9wZXJ0eVxuICAgICAqIHNlbmRzIGludGVybWVkaWF0ZSBgbW91c2Vtb3ZlYCBldmVudHMgd2hlbiBzZXQgdG8gYDFgIChkZWZhdWx0KS5cbiAgICAgKi9cbiAgICBhc3luYyBtb3ZlKHgsIHksIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBjb25zdCB7IHN0ZXBzID0gMSB9ID0gb3B0aW9ucztcbiAgICAgICAgY29uc3QgZnJvbVggPSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Nb3VzZV94LCBcImZcIiksIGZyb21ZID0gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTW91c2VfeSwgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9Nb3VzZV94LCB4LCBcImZcIik7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX01vdXNlX3ksIHksIFwiZlwiKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gc3RlcHM7IGkrKykge1xuICAgICAgICAgICAgYXdhaXQgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTW91c2VfY2xpZW50LCBcImZcIikuc2VuZCgnSW5wdXQuZGlzcGF0Y2hNb3VzZUV2ZW50Jywge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdtb3VzZU1vdmVkJyxcbiAgICAgICAgICAgICAgICBidXR0b246IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX01vdXNlX2J1dHRvbiwgXCJmXCIpLFxuICAgICAgICAgICAgICAgIHg6IGZyb21YICsgKF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX01vdXNlX3gsIFwiZlwiKSAtIGZyb21YKSAqIChpIC8gc3RlcHMpLFxuICAgICAgICAgICAgICAgIHk6IGZyb21ZICsgKF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX01vdXNlX3ksIFwiZlwiKSAtIGZyb21ZKSAqIChpIC8gc3RlcHMpLFxuICAgICAgICAgICAgICAgIG1vZGlmaWVyczogX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTW91c2Vfa2V5Ym9hcmQsIFwiZlwiKS5fbW9kaWZpZXJzLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogU2hvcnRjdXQgZm9yIGBtb3VzZS5tb3ZlYCwgYG1vdXNlLmRvd25gIGFuZCBgbW91c2UudXBgLlxuICAgICAqIEBwYXJhbSB4IC0gSG9yaXpvbnRhbCBwb3NpdGlvbiBvZiB0aGUgbW91c2UuXG4gICAgICogQHBhcmFtIHkgLSBWZXJ0aWNhbCBwb3NpdGlvbiBvZiB0aGUgbW91c2UuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25hbCBgTW91c2VPcHRpb25zYC5cbiAgICAgKi9cbiAgICBhc3luYyBjbGljayh4LCB5LCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgY29uc3QgeyBkZWxheSA9IG51bGwgfSA9IG9wdGlvbnM7XG4gICAgICAgIGlmIChkZWxheSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5tb3ZlKHgsIHkpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5kb3duKG9wdGlvbnMpO1xuICAgICAgICAgICAgYXdhaXQgbmV3IFByb21pc2UoKGYpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2V0VGltZW91dChmLCBkZWxheSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMudXAob3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLm1vdmUoeCwgeSk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmRvd24ob3B0aW9ucyk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnVwKG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERpc3BhdGNoZXMgYSBgbW91c2Vkb3duYCBldmVudC5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbmFsIGBNb3VzZU9wdGlvbnNgLlxuICAgICAqL1xuICAgIGFzeW5jIGRvd24ob3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIGNvbnN0IHsgYnV0dG9uID0gJ2xlZnQnLCBjbGlja0NvdW50ID0gMSB9ID0gb3B0aW9ucztcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfTW91c2VfYnV0dG9uLCBidXR0b24sIFwiZlwiKTtcbiAgICAgICAgYXdhaXQgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTW91c2VfY2xpZW50LCBcImZcIikuc2VuZCgnSW5wdXQuZGlzcGF0Y2hNb3VzZUV2ZW50Jywge1xuICAgICAgICAgICAgdHlwZTogJ21vdXNlUHJlc3NlZCcsXG4gICAgICAgICAgICBidXR0b24sXG4gICAgICAgICAgICB4OiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Nb3VzZV94LCBcImZcIiksXG4gICAgICAgICAgICB5OiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Nb3VzZV95LCBcImZcIiksXG4gICAgICAgICAgICBtb2RpZmllcnM6IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX01vdXNlX2tleWJvYXJkLCBcImZcIikuX21vZGlmaWVycyxcbiAgICAgICAgICAgIGNsaWNrQ291bnQsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEaXNwYXRjaGVzIGEgYG1vdXNldXBgIGV2ZW50LlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9uYWwgYE1vdXNlT3B0aW9uc2AuXG4gICAgICovXG4gICAgYXN5bmMgdXAob3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIGNvbnN0IHsgYnV0dG9uID0gJ2xlZnQnLCBjbGlja0NvdW50ID0gMSB9ID0gb3B0aW9ucztcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfTW91c2VfYnV0dG9uLCAnbm9uZScsIFwiZlwiKTtcbiAgICAgICAgYXdhaXQgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTW91c2VfY2xpZW50LCBcImZcIikuc2VuZCgnSW5wdXQuZGlzcGF0Y2hNb3VzZUV2ZW50Jywge1xuICAgICAgICAgICAgdHlwZTogJ21vdXNlUmVsZWFzZWQnLFxuICAgICAgICAgICAgYnV0dG9uLFxuICAgICAgICAgICAgeDogX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTW91c2VfeCwgXCJmXCIpLFxuICAgICAgICAgICAgeTogX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTW91c2VfeSwgXCJmXCIpLFxuICAgICAgICAgICAgbW9kaWZpZXJzOiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Nb3VzZV9rZXlib2FyZCwgXCJmXCIpLl9tb2RpZmllcnMsXG4gICAgICAgICAgICBjbGlja0NvdW50LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGlzcGF0Y2hlcyBhIGBtb3VzZXdoZWVsYCBldmVudC5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbmFsOiBgTW91c2VXaGVlbE9wdGlvbnNgLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBBbiBleGFtcGxlIG9mIHpvb21pbmcgaW50byBhbiBlbGVtZW50OlxuICAgICAqIGBgYGpzXG4gICAgICogYXdhaXQgcGFnZS5nb3RvKCdodHRwczovL21kbi5tb3ppbGxhZGVtb3Mub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9FbGVtZW50L3doZWVsX2V2ZW50JHNhbXBsZXMvU2NhbGluZ19hbl9lbGVtZW50X3ZpYV90aGVfd2hlZWw/cmV2aXNpb249MTU4NzM2NicpO1xuICAgICAqXG4gICAgICogY29uc3QgZWxlbSA9IGF3YWl0IHBhZ2UuJCgnZGl2Jyk7XG4gICAgICogY29uc3QgYm91bmRpbmdCb3ggPSBhd2FpdCBlbGVtLmJvdW5kaW5nQm94KCk7XG4gICAgICogYXdhaXQgcGFnZS5tb3VzZS5tb3ZlKFxuICAgICAqICAgYm91bmRpbmdCb3gueCArIGJvdW5kaW5nQm94LndpZHRoIC8gMixcbiAgICAgKiAgIGJvdW5kaW5nQm94LnkgKyBib3VuZGluZ0JveC5oZWlnaHQgLyAyXG4gICAgICogKTtcbiAgICAgKlxuICAgICAqIGF3YWl0IHBhZ2UubW91c2Uud2hlZWwoeyBkZWx0YVk6IC0xMDAgfSlcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBhc3luYyB3aGVlbChvcHRpb25zID0ge30pIHtcbiAgICAgICAgY29uc3QgeyBkZWx0YVggPSAwLCBkZWx0YVkgPSAwIH0gPSBvcHRpb25zO1xuICAgICAgICBhd2FpdCBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Nb3VzZV9jbGllbnQsIFwiZlwiKS5zZW5kKCdJbnB1dC5kaXNwYXRjaE1vdXNlRXZlbnQnLCB7XG4gICAgICAgICAgICB0eXBlOiAnbW91c2VXaGVlbCcsXG4gICAgICAgICAgICB4OiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Nb3VzZV94LCBcImZcIiksXG4gICAgICAgICAgICB5OiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Nb3VzZV95LCBcImZcIiksXG4gICAgICAgICAgICBkZWx0YVgsXG4gICAgICAgICAgICBkZWx0YVksXG4gICAgICAgICAgICBtb2RpZmllcnM6IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX01vdXNlX2tleWJvYXJkLCBcImZcIikuX21vZGlmaWVycyxcbiAgICAgICAgICAgIHBvaW50ZXJUeXBlOiAnbW91c2UnLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGlzcGF0Y2hlcyBhIGBkcmFnYCBldmVudC5cbiAgICAgKiBAcGFyYW0gc3RhcnQgLSBzdGFydGluZyBwb2ludCBmb3IgZHJhZ1xuICAgICAqIEBwYXJhbSB0YXJnZXQgLSBwb2ludCB0byBkcmFnIHRvXG4gICAgICovXG4gICAgYXN5bmMgZHJhZyhzdGFydCwgdGFyZ2V0KSB7XG4gICAgICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTW91c2VfY2xpZW50LCBcImZcIikub25jZSgnSW5wdXQuZHJhZ0ludGVyY2VwdGVkJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoZXZlbnQuZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGF3YWl0IHRoaXMubW92ZShzdGFydC54LCBzdGFydC55KTtcbiAgICAgICAgYXdhaXQgdGhpcy5kb3duKCk7XG4gICAgICAgIGF3YWl0IHRoaXMubW92ZSh0YXJnZXQueCwgdGFyZ2V0LnkpO1xuICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGlzcGF0Y2hlcyBhIGBkcmFnZW50ZXJgIGV2ZW50LlxuICAgICAqIEBwYXJhbSB0YXJnZXQgLSBwb2ludCBmb3IgZW1pdHRpbmcgYGRyYWdlbnRlcmAgZXZlbnRcbiAgICAgKiBAcGFyYW0gZGF0YSAtIGRyYWcgZGF0YSBjb250YWluaW5nIGl0ZW1zIGFuZCBvcGVyYXRpb25zIG1hc2tcbiAgICAgKi9cbiAgICBhc3luYyBkcmFnRW50ZXIodGFyZ2V0LCBkYXRhKSB7XG4gICAgICAgIGF3YWl0IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX01vdXNlX2NsaWVudCwgXCJmXCIpLnNlbmQoJ0lucHV0LmRpc3BhdGNoRHJhZ0V2ZW50Jywge1xuICAgICAgICAgICAgdHlwZTogJ2RyYWdFbnRlcicsXG4gICAgICAgICAgICB4OiB0YXJnZXQueCxcbiAgICAgICAgICAgIHk6IHRhcmdldC55LFxuICAgICAgICAgICAgbW9kaWZpZXJzOiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Nb3VzZV9rZXlib2FyZCwgXCJmXCIpLl9tb2RpZmllcnMsXG4gICAgICAgICAgICBkYXRhLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGlzcGF0Y2hlcyBhIGBkcmFnb3ZlcmAgZXZlbnQuXG4gICAgICogQHBhcmFtIHRhcmdldCAtIHBvaW50IGZvciBlbWl0dGluZyBgZHJhZ292ZXJgIGV2ZW50XG4gICAgICogQHBhcmFtIGRhdGEgLSBkcmFnIGRhdGEgY29udGFpbmluZyBpdGVtcyBhbmQgb3BlcmF0aW9ucyBtYXNrXG4gICAgICovXG4gICAgYXN5bmMgZHJhZ092ZXIodGFyZ2V0LCBkYXRhKSB7XG4gICAgICAgIGF3YWl0IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX01vdXNlX2NsaWVudCwgXCJmXCIpLnNlbmQoJ0lucHV0LmRpc3BhdGNoRHJhZ0V2ZW50Jywge1xuICAgICAgICAgICAgdHlwZTogJ2RyYWdPdmVyJyxcbiAgICAgICAgICAgIHg6IHRhcmdldC54LFxuICAgICAgICAgICAgeTogdGFyZ2V0LnksXG4gICAgICAgICAgICBtb2RpZmllcnM6IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX01vdXNlX2tleWJvYXJkLCBcImZcIikuX21vZGlmaWVycyxcbiAgICAgICAgICAgIGRhdGEsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhIGRyYWdlbnRlciwgZHJhZ292ZXIsIGFuZCBkcm9wIGluIHNlcXVlbmNlLlxuICAgICAqIEBwYXJhbSB0YXJnZXQgLSBwb2ludCB0byBkcm9wIG9uXG4gICAgICogQHBhcmFtIGRhdGEgLSBkcmFnIGRhdGEgY29udGFpbmluZyBpdGVtcyBhbmQgb3BlcmF0aW9ucyBtYXNrXG4gICAgICovXG4gICAgYXN5bmMgZHJvcCh0YXJnZXQsIGRhdGEpIHtcbiAgICAgICAgYXdhaXQgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTW91c2VfY2xpZW50LCBcImZcIikuc2VuZCgnSW5wdXQuZGlzcGF0Y2hEcmFnRXZlbnQnLCB7XG4gICAgICAgICAgICB0eXBlOiAnZHJvcCcsXG4gICAgICAgICAgICB4OiB0YXJnZXQueCxcbiAgICAgICAgICAgIHk6IHRhcmdldC55LFxuICAgICAgICAgICAgbW9kaWZpZXJzOiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Nb3VzZV9rZXlib2FyZCwgXCJmXCIpLl9tb2RpZmllcnMsXG4gICAgICAgICAgICBkYXRhLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYSBkcmFnLCBkcmFnZW50ZXIsIGRyYWdvdmVyLCBhbmQgZHJvcCBpbiBzZXF1ZW5jZS5cbiAgICAgKiBAcGFyYW0gdGFyZ2V0IC0gcG9pbnQgdG8gZHJhZyBmcm9tXG4gICAgICogQHBhcmFtIHRhcmdldCAtIHBvaW50IHRvIGRyb3Agb25cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIEFuIG9iamVjdCBvZiBvcHRpb25zLiBBY2NlcHRzIGRlbGF5IHdoaWNoLFxuICAgICAqIGlmIHNwZWNpZmllZCwgaXMgdGhlIHRpbWUgdG8gd2FpdCBiZXR3ZWVuIGBkcmFnb3ZlcmAgYW5kIGBkcm9wYCBpbiBtaWxsaXNlY29uZHMuXG4gICAgICogRGVmYXVsdHMgdG8gMC5cbiAgICAgKi9cbiAgICBhc3luYyBkcmFnQW5kRHJvcChzdGFydCwgdGFyZ2V0LCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgY29uc3QgeyBkZWxheSA9IG51bGwgfSA9IG9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCB0aGlzLmRyYWcoc3RhcnQsIHRhcmdldCk7XG4gICAgICAgIGF3YWl0IHRoaXMuZHJhZ0VudGVyKHRhcmdldCwgZGF0YSk7XG4gICAgICAgIGF3YWl0IHRoaXMuZHJhZ092ZXIodGFyZ2V0LCBkYXRhKTtcbiAgICAgICAgaWYgKGRlbGF5KSB7XG4gICAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBzZXRUaW1lb3V0KHJlc29sdmUsIGRlbGF5KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IHRoaXMuZHJvcCh0YXJnZXQsIGRhdGEpO1xuICAgICAgICBhd2FpdCB0aGlzLnVwKCk7XG4gICAgfVxufVxuX01vdXNlX2NsaWVudCA9IG5ldyBXZWFrTWFwKCksIF9Nb3VzZV9rZXlib2FyZCA9IG5ldyBXZWFrTWFwKCksIF9Nb3VzZV94ID0gbmV3IFdlYWtNYXAoKSwgX01vdXNlX3kgPSBuZXcgV2Vha01hcCgpLCBfTW91c2VfYnV0dG9uID0gbmV3IFdlYWtNYXAoKTtcbi8qKlxuICogVGhlIFRvdWNoc2NyZWVuIGNsYXNzIGV4cG9zZXMgdG91Y2hzY3JlZW4gZXZlbnRzLlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgVG91Y2hzY3JlZW4ge1xuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGNsaWVudCwga2V5Ym9hcmQpIHtcbiAgICAgICAgX1RvdWNoc2NyZWVuX2NsaWVudC5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX1RvdWNoc2NyZWVuX2tleWJvYXJkLnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9Ub3VjaHNjcmVlbl9jbGllbnQsIGNsaWVudCwgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9Ub3VjaHNjcmVlbl9rZXlib2FyZCwga2V5Ym9hcmQsIFwiZlwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGlzcGF0Y2hlcyBhIGB0b3VjaHN0YXJ0YCBhbmQgYHRvdWNoZW5kYCBldmVudC5cbiAgICAgKiBAcGFyYW0geCAtIEhvcml6b250YWwgcG9zaXRpb24gb2YgdGhlIHRhcC5cbiAgICAgKiBAcGFyYW0geSAtIFZlcnRpY2FsIHBvc2l0aW9uIG9mIHRoZSB0YXAuXG4gICAgICovXG4gICAgYXN5bmMgdGFwKHgsIHkpIHtcbiAgICAgICAgY29uc3QgdG91Y2hQb2ludHMgPSBbeyB4OiBNYXRoLnJvdW5kKHgpLCB5OiBNYXRoLnJvdW5kKHkpIH1dO1xuICAgICAgICBhd2FpdCBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Ub3VjaHNjcmVlbl9jbGllbnQsIFwiZlwiKS5zZW5kKCdJbnB1dC5kaXNwYXRjaFRvdWNoRXZlbnQnLCB7XG4gICAgICAgICAgICB0eXBlOiAndG91Y2hTdGFydCcsXG4gICAgICAgICAgICB0b3VjaFBvaW50cyxcbiAgICAgICAgICAgIG1vZGlmaWVyczogX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVG91Y2hzY3JlZW5fa2V5Ym9hcmQsIFwiZlwiKS5fbW9kaWZpZXJzLFxuICAgICAgICB9KTtcbiAgICAgICAgYXdhaXQgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVG91Y2hzY3JlZW5fY2xpZW50LCBcImZcIikuc2VuZCgnSW5wdXQuZGlzcGF0Y2hUb3VjaEV2ZW50Jywge1xuICAgICAgICAgICAgdHlwZTogJ3RvdWNoRW5kJyxcbiAgICAgICAgICAgIHRvdWNoUG9pbnRzOiBbXSxcbiAgICAgICAgICAgIG1vZGlmaWVyczogX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVG91Y2hzY3JlZW5fa2V5Ym9hcmQsIFwiZlwiKS5fbW9kaWZpZXJzLFxuICAgICAgICB9KTtcbiAgICB9XG59XG5fVG91Y2hzY3JlZW5fY2xpZW50ID0gbmV3IFdlYWtNYXAoKSwgX1RvdWNoc2NyZWVuX2tleWJvYXJkID0gbmV3IFdlYWtNYXAoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUlucHV0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Input.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/JSHandle.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/JSHandle.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ElementHandle\": () => (/* binding */ ElementHandle),\n/* harmony export */   \"JSHandle\": () => (/* binding */ JSHandle),\n/* harmony export */   \"_createJSHandle\": () => (/* binding */ _createJSHandle)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./assert.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/assert.js\");\n/* harmony import */ var _QueryHandler_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./QueryHandler.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/QueryHandler.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/util.js\");\n/**\n * Copyright 2019 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _JSHandle_client, _JSHandle_disposed, _JSHandle_context, _JSHandle_remoteObject, _ElementHandle_instances, _ElementHandle_frame, _ElementHandle_page, _ElementHandle_frameManager, _ElementHandle_scrollIntoViewIfNeeded, _ElementHandle_getOOPIFOffsets, _ElementHandle_getBoxModel, _ElementHandle_fromProtocolQuad, _ElementHandle_intersectQuadWithViewport;\n\n\n\n/**\n * @internal\n */\nfunction _createJSHandle(context, remoteObject) {\n    const frame = context.frame();\n    if (remoteObject.subtype === 'node' && frame) {\n        const frameManager = frame._frameManager;\n        return new ElementHandle(context, context._client, remoteObject, frame, frameManager.page(), frameManager);\n    }\n    return new JSHandle(context, context._client, remoteObject);\n}\nconst applyOffsetsToQuad = (quad, offsetX, offsetY) => {\n    return quad.map((part) => {\n        return { x: part.x + offsetX, y: part.y + offsetY };\n    });\n};\n/**\n * Represents an in-page JavaScript object. JSHandles can be created with the\n * {@link Page.evaluateHandle | page.evaluateHandle} method.\n *\n * @example\n * ```js\n * const windowHandle = await page.evaluateHandle(() => window);\n * ```\n *\n * JSHandle prevents the referenced JavaScript object from being garbage-collected\n * unless the handle is {@link JSHandle.dispose | disposed}. JSHandles are auto-\n * disposed when their origin frame gets navigated or the parent context gets destroyed.\n *\n * JSHandle instances can be used as arguments for {@link Page.$eval},\n * {@link Page.evaluate}, and {@link Page.evaluateHandle}.\n *\n * @public\n */\nclass JSHandle {\n    /**\n     * @internal\n     */\n    constructor(context, client, remoteObject) {\n        _JSHandle_client.set(this, void 0);\n        _JSHandle_disposed.set(this, false);\n        _JSHandle_context.set(this, void 0);\n        _JSHandle_remoteObject.set(this, void 0);\n        __classPrivateFieldSet(this, _JSHandle_context, context, \"f\");\n        __classPrivateFieldSet(this, _JSHandle_client, client, \"f\");\n        __classPrivateFieldSet(this, _JSHandle_remoteObject, remoteObject, \"f\");\n    }\n    /**\n     * @internal\n     */\n    get _client() {\n        return __classPrivateFieldGet(this, _JSHandle_client, \"f\");\n    }\n    /**\n     * @internal\n     */\n    get _disposed() {\n        return __classPrivateFieldGet(this, _JSHandle_disposed, \"f\");\n    }\n    /**\n     * @internal\n     */\n    get _remoteObject() {\n        return __classPrivateFieldGet(this, _JSHandle_remoteObject, \"f\");\n    }\n    /**\n     * @internal\n     */\n    get _context() {\n        return __classPrivateFieldGet(this, _JSHandle_context, \"f\");\n    }\n    /** Returns the execution context the handle belongs to.\n     */\n    executionContext() {\n        return __classPrivateFieldGet(this, _JSHandle_context, \"f\");\n    }\n    /**\n     * This method passes this handle as the first argument to `pageFunction`.\n     * If `pageFunction` returns a Promise, then `handle.evaluate` would wait\n     * for the promise to resolve and return its value.\n     *\n     * @example\n     * ```js\n     * const tweetHandle = await page.$('.tweet .retweets');\n     * expect(await tweetHandle.evaluate(node => node.innerText)).toBe('10');\n     * ```\n     */\n    async evaluate(pageFunction, ...args) {\n        return await this.executionContext().evaluate(pageFunction, this, ...args);\n    }\n    /**\n     * This method passes this handle as the first argument to `pageFunction`.\n     *\n     * @remarks\n     *\n     * The only difference between `jsHandle.evaluate` and\n     * `jsHandle.evaluateHandle` is that `jsHandle.evaluateHandle`\n     * returns an in-page object (JSHandle).\n     *\n     * If the function passed to `jsHandle.evaluateHandle` returns a Promise,\n     * then `evaluateHandle.evaluateHandle` waits for the promise to resolve and\n     * returns its value.\n     *\n     * See {@link Page.evaluateHandle} for more details.\n     */\n    async evaluateHandle(pageFunction, ...args) {\n        return await this.executionContext().evaluateHandle(pageFunction, this, ...args);\n    }\n    /** Fetches a single property from the referenced object.\n     */\n    async getProperty(propertyName) {\n        const objectHandle = await this.evaluateHandle((object, propertyName) => {\n            const result = { __proto__: null };\n            result[propertyName] = object[propertyName];\n            return result;\n        }, propertyName);\n        const properties = await objectHandle.getProperties();\n        const result = properties.get(propertyName);\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(result instanceof JSHandle);\n        await objectHandle.dispose();\n        return result;\n    }\n    /**\n     * The method returns a map with property names as keys and JSHandle\n     * instances for the property values.\n     *\n     * @example\n     * ```js\n     * const listHandle = await page.evaluateHandle(() => document.body.children);\n     * const properties = await listHandle.getProperties();\n     * const children = [];\n     * for (const property of properties.values()) {\n     *   const element = property.asElement();\n     *   if (element)\n     *     children.push(element);\n     * }\n     * children; // holds elementHandles to all children of document.body\n     * ```\n     */\n    async getProperties() {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(__classPrivateFieldGet(this, _JSHandle_remoteObject, \"f\").objectId);\n        const response = await __classPrivateFieldGet(this, _JSHandle_client, \"f\").send('Runtime.getProperties', {\n            objectId: __classPrivateFieldGet(this, _JSHandle_remoteObject, \"f\").objectId,\n            ownProperties: true,\n        });\n        const result = new Map();\n        for (const property of response.result) {\n            if (!property.enumerable || !property.value) {\n                continue;\n            }\n            result.set(property.name, _createJSHandle(__classPrivateFieldGet(this, _JSHandle_context, \"f\"), property.value));\n        }\n        return result;\n    }\n    /**\n     * @returns Returns a JSON representation of the object.If the object has a\n     * `toJSON` function, it will not be called.\n     * @remarks\n     *\n     * The JSON is generated by running {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify | JSON.stringify}\n     * on the object in page and consequent {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse | JSON.parse} in puppeteer.\n     * **NOTE** The method throws if the referenced object is not stringifiable.\n     */\n    async jsonValue() {\n        if (__classPrivateFieldGet(this, _JSHandle_remoteObject, \"f\").objectId) {\n            const response = await __classPrivateFieldGet(this, _JSHandle_client, \"f\").send('Runtime.callFunctionOn', {\n                functionDeclaration: 'function() { return this; }',\n                objectId: __classPrivateFieldGet(this, _JSHandle_remoteObject, \"f\").objectId,\n                returnByValue: true,\n                awaitPromise: true,\n            });\n            return (0,_util_js__WEBPACK_IMPORTED_MODULE_2__.valueFromRemoteObject)(response.result);\n        }\n        return (0,_util_js__WEBPACK_IMPORTED_MODULE_2__.valueFromRemoteObject)(__classPrivateFieldGet(this, _JSHandle_remoteObject, \"f\"));\n    }\n    /**\n     * @returns Either `null` or the object handle itself, if the object\n     * handle is an instance of {@link ElementHandle}.\n     */\n    asElement() {\n        /*  This always returns null, but subclasses can override this and return an\n             ElementHandle.\n         */\n        return null;\n    }\n    /**\n     * Stops referencing the element handle, and resolves when the object handle is\n     * successfully disposed of.\n     */\n    async dispose() {\n        if (__classPrivateFieldGet(this, _JSHandle_disposed, \"f\")) {\n            return;\n        }\n        __classPrivateFieldSet(this, _JSHandle_disposed, true, \"f\");\n        await (0,_util_js__WEBPACK_IMPORTED_MODULE_2__.releaseObject)(__classPrivateFieldGet(this, _JSHandle_client, \"f\"), __classPrivateFieldGet(this, _JSHandle_remoteObject, \"f\"));\n    }\n    /**\n     * Returns a string representation of the JSHandle.\n     *\n     * @remarks Useful during debugging.\n     */\n    toString() {\n        if (__classPrivateFieldGet(this, _JSHandle_remoteObject, \"f\").objectId) {\n            const type = __classPrivateFieldGet(this, _JSHandle_remoteObject, \"f\").subtype || __classPrivateFieldGet(this, _JSHandle_remoteObject, \"f\").type;\n            return 'JSHandle@' + type;\n        }\n        return 'JSHandle:' + (0,_util_js__WEBPACK_IMPORTED_MODULE_2__.valueFromRemoteObject)(__classPrivateFieldGet(this, _JSHandle_remoteObject, \"f\"));\n    }\n}\n_JSHandle_client = new WeakMap(), _JSHandle_disposed = new WeakMap(), _JSHandle_context = new WeakMap(), _JSHandle_remoteObject = new WeakMap();\n/**\n * ElementHandle represents an in-page DOM element.\n *\n * @remarks\n *\n * ElementHandles can be created with the {@link Page.$} method.\n *\n * ```js\n * const puppeteer = require('puppeteer');\n *\n * (async () => {\n *  const browser = await puppeteer.launch();\n *  const page = await browser.newPage();\n *  await page.goto('https://example.com');\n *  const hrefElement = await page.$('a');\n *  await hrefElement.click();\n *  // ...\n * })();\n * ```\n *\n * ElementHandle prevents the DOM element from being garbage-collected unless the\n * handle is {@link JSHandle.dispose | disposed}. ElementHandles are auto-disposed\n * when their origin frame gets navigated.\n *\n * ElementHandle instances can be used as arguments in {@link Page.$eval} and\n * {@link Page.evaluate} methods.\n *\n * If you're using TypeScript, ElementHandle takes a generic argument that\n * denotes the type of element the handle is holding within. For example, if you\n * have a handle to a `<select>` element, you can type it as\n * `ElementHandle<HTMLSelectElement>` and you get some nicer type checks.\n *\n * @public\n */\nclass ElementHandle extends JSHandle {\n    /**\n     * @internal\n     */\n    constructor(context, client, remoteObject, frame, page, frameManager) {\n        super(context, client, remoteObject);\n        _ElementHandle_instances.add(this);\n        _ElementHandle_frame.set(this, void 0);\n        _ElementHandle_page.set(this, void 0);\n        _ElementHandle_frameManager.set(this, void 0);\n        __classPrivateFieldSet(this, _ElementHandle_frame, frame, \"f\");\n        __classPrivateFieldSet(this, _ElementHandle_page, page, \"f\");\n        __classPrivateFieldSet(this, _ElementHandle_frameManager, frameManager, \"f\");\n    }\n    /**\n     * Wait for the `selector` to appear within the element. If at the moment of calling the\n     * method the `selector` already exists, the method will return immediately. If\n     * the `selector` doesn't appear after the `timeout` milliseconds of waiting, the\n     * function will throw.\n     *\n     * This method does not work across navigations or if the element is detached from DOM.\n     *\n     * @param selector - A\n     * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | selector}\n     * of an element to wait for\n     * @param options - Optional waiting parameters\n     * @returns Promise which resolves when element specified by selector string\n     * is added to DOM. Resolves to `null` if waiting for hidden: `true` and\n     * selector is not found in DOM.\n     * @remarks\n     * The optional parameters in `options` are:\n     *\n     * - `visible`: wait for the selected element to be present in DOM and to be\n     * visible, i.e. to not have `display: none` or `visibility: hidden` CSS\n     * properties. Defaults to `false`.\n     *\n     * - `hidden`: wait for the selected element to not be found in the DOM or to be hidden,\n     * i.e. have `display: none` or `visibility: hidden` CSS properties. Defaults to\n     * `false`.\n     *\n     * - `timeout`: maximum time to wait in milliseconds. Defaults to `30000`\n     * (30 seconds). Pass `0` to disable timeout. The default value can be changed\n     * by using the {@link Page.setDefaultTimeout} method.\n     */\n    async waitForSelector(selector, options = {}) {\n        const frame = this._context.frame();\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(frame);\n        const secondaryContext = await frame._secondaryWorld.executionContext();\n        const adoptedRoot = await secondaryContext._adoptElementHandle(this);\n        const handle = await frame._secondaryWorld.waitForSelector(selector, {\n            ...options,\n            root: adoptedRoot,\n        });\n        await adoptedRoot.dispose();\n        if (!handle) {\n            return null;\n        }\n        const mainExecutionContext = await frame._mainWorld.executionContext();\n        const result = await mainExecutionContext._adoptElementHandle(handle);\n        await handle.dispose();\n        return result;\n    }\n    /**\n     * Wait for the `xpath` within the element. If at the moment of calling the\n     * method the `xpath` already exists, the method will return immediately. If\n     * the `xpath` doesn't appear after the `timeout` milliseconds of waiting, the\n     * function will throw.\n     *\n     * If `xpath` starts with `//` instead of `.//`, the dot will be appended automatically.\n     *\n     * This method works across navigation\n     * ```js\n     * const puppeteer = require('puppeteer');\n     * (async () => {\n     * const browser = await puppeteer.launch();\n     * const page = await browser.newPage();\n     * let currentURL;\n     * page\n     * .waitForXPath('//img')\n     * .then(() => console.log('First URL with image: ' + currentURL));\n     * for (currentURL of [\n     * 'https://example.com',\n     * 'https://google.com',\n     * 'https://bbc.com',\n     * ]) {\n     * await page.goto(currentURL);\n     * }\n     * await browser.close();\n     * })();\n     * ```\n     * @param xpath - A\n     * {@link https://developer.mozilla.org/en-US/docs/Web/XPath | xpath} of an\n     * element to wait for\n     * @param options - Optional waiting parameters\n     * @returns Promise which resolves when element specified by xpath string is\n     * added to DOM. Resolves to `null` if waiting for `hidden: true` and xpath is\n     * not found in DOM.\n     * @remarks\n     * The optional Argument `options` have properties:\n     *\n     * - `visible`: A boolean to wait for element to be present in DOM and to be\n     * visible, i.e. to not have `display: none` or `visibility: hidden` CSS\n     * properties. Defaults to `false`.\n     *\n     * - `hidden`: A boolean wait for element to not be found in the DOM or to be\n     * hidden, i.e. have `display: none` or `visibility: hidden` CSS properties.\n     * Defaults to `false`.\n     *\n     * - `timeout`: A number which is maximum time to wait for in milliseconds.\n     * Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default\n     * value can be changed by using the {@link Page.setDefaultTimeout} method.\n     */\n    async waitForXPath(xpath, options = {}) {\n        const frame = this._context.frame();\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(frame);\n        const secondaryContext = await frame._secondaryWorld.executionContext();\n        const adoptedRoot = await secondaryContext._adoptElementHandle(this);\n        xpath = xpath.startsWith('//') ? '.' + xpath : xpath;\n        if (!xpath.startsWith('.//')) {\n            await adoptedRoot.dispose();\n            throw new Error('Unsupported xpath expression: ' + xpath);\n        }\n        const handle = await frame._secondaryWorld.waitForXPath(xpath, {\n            ...options,\n            root: adoptedRoot,\n        });\n        await adoptedRoot.dispose();\n        if (!handle) {\n            return null;\n        }\n        const mainExecutionContext = await frame._mainWorld.executionContext();\n        const result = await mainExecutionContext._adoptElementHandle(handle);\n        await handle.dispose();\n        return result;\n    }\n    asElement() {\n        return this;\n    }\n    /**\n     * Resolves to the content frame for element handles referencing\n     * iframe nodes, or null otherwise\n     */\n    async contentFrame() {\n        const nodeInfo = await this._client.send('DOM.describeNode', {\n            objectId: this._remoteObject.objectId,\n        });\n        if (typeof nodeInfo.node.frameId !== 'string') {\n            return null;\n        }\n        return __classPrivateFieldGet(this, _ElementHandle_frameManager, \"f\").frame(nodeInfo.node.frameId);\n    }\n    /**\n     * Returns the middle point within an element unless a specific offset is provided.\n     */\n    async clickablePoint(offset) {\n        const [result, layoutMetrics] = await Promise.all([\n            this._client\n                .send('DOM.getContentQuads', {\n                objectId: this._remoteObject.objectId,\n            })\n                .catch(_util_js__WEBPACK_IMPORTED_MODULE_2__.debugError),\n            __classPrivateFieldGet(this, _ElementHandle_page, \"f\")._client().send('Page.getLayoutMetrics'),\n        ]);\n        if (!result || !result.quads.length) {\n            throw new Error('Node is either not clickable or not an HTMLElement');\n        }\n        // Filter out quads that have too small area to click into.\n        // Fallback to `layoutViewport` in case of using Firefox.\n        const { clientWidth, clientHeight } = layoutMetrics.cssLayoutViewport || layoutMetrics.layoutViewport;\n        const { offsetX, offsetY } = await __classPrivateFieldGet(this, _ElementHandle_instances, \"m\", _ElementHandle_getOOPIFOffsets).call(this, __classPrivateFieldGet(this, _ElementHandle_frame, \"f\"));\n        const quads = result.quads\n            .map((quad) => {\n            return __classPrivateFieldGet(this, _ElementHandle_instances, \"m\", _ElementHandle_fromProtocolQuad).call(this, quad);\n        })\n            .map((quad) => {\n            return applyOffsetsToQuad(quad, offsetX, offsetY);\n        })\n            .map((quad) => {\n            return __classPrivateFieldGet(this, _ElementHandle_instances, \"m\", _ElementHandle_intersectQuadWithViewport).call(this, quad, clientWidth, clientHeight);\n        })\n            .filter((quad) => {\n            return computeQuadArea(quad) > 1;\n        });\n        if (!quads.length) {\n            throw new Error('Node is either not clickable or not an HTMLElement');\n        }\n        const quad = quads[0];\n        if (offset) {\n            // Return the point of the first quad identified by offset.\n            let minX = Number.MAX_SAFE_INTEGER;\n            let minY = Number.MAX_SAFE_INTEGER;\n            for (const point of quad) {\n                if (point.x < minX) {\n                    minX = point.x;\n                }\n                if (point.y < minY) {\n                    minY = point.y;\n                }\n            }\n            if (minX !== Number.MAX_SAFE_INTEGER &&\n                minY !== Number.MAX_SAFE_INTEGER) {\n                return {\n                    x: minX + offset.x,\n                    y: minY + offset.y,\n                };\n            }\n        }\n        // Return the middle point of the first quad.\n        let x = 0;\n        let y = 0;\n        for (const point of quad) {\n            x += point.x;\n            y += point.y;\n        }\n        return {\n            x: x / 4,\n            y: y / 4,\n        };\n    }\n    /**\n     * This method scrolls element into view if needed, and then\n     * uses {@link Page.mouse} to hover over the center of the element.\n     * If the element is detached from DOM, the method throws an error.\n     */\n    async hover() {\n        await __classPrivateFieldGet(this, _ElementHandle_instances, \"m\", _ElementHandle_scrollIntoViewIfNeeded).call(this);\n        const { x, y } = await this.clickablePoint();\n        await __classPrivateFieldGet(this, _ElementHandle_page, \"f\").mouse.move(x, y);\n    }\n    /**\n     * This method scrolls element into view if needed, and then\n     * uses {@link Page.mouse} to click in the center of the element.\n     * If the element is detached from DOM, the method throws an error.\n     */\n    async click(options = {}) {\n        await __classPrivateFieldGet(this, _ElementHandle_instances, \"m\", _ElementHandle_scrollIntoViewIfNeeded).call(this);\n        const { x, y } = await this.clickablePoint(options.offset);\n        await __classPrivateFieldGet(this, _ElementHandle_page, \"f\").mouse.click(x, y, options);\n    }\n    /**\n     * This method creates and captures a dragevent from the element.\n     */\n    async drag(target) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(__classPrivateFieldGet(this, _ElementHandle_page, \"f\").isDragInterceptionEnabled(), 'Drag Interception is not enabled!');\n        await __classPrivateFieldGet(this, _ElementHandle_instances, \"m\", _ElementHandle_scrollIntoViewIfNeeded).call(this);\n        const start = await this.clickablePoint();\n        return await __classPrivateFieldGet(this, _ElementHandle_page, \"f\").mouse.drag(start, target);\n    }\n    /**\n     * This method creates a `dragenter` event on the element.\n     */\n    async dragEnter(data = { items: [], dragOperationsMask: 1 }) {\n        await __classPrivateFieldGet(this, _ElementHandle_instances, \"m\", _ElementHandle_scrollIntoViewIfNeeded).call(this);\n        const target = await this.clickablePoint();\n        await __classPrivateFieldGet(this, _ElementHandle_page, \"f\").mouse.dragEnter(target, data);\n    }\n    /**\n     * This method creates a `dragover` event on the element.\n     */\n    async dragOver(data = { items: [], dragOperationsMask: 1 }) {\n        await __classPrivateFieldGet(this, _ElementHandle_instances, \"m\", _ElementHandle_scrollIntoViewIfNeeded).call(this);\n        const target = await this.clickablePoint();\n        await __classPrivateFieldGet(this, _ElementHandle_page, \"f\").mouse.dragOver(target, data);\n    }\n    /**\n     * This method triggers a drop on the element.\n     */\n    async drop(data = { items: [], dragOperationsMask: 1 }) {\n        await __classPrivateFieldGet(this, _ElementHandle_instances, \"m\", _ElementHandle_scrollIntoViewIfNeeded).call(this);\n        const destination = await this.clickablePoint();\n        await __classPrivateFieldGet(this, _ElementHandle_page, \"f\").mouse.drop(destination, data);\n    }\n    /**\n     * This method triggers a dragenter, dragover, and drop on the element.\n     */\n    async dragAndDrop(target, options) {\n        await __classPrivateFieldGet(this, _ElementHandle_instances, \"m\", _ElementHandle_scrollIntoViewIfNeeded).call(this);\n        const startPoint = await this.clickablePoint();\n        const targetPoint = await target.clickablePoint();\n        await __classPrivateFieldGet(this, _ElementHandle_page, \"f\").mouse.dragAndDrop(startPoint, targetPoint, options);\n    }\n    /**\n     * Triggers a `change` and `input` event once all the provided options have been\n     * selected. If there's no `<select>` element matching `selector`, the method\n     * throws an error.\n     *\n     * @example\n     * ```js\n     * handle.select('blue'); // single selection\n     * handle.select('red', 'green', 'blue'); // multiple selections\n     * ```\n     * @param values - Values of options to select. If the `<select>` has the\n     *    `multiple` attribute, all values are considered, otherwise only the first\n     *    one is taken into account.\n     */\n    async select(...values) {\n        for (const value of values) {\n            (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)((0,_util_js__WEBPACK_IMPORTED_MODULE_2__.isString)(value), 'Values must be strings. Found value \"' +\n                value +\n                '\" of type \"' +\n                typeof value +\n                '\"');\n        }\n        return this.evaluate((element, vals) => {\n            const values = new Set(vals);\n            if (!(element instanceof HTMLSelectElement)) {\n                throw new Error('Element is not a <select> element.');\n            }\n            const selectedValues = new Set();\n            if (!element.multiple) {\n                for (const option of element.options) {\n                    option.selected = false;\n                }\n                for (const option of element.options) {\n                    if (values.has(option.value)) {\n                        option.selected = true;\n                        selectedValues.add(option.value);\n                        break;\n                    }\n                }\n            }\n            else {\n                for (const option of element.options) {\n                    option.selected = values.has(option.value);\n                    if (option.selected) {\n                        selectedValues.add(option.value);\n                    }\n                }\n            }\n            element.dispatchEvent(new Event('input', { bubbles: true }));\n            element.dispatchEvent(new Event('change', { bubbles: true }));\n            return [...selectedValues.values()];\n        }, values);\n    }\n    /**\n     * This method expects `elementHandle` to point to an\n     * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input | input element}.\n     *\n     * @param filePaths - Sets the value of the file input to these paths.\n     *    If a path is relative, then it is resolved against the\n     *    {@link https://nodejs.org/api/process.html#process_process_cwd | current working directory}.\n     *    Note for locals script connecting to remote chrome environments,\n     *    paths must be absolute.\n     */\n    async uploadFile(...filePaths) {\n        const isMultiple = await this.evaluate((element) => {\n            if (!(element instanceof HTMLInputElement)) {\n                throw new Error('uploadFile can only be called on an input element.');\n            }\n            return element.multiple;\n        });\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(filePaths.length <= 1 || isMultiple, 'Multiple file uploads only work with <input type=file multiple>');\n        // Locate all files and confirm that they exist.\n        let path;\n        try {\n            path = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! path */ \"path\", 19));\n        }\n        catch (error) {\n            if (error instanceof TypeError) {\n                throw new Error(`JSHandle#uploadFile can only be used in Node-like environments.`);\n            }\n            throw error;\n        }\n        const files = filePaths.map((filePath) => {\n            if (path.win32.isAbsolute(filePath) || path.posix.isAbsolute(filePath)) {\n                return filePath;\n            }\n            else {\n                return path.resolve(filePath);\n            }\n        });\n        const { objectId } = this._remoteObject;\n        const { node } = await this._client.send('DOM.describeNode', { objectId });\n        const { backendNodeId } = node;\n        /*  The zero-length array is a special case, it seems that\n             DOM.setFileInputFiles does not actually update the files in that case,\n             so the solution is to eval the element value to a new FileList directly.\n         */\n        if (files.length === 0) {\n            await this.evaluate((element) => {\n                element.files = new DataTransfer().files;\n                // Dispatch events for this case because it should behave akin to a user action.\n                element.dispatchEvent(new Event('input', { bubbles: true }));\n                element.dispatchEvent(new Event('change', { bubbles: true }));\n            });\n        }\n        else {\n            await this._client.send('DOM.setFileInputFiles', {\n                objectId,\n                files,\n                backendNodeId,\n            });\n        }\n    }\n    /**\n     * This method scrolls element into view if needed, and then uses\n     * {@link Touchscreen.tap} to tap in the center of the element.\n     * If the element is detached from DOM, the method throws an error.\n     */\n    async tap() {\n        await __classPrivateFieldGet(this, _ElementHandle_instances, \"m\", _ElementHandle_scrollIntoViewIfNeeded).call(this);\n        const { x, y } = await this.clickablePoint();\n        await __classPrivateFieldGet(this, _ElementHandle_page, \"f\").touchscreen.tap(x, y);\n    }\n    /**\n     * Calls {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus | focus} on the element.\n     */\n    async focus() {\n        await this.evaluate((element) => {\n            return element.focus();\n        });\n    }\n    /**\n     * Focuses the element, and then sends a `keydown`, `keypress`/`input`, and\n     * `keyup` event for each character in the text.\n     *\n     * To press a special key, like `Control` or `ArrowDown`,\n     * use {@link ElementHandle.press}.\n     *\n     * @example\n     * ```js\n     * await elementHandle.type('Hello'); // Types instantly\n     * await elementHandle.type('World', {delay: 100}); // Types slower, like a user\n     * ```\n     *\n     * @example\n     * An example of typing into a text field and then submitting the form:\n     *\n     * ```js\n     * const elementHandle = await page.$('input');\n     * await elementHandle.type('some text');\n     * await elementHandle.press('Enter');\n     * ```\n     */\n    async type(text, options) {\n        await this.focus();\n        await __classPrivateFieldGet(this, _ElementHandle_page, \"f\").keyboard.type(text, options);\n    }\n    /**\n     * Focuses the element, and then uses {@link Keyboard.down} and {@link Keyboard.up}.\n     *\n     * @remarks\n     * If `key` is a single character and no modifier keys besides `Shift`\n     * are being held down, a `keypress`/`input` event will also be generated.\n     * The `text` option can be specified to force an input event to be generated.\n     *\n     * **NOTE** Modifier keys DO affect `elementHandle.press`. Holding down `Shift`\n     * will type the text in upper case.\n     *\n     * @param key - Name of key to press, such as `ArrowLeft`.\n     *    See {@link KeyInput} for a list of all key names.\n     */\n    async press(key, options) {\n        await this.focus();\n        await __classPrivateFieldGet(this, _ElementHandle_page, \"f\").keyboard.press(key, options);\n    }\n    /**\n     * This method returns the bounding box of the element (relative to the main frame),\n     * or `null` if the element is not visible.\n     */\n    async boundingBox() {\n        const result = await __classPrivateFieldGet(this, _ElementHandle_instances, \"m\", _ElementHandle_getBoxModel).call(this);\n        if (!result) {\n            return null;\n        }\n        const { offsetX, offsetY } = await __classPrivateFieldGet(this, _ElementHandle_instances, \"m\", _ElementHandle_getOOPIFOffsets).call(this, __classPrivateFieldGet(this, _ElementHandle_frame, \"f\"));\n        const quad = result.model.border;\n        const x = Math.min(quad[0], quad[2], quad[4], quad[6]);\n        const y = Math.min(quad[1], quad[3], quad[5], quad[7]);\n        const width = Math.max(quad[0], quad[2], quad[4], quad[6]) - x;\n        const height = Math.max(quad[1], quad[3], quad[5], quad[7]) - y;\n        return { x: x + offsetX, y: y + offsetY, width, height };\n    }\n    /**\n     * This method returns boxes of the element, or `null` if the element is not visible.\n     *\n     * @remarks\n     *\n     * Boxes are represented as an array of points;\n     * Each Point is an object `{x, y}`. Box points are sorted clock-wise.\n     */\n    async boxModel() {\n        const result = await __classPrivateFieldGet(this, _ElementHandle_instances, \"m\", _ElementHandle_getBoxModel).call(this);\n        if (!result) {\n            return null;\n        }\n        const { offsetX, offsetY } = await __classPrivateFieldGet(this, _ElementHandle_instances, \"m\", _ElementHandle_getOOPIFOffsets).call(this, __classPrivateFieldGet(this, _ElementHandle_frame, \"f\"));\n        const { content, padding, border, margin, width, height } = result.model;\n        return {\n            content: applyOffsetsToQuad(__classPrivateFieldGet(this, _ElementHandle_instances, \"m\", _ElementHandle_fromProtocolQuad).call(this, content), offsetX, offsetY),\n            padding: applyOffsetsToQuad(__classPrivateFieldGet(this, _ElementHandle_instances, \"m\", _ElementHandle_fromProtocolQuad).call(this, padding), offsetX, offsetY),\n            border: applyOffsetsToQuad(__classPrivateFieldGet(this, _ElementHandle_instances, \"m\", _ElementHandle_fromProtocolQuad).call(this, border), offsetX, offsetY),\n            margin: applyOffsetsToQuad(__classPrivateFieldGet(this, _ElementHandle_instances, \"m\", _ElementHandle_fromProtocolQuad).call(this, margin), offsetX, offsetY),\n            width,\n            height,\n        };\n    }\n    /**\n     * This method scrolls element into view if needed, and then uses\n     * {@link Page.screenshot} to take a screenshot of the element.\n     * If the element is detached from DOM, the method throws an error.\n     */\n    async screenshot(options = {}) {\n        let needsViewportReset = false;\n        let boundingBox = await this.boundingBox();\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(boundingBox, 'Node is either not visible or not an HTMLElement');\n        const viewport = __classPrivateFieldGet(this, _ElementHandle_page, \"f\").viewport();\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(viewport);\n        if (boundingBox.width > viewport.width ||\n            boundingBox.height > viewport.height) {\n            const newViewport = {\n                width: Math.max(viewport.width, Math.ceil(boundingBox.width)),\n                height: Math.max(viewport.height, Math.ceil(boundingBox.height)),\n            };\n            await __classPrivateFieldGet(this, _ElementHandle_page, \"f\").setViewport(Object.assign({}, viewport, newViewport));\n            needsViewportReset = true;\n        }\n        await __classPrivateFieldGet(this, _ElementHandle_instances, \"m\", _ElementHandle_scrollIntoViewIfNeeded).call(this);\n        boundingBox = await this.boundingBox();\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(boundingBox, 'Node is either not visible or not an HTMLElement');\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(boundingBox.width !== 0, 'Node has 0 width.');\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(boundingBox.height !== 0, 'Node has 0 height.');\n        const layoutMetrics = await this._client.send('Page.getLayoutMetrics');\n        // Fallback to `layoutViewport` in case of using Firefox.\n        const { pageX, pageY } = layoutMetrics.cssVisualViewport || layoutMetrics.layoutViewport;\n        const clip = Object.assign({}, boundingBox);\n        clip.x += pageX;\n        clip.y += pageY;\n        const imageData = await __classPrivateFieldGet(this, _ElementHandle_page, \"f\").screenshot(Object.assign({}, {\n            clip,\n        }, options));\n        if (needsViewportReset) {\n            await __classPrivateFieldGet(this, _ElementHandle_page, \"f\").setViewport(viewport);\n        }\n        return imageData;\n    }\n    /**\n     * Runs `element.querySelector` within the page.\n     *\n     * @param selector - The selector to query with.\n     * @returns `null` if no element matches the selector.\n     * @throws `Error` if the selector has no associated query handler.\n     */\n    async $(selector) {\n        const { updatedSelector, queryHandler } = (0,_QueryHandler_js__WEBPACK_IMPORTED_MODULE_1__._getQueryHandlerAndSelector)(selector);\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(queryHandler.queryOne, 'Cannot handle queries for a single element with the given selector');\n        return queryHandler.queryOne(this, updatedSelector);\n    }\n    /**\n     * Runs `element.querySelectorAll` within the page. If no elements match the selector,\n     * the return value resolves to `[]`.\n     */\n    /**\n     * Runs `element.querySelectorAll` within the page.\n     *\n     * @param selector - The selector to query with.\n     * @returns `[]` if no element matches the selector.\n     * @throws `Error` if the selector has no associated query handler.\n     */\n    async $$(selector) {\n        const { updatedSelector, queryHandler } = (0,_QueryHandler_js__WEBPACK_IMPORTED_MODULE_1__._getQueryHandlerAndSelector)(selector);\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(queryHandler.queryAll, 'Cannot handle queries for a multiple element with the given selector');\n        return queryHandler.queryAll(this, updatedSelector);\n    }\n    /**\n     * This method runs `document.querySelector` within the element and passes it as\n     * the first argument to `pageFunction`. If there's no element matching `selector`,\n     * the method throws an error.\n     *\n     * If `pageFunction` returns a Promise, then `frame.$eval` would wait for the promise\n     * to resolve and return its value.\n     *\n     * @example\n     * ```js\n     * const tweetHandle = await page.$('.tweet');\n     * expect(await tweetHandle.$eval('.like', node => node.innerText)).toBe('100');\n     * expect(await tweetHandle.$eval('.retweets', node => node.innerText)).toBe('10');\n     * ```\n     */\n    async $eval(selector, pageFunction, ...args) {\n        const elementHandle = await this.$(selector);\n        if (!elementHandle) {\n            throw new Error(`Error: failed to find element matching selector \"${selector}\"`);\n        }\n        const result = await elementHandle.evaluate(pageFunction, ...args);\n        await elementHandle.dispose();\n        /**\n         * This `as` is a little unfortunate but helps TS understand the behavior of\n         * `elementHandle.evaluate`. If evaluate returns an element it will return an\n         * ElementHandle instance, rather than the plain object. All the\n         * WrapElementHandle type does is wrap ReturnType into\n         * ElementHandle<ReturnType> if it is an ElementHandle, or leave it alone as\n         * ReturnType if it isn't.\n         */\n        return result;\n    }\n    /**\n     * This method runs `document.querySelectorAll` within the element and passes it as\n     * the first argument to `pageFunction`. If there's no element matching `selector`,\n     * the method throws an error.\n     *\n     * If `pageFunction` returns a Promise, then `frame.$$eval` would wait for the\n     * promise to resolve and return its value.\n     *\n     * @example\n     * ```html\n     * <div class=\"feed\">\n     *   <div class=\"tweet\">Hello!</div>\n     *   <div class=\"tweet\">Hi!</div>\n     * </div>\n     * ```\n     *\n     * @example\n     * ```js\n     * const feedHandle = await page.$('.feed');\n     * expect(await feedHandle.$$eval('.tweet', nodes => nodes.map(n => n.innerText)))\n     *  .toEqual(['Hello!', 'Hi!']);\n     * ```\n     */\n    async $$eval(selector, pageFunction, ...args) {\n        const { updatedSelector, queryHandler } = (0,_QueryHandler_js__WEBPACK_IMPORTED_MODULE_1__._getQueryHandlerAndSelector)(selector);\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(queryHandler.queryAllArray);\n        const arrayHandle = await queryHandler.queryAllArray(this, updatedSelector);\n        const result = await arrayHandle.evaluate(pageFunction, ...args);\n        await arrayHandle.dispose();\n        /* This `as` exists for the same reason as the `as` in $eval above.\n         * See the comment there for a full explanation.\n         */\n        return result;\n    }\n    /**\n     * The method evaluates the XPath expression relative to the elementHandle.\n     * If there are no such elements, the method will resolve to an empty array.\n     * @param expression - Expression to {@link https://developer.mozilla.org/en-US/docs/Web/API/Document/evaluate | evaluate}\n     */\n    async $x(expression) {\n        const arrayHandle = await this.evaluateHandle((element, expression) => {\n            const document = element.ownerDocument || element;\n            const iterator = document.evaluate(expression, element, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE);\n            const array = [];\n            let item;\n            while ((item = iterator.iterateNext())) {\n                array.push(item);\n            }\n            return array;\n        }, expression);\n        const properties = await arrayHandle.getProperties();\n        await arrayHandle.dispose();\n        const result = [];\n        for (const property of properties.values()) {\n            const elementHandle = property.asElement();\n            if (elementHandle) {\n                result.push(elementHandle);\n            }\n        }\n        return result;\n    }\n    /**\n     * Resolves to true if the element is visible in the current viewport.\n     */\n    async isIntersectingViewport(options) {\n        const { threshold = 0 } = options || {};\n        return await this.evaluate(async (element, threshold) => {\n            const visibleRatio = await new Promise((resolve) => {\n                const observer = new IntersectionObserver((entries) => {\n                    resolve(entries[0].intersectionRatio);\n                    observer.disconnect();\n                });\n                observer.observe(element);\n            });\n            return threshold === 1 ? visibleRatio === 1 : visibleRatio > threshold;\n        }, threshold);\n    }\n}\n_ElementHandle_frame = new WeakMap(), _ElementHandle_page = new WeakMap(), _ElementHandle_frameManager = new WeakMap(), _ElementHandle_instances = new WeakSet(), _ElementHandle_scrollIntoViewIfNeeded = async function _ElementHandle_scrollIntoViewIfNeeded() {\n    const error = await this.evaluate(async (element, pageJavascriptEnabled) => {\n        if (!element.isConnected) {\n            return 'Node is detached from document';\n        }\n        if (element.nodeType !== Node.ELEMENT_NODE) {\n            return 'Node is not of type HTMLElement';\n        }\n        // force-scroll if page's javascript is disabled.\n        if (!pageJavascriptEnabled) {\n            element.scrollIntoView({\n                block: 'center',\n                inline: 'center',\n                // @ts-expect-error Chrome still supports behavior: instant but\n                // it's not in the spec so TS shouts We don't want to make this\n                // breaking change in Puppeteer yet so we'll ignore the line.\n                behavior: 'instant',\n            });\n            return false;\n        }\n        const visibleRatio = await new Promise((resolve) => {\n            const observer = new IntersectionObserver((entries) => {\n                resolve(entries[0].intersectionRatio);\n                observer.disconnect();\n            });\n            observer.observe(element);\n        });\n        if (visibleRatio !== 1.0) {\n            element.scrollIntoView({\n                block: 'center',\n                inline: 'center',\n                // @ts-expect-error Chrome still supports behavior: instant but\n                // it's not in the spec so TS shouts We don't want to make this\n                // breaking change in Puppeteer yet so we'll ignore the line.\n                behavior: 'instant',\n            });\n        }\n        return false;\n    }, __classPrivateFieldGet(this, _ElementHandle_page, \"f\").isJavaScriptEnabled());\n    if (error) {\n        throw new Error(error);\n    }\n}, _ElementHandle_getOOPIFOffsets = async function _ElementHandle_getOOPIFOffsets(frame) {\n    let offsetX = 0;\n    let offsetY = 0;\n    let currentFrame = frame;\n    while (currentFrame && currentFrame.parentFrame()) {\n        const parent = currentFrame.parentFrame();\n        if (!currentFrame.isOOPFrame() || !parent) {\n            currentFrame = parent;\n            continue;\n        }\n        const { backendNodeId } = await parent\n            ._client()\n            .send('DOM.getFrameOwner', {\n            frameId: currentFrame._id,\n        });\n        const result = await parent._client().send('DOM.getBoxModel', {\n            backendNodeId: backendNodeId,\n        });\n        if (!result) {\n            break;\n        }\n        const contentBoxQuad = result.model.content;\n        const topLeftCorner = __classPrivateFieldGet(this, _ElementHandle_instances, \"m\", _ElementHandle_fromProtocolQuad).call(this, contentBoxQuad)[0];\n        offsetX += topLeftCorner.x;\n        offsetY += topLeftCorner.y;\n        currentFrame = parent;\n    }\n    return { offsetX, offsetY };\n}, _ElementHandle_getBoxModel = function _ElementHandle_getBoxModel() {\n    const params = {\n        objectId: this._remoteObject.objectId,\n    };\n    return this._client.send('DOM.getBoxModel', params).catch((error) => {\n        return (0,_util_js__WEBPACK_IMPORTED_MODULE_2__.debugError)(error);\n    });\n}, _ElementHandle_fromProtocolQuad = function _ElementHandle_fromProtocolQuad(quad) {\n    return [\n        { x: quad[0], y: quad[1] },\n        { x: quad[2], y: quad[3] },\n        { x: quad[4], y: quad[5] },\n        { x: quad[6], y: quad[7] },\n    ];\n}, _ElementHandle_intersectQuadWithViewport = function _ElementHandle_intersectQuadWithViewport(quad, width, height) {\n    return quad.map((point) => {\n        return {\n            x: Math.min(Math.max(point.x, 0), width),\n            y: Math.min(Math.max(point.y, 0), height),\n        };\n    });\n};\nfunction computeQuadArea(quad) {\n    /* Compute sum of all directed areas of adjacent triangles\n       https://en.wikipedia.org/wiki/Polygon#Simple_polygons\n     */\n    let area = 0;\n    for (let i = 0; i < quad.length; ++i) {\n        const p1 = quad[i];\n        const p2 = quad[(i + 1) % quad.length];\n        area += (p1.x * p2.y - p2.x * p1.y) / 2;\n    }\n    return Math.abs(area);\n}\n//# sourceMappingURL=JSHandle.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/JSHandle.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/LifecycleWatcher.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/LifecycleWatcher.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LifecycleWatcher\": () => (/* binding */ LifecycleWatcher)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./assert.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/assert.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/util.js\");\n/* harmony import */ var _Errors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Errors.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Errors.js\");\n/* harmony import */ var _FrameManager_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./FrameManager.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/FrameManager.js\");\n/* harmony import */ var _NetworkManager_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./NetworkManager.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/NetworkManager.js\");\n/* harmony import */ var _Connection_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Connection.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Connection.js\");\n/**\n * Copyright 2019 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _LifecycleWatcher_instances, _LifecycleWatcher_expectedLifecycle, _LifecycleWatcher_frameManager, _LifecycleWatcher_frame, _LifecycleWatcher_timeout, _LifecycleWatcher_navigationRequest, _LifecycleWatcher_eventListeners, _LifecycleWatcher_sameDocumentNavigationCompleteCallback, _LifecycleWatcher_sameDocumentNavigationPromise, _LifecycleWatcher_lifecycleCallback, _LifecycleWatcher_lifecyclePromise, _LifecycleWatcher_newDocumentNavigationCompleteCallback, _LifecycleWatcher_newDocumentNavigationPromise, _LifecycleWatcher_terminationCallback, _LifecycleWatcher_terminationPromise, _LifecycleWatcher_timeoutPromise, _LifecycleWatcher_maximumTimer, _LifecycleWatcher_hasSameDocumentNavigation, _LifecycleWatcher_newDocumentNavigation, _LifecycleWatcher_swapped, _LifecycleWatcher_onRequest, _LifecycleWatcher_onFrameDetached, _LifecycleWatcher_terminate, _LifecycleWatcher_createTimeoutPromise, _LifecycleWatcher_navigatedWithinDocument, _LifecycleWatcher_navigated, _LifecycleWatcher_frameSwapped, _LifecycleWatcher_checkLifecycleComplete;\n\n\n\n\n\n\nconst puppeteerToProtocolLifecycle = new Map([\n    ['load', 'load'],\n    ['domcontentloaded', 'DOMContentLoaded'],\n    ['networkidle0', 'networkIdle'],\n    ['networkidle2', 'networkAlmostIdle'],\n]);\nconst noop = () => { };\n/**\n * @internal\n */\nclass LifecycleWatcher {\n    constructor(frameManager, frame, waitUntil, timeout) {\n        _LifecycleWatcher_instances.add(this);\n        _LifecycleWatcher_expectedLifecycle.set(this, void 0);\n        _LifecycleWatcher_frameManager.set(this, void 0);\n        _LifecycleWatcher_frame.set(this, void 0);\n        _LifecycleWatcher_timeout.set(this, void 0);\n        _LifecycleWatcher_navigationRequest.set(this, null);\n        _LifecycleWatcher_eventListeners.set(this, void 0);\n        _LifecycleWatcher_sameDocumentNavigationCompleteCallback.set(this, noop);\n        _LifecycleWatcher_sameDocumentNavigationPromise.set(this, new Promise((fulfill) => {\n            __classPrivateFieldSet(this, _LifecycleWatcher_sameDocumentNavigationCompleteCallback, fulfill, \"f\");\n        }));\n        _LifecycleWatcher_lifecycleCallback.set(this, noop);\n        _LifecycleWatcher_lifecyclePromise.set(this, new Promise((fulfill) => {\n            __classPrivateFieldSet(this, _LifecycleWatcher_lifecycleCallback, fulfill, \"f\");\n        }));\n        _LifecycleWatcher_newDocumentNavigationCompleteCallback.set(this, noop);\n        _LifecycleWatcher_newDocumentNavigationPromise.set(this, new Promise((fulfill) => {\n            __classPrivateFieldSet(this, _LifecycleWatcher_newDocumentNavigationCompleteCallback, fulfill, \"f\");\n        }));\n        _LifecycleWatcher_terminationCallback.set(this, noop);\n        _LifecycleWatcher_terminationPromise.set(this, new Promise((fulfill) => {\n            __classPrivateFieldSet(this, _LifecycleWatcher_terminationCallback, fulfill, \"f\");\n        }));\n        _LifecycleWatcher_timeoutPromise.set(this, void 0);\n        _LifecycleWatcher_maximumTimer.set(this, void 0);\n        _LifecycleWatcher_hasSameDocumentNavigation.set(this, void 0);\n        _LifecycleWatcher_newDocumentNavigation.set(this, void 0);\n        _LifecycleWatcher_swapped.set(this, void 0);\n        if (Array.isArray(waitUntil)) {\n            waitUntil = waitUntil.slice();\n        }\n        else if (typeof waitUntil === 'string') {\n            waitUntil = [waitUntil];\n        }\n        __classPrivateFieldSet(this, _LifecycleWatcher_expectedLifecycle, waitUntil.map((value) => {\n            const protocolEvent = puppeteerToProtocolLifecycle.get(value);\n            (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(protocolEvent, 'Unknown value for options.waitUntil: ' + value);\n            return protocolEvent;\n        }), \"f\");\n        __classPrivateFieldSet(this, _LifecycleWatcher_frameManager, frameManager, \"f\");\n        __classPrivateFieldSet(this, _LifecycleWatcher_frame, frame, \"f\");\n        __classPrivateFieldSet(this, _LifecycleWatcher_timeout, timeout, \"f\");\n        __classPrivateFieldSet(this, _LifecycleWatcher_eventListeners, [\n            (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.addEventListener)(frameManager._client, _Connection_js__WEBPACK_IMPORTED_MODULE_5__.CDPSessionEmittedEvents.Disconnected, __classPrivateFieldGet(this, _LifecycleWatcher_instances, \"m\", _LifecycleWatcher_terminate).bind(this, new Error('Navigation failed because browser has disconnected!'))),\n            (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.addEventListener)(__classPrivateFieldGet(this, _LifecycleWatcher_frameManager, \"f\"), _FrameManager_js__WEBPACK_IMPORTED_MODULE_3__.FrameManagerEmittedEvents.LifecycleEvent, __classPrivateFieldGet(this, _LifecycleWatcher_instances, \"m\", _LifecycleWatcher_checkLifecycleComplete).bind(this)),\n            (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.addEventListener)(__classPrivateFieldGet(this, _LifecycleWatcher_frameManager, \"f\"), _FrameManager_js__WEBPACK_IMPORTED_MODULE_3__.FrameManagerEmittedEvents.FrameNavigatedWithinDocument, __classPrivateFieldGet(this, _LifecycleWatcher_instances, \"m\", _LifecycleWatcher_navigatedWithinDocument).bind(this)),\n            (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.addEventListener)(__classPrivateFieldGet(this, _LifecycleWatcher_frameManager, \"f\"), _FrameManager_js__WEBPACK_IMPORTED_MODULE_3__.FrameManagerEmittedEvents.FrameNavigated, __classPrivateFieldGet(this, _LifecycleWatcher_instances, \"m\", _LifecycleWatcher_navigated).bind(this)),\n            (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.addEventListener)(__classPrivateFieldGet(this, _LifecycleWatcher_frameManager, \"f\"), _FrameManager_js__WEBPACK_IMPORTED_MODULE_3__.FrameManagerEmittedEvents.FrameSwapped, __classPrivateFieldGet(this, _LifecycleWatcher_instances, \"m\", _LifecycleWatcher_frameSwapped).bind(this)),\n            (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.addEventListener)(__classPrivateFieldGet(this, _LifecycleWatcher_frameManager, \"f\"), _FrameManager_js__WEBPACK_IMPORTED_MODULE_3__.FrameManagerEmittedEvents.FrameDetached, __classPrivateFieldGet(this, _LifecycleWatcher_instances, \"m\", _LifecycleWatcher_onFrameDetached).bind(this)),\n            (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.addEventListener)(__classPrivateFieldGet(this, _LifecycleWatcher_frameManager, \"f\").networkManager(), _NetworkManager_js__WEBPACK_IMPORTED_MODULE_4__.NetworkManagerEmittedEvents.Request, __classPrivateFieldGet(this, _LifecycleWatcher_instances, \"m\", _LifecycleWatcher_onRequest).bind(this)),\n        ], \"f\");\n        __classPrivateFieldSet(this, _LifecycleWatcher_timeoutPromise, __classPrivateFieldGet(this, _LifecycleWatcher_instances, \"m\", _LifecycleWatcher_createTimeoutPromise).call(this), \"f\");\n        __classPrivateFieldGet(this, _LifecycleWatcher_instances, \"m\", _LifecycleWatcher_checkLifecycleComplete).call(this);\n    }\n    async navigationResponse() {\n        // We may need to wait for ExtraInfo events before the request is complete.\n        return __classPrivateFieldGet(this, _LifecycleWatcher_navigationRequest, \"f\") ? __classPrivateFieldGet(this, _LifecycleWatcher_navigationRequest, \"f\").response() : null;\n    }\n    sameDocumentNavigationPromise() {\n        return __classPrivateFieldGet(this, _LifecycleWatcher_sameDocumentNavigationPromise, \"f\");\n    }\n    newDocumentNavigationPromise() {\n        return __classPrivateFieldGet(this, _LifecycleWatcher_newDocumentNavigationPromise, \"f\");\n    }\n    lifecyclePromise() {\n        return __classPrivateFieldGet(this, _LifecycleWatcher_lifecyclePromise, \"f\");\n    }\n    timeoutOrTerminationPromise() {\n        return Promise.race([__classPrivateFieldGet(this, _LifecycleWatcher_timeoutPromise, \"f\"), __classPrivateFieldGet(this, _LifecycleWatcher_terminationPromise, \"f\")]);\n    }\n    dispose() {\n        (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.removeEventListeners)(__classPrivateFieldGet(this, _LifecycleWatcher_eventListeners, \"f\"));\n        __classPrivateFieldGet(this, _LifecycleWatcher_maximumTimer, \"f\") !== undefined && clearTimeout(__classPrivateFieldGet(this, _LifecycleWatcher_maximumTimer, \"f\"));\n    }\n}\n_LifecycleWatcher_expectedLifecycle = new WeakMap(), _LifecycleWatcher_frameManager = new WeakMap(), _LifecycleWatcher_frame = new WeakMap(), _LifecycleWatcher_timeout = new WeakMap(), _LifecycleWatcher_navigationRequest = new WeakMap(), _LifecycleWatcher_eventListeners = new WeakMap(), _LifecycleWatcher_sameDocumentNavigationCompleteCallback = new WeakMap(), _LifecycleWatcher_sameDocumentNavigationPromise = new WeakMap(), _LifecycleWatcher_lifecycleCallback = new WeakMap(), _LifecycleWatcher_lifecyclePromise = new WeakMap(), _LifecycleWatcher_newDocumentNavigationCompleteCallback = new WeakMap(), _LifecycleWatcher_newDocumentNavigationPromise = new WeakMap(), _LifecycleWatcher_terminationCallback = new WeakMap(), _LifecycleWatcher_terminationPromise = new WeakMap(), _LifecycleWatcher_timeoutPromise = new WeakMap(), _LifecycleWatcher_maximumTimer = new WeakMap(), _LifecycleWatcher_hasSameDocumentNavigation = new WeakMap(), _LifecycleWatcher_newDocumentNavigation = new WeakMap(), _LifecycleWatcher_swapped = new WeakMap(), _LifecycleWatcher_instances = new WeakSet(), _LifecycleWatcher_onRequest = function _LifecycleWatcher_onRequest(request) {\n    if (request.frame() !== __classPrivateFieldGet(this, _LifecycleWatcher_frame, \"f\") || !request.isNavigationRequest()) {\n        return;\n    }\n    __classPrivateFieldSet(this, _LifecycleWatcher_navigationRequest, request, \"f\");\n}, _LifecycleWatcher_onFrameDetached = function _LifecycleWatcher_onFrameDetached(frame) {\n    if (__classPrivateFieldGet(this, _LifecycleWatcher_frame, \"f\") === frame) {\n        __classPrivateFieldGet(this, _LifecycleWatcher_terminationCallback, \"f\").call(null, new Error('Navigating frame was detached'));\n        return;\n    }\n    __classPrivateFieldGet(this, _LifecycleWatcher_instances, \"m\", _LifecycleWatcher_checkLifecycleComplete).call(this);\n}, _LifecycleWatcher_terminate = function _LifecycleWatcher_terminate(error) {\n    __classPrivateFieldGet(this, _LifecycleWatcher_terminationCallback, \"f\").call(null, error);\n}, _LifecycleWatcher_createTimeoutPromise = async function _LifecycleWatcher_createTimeoutPromise() {\n    if (!__classPrivateFieldGet(this, _LifecycleWatcher_timeout, \"f\")) {\n        return new Promise(noop);\n    }\n    const errorMessage = 'Navigation timeout of ' + __classPrivateFieldGet(this, _LifecycleWatcher_timeout, \"f\") + ' ms exceeded';\n    await new Promise((fulfill) => {\n        return (__classPrivateFieldSet(this, _LifecycleWatcher_maximumTimer, setTimeout(fulfill, __classPrivateFieldGet(this, _LifecycleWatcher_timeout, \"f\")), \"f\"));\n    });\n    return new _Errors_js__WEBPACK_IMPORTED_MODULE_2__.TimeoutError(errorMessage);\n}, _LifecycleWatcher_navigatedWithinDocument = function _LifecycleWatcher_navigatedWithinDocument(frame) {\n    if (frame !== __classPrivateFieldGet(this, _LifecycleWatcher_frame, \"f\")) {\n        return;\n    }\n    __classPrivateFieldSet(this, _LifecycleWatcher_hasSameDocumentNavigation, true, \"f\");\n    __classPrivateFieldGet(this, _LifecycleWatcher_instances, \"m\", _LifecycleWatcher_checkLifecycleComplete).call(this);\n}, _LifecycleWatcher_navigated = function _LifecycleWatcher_navigated(frame) {\n    if (frame !== __classPrivateFieldGet(this, _LifecycleWatcher_frame, \"f\")) {\n        return;\n    }\n    __classPrivateFieldSet(this, _LifecycleWatcher_newDocumentNavigation, true, \"f\");\n    __classPrivateFieldGet(this, _LifecycleWatcher_instances, \"m\", _LifecycleWatcher_checkLifecycleComplete).call(this);\n}, _LifecycleWatcher_frameSwapped = function _LifecycleWatcher_frameSwapped(frame) {\n    if (frame !== __classPrivateFieldGet(this, _LifecycleWatcher_frame, \"f\")) {\n        return;\n    }\n    __classPrivateFieldSet(this, _LifecycleWatcher_swapped, true, \"f\");\n    __classPrivateFieldGet(this, _LifecycleWatcher_instances, \"m\", _LifecycleWatcher_checkLifecycleComplete).call(this);\n}, _LifecycleWatcher_checkLifecycleComplete = function _LifecycleWatcher_checkLifecycleComplete() {\n    // We expect navigation to commit.\n    if (!checkLifecycle(__classPrivateFieldGet(this, _LifecycleWatcher_frame, \"f\"), __classPrivateFieldGet(this, _LifecycleWatcher_expectedLifecycle, \"f\"))) {\n        return;\n    }\n    __classPrivateFieldGet(this, _LifecycleWatcher_lifecycleCallback, \"f\").call(this);\n    if (__classPrivateFieldGet(this, _LifecycleWatcher_hasSameDocumentNavigation, \"f\")) {\n        __classPrivateFieldGet(this, _LifecycleWatcher_sameDocumentNavigationCompleteCallback, \"f\").call(this);\n    }\n    if (__classPrivateFieldGet(this, _LifecycleWatcher_swapped, \"f\") || __classPrivateFieldGet(this, _LifecycleWatcher_newDocumentNavigation, \"f\")) {\n        __classPrivateFieldGet(this, _LifecycleWatcher_newDocumentNavigationCompleteCallback, \"f\").call(this);\n    }\n    function checkLifecycle(frame, expectedLifecycle) {\n        for (const event of expectedLifecycle) {\n            if (!frame._lifecycleEvents.has(event)) {\n                return false;\n            }\n        }\n        for (const child of frame.childFrames()) {\n            if (child._hasStartedLoading &&\n                !checkLifecycle(child, expectedLifecycle)) {\n                return false;\n            }\n        }\n        return true;\n    }\n};\n//# sourceMappingURL=LifecycleWatcher.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/LifecycleWatcher.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/NetworkConditions.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/NetworkConditions.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"networkConditions\": () => (/* binding */ networkConditions)\n/* harmony export */ });\n/**\n * Copyright 2021 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @public\n */\nconst networkConditions = {\n    'Slow 3G': {\n        download: ((500 * 1000) / 8) * 0.8,\n        upload: ((500 * 1000) / 8) * 0.8,\n        latency: 400 * 5,\n    },\n    'Fast 3G': {\n        download: ((1.6 * 1000 * 1000) / 8) * 0.9,\n        upload: ((750 * 1000) / 8) * 0.9,\n        latency: 150 * 3.75,\n    },\n};\n//# sourceMappingURL=NetworkConditions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvZ29nb2FuaW1lLWFwaS9ub2RlX21vZHVsZXMvcHVwcGV0ZWVyL2xpYi9lc20vcHVwcGV0ZWVyL2NvbW1vbi9OZXR3b3JrQ29uZGl0aW9ucy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW5pbWVmbGl4Ly4vbm9kZV9tb2R1bGVzL2dvZ29hbmltZS1hcGkvbm9kZV9tb2R1bGVzL3B1cHBldGVlci9saWIvZXNtL3B1cHBldGVlci9jb21tb24vTmV0d29ya0NvbmRpdGlvbnMuanM/NTVhZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IG5ldHdvcmtDb25kaXRpb25zID0ge1xuICAgICdTbG93IDNHJzoge1xuICAgICAgICBkb3dubG9hZDogKCg1MDAgKiAxMDAwKSAvIDgpICogMC44LFxuICAgICAgICB1cGxvYWQ6ICgoNTAwICogMTAwMCkgLyA4KSAqIDAuOCxcbiAgICAgICAgbGF0ZW5jeTogNDAwICogNSxcbiAgICB9LFxuICAgICdGYXN0IDNHJzoge1xuICAgICAgICBkb3dubG9hZDogKCgxLjYgKiAxMDAwICogMTAwMCkgLyA4KSAqIDAuOSxcbiAgICAgICAgdXBsb2FkOiAoKDc1MCAqIDEwMDApIC8gOCkgKiAwLjksXG4gICAgICAgIGxhdGVuY3k6IDE1MCAqIDMuNzUsXG4gICAgfSxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1OZXR3b3JrQ29uZGl0aW9ucy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/NetworkConditions.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/NetworkEventManager.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/NetworkEventManager.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"NetworkEventManager\": () => (/* binding */ NetworkEventManager)\n/* harmony export */ });\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _NetworkEventManager_requestWillBeSentMap, _NetworkEventManager_requestPausedMap, _NetworkEventManager_httpRequestsMap, _NetworkEventManager_responseReceivedExtraInfoMap, _NetworkEventManager_queuedRedirectInfoMap, _NetworkEventManager_queuedEventGroupMap;\n/**\n * @internal\n *\n * Helper class to track network events by request ID\n */\nclass NetworkEventManager {\n    constructor() {\n        /*\n         * There are four possible orders of events:\n         *  A. `_onRequestWillBeSent`\n         *  B. `_onRequestWillBeSent`, `_onRequestPaused`\n         *  C. `_onRequestPaused`, `_onRequestWillBeSent`\n         *  D. `_onRequestPaused`, `_onRequestWillBeSent`, `_onRequestPaused`,\n         *     `_onRequestWillBeSent`, `_onRequestPaused`, `_onRequestPaused`\n         *     (see crbug.com/1196004)\n         *\n         * For `_onRequest` we need the event from `_onRequestWillBeSent` and\n         * optionally the `interceptionId` from `_onRequestPaused`.\n         *\n         * If request interception is disabled, call `_onRequest` once per call to\n         * `_onRequestWillBeSent`.\n         * If request interception is enabled, call `_onRequest` once per call to\n         * `_onRequestPaused` (once per `interceptionId`).\n         *\n         * Events are stored to allow for subsequent events to call `_onRequest`.\n         *\n         * Note that (chains of) redirect requests have the same `requestId` (!) as\n         * the original request. We have to anticipate series of events like these:\n         *  A. `_onRequestWillBeSent`,\n         *     `_onRequestWillBeSent`, ...\n         *  B. `_onRequestWillBeSent`, `_onRequestPaused`,\n         *     `_onRequestWillBeSent`, `_onRequestPaused`, ...\n         *  C. `_onRequestWillBeSent`, `_onRequestPaused`,\n         *     `_onRequestPaused`, `_onRequestWillBeSent`, ...\n         *  D. `_onRequestPaused`, `_onRequestWillBeSent`,\n         *     `_onRequestPaused`, `_onRequestWillBeSent`, `_onRequestPaused`,\n         *     `_onRequestWillBeSent`, `_onRequestPaused`, `_onRequestPaused`, ...\n         *     (see crbug.com/1196004)\n         */\n        _NetworkEventManager_requestWillBeSentMap.set(this, new Map());\n        _NetworkEventManager_requestPausedMap.set(this, new Map());\n        _NetworkEventManager_httpRequestsMap.set(this, new Map());\n        /*\n         * The below maps are used to reconcile Network.responseReceivedExtraInfo\n         * events with their corresponding request. Each response and redirect\n         * response gets an ExtraInfo event, and we don't know which will come first.\n         * This means that we have to store a Response or an ExtraInfo for each\n         * response, and emit the event when we get both of them. In addition, to\n         * handle redirects, we have to make them Arrays to represent the chain of\n         * events.\n         */\n        _NetworkEventManager_responseReceivedExtraInfoMap.set(this, new Map());\n        _NetworkEventManager_queuedRedirectInfoMap.set(this, new Map());\n        _NetworkEventManager_queuedEventGroupMap.set(this, new Map());\n    }\n    forget(networkRequestId) {\n        __classPrivateFieldGet(this, _NetworkEventManager_requestWillBeSentMap, \"f\").delete(networkRequestId);\n        __classPrivateFieldGet(this, _NetworkEventManager_requestPausedMap, \"f\").delete(networkRequestId);\n        __classPrivateFieldGet(this, _NetworkEventManager_queuedEventGroupMap, \"f\").delete(networkRequestId);\n        __classPrivateFieldGet(this, _NetworkEventManager_queuedRedirectInfoMap, \"f\").delete(networkRequestId);\n        __classPrivateFieldGet(this, _NetworkEventManager_responseReceivedExtraInfoMap, \"f\").delete(networkRequestId);\n    }\n    responseExtraInfo(networkRequestId) {\n        if (!__classPrivateFieldGet(this, _NetworkEventManager_responseReceivedExtraInfoMap, \"f\").has(networkRequestId)) {\n            __classPrivateFieldGet(this, _NetworkEventManager_responseReceivedExtraInfoMap, \"f\").set(networkRequestId, []);\n        }\n        return __classPrivateFieldGet(this, _NetworkEventManager_responseReceivedExtraInfoMap, \"f\").get(networkRequestId);\n    }\n    queuedRedirectInfo(fetchRequestId) {\n        if (!__classPrivateFieldGet(this, _NetworkEventManager_queuedRedirectInfoMap, \"f\").has(fetchRequestId)) {\n            __classPrivateFieldGet(this, _NetworkEventManager_queuedRedirectInfoMap, \"f\").set(fetchRequestId, []);\n        }\n        return __classPrivateFieldGet(this, _NetworkEventManager_queuedRedirectInfoMap, \"f\").get(fetchRequestId);\n    }\n    queueRedirectInfo(fetchRequestId, redirectInfo) {\n        this.queuedRedirectInfo(fetchRequestId).push(redirectInfo);\n    }\n    takeQueuedRedirectInfo(fetchRequestId) {\n        return this.queuedRedirectInfo(fetchRequestId).shift();\n    }\n    numRequestsInProgress() {\n        return [...__classPrivateFieldGet(this, _NetworkEventManager_httpRequestsMap, \"f\")].filter(([, request]) => {\n            return !request.response();\n        }).length;\n    }\n    storeRequestWillBeSent(networkRequestId, event) {\n        __classPrivateFieldGet(this, _NetworkEventManager_requestWillBeSentMap, \"f\").set(networkRequestId, event);\n    }\n    getRequestWillBeSent(networkRequestId) {\n        return __classPrivateFieldGet(this, _NetworkEventManager_requestWillBeSentMap, \"f\").get(networkRequestId);\n    }\n    forgetRequestWillBeSent(networkRequestId) {\n        __classPrivateFieldGet(this, _NetworkEventManager_requestWillBeSentMap, \"f\").delete(networkRequestId);\n    }\n    getRequestPaused(networkRequestId) {\n        return __classPrivateFieldGet(this, _NetworkEventManager_requestPausedMap, \"f\").get(networkRequestId);\n    }\n    forgetRequestPaused(networkRequestId) {\n        __classPrivateFieldGet(this, _NetworkEventManager_requestPausedMap, \"f\").delete(networkRequestId);\n    }\n    storeRequestPaused(networkRequestId, event) {\n        __classPrivateFieldGet(this, _NetworkEventManager_requestPausedMap, \"f\").set(networkRequestId, event);\n    }\n    getRequest(networkRequestId) {\n        return __classPrivateFieldGet(this, _NetworkEventManager_httpRequestsMap, \"f\").get(networkRequestId);\n    }\n    storeRequest(networkRequestId, request) {\n        __classPrivateFieldGet(this, _NetworkEventManager_httpRequestsMap, \"f\").set(networkRequestId, request);\n    }\n    forgetRequest(networkRequestId) {\n        __classPrivateFieldGet(this, _NetworkEventManager_httpRequestsMap, \"f\").delete(networkRequestId);\n    }\n    getQueuedEventGroup(networkRequestId) {\n        return __classPrivateFieldGet(this, _NetworkEventManager_queuedEventGroupMap, \"f\").get(networkRequestId);\n    }\n    queueEventGroup(networkRequestId, event) {\n        __classPrivateFieldGet(this, _NetworkEventManager_queuedEventGroupMap, \"f\").set(networkRequestId, event);\n    }\n    forgetQueuedEventGroup(networkRequestId) {\n        __classPrivateFieldGet(this, _NetworkEventManager_queuedEventGroupMap, \"f\").delete(networkRequestId);\n    }\n}\n_NetworkEventManager_requestWillBeSentMap = new WeakMap(), _NetworkEventManager_requestPausedMap = new WeakMap(), _NetworkEventManager_httpRequestsMap = new WeakMap(), _NetworkEventManager_responseReceivedExtraInfoMap = new WeakMap(), _NetworkEventManager_queuedRedirectInfoMap = new WeakMap(), _NetworkEventManager_queuedEventGroupMap = new WeakMap();\n//# sourceMappingURL=NetworkEventManager.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/NetworkEventManager.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/NetworkManager.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/NetworkManager.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"NetworkManager\": () => (/* binding */ NetworkManager),\n/* harmony export */   \"NetworkManagerEmittedEvents\": () => (/* binding */ NetworkManagerEmittedEvents)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./assert.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/assert.js\");\n/* harmony import */ var _EventEmitter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EventEmitter.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/EventEmitter.js\");\n/* harmony import */ var _HTTPRequest_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./HTTPRequest.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/HTTPRequest.js\");\n/* harmony import */ var _HTTPResponse_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./HTTPResponse.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/HTTPResponse.js\");\n/* harmony import */ var _NetworkEventManager_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./NetworkEventManager.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/NetworkEventManager.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./util.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/util.js\");\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _NetworkManager_instances, _NetworkManager_client, _NetworkManager_ignoreHTTPSErrors, _NetworkManager_frameManager, _NetworkManager_networkEventManager, _NetworkManager_extraHTTPHeaders, _NetworkManager_credentials, _NetworkManager_attemptedAuthentications, _NetworkManager_userRequestInterceptionEnabled, _NetworkManager_protocolRequestInterceptionEnabled, _NetworkManager_userCacheDisabled, _NetworkManager_emulatedNetworkConditions, _NetworkManager_updateNetworkConditions, _NetworkManager_updateProtocolRequestInterception, _NetworkManager_cacheDisabled, _NetworkManager_updateProtocolCacheDisabled, _NetworkManager_onRequestWillBeSent, _NetworkManager_onAuthRequired, _NetworkManager_onRequestPaused, _NetworkManager_patchRequestEventHeaders, _NetworkManager_onRequest, _NetworkManager_onRequestServedFromCache, _NetworkManager_handleRequestRedirect, _NetworkManager_emitResponseEvent, _NetworkManager_onResponseReceived, _NetworkManager_onResponseReceivedExtraInfo, _NetworkManager_forgetRequest, _NetworkManager_onLoadingFinished, _NetworkManager_emitLoadingFinished, _NetworkManager_onLoadingFailed, _NetworkManager_emitLoadingFailed;\n\n\n\n\n\n\n/**\n * We use symbols to prevent any external parties listening to these events.\n * They are internal to Puppeteer.\n *\n * @internal\n */\nconst NetworkManagerEmittedEvents = {\n    Request: Symbol('NetworkManager.Request'),\n    RequestServedFromCache: Symbol('NetworkManager.RequestServedFromCache'),\n    Response: Symbol('NetworkManager.Response'),\n    RequestFailed: Symbol('NetworkManager.RequestFailed'),\n    RequestFinished: Symbol('NetworkManager.RequestFinished'),\n};\n/**\n * @internal\n */\nclass NetworkManager extends _EventEmitter_js__WEBPACK_IMPORTED_MODULE_1__.EventEmitter {\n    constructor(client, ignoreHTTPSErrors, frameManager) {\n        super();\n        _NetworkManager_instances.add(this);\n        _NetworkManager_client.set(this, void 0);\n        _NetworkManager_ignoreHTTPSErrors.set(this, void 0);\n        _NetworkManager_frameManager.set(this, void 0);\n        _NetworkManager_networkEventManager.set(this, new _NetworkEventManager_js__WEBPACK_IMPORTED_MODULE_4__.NetworkEventManager());\n        _NetworkManager_extraHTTPHeaders.set(this, {});\n        _NetworkManager_credentials.set(this, void 0);\n        _NetworkManager_attemptedAuthentications.set(this, new Set());\n        _NetworkManager_userRequestInterceptionEnabled.set(this, false);\n        _NetworkManager_protocolRequestInterceptionEnabled.set(this, false);\n        _NetworkManager_userCacheDisabled.set(this, false);\n        _NetworkManager_emulatedNetworkConditions.set(this, {\n            offline: false,\n            upload: -1,\n            download: -1,\n            latency: 0,\n        });\n        __classPrivateFieldSet(this, _NetworkManager_client, client, \"f\");\n        __classPrivateFieldSet(this, _NetworkManager_ignoreHTTPSErrors, ignoreHTTPSErrors, \"f\");\n        __classPrivateFieldSet(this, _NetworkManager_frameManager, frameManager, \"f\");\n        __classPrivateFieldGet(this, _NetworkManager_client, \"f\").on('Fetch.requestPaused', __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_onRequestPaused).bind(this));\n        __classPrivateFieldGet(this, _NetworkManager_client, \"f\").on('Fetch.authRequired', __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_onAuthRequired).bind(this));\n        __classPrivateFieldGet(this, _NetworkManager_client, \"f\").on('Network.requestWillBeSent', __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_onRequestWillBeSent).bind(this));\n        __classPrivateFieldGet(this, _NetworkManager_client, \"f\").on('Network.requestServedFromCache', __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_onRequestServedFromCache).bind(this));\n        __classPrivateFieldGet(this, _NetworkManager_client, \"f\").on('Network.responseReceived', __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_onResponseReceived).bind(this));\n        __classPrivateFieldGet(this, _NetworkManager_client, \"f\").on('Network.loadingFinished', __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_onLoadingFinished).bind(this));\n        __classPrivateFieldGet(this, _NetworkManager_client, \"f\").on('Network.loadingFailed', __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_onLoadingFailed).bind(this));\n        __classPrivateFieldGet(this, _NetworkManager_client, \"f\").on('Network.responseReceivedExtraInfo', __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_onResponseReceivedExtraInfo).bind(this));\n    }\n    async initialize() {\n        await __classPrivateFieldGet(this, _NetworkManager_client, \"f\").send('Network.enable');\n        if (__classPrivateFieldGet(this, _NetworkManager_ignoreHTTPSErrors, \"f\")) {\n            await __classPrivateFieldGet(this, _NetworkManager_client, \"f\").send('Security.setIgnoreCertificateErrors', {\n                ignore: true,\n            });\n        }\n    }\n    async authenticate(credentials) {\n        __classPrivateFieldSet(this, _NetworkManager_credentials, credentials, \"f\");\n        await __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_updateProtocolRequestInterception).call(this);\n    }\n    async setExtraHTTPHeaders(extraHTTPHeaders) {\n        __classPrivateFieldSet(this, _NetworkManager_extraHTTPHeaders, {}, \"f\");\n        for (const key of Object.keys(extraHTTPHeaders)) {\n            const value = extraHTTPHeaders[key];\n            (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)((0,_util_js__WEBPACK_IMPORTED_MODULE_5__.isString)(value), `Expected value of header \"${key}\" to be String, but \"${typeof value}\" is found.`);\n            __classPrivateFieldGet(this, _NetworkManager_extraHTTPHeaders, \"f\")[key.toLowerCase()] = value;\n        }\n        await __classPrivateFieldGet(this, _NetworkManager_client, \"f\").send('Network.setExtraHTTPHeaders', {\n            headers: __classPrivateFieldGet(this, _NetworkManager_extraHTTPHeaders, \"f\"),\n        });\n    }\n    extraHTTPHeaders() {\n        return Object.assign({}, __classPrivateFieldGet(this, _NetworkManager_extraHTTPHeaders, \"f\"));\n    }\n    numRequestsInProgress() {\n        return __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").numRequestsInProgress();\n    }\n    async setOfflineMode(value) {\n        __classPrivateFieldGet(this, _NetworkManager_emulatedNetworkConditions, \"f\").offline = value;\n        await __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_updateNetworkConditions).call(this);\n    }\n    async emulateNetworkConditions(networkConditions) {\n        __classPrivateFieldGet(this, _NetworkManager_emulatedNetworkConditions, \"f\").upload = networkConditions\n            ? networkConditions.upload\n            : -1;\n        __classPrivateFieldGet(this, _NetworkManager_emulatedNetworkConditions, \"f\").download = networkConditions\n            ? networkConditions.download\n            : -1;\n        __classPrivateFieldGet(this, _NetworkManager_emulatedNetworkConditions, \"f\").latency = networkConditions\n            ? networkConditions.latency\n            : 0;\n        await __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_updateNetworkConditions).call(this);\n    }\n    async setUserAgent(userAgent, userAgentMetadata) {\n        await __classPrivateFieldGet(this, _NetworkManager_client, \"f\").send('Network.setUserAgentOverride', {\n            userAgent: userAgent,\n            userAgentMetadata: userAgentMetadata,\n        });\n    }\n    async setCacheEnabled(enabled) {\n        __classPrivateFieldSet(this, _NetworkManager_userCacheDisabled, !enabled, \"f\");\n        await __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_updateProtocolCacheDisabled).call(this);\n    }\n    async setRequestInterception(value) {\n        __classPrivateFieldSet(this, _NetworkManager_userRequestInterceptionEnabled, value, \"f\");\n        await __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_updateProtocolRequestInterception).call(this);\n    }\n}\n_NetworkManager_client = new WeakMap(), _NetworkManager_ignoreHTTPSErrors = new WeakMap(), _NetworkManager_frameManager = new WeakMap(), _NetworkManager_networkEventManager = new WeakMap(), _NetworkManager_extraHTTPHeaders = new WeakMap(), _NetworkManager_credentials = new WeakMap(), _NetworkManager_attemptedAuthentications = new WeakMap(), _NetworkManager_userRequestInterceptionEnabled = new WeakMap(), _NetworkManager_protocolRequestInterceptionEnabled = new WeakMap(), _NetworkManager_userCacheDisabled = new WeakMap(), _NetworkManager_emulatedNetworkConditions = new WeakMap(), _NetworkManager_instances = new WeakSet(), _NetworkManager_updateNetworkConditions = async function _NetworkManager_updateNetworkConditions() {\n    await __classPrivateFieldGet(this, _NetworkManager_client, \"f\").send('Network.emulateNetworkConditions', {\n        offline: __classPrivateFieldGet(this, _NetworkManager_emulatedNetworkConditions, \"f\").offline,\n        latency: __classPrivateFieldGet(this, _NetworkManager_emulatedNetworkConditions, \"f\").latency,\n        uploadThroughput: __classPrivateFieldGet(this, _NetworkManager_emulatedNetworkConditions, \"f\").upload,\n        downloadThroughput: __classPrivateFieldGet(this, _NetworkManager_emulatedNetworkConditions, \"f\").download,\n    });\n}, _NetworkManager_updateProtocolRequestInterception = async function _NetworkManager_updateProtocolRequestInterception() {\n    const enabled = __classPrivateFieldGet(this, _NetworkManager_userRequestInterceptionEnabled, \"f\") || !!__classPrivateFieldGet(this, _NetworkManager_credentials, \"f\");\n    if (enabled === __classPrivateFieldGet(this, _NetworkManager_protocolRequestInterceptionEnabled, \"f\")) {\n        return;\n    }\n    __classPrivateFieldSet(this, _NetworkManager_protocolRequestInterceptionEnabled, enabled, \"f\");\n    if (enabled) {\n        await Promise.all([\n            __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_updateProtocolCacheDisabled).call(this),\n            __classPrivateFieldGet(this, _NetworkManager_client, \"f\").send('Fetch.enable', {\n                handleAuthRequests: true,\n                patterns: [{ urlPattern: '*' }],\n            }),\n        ]);\n    }\n    else {\n        await Promise.all([\n            __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_updateProtocolCacheDisabled).call(this),\n            __classPrivateFieldGet(this, _NetworkManager_client, \"f\").send('Fetch.disable'),\n        ]);\n    }\n}, _NetworkManager_cacheDisabled = function _NetworkManager_cacheDisabled() {\n    return __classPrivateFieldGet(this, _NetworkManager_userCacheDisabled, \"f\");\n}, _NetworkManager_updateProtocolCacheDisabled = async function _NetworkManager_updateProtocolCacheDisabled() {\n    await __classPrivateFieldGet(this, _NetworkManager_client, \"f\").send('Network.setCacheDisabled', {\n        cacheDisabled: __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_cacheDisabled).call(this),\n    });\n}, _NetworkManager_onRequestWillBeSent = function _NetworkManager_onRequestWillBeSent(event) {\n    // Request interception doesn't happen for data URLs with Network Service.\n    if (__classPrivateFieldGet(this, _NetworkManager_userRequestInterceptionEnabled, \"f\") &&\n        !event.request.url.startsWith('data:')) {\n        const { requestId: networkRequestId } = event;\n        __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").storeRequestWillBeSent(networkRequestId, event);\n        /**\n         * CDP may have sent a Fetch.requestPaused event already. Check for it.\n         */\n        const requestPausedEvent = __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").getRequestPaused(networkRequestId);\n        if (requestPausedEvent) {\n            const { requestId: fetchRequestId } = requestPausedEvent;\n            __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_patchRequestEventHeaders).call(this, event, requestPausedEvent);\n            __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_onRequest).call(this, event, fetchRequestId);\n            __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").forgetRequestPaused(networkRequestId);\n        }\n        return;\n    }\n    __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_onRequest).call(this, event, undefined);\n}, _NetworkManager_onAuthRequired = function _NetworkManager_onAuthRequired(event) {\n    let response = 'Default';\n    if (__classPrivateFieldGet(this, _NetworkManager_attemptedAuthentications, \"f\").has(event.requestId)) {\n        response = 'CancelAuth';\n    }\n    else if (__classPrivateFieldGet(this, _NetworkManager_credentials, \"f\")) {\n        response = 'ProvideCredentials';\n        __classPrivateFieldGet(this, _NetworkManager_attemptedAuthentications, \"f\").add(event.requestId);\n    }\n    const { username, password } = __classPrivateFieldGet(this, _NetworkManager_credentials, \"f\") || {\n        username: undefined,\n        password: undefined,\n    };\n    __classPrivateFieldGet(this, _NetworkManager_client, \"f\")\n        .send('Fetch.continueWithAuth', {\n        requestId: event.requestId,\n        authChallengeResponse: { response, username, password },\n    })\n        .catch(_util_js__WEBPACK_IMPORTED_MODULE_5__.debugError);\n}, _NetworkManager_onRequestPaused = function _NetworkManager_onRequestPaused(event) {\n    if (!__classPrivateFieldGet(this, _NetworkManager_userRequestInterceptionEnabled, \"f\") &&\n        __classPrivateFieldGet(this, _NetworkManager_protocolRequestInterceptionEnabled, \"f\")) {\n        __classPrivateFieldGet(this, _NetworkManager_client, \"f\")\n            .send('Fetch.continueRequest', {\n            requestId: event.requestId,\n        })\n            .catch(_util_js__WEBPACK_IMPORTED_MODULE_5__.debugError);\n    }\n    const { networkId: networkRequestId, requestId: fetchRequestId } = event;\n    if (!networkRequestId) {\n        return;\n    }\n    const requestWillBeSentEvent = (() => {\n        const requestWillBeSentEvent = __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").getRequestWillBeSent(networkRequestId);\n        // redirect requests have the same `requestId`,\n        if (requestWillBeSentEvent &&\n            (requestWillBeSentEvent.request.url !== event.request.url ||\n                requestWillBeSentEvent.request.method !== event.request.method)) {\n            __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").forgetRequestWillBeSent(networkRequestId);\n            return;\n        }\n        return requestWillBeSentEvent;\n    })();\n    if (requestWillBeSentEvent) {\n        __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_patchRequestEventHeaders).call(this, requestWillBeSentEvent, event);\n        __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_onRequest).call(this, requestWillBeSentEvent, fetchRequestId);\n    }\n    else {\n        __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").storeRequestPaused(networkRequestId, event);\n    }\n}, _NetworkManager_patchRequestEventHeaders = function _NetworkManager_patchRequestEventHeaders(requestWillBeSentEvent, requestPausedEvent) {\n    requestWillBeSentEvent.request.headers = {\n        ...requestWillBeSentEvent.request.headers,\n        // includes extra headers, like: Accept, Origin\n        ...requestPausedEvent.request.headers,\n    };\n}, _NetworkManager_onRequest = function _NetworkManager_onRequest(event, fetchRequestId) {\n    let redirectChain = [];\n    if (event.redirectResponse) {\n        // We want to emit a response and requestfinished for the\n        // redirectResponse, but we can't do so unless we have a\n        // responseExtraInfo ready to pair it up with. If we don't have any\n        // responseExtraInfos saved in our queue, they we have to wait until\n        // the next one to emit response and requestfinished, *and* we should\n        // also wait to emit this Request too because it should come after the\n        // response/requestfinished.\n        let redirectResponseExtraInfo = null;\n        if (event.redirectHasExtraInfo) {\n            redirectResponseExtraInfo = __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\")\n                .responseExtraInfo(event.requestId)\n                .shift();\n            if (!redirectResponseExtraInfo) {\n                __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").queueRedirectInfo(event.requestId, {\n                    event,\n                    fetchRequestId,\n                });\n                return;\n            }\n        }\n        const request = __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").getRequest(event.requestId);\n        // If we connect late to the target, we could have missed the\n        // requestWillBeSent event.\n        if (request) {\n            __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_handleRequestRedirect).call(this, request, event.redirectResponse, redirectResponseExtraInfo);\n            redirectChain = request._redirectChain;\n        }\n    }\n    const frame = event.frameId\n        ? __classPrivateFieldGet(this, _NetworkManager_frameManager, \"f\").frame(event.frameId)\n        : null;\n    const request = new _HTTPRequest_js__WEBPACK_IMPORTED_MODULE_2__.HTTPRequest(__classPrivateFieldGet(this, _NetworkManager_client, \"f\"), frame, fetchRequestId, __classPrivateFieldGet(this, _NetworkManager_userRequestInterceptionEnabled, \"f\"), event, redirectChain);\n    __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").storeRequest(event.requestId, request);\n    this.emit(NetworkManagerEmittedEvents.Request, request);\n    request.finalizeInterceptions();\n}, _NetworkManager_onRequestServedFromCache = function _NetworkManager_onRequestServedFromCache(event) {\n    const request = __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").getRequest(event.requestId);\n    if (request) {\n        request._fromMemoryCache = true;\n    }\n    this.emit(NetworkManagerEmittedEvents.RequestServedFromCache, request);\n}, _NetworkManager_handleRequestRedirect = function _NetworkManager_handleRequestRedirect(request, responsePayload, extraInfo) {\n    const response = new _HTTPResponse_js__WEBPACK_IMPORTED_MODULE_3__.HTTPResponse(__classPrivateFieldGet(this, _NetworkManager_client, \"f\"), request, responsePayload, extraInfo);\n    request._response = response;\n    request._redirectChain.push(request);\n    response._resolveBody(new Error('Response body is unavailable for redirect responses'));\n    __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_forgetRequest).call(this, request, false);\n    this.emit(NetworkManagerEmittedEvents.Response, response);\n    this.emit(NetworkManagerEmittedEvents.RequestFinished, request);\n}, _NetworkManager_emitResponseEvent = function _NetworkManager_emitResponseEvent(responseReceived, extraInfo) {\n    const request = __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").getRequest(responseReceived.requestId);\n    // FileUpload sends a response without a matching request.\n    if (!request) {\n        return;\n    }\n    const extraInfos = __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").responseExtraInfo(responseReceived.requestId);\n    if (extraInfos.length) {\n        (0,_util_js__WEBPACK_IMPORTED_MODULE_5__.debugError)(new Error('Unexpected extraInfo events for request ' +\n            responseReceived.requestId));\n    }\n    const response = new _HTTPResponse_js__WEBPACK_IMPORTED_MODULE_3__.HTTPResponse(__classPrivateFieldGet(this, _NetworkManager_client, \"f\"), request, responseReceived.response, extraInfo);\n    request._response = response;\n    this.emit(NetworkManagerEmittedEvents.Response, response);\n}, _NetworkManager_onResponseReceived = function _NetworkManager_onResponseReceived(event) {\n    const request = __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").getRequest(event.requestId);\n    let extraInfo = null;\n    if (request && !request._fromMemoryCache && event.hasExtraInfo) {\n        extraInfo = __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\")\n            .responseExtraInfo(event.requestId)\n            .shift();\n        if (!extraInfo) {\n            // Wait until we get the corresponding ExtraInfo event.\n            __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").queueEventGroup(event.requestId, {\n                responseReceivedEvent: event,\n            });\n            return;\n        }\n    }\n    __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_emitResponseEvent).call(this, event, extraInfo);\n}, _NetworkManager_onResponseReceivedExtraInfo = function _NetworkManager_onResponseReceivedExtraInfo(event) {\n    // We may have skipped a redirect response/request pair due to waiting for\n    // this ExtraInfo event. If so, continue that work now that we have the\n    // request.\n    const redirectInfo = __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").takeQueuedRedirectInfo(event.requestId);\n    if (redirectInfo) {\n        __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").responseExtraInfo(event.requestId).push(event);\n        __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_onRequest).call(this, redirectInfo.event, redirectInfo.fetchRequestId);\n        return;\n    }\n    // We may have skipped response and loading events because we didn't have\n    // this ExtraInfo event yet. If so, emit those events now.\n    const queuedEvents = __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").getQueuedEventGroup(event.requestId);\n    if (queuedEvents) {\n        __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").forgetQueuedEventGroup(event.requestId);\n        __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_emitResponseEvent).call(this, queuedEvents.responseReceivedEvent, event);\n        if (queuedEvents.loadingFinishedEvent) {\n            __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_emitLoadingFinished).call(this, queuedEvents.loadingFinishedEvent);\n        }\n        if (queuedEvents.loadingFailedEvent) {\n            __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_emitLoadingFailed).call(this, queuedEvents.loadingFailedEvent);\n        }\n        return;\n    }\n    // Wait until we get another event that can use this ExtraInfo event.\n    __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").responseExtraInfo(event.requestId).push(event);\n}, _NetworkManager_forgetRequest = function _NetworkManager_forgetRequest(request, events) {\n    const requestId = request._requestId;\n    const interceptionId = request._interceptionId;\n    __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").forgetRequest(requestId);\n    interceptionId !== undefined &&\n        __classPrivateFieldGet(this, _NetworkManager_attemptedAuthentications, \"f\").delete(interceptionId);\n    if (events) {\n        __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").forget(requestId);\n    }\n}, _NetworkManager_onLoadingFinished = function _NetworkManager_onLoadingFinished(event) {\n    // If the response event for this request is still waiting on a\n    // corresponding ExtraInfo event, then wait to emit this event too.\n    const queuedEvents = __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").getQueuedEventGroup(event.requestId);\n    if (queuedEvents) {\n        queuedEvents.loadingFinishedEvent = event;\n    }\n    else {\n        __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_emitLoadingFinished).call(this, event);\n    }\n}, _NetworkManager_emitLoadingFinished = function _NetworkManager_emitLoadingFinished(event) {\n    var _a;\n    const request = __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").getRequest(event.requestId);\n    // For certain requestIds we never receive requestWillBeSent event.\n    // @see https://crbug.com/750469\n    if (!request) {\n        return;\n    }\n    // Under certain conditions we never get the Network.responseReceived\n    // event from protocol. @see https://crbug.com/883475\n    if (request.response()) {\n        (_a = request.response()) === null || _a === void 0 ? void 0 : _a._resolveBody(null);\n    }\n    __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_forgetRequest).call(this, request, true);\n    this.emit(NetworkManagerEmittedEvents.RequestFinished, request);\n}, _NetworkManager_onLoadingFailed = function _NetworkManager_onLoadingFailed(event) {\n    // If the response event for this request is still waiting on a\n    // corresponding ExtraInfo event, then wait to emit this event too.\n    const queuedEvents = __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").getQueuedEventGroup(event.requestId);\n    if (queuedEvents) {\n        queuedEvents.loadingFailedEvent = event;\n    }\n    else {\n        __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_emitLoadingFailed).call(this, event);\n    }\n}, _NetworkManager_emitLoadingFailed = function _NetworkManager_emitLoadingFailed(event) {\n    const request = __classPrivateFieldGet(this, _NetworkManager_networkEventManager, \"f\").getRequest(event.requestId);\n    // For certain requestIds we never receive requestWillBeSent event.\n    // @see https://crbug.com/750469\n    if (!request) {\n        return;\n    }\n    request._failureText = event.errorText;\n    const response = request.response();\n    if (response) {\n        response._resolveBody(null);\n    }\n    __classPrivateFieldGet(this, _NetworkManager_instances, \"m\", _NetworkManager_forgetRequest).call(this, request, true);\n    this.emit(NetworkManagerEmittedEvents.RequestFailed, request);\n};\n//# sourceMappingURL=NetworkManager.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/NetworkManager.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/PDFOptions.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/PDFOptions.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"_paperFormats\": () => (/* binding */ _paperFormats)\n/* harmony export */ });\n/**\n * Copyright 2020 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @internal\n */\nconst _paperFormats = {\n    letter: { width: 8.5, height: 11 },\n    legal: { width: 8.5, height: 14 },\n    tabloid: { width: 11, height: 17 },\n    ledger: { width: 17, height: 11 },\n    a0: { width: 33.1, height: 46.8 },\n    a1: { width: 23.4, height: 33.1 },\n    a2: { width: 16.54, height: 23.4 },\n    a3: { width: 11.7, height: 16.54 },\n    a4: { width: 8.27, height: 11.7 },\n    a5: { width: 5.83, height: 8.27 },\n    a6: { width: 4.13, height: 5.83 },\n};\n//# sourceMappingURL=PDFOptions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvZ29nb2FuaW1lLWFwaS9ub2RlX21vZHVsZXMvcHVwcGV0ZWVyL2xpYi9lc20vcHVwcGV0ZWVyL2NvbW1vbi9QREZPcHRpb25zLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLGNBQWMsd0JBQXdCO0FBQ3RDLGFBQWEsd0JBQXdCO0FBQ3JDLGVBQWUsdUJBQXVCO0FBQ3RDLGNBQWMsdUJBQXVCO0FBQ3JDLFVBQVUsMkJBQTJCO0FBQ3JDLFVBQVUsMkJBQTJCO0FBQ3JDLFVBQVUsNEJBQTRCO0FBQ3RDLFVBQVUsNEJBQTRCO0FBQ3RDLFVBQVUsMkJBQTJCO0FBQ3JDLFVBQVUsMkJBQTJCO0FBQ3JDLFVBQVUsMkJBQTJCO0FBQ3JDO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbmltZWZsaXgvLi9ub2RlX21vZHVsZXMvZ29nb2FuaW1lLWFwaS9ub2RlX21vZHVsZXMvcHVwcGV0ZWVyL2xpYi9lc20vcHVwcGV0ZWVyL2NvbW1vbi9QREZPcHRpb25zLmpzPzlkNDgiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IF9wYXBlckZvcm1hdHMgPSB7XG4gICAgbGV0dGVyOiB7IHdpZHRoOiA4LjUsIGhlaWdodDogMTEgfSxcbiAgICBsZWdhbDogeyB3aWR0aDogOC41LCBoZWlnaHQ6IDE0IH0sXG4gICAgdGFibG9pZDogeyB3aWR0aDogMTEsIGhlaWdodDogMTcgfSxcbiAgICBsZWRnZXI6IHsgd2lkdGg6IDE3LCBoZWlnaHQ6IDExIH0sXG4gICAgYTA6IHsgd2lkdGg6IDMzLjEsIGhlaWdodDogNDYuOCB9LFxuICAgIGExOiB7IHdpZHRoOiAyMy40LCBoZWlnaHQ6IDMzLjEgfSxcbiAgICBhMjogeyB3aWR0aDogMTYuNTQsIGhlaWdodDogMjMuNCB9LFxuICAgIGEzOiB7IHdpZHRoOiAxMS43LCBoZWlnaHQ6IDE2LjU0IH0sXG4gICAgYTQ6IHsgd2lkdGg6IDguMjcsIGhlaWdodDogMTEuNyB9LFxuICAgIGE1OiB7IHdpZHRoOiA1LjgzLCBoZWlnaHQ6IDguMjcgfSxcbiAgICBhNjogeyB3aWR0aDogNC4xMywgaGVpZ2h0OiA1LjgzIH0sXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UERGT3B0aW9ucy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/PDFOptions.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Page.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Page.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Page\": () => (/* binding */ Page)\n/* harmony export */ });\n/* harmony import */ var _Accessibility_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Accessibility.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Accessibility.js\");\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./assert.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/assert.js\");\n/* harmony import */ var _Connection_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Connection.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Connection.js\");\n/* harmony import */ var _ConsoleMessage_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ConsoleMessage.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/ConsoleMessage.js\");\n/* harmony import */ var _Coverage_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Coverage.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Coverage.js\");\n/* harmony import */ var _Dialog_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Dialog.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Dialog.js\");\n/* harmony import */ var _EmulationManager_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./EmulationManager.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/EmulationManager.js\");\n/* harmony import */ var _EventEmitter_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./EventEmitter.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/EventEmitter.js\");\n/* harmony import */ var _FileChooser_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./FileChooser.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/FileChooser.js\");\n/* harmony import */ var _FrameManager_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./FrameManager.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/FrameManager.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./util.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/util.js\");\n/* harmony import */ var _Input_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Input.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Input.js\");\n/* harmony import */ var _JSHandle_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./JSHandle.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/JSHandle.js\");\n/* harmony import */ var _NetworkManager_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./NetworkManager.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/NetworkManager.js\");\n/* harmony import */ var _PDFOptions_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./PDFOptions.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/PDFOptions.js\");\n/* harmony import */ var _TimeoutSettings_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./TimeoutSettings.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/TimeoutSettings.js\");\n/* harmony import */ var _Tracing_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./Tracing.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Tracing.js\");\n/* harmony import */ var _WebWorker_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./WebWorker.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/WebWorker.js\");\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Page_instances, _Page_closed, _Page_client, _Page_target, _Page_keyboard, _Page_mouse, _Page_timeoutSettings, _Page_touchscreen, _Page_accessibility, _Page_frameManager, _Page_emulationManager, _Page_tracing, _Page_pageBindings, _Page_coverage, _Page_javascriptEnabled, _Page_viewport, _Page_screenshotTaskQueue, _Page_workers, _Page_fileChooserInterceptors, _Page_disconnectPromise, _Page_userDragInterceptionEnabled, _Page_handlerMap, _Page_initialize, _Page_onFileChooser, _Page_onTargetCrashed, _Page_onLogEntryAdded, _Page_emitMetrics, _Page_buildMetricsObject, _Page_handleException, _Page_onConsoleAPI, _Page_onBindingCalled, _Page_addConsoleMessage, _Page_onDialog, _Page_resetDefaultBackgroundColor, _Page_setTransparentBackgroundColor, _Page_sessionClosePromise, _Page_go, _Page_screenshotTask;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Page provides methods to interact with a single tab or\n * {@link https://developer.chrome.com/extensions/background_pages | extension background page} in Chromium.\n *\n * @remarks\n *\n * One Browser instance might have multiple Page instances.\n *\n * @example\n * This example creates a page, navigates it to a URL, and then * saves a screenshot:\n * ```js\n * const puppeteer = require('puppeteer');\n *\n * (async () => {\n *   const browser = await puppeteer.launch();\n *   const page = await browser.newPage();\n *   await page.goto('https://example.com');\n *   await page.screenshot({path: 'screenshot.png'});\n *   await browser.close();\n * })();\n * ```\n *\n * The Page class extends from Puppeteer's {@link EventEmitter} class and will\n * emit various events which are documented in the {@link PageEmittedEvents} enum.\n *\n * @example\n * This example logs a message for a single page `load` event:\n * ```js\n * page.once('load', () => console.log('Page loaded!'));\n * ```\n *\n * To unsubscribe from events use the `off` method:\n *\n * ```js\n * function logRequest(interceptedRequest) {\n *   console.log('A request was made:', interceptedRequest.url());\n * }\n * page.on('request', logRequest);\n * // Sometime later...\n * page.off('request', logRequest);\n * ```\n * @public\n */\nclass Page extends _EventEmitter_js__WEBPACK_IMPORTED_MODULE_7__.EventEmitter {\n    /**\n     * @internal\n     */\n    constructor(client, target, ignoreHTTPSErrors, screenshotTaskQueue) {\n        super();\n        _Page_instances.add(this);\n        _Page_closed.set(this, false);\n        _Page_client.set(this, void 0);\n        _Page_target.set(this, void 0);\n        _Page_keyboard.set(this, void 0);\n        _Page_mouse.set(this, void 0);\n        _Page_timeoutSettings.set(this, new _TimeoutSettings_js__WEBPACK_IMPORTED_MODULE_15__.TimeoutSettings());\n        _Page_touchscreen.set(this, void 0);\n        _Page_accessibility.set(this, void 0);\n        _Page_frameManager.set(this, void 0);\n        _Page_emulationManager.set(this, void 0);\n        _Page_tracing.set(this, void 0);\n        _Page_pageBindings.set(this, new Map());\n        _Page_coverage.set(this, void 0);\n        _Page_javascriptEnabled.set(this, true);\n        _Page_viewport.set(this, void 0);\n        _Page_screenshotTaskQueue.set(this, void 0);\n        _Page_workers.set(this, new Map());\n        // TODO: improve this typedef - it's a function that takes a file chooser or\n        // something?\n        _Page_fileChooserInterceptors.set(this, new Set());\n        _Page_disconnectPromise.set(this, void 0);\n        _Page_userDragInterceptionEnabled.set(this, false);\n        _Page_handlerMap.set(this, new WeakMap());\n        __classPrivateFieldSet(this, _Page_client, client, \"f\");\n        __classPrivateFieldSet(this, _Page_target, target, \"f\");\n        __classPrivateFieldSet(this, _Page_keyboard, new _Input_js__WEBPACK_IMPORTED_MODULE_11__.Keyboard(client), \"f\");\n        __classPrivateFieldSet(this, _Page_mouse, new _Input_js__WEBPACK_IMPORTED_MODULE_11__.Mouse(client, __classPrivateFieldGet(this, _Page_keyboard, \"f\")), \"f\");\n        __classPrivateFieldSet(this, _Page_touchscreen, new _Input_js__WEBPACK_IMPORTED_MODULE_11__.Touchscreen(client, __classPrivateFieldGet(this, _Page_keyboard, \"f\")), \"f\");\n        __classPrivateFieldSet(this, _Page_accessibility, new _Accessibility_js__WEBPACK_IMPORTED_MODULE_0__.Accessibility(client), \"f\");\n        __classPrivateFieldSet(this, _Page_frameManager, new _FrameManager_js__WEBPACK_IMPORTED_MODULE_9__.FrameManager(client, this, ignoreHTTPSErrors, __classPrivateFieldGet(this, _Page_timeoutSettings, \"f\")), \"f\");\n        __classPrivateFieldSet(this, _Page_emulationManager, new _EmulationManager_js__WEBPACK_IMPORTED_MODULE_6__.EmulationManager(client), \"f\");\n        __classPrivateFieldSet(this, _Page_tracing, new _Tracing_js__WEBPACK_IMPORTED_MODULE_16__.Tracing(client), \"f\");\n        __classPrivateFieldSet(this, _Page_coverage, new _Coverage_js__WEBPACK_IMPORTED_MODULE_4__.Coverage(client), \"f\");\n        __classPrivateFieldSet(this, _Page_screenshotTaskQueue, screenshotTaskQueue, \"f\");\n        __classPrivateFieldSet(this, _Page_viewport, null, \"f\");\n        client.on('Target.attachedToTarget', (event) => {\n            switch (event.targetInfo.type) {\n                case 'worker':\n                    const connection = _Connection_js__WEBPACK_IMPORTED_MODULE_2__.Connection.fromSession(client);\n                    (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.assert)(connection);\n                    const session = connection.session(event.sessionId);\n                    (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.assert)(session);\n                    const worker = new _WebWorker_js__WEBPACK_IMPORTED_MODULE_17__.WebWorker(session, event.targetInfo.url, __classPrivateFieldGet(this, _Page_instances, \"m\", _Page_addConsoleMessage).bind(this), __classPrivateFieldGet(this, _Page_instances, \"m\", _Page_handleException).bind(this));\n                    __classPrivateFieldGet(this, _Page_workers, \"f\").set(event.sessionId, worker);\n                    this.emit(\"workercreated\" /* PageEmittedEvents.WorkerCreated */, worker);\n                    break;\n                case 'iframe':\n                    break;\n                default:\n                    // If we don't detach from service workers, they will never die.\n                    // We still want to attach to workers for emitting events.\n                    // We still want to attach to iframes so sessions may interact with them.\n                    // We detach from all other types out of an abundance of caution.\n                    // See https://source.chromium.org/chromium/chromium/src/+/main:content/browser/devtools/devtools_agent_host_impl.cc?ss=chromium&q=f:devtools%20-f:out%20%22::kTypePage%5B%5D%22\n                    // for the complete list of available types.\n                    client\n                        .send('Target.detachFromTarget', {\n                        sessionId: event.sessionId,\n                    })\n                        .catch(_util_js__WEBPACK_IMPORTED_MODULE_10__.debugError);\n            }\n        });\n        client.on('Target.detachedFromTarget', (event) => {\n            const worker = __classPrivateFieldGet(this, _Page_workers, \"f\").get(event.sessionId);\n            if (!worker) {\n                return;\n            }\n            __classPrivateFieldGet(this, _Page_workers, \"f\").delete(event.sessionId);\n            this.emit(\"workerdestroyed\" /* PageEmittedEvents.WorkerDestroyed */, worker);\n        });\n        __classPrivateFieldGet(this, _Page_frameManager, \"f\").on(_FrameManager_js__WEBPACK_IMPORTED_MODULE_9__.FrameManagerEmittedEvents.FrameAttached, (event) => {\n            return this.emit(\"frameattached\" /* PageEmittedEvents.FrameAttached */, event);\n        });\n        __classPrivateFieldGet(this, _Page_frameManager, \"f\").on(_FrameManager_js__WEBPACK_IMPORTED_MODULE_9__.FrameManagerEmittedEvents.FrameDetached, (event) => {\n            return this.emit(\"framedetached\" /* PageEmittedEvents.FrameDetached */, event);\n        });\n        __classPrivateFieldGet(this, _Page_frameManager, \"f\").on(_FrameManager_js__WEBPACK_IMPORTED_MODULE_9__.FrameManagerEmittedEvents.FrameNavigated, (event) => {\n            return this.emit(\"framenavigated\" /* PageEmittedEvents.FrameNavigated */, event);\n        });\n        const networkManager = __classPrivateFieldGet(this, _Page_frameManager, \"f\").networkManager();\n        networkManager.on(_NetworkManager_js__WEBPACK_IMPORTED_MODULE_13__.NetworkManagerEmittedEvents.Request, (event) => {\n            return this.emit(\"request\" /* PageEmittedEvents.Request */, event);\n        });\n        networkManager.on(_NetworkManager_js__WEBPACK_IMPORTED_MODULE_13__.NetworkManagerEmittedEvents.RequestServedFromCache, (event) => {\n            return this.emit(\"requestservedfromcache\" /* PageEmittedEvents.RequestServedFromCache */, event);\n        });\n        networkManager.on(_NetworkManager_js__WEBPACK_IMPORTED_MODULE_13__.NetworkManagerEmittedEvents.Response, (event) => {\n            return this.emit(\"response\" /* PageEmittedEvents.Response */, event);\n        });\n        networkManager.on(_NetworkManager_js__WEBPACK_IMPORTED_MODULE_13__.NetworkManagerEmittedEvents.RequestFailed, (event) => {\n            return this.emit(\"requestfailed\" /* PageEmittedEvents.RequestFailed */, event);\n        });\n        networkManager.on(_NetworkManager_js__WEBPACK_IMPORTED_MODULE_13__.NetworkManagerEmittedEvents.RequestFinished, (event) => {\n            return this.emit(\"requestfinished\" /* PageEmittedEvents.RequestFinished */, event);\n        });\n        __classPrivateFieldSet(this, _Page_fileChooserInterceptors, new Set(), \"f\");\n        client.on('Page.domContentEventFired', () => {\n            return this.emit(\"domcontentloaded\" /* PageEmittedEvents.DOMContentLoaded */);\n        });\n        client.on('Page.loadEventFired', () => {\n            return this.emit(\"load\" /* PageEmittedEvents.Load */);\n        });\n        client.on('Runtime.consoleAPICalled', (event) => {\n            return __classPrivateFieldGet(this, _Page_instances, \"m\", _Page_onConsoleAPI).call(this, event);\n        });\n        client.on('Runtime.bindingCalled', (event) => {\n            return __classPrivateFieldGet(this, _Page_instances, \"m\", _Page_onBindingCalled).call(this, event);\n        });\n        client.on('Page.javascriptDialogOpening', (event) => {\n            return __classPrivateFieldGet(this, _Page_instances, \"m\", _Page_onDialog).call(this, event);\n        });\n        client.on('Runtime.exceptionThrown', (exception) => {\n            return __classPrivateFieldGet(this, _Page_instances, \"m\", _Page_handleException).call(this, exception.exceptionDetails);\n        });\n        client.on('Inspector.targetCrashed', () => {\n            return __classPrivateFieldGet(this, _Page_instances, \"m\", _Page_onTargetCrashed).call(this);\n        });\n        client.on('Performance.metrics', (event) => {\n            return __classPrivateFieldGet(this, _Page_instances, \"m\", _Page_emitMetrics).call(this, event);\n        });\n        client.on('Log.entryAdded', (event) => {\n            return __classPrivateFieldGet(this, _Page_instances, \"m\", _Page_onLogEntryAdded).call(this, event);\n        });\n        client.on('Page.fileChooserOpened', (event) => {\n            return __classPrivateFieldGet(this, _Page_instances, \"m\", _Page_onFileChooser).call(this, event);\n        });\n        __classPrivateFieldGet(this, _Page_target, \"f\")._isClosedPromise.then(() => {\n            this.emit(\"close\" /* PageEmittedEvents.Close */);\n            __classPrivateFieldSet(this, _Page_closed, true, \"f\");\n        });\n    }\n    /**\n     * @internal\n     */\n    static async _create(client, target, ignoreHTTPSErrors, defaultViewport, screenshotTaskQueue) {\n        const page = new Page(client, target, ignoreHTTPSErrors, screenshotTaskQueue);\n        await __classPrivateFieldGet(page, _Page_instances, \"m\", _Page_initialize).call(page);\n        if (defaultViewport) {\n            await page.setViewport(defaultViewport);\n        }\n        return page;\n    }\n    /**\n     * @returns `true` if drag events are being intercepted, `false` otherwise.\n     */\n    isDragInterceptionEnabled() {\n        return __classPrivateFieldGet(this, _Page_userDragInterceptionEnabled, \"f\");\n    }\n    /**\n     * @returns `true` if the page has JavaScript enabled, `false` otherwise.\n     */\n    isJavaScriptEnabled() {\n        return __classPrivateFieldGet(this, _Page_javascriptEnabled, \"f\");\n    }\n    /**\n     * Listen to page events.\n     */\n    // Note: this method exists to define event typings and handle\n    // proper wireup of cooperative request interception. Actual event listening and\n    // dispatching is delegated to EventEmitter.\n    on(eventName, handler) {\n        if (eventName === 'request') {\n            const wrap = __classPrivateFieldGet(this, _Page_handlerMap, \"f\").get(handler) ||\n                ((event) => {\n                    event.enqueueInterceptAction(() => {\n                        return handler(event);\n                    });\n                });\n            __classPrivateFieldGet(this, _Page_handlerMap, \"f\").set(handler, wrap);\n            return super.on(eventName, wrap);\n        }\n        return super.on(eventName, handler);\n    }\n    once(eventName, handler) {\n        // Note: this method only exists to define the types; we delegate the impl\n        // to EventEmitter.\n        return super.once(eventName, handler);\n    }\n    off(eventName, handler) {\n        if (eventName === 'request') {\n            handler = __classPrivateFieldGet(this, _Page_handlerMap, \"f\").get(handler) || handler;\n        }\n        return super.off(eventName, handler);\n    }\n    /**\n     * This method is typically coupled with an action that triggers file\n     * choosing. The following example clicks a button that issues a file chooser\n     * and then responds with `/tmp/myfile.pdf` as if a user has selected this file.\n     *\n     * ```js\n     * const [fileChooser] = await Promise.all([\n     * page.waitForFileChooser(),\n     * page.click('#upload-file-button'),\n     * // some button that triggers file selection\n     * ]);\n     * await fileChooser.accept(['/tmp/myfile.pdf']);\n     * ```\n     *\n     * NOTE: This must be called before the file chooser is launched. It will not\n     * return a currently active file chooser.\n     * @param options - Optional waiting parameters\n     * @returns Resolves after a page requests a file picker.\n     * @remarks\n     * NOTE: In non-headless Chromium, this method results in the native file picker\n     * dialog `not showing up` for the user.\n     */\n    async waitForFileChooser(options = {}) {\n        if (!__classPrivateFieldGet(this, _Page_fileChooserInterceptors, \"f\").size) {\n            await __classPrivateFieldGet(this, _Page_client, \"f\").send('Page.setInterceptFileChooserDialog', {\n                enabled: true,\n            });\n        }\n        const { timeout = __classPrivateFieldGet(this, _Page_timeoutSettings, \"f\").timeout() } = options;\n        let callback;\n        const promise = new Promise((x) => {\n            return (callback = x);\n        });\n        __classPrivateFieldGet(this, _Page_fileChooserInterceptors, \"f\").add(callback);\n        return (0,_util_js__WEBPACK_IMPORTED_MODULE_10__.waitWithTimeout)(promise, 'waiting for file chooser', timeout).catch((error) => {\n            __classPrivateFieldGet(this, _Page_fileChooserInterceptors, \"f\").delete(callback);\n            throw error;\n        });\n    }\n    /**\n     * Sets the page's geolocation.\n     * @remarks\n     * NOTE: Consider using {@link BrowserContext.overridePermissions} to grant\n     * permissions for the page to read its geolocation.\n     * @example\n     * ```js\n     * await page.setGeolocation({latitude: 59.95, longitude: 30.31667});\n     * ```\n     */\n    async setGeolocation(options) {\n        const { longitude, latitude, accuracy = 0 } = options;\n        if (longitude < -180 || longitude > 180) {\n            throw new Error(`Invalid longitude \"${longitude}\": precondition -180 <= LONGITUDE <= 180 failed.`);\n        }\n        if (latitude < -90 || latitude > 90) {\n            throw new Error(`Invalid latitude \"${latitude}\": precondition -90 <= LATITUDE <= 90 failed.`);\n        }\n        if (accuracy < 0) {\n            throw new Error(`Invalid accuracy \"${accuracy}\": precondition 0 <= ACCURACY failed.`);\n        }\n        await __classPrivateFieldGet(this, _Page_client, \"f\").send('Emulation.setGeolocationOverride', {\n            longitude,\n            latitude,\n            accuracy,\n        });\n    }\n    /**\n     * @returns A target this page was created from.\n     */\n    target() {\n        return __classPrivateFieldGet(this, _Page_target, \"f\");\n    }\n    /**\n     * @internal\n     */\n    _client() {\n        return __classPrivateFieldGet(this, _Page_client, \"f\");\n    }\n    /**\n     * Get the browser the page belongs to.\n     */\n    browser() {\n        return __classPrivateFieldGet(this, _Page_target, \"f\").browser();\n    }\n    /**\n     * Get the browser context that the page belongs to.\n     */\n    browserContext() {\n        return __classPrivateFieldGet(this, _Page_target, \"f\").browserContext();\n    }\n    /**\n     * @returns The page's main frame.\n     * @remarks\n     * Page is guaranteed to have a main frame which persists during navigations.\n     */\n    mainFrame() {\n        return __classPrivateFieldGet(this, _Page_frameManager, \"f\").mainFrame();\n    }\n    get keyboard() {\n        return __classPrivateFieldGet(this, _Page_keyboard, \"f\");\n    }\n    get touchscreen() {\n        return __classPrivateFieldGet(this, _Page_touchscreen, \"f\");\n    }\n    get coverage() {\n        return __classPrivateFieldGet(this, _Page_coverage, \"f\");\n    }\n    get tracing() {\n        return __classPrivateFieldGet(this, _Page_tracing, \"f\");\n    }\n    get accessibility() {\n        return __classPrivateFieldGet(this, _Page_accessibility, \"f\");\n    }\n    /**\n     * @returns An array of all frames attached to the page.\n     */\n    frames() {\n        return __classPrivateFieldGet(this, _Page_frameManager, \"f\").frames();\n    }\n    /**\n     * @returns all of the dedicated\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API |\n     * WebWorkers}\n     * associated with the page.\n     * @remarks\n     * NOTE: This does not contain ServiceWorkers\n     */\n    workers() {\n        return Array.from(__classPrivateFieldGet(this, _Page_workers, \"f\").values());\n    }\n    /**\n     * @param value - Whether to enable request interception.\n     *\n     * @remarks\n     * Activating request interception enables {@link HTTPRequest.abort},\n     * {@link HTTPRequest.continue} and {@link HTTPRequest.respond} methods.  This\n     * provides the capability to modify network requests that are made by a page.\n     *\n     * Once request interception is enabled, every request will stall unless it's\n     * continued, responded or aborted; or completed using the browser cache.\n     *\n     * @example\n     * An example of a naïve request interceptor that aborts all image requests:\n     * ```js\n     * const puppeteer = require('puppeteer');\n     * (async () => {\n     *   const browser = await puppeteer.launch();\n     *   const page = await browser.newPage();\n     *   await page.setRequestInterception(true);\n     *   page.on('request', interceptedRequest => {\n     *     if (interceptedRequest.url().endsWith('.png') ||\n     *         interceptedRequest.url().endsWith('.jpg'))\n     *       interceptedRequest.abort();\n     *     else\n     *       interceptedRequest.continue();\n     *     });\n     *   await page.goto('https://example.com');\n     *   await browser.close();\n     * })();\n     * ```\n     * NOTE: Enabling request interception disables page caching.\n     */\n    async setRequestInterception(value) {\n        return __classPrivateFieldGet(this, _Page_frameManager, \"f\").networkManager().setRequestInterception(value);\n    }\n    /**\n     * @param enabled - Whether to enable drag interception.\n     *\n     * @remarks\n     * Activating drag interception enables the `Input.drag`,\n     * methods  This provides the capability to capture drag events emitted\n     * on the page, which can then be used to simulate drag-and-drop.\n     */\n    async setDragInterception(enabled) {\n        __classPrivateFieldSet(this, _Page_userDragInterceptionEnabled, enabled, \"f\");\n        return __classPrivateFieldGet(this, _Page_client, \"f\").send('Input.setInterceptDrags', { enabled });\n    }\n    /**\n     * @param enabled - When `true`, enables offline mode for the page.\n     * @remarks\n     * NOTE: while this method sets the network connection to offline, it does\n     * not change the parameters used in [page.emulateNetworkConditions(networkConditions)]\n     * (#pageemulatenetworkconditionsnetworkconditions)\n     */\n    setOfflineMode(enabled) {\n        return __classPrivateFieldGet(this, _Page_frameManager, \"f\").networkManager().setOfflineMode(enabled);\n    }\n    /**\n     * @param networkConditions - Passing `null` disables network condition emulation.\n     * @example\n     * ```js\n     * const puppeteer = require('puppeteer');\n     * const slow3G = puppeteer.networkConditions['Slow 3G'];\n     *\n     * (async () => {\n     * const browser = await puppeteer.launch();\n     * const page = await browser.newPage();\n     * await page.emulateNetworkConditions(slow3G);\n     * await page.goto('https://www.google.com');\n     * // other actions...\n     * await browser.close();\n     * })();\n     * ```\n     * @remarks\n     * NOTE: This does not affect WebSockets and WebRTC PeerConnections (see\n     * https://crbug.com/563644). To set the page offline, you can use\n     * [page.setOfflineMode(enabled)](#pagesetofflinemodeenabled).\n     */\n    emulateNetworkConditions(networkConditions) {\n        return __classPrivateFieldGet(this, _Page_frameManager, \"f\")\n            .networkManager()\n            .emulateNetworkConditions(networkConditions);\n    }\n    /**\n     * This setting will change the default maximum navigation time for the\n     * following methods and related shortcuts:\n     *\n     * - {@link Page.goBack | page.goBack(options)}\n     *\n     * - {@link Page.goForward | page.goForward(options)}\n     *\n     * - {@link Page.goto | page.goto(url,options)}\n     *\n     * - {@link Page.reload | page.reload(options)}\n     *\n     * - {@link Page.setContent | page.setContent(html,options)}\n     *\n     * - {@link Page.waitForNavigation | page.waitForNavigation(options)}\n     * @param timeout - Maximum navigation time in milliseconds.\n     */\n    setDefaultNavigationTimeout(timeout) {\n        __classPrivateFieldGet(this, _Page_timeoutSettings, \"f\").setDefaultNavigationTimeout(timeout);\n    }\n    /**\n     * @param timeout - Maximum time in milliseconds.\n     */\n    setDefaultTimeout(timeout) {\n        __classPrivateFieldGet(this, _Page_timeoutSettings, \"f\").setDefaultTimeout(timeout);\n    }\n    /**\n     * Runs `document.querySelector` within the page. If no element matches the\n     * selector, the return value resolves to `null`.\n     *\n     * @remarks\n     * Shortcut for {@link Frame.$ | Page.mainFrame().$(selector) }.\n     *\n     * @param selector - A `selector` to query page for\n     * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | selector}\n     * to query page for.\n     */\n    async $(selector) {\n        return this.mainFrame().$(selector);\n    }\n    /**\n     * @remarks\n     *\n     * The only difference between {@link Page.evaluate | page.evaluate} and\n     * `page.evaluateHandle` is that `evaluateHandle` will return the value\n     * wrapped in an in-page object.\n     *\n     * If the function passed to `page.evaluteHandle` returns a Promise, the\n     * function will wait for the promise to resolve and return its value.\n     *\n     * You can pass a string instead of a function (although functions are\n     * recommended as they are easier to debug and use with TypeScript):\n     *\n     * @example\n     * ```\n     * const aHandle = await page.evaluateHandle('document')\n     * ```\n     *\n     * @example\n     * {@link JSHandle} instances can be passed as arguments to the `pageFunction`:\n     * ```\n     * const aHandle = await page.evaluateHandle(() => document.body);\n     * const resultHandle = await page.evaluateHandle(body => body.innerHTML, aHandle);\n     * console.log(await resultHandle.jsonValue());\n     * await resultHandle.dispose();\n     * ```\n     *\n     * Most of the time this function returns a {@link JSHandle},\n     * but if `pageFunction` returns a reference to an element,\n     * you instead get an {@link ElementHandle} back:\n     *\n     * @example\n     * ```\n     * const button = await page.evaluateHandle(() => document.querySelector('button'));\n     * // can call `click` because `button` is an `ElementHandle`\n     * await button.click();\n     * ```\n     *\n     * The TypeScript definitions assume that `evaluateHandle` returns\n     *  a `JSHandle`, but if you know it's going to return an\n     * `ElementHandle`, pass it as the generic argument:\n     *\n     * ```\n     * const button = await page.evaluateHandle<ElementHandle>(...);\n     * ```\n     *\n     * @param pageFunction - a function that is run within the page\n     * @param args - arguments to be passed to the pageFunction\n     */\n    async evaluateHandle(pageFunction, ...args) {\n        const context = await this.mainFrame().executionContext();\n        return context.evaluateHandle(pageFunction, ...args);\n    }\n    /**\n     * This method iterates the JavaScript heap and finds all objects with the\n     * given prototype.\n     *\n     * @remarks\n     * Shortcut for\n     * {@link ExecutionContext.queryObjects |\n     * page.mainFrame().executionContext().queryObjects(prototypeHandle)}.\n     *\n     * @example\n     *\n     * ```js\n     * // Create a Map object\n     * await page.evaluate(() => window.map = new Map());\n     * // Get a handle to the Map object prototype\n     * const mapPrototype = await page.evaluateHandle(() => Map.prototype);\n     * // Query all map instances into an array\n     * const mapInstances = await page.queryObjects(mapPrototype);\n     * // Count amount of map objects in heap\n     * const count = await page.evaluate(maps => maps.length, mapInstances);\n     * await mapInstances.dispose();\n     * await mapPrototype.dispose();\n     * ```\n     * @param prototypeHandle - a handle to the object prototype.\n     * @returns Promise which resolves to a handle to an array of objects with\n     * this prototype.\n     */\n    async queryObjects(prototypeHandle) {\n        const context = await this.mainFrame().executionContext();\n        return context.queryObjects(prototypeHandle);\n    }\n    /**\n     * This method runs `document.querySelector` within the page and passes the\n     * result as the first argument to the `pageFunction`.\n     *\n     * @remarks\n     *\n     * If no element is found matching `selector`, the method will throw an error.\n     *\n     * If `pageFunction` returns a promise `$eval` will wait for the promise to\n     * resolve and then return its value.\n     *\n     * @example\n     *\n     * ```\n     * const searchValue = await page.$eval('#search', el => el.value);\n     * const preloadHref = await page.$eval('link[rel=preload]', el => el.href);\n     * const html = await page.$eval('.main-container', el => el.outerHTML);\n     * ```\n     *\n     * If you are using TypeScript, you may have to provide an explicit type to the\n     * first argument of the `pageFunction`.\n     * By default it is typed as `Element`, but you may need to provide a more\n     * specific sub-type:\n     *\n     * @example\n     *\n     * ```\n     * // if you don't provide HTMLInputElement here, TS will error\n     * // as `value` is not on `Element`\n     * const searchValue = await page.$eval('#search', (el: HTMLInputElement) => el.value);\n     * ```\n     *\n     * The compiler should be able to infer the return type\n     * from the `pageFunction` you provide. If it is unable to, you can use the generic\n     * type to tell the compiler what return type you expect from `$eval`:\n     *\n     * @example\n     *\n     * ```\n     * // The compiler can infer the return type in this case, but if it can't\n     * // or if you want to be more explicit, provide it as the generic type.\n     * const searchValue = await page.$eval<string>(\n     *  '#search', (el: HTMLInputElement) => el.value\n     * );\n     * ```\n     *\n     * @param selector - the\n     * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | selector}\n     * to query for\n     * @param pageFunction - the function to be evaluated in the page context.\n     * Will be passed the result of `document.querySelector(selector)` as its\n     * first argument.\n     * @param args - any additional arguments to pass through to `pageFunction`.\n     *\n     * @returns The result of calling `pageFunction`. If it returns an element it\n     * is wrapped in an {@link ElementHandle}, else the raw value itself is\n     * returned.\n     */\n    async $eval(selector, pageFunction, ...args) {\n        return this.mainFrame().$eval(selector, pageFunction, ...args);\n    }\n    /**\n     * This method runs `Array.from(document.querySelectorAll(selector))` within\n     * the page and passes the result as the first argument to the `pageFunction`.\n     *\n     * @remarks\n     *\n     * If `pageFunction` returns a promise `$$eval` will wait for the promise to\n     * resolve and then return its value.\n     *\n     * @example\n     *\n     * ```\n     * // get the amount of divs on the page\n     * const divCount = await page.$$eval('div', divs => divs.length);\n     *\n     * // get the text content of all the `.options` elements:\n     * const options = await page.$$eval('div > span.options', options => {\n     *   return options.map(option => option.textContent)\n     * });\n     * ```\n     *\n     * If you are using TypeScript, you may have to provide an explicit type to the\n     * first argument of the `pageFunction`.\n     * By default it is typed as `Element[]`, but you may need to provide a more\n     * specific sub-type:\n     *\n     * @example\n     *\n     * ```\n     * // if you don't provide HTMLInputElement here, TS will error\n     * // as `value` is not on `Element`\n     * await page.$$eval('input', (elements: HTMLInputElement[]) => {\n     *   return elements.map(e => e.value);\n     * });\n     * ```\n     *\n     * The compiler should be able to infer the return type\n     * from the `pageFunction` you provide. If it is unable to, you can use the generic\n     * type to tell the compiler what return type you expect from `$$eval`:\n     *\n     * @example\n     *\n     * ```\n     * // The compiler can infer the return type in this case, but if it can't\n     * // or if you want to be more explicit, provide it as the generic type.\n     * const allInputValues = await page.$$eval<string[]>(\n     *  'input', (elements: HTMLInputElement[]) => elements.map(e => e.textContent)\n     * );\n     * ```\n     *\n     * @param selector - the\n     * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | selector}\n     * to query for\n     * @param pageFunction - the function to be evaluated in the page context. Will\n     * be passed the result of `Array.from(document.querySelectorAll(selector))`\n     * as its first argument.\n     * @param args - any additional arguments to pass through to `pageFunction`.\n     *\n     * @returns The result of calling `pageFunction`. If it returns an element it\n     * is wrapped in an {@link ElementHandle}, else the raw value itself is\n     * returned.\n     */\n    async $$eval(selector, pageFunction, ...args) {\n        return this.mainFrame().$$eval(selector, pageFunction, ...args);\n    }\n    /**\n     * The method runs `document.querySelectorAll` within the page. If no elements\n     * match the selector, the return value resolves to `[]`.\n     * @remarks\n     * Shortcut for {@link Frame.$$ | Page.mainFrame().$$(selector) }.\n     * @param selector - A `selector` to query page for\n     */\n    async $$(selector) {\n        return this.mainFrame().$$(selector);\n    }\n    /**\n     * The method evaluates the XPath expression relative to the page document as\n     * its context node. If there are no such elements, the method resolves to an\n     * empty array.\n     * @remarks\n     * Shortcut for {@link Frame.$x | Page.mainFrame().$x(expression) }.\n     * @param expression - Expression to evaluate\n     */\n    async $x(expression) {\n        return this.mainFrame().$x(expression);\n    }\n    /**\n     * If no URLs are specified, this method returns cookies for the current page\n     * URL. If URLs are specified, only cookies for those URLs are returned.\n     */\n    async cookies(...urls) {\n        const originalCookies = (await __classPrivateFieldGet(this, _Page_client, \"f\").send('Network.getCookies', {\n            urls: urls.length ? urls : [this.url()],\n        })).cookies;\n        const unsupportedCookieAttributes = ['priority'];\n        const filterUnsupportedAttributes = (cookie) => {\n            for (const attr of unsupportedCookieAttributes) {\n                delete cookie[attr];\n            }\n            return cookie;\n        };\n        return originalCookies.map(filterUnsupportedAttributes);\n    }\n    async deleteCookie(...cookies) {\n        const pageURL = this.url();\n        for (const cookie of cookies) {\n            const item = Object.assign({}, cookie);\n            if (!cookie.url && pageURL.startsWith('http')) {\n                item.url = pageURL;\n            }\n            await __classPrivateFieldGet(this, _Page_client, \"f\").send('Network.deleteCookies', item);\n        }\n    }\n    /**\n     * @example\n     * ```js\n     * await page.setCookie(cookieObject1, cookieObject2);\n     * ```\n     */\n    async setCookie(...cookies) {\n        const pageURL = this.url();\n        const startsWithHTTP = pageURL.startsWith('http');\n        const items = cookies.map((cookie) => {\n            const item = Object.assign({}, cookie);\n            if (!item.url && startsWithHTTP) {\n                item.url = pageURL;\n            }\n            (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.assert)(item.url !== 'about:blank', `Blank page can not have cookie \"${item.name}\"`);\n            (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.assert)(!String.prototype.startsWith.call(item.url || '', 'data:'), `Data URL page can not have cookie \"${item.name}\"`);\n            return item;\n        });\n        await this.deleteCookie(...items);\n        if (items.length) {\n            await __classPrivateFieldGet(this, _Page_client, \"f\").send('Network.setCookies', { cookies: items });\n        }\n    }\n    /**\n     * Adds a `<script>` tag into the page with the desired URL or content.\n     * @remarks\n     * Shortcut for {@link Frame.addScriptTag | page.mainFrame().addScriptTag(options) }.\n     * @returns Promise which resolves to the added tag when the script's onload fires or\n     * when the script content was injected into frame.\n     */\n    async addScriptTag(options) {\n        return this.mainFrame().addScriptTag(options);\n    }\n    /**\n     * Adds a `<link rel=\"stylesheet\">` tag into the page with the desired URL or a\n     * `<style type=\"text/css\">` tag with the content.\n     * @returns Promise which resolves to the added tag when the stylesheet's\n     * onload fires or when the CSS content was injected into frame.\n     */\n    async addStyleTag(options) {\n        return this.mainFrame().addStyleTag(options);\n    }\n    /**\n     * The method adds a function called `name` on the page's `window` object. When\n     * called, the function executes `puppeteerFunction` in node.js and returns a\n     * `Promise` which resolves to the return value of `puppeteerFunction`.\n     *\n     * If the puppeteerFunction returns a `Promise`, it will be awaited.\n     *\n     * NOTE: Functions installed via `page.exposeFunction` survive navigations.\n     * @param name - Name of the function on the window object\n     * @param puppeteerFunction -  Callback function which will be called in\n     * Puppeteer's context.\n     * @example\n     * An example of adding an `md5` function into the page:\n     * ```js\n     * const puppeteer = require('puppeteer');\n     * const crypto = require('crypto');\n     *\n     * (async () => {\n     * const browser = await puppeteer.launch();\n     * const page = await browser.newPage();\n     * page.on('console', (msg) => console.log(msg.text()));\n     * await page.exposeFunction('md5', (text) =>\n     * crypto.createHash('md5').update(text).digest('hex')\n     * );\n     * await page.evaluate(async () => {\n     * // use window.md5 to compute hashes\n     * const myString = 'PUPPETEER';\n     * const myHash = await window.md5(myString);\n     * console.log(`md5 of ${myString} is ${myHash}`);\n     * });\n     * await browser.close();\n     * })();\n     * ```\n     * An example of adding a `window.readfile` function into the page:\n     * ```js\n     * const puppeteer = require('puppeteer');\n     * const fs = require('fs');\n     *\n     * (async () => {\n     * const browser = await puppeteer.launch();\n     * const page = await browser.newPage();\n     * page.on('console', (msg) => console.log(msg.text()));\n     * await page.exposeFunction('readfile', async (filePath) => {\n     * return new Promise((resolve, reject) => {\n     * fs.readFile(filePath, 'utf8', (err, text) => {\n     *    if (err) reject(err);\n     *    else resolve(text);\n     *  });\n     * });\n     * });\n     * await page.evaluate(async () => {\n     * // use window.readfile to read contents of a file\n     * const content = await window.readfile('/etc/hosts');\n     * console.log(content);\n     * });\n     * await browser.close();\n     * })();\n     * ```\n     */\n    async exposeFunction(name, puppeteerFunction) {\n        if (__classPrivateFieldGet(this, _Page_pageBindings, \"f\").has(name)) {\n            throw new Error(`Failed to add page binding with name ${name}: window['${name}'] already exists!`);\n        }\n        let exposedFunction;\n        if (typeof puppeteerFunction === 'function') {\n            exposedFunction = puppeteerFunction;\n        }\n        else if (typeof puppeteerFunction.default === 'function') {\n            exposedFunction = puppeteerFunction.default;\n        }\n        else {\n            throw new Error(`Failed to add page binding with name ${name}: ${puppeteerFunction} is not a function or a module with a default export.`);\n        }\n        __classPrivateFieldGet(this, _Page_pageBindings, \"f\").set(name, exposedFunction);\n        const expression = (0,_util_js__WEBPACK_IMPORTED_MODULE_10__.pageBindingInitString)('exposedFun', name);\n        await __classPrivateFieldGet(this, _Page_client, \"f\").send('Runtime.addBinding', { name: name });\n        await __classPrivateFieldGet(this, _Page_client, \"f\").send('Page.addScriptToEvaluateOnNewDocument', {\n            source: expression,\n        });\n        await Promise.all(this.frames().map((frame) => {\n            return frame.evaluate(expression).catch(_util_js__WEBPACK_IMPORTED_MODULE_10__.debugError);\n        }));\n    }\n    /**\n     * Provide credentials for `HTTP authentication`.\n     * @remarks To disable authentication, pass `null`.\n     */\n    async authenticate(credentials) {\n        return __classPrivateFieldGet(this, _Page_frameManager, \"f\").networkManager().authenticate(credentials);\n    }\n    /**\n     * The extra HTTP headers will be sent with every request the page initiates.\n     * NOTE: All HTTP header names are lowercased. (HTTP headers are\n     * case-insensitive, so this shouldn’t impact your server code.)\n     * NOTE: page.setExtraHTTPHeaders does not guarantee the order of headers in\n     * the outgoing requests.\n     * @param headers - An object containing additional HTTP headers to be sent\n     * with every request. All header values must be strings.\n     * @returns\n     */\n    async setExtraHTTPHeaders(headers) {\n        return __classPrivateFieldGet(this, _Page_frameManager, \"f\").networkManager().setExtraHTTPHeaders(headers);\n    }\n    /**\n     * @param userAgent - Specific user agent to use in this page\n     * @param userAgentData - Specific user agent client hint data to use in this\n     * page\n     * @returns Promise which resolves when the user agent is set.\n     */\n    async setUserAgent(userAgent, userAgentMetadata) {\n        return __classPrivateFieldGet(this, _Page_frameManager, \"f\")\n            .networkManager()\n            .setUserAgent(userAgent, userAgentMetadata);\n    }\n    /**\n     * @returns Object containing metrics as key/value pairs.\n     *\n     * - `Timestamp` : The timestamp when the metrics sample was taken.\n     *\n     * - `Documents` : Number of documents in the page.\n     *\n     * - `Frames` : Number of frames in the page.\n     *\n     * - `JSEventListeners` : Number of events in the page.\n     *\n     * - `Nodes` : Number of DOM nodes in the page.\n     *\n     * - `LayoutCount` : Total number of full or partial page layout.\n     *\n     * - `RecalcStyleCount` : Total number of page style recalculations.\n     *\n     * - `LayoutDuration` : Combined durations of all page layouts.\n     *\n     * - `RecalcStyleDuration` : Combined duration of all page style\n     *   recalculations.\n     *\n     * - `ScriptDuration` : Combined duration of JavaScript execution.\n     *\n     * - `TaskDuration` : Combined duration of all tasks performed by the browser.\n     *\n     *\n     * - `JSHeapUsedSize` : Used JavaScript heap size.\n     *\n     * - `JSHeapTotalSize` : Total JavaScript heap size.\n     * @remarks\n     * NOTE: All timestamps are in monotonic time: monotonically increasing time\n     * in seconds since an arbitrary point in the past.\n     */\n    async metrics() {\n        const response = await __classPrivateFieldGet(this, _Page_client, \"f\").send('Performance.getMetrics');\n        return __classPrivateFieldGet(this, _Page_instances, \"m\", _Page_buildMetricsObject).call(this, response.metrics);\n    }\n    /**\n     *\n     * @returns\n     * @remarks Shortcut for\n     * {@link Frame.url | page.mainFrame().url()}.\n     */\n    url() {\n        return this.mainFrame().url();\n    }\n    async content() {\n        return await __classPrivateFieldGet(this, _Page_frameManager, \"f\").mainFrame().content();\n    }\n    /**\n     * @param html - HTML markup to assign to the page.\n     * @param options - Parameters that has some properties.\n     * @remarks\n     * The parameter `options` might have the following options.\n     *\n     * - `timeout` : Maximum time in milliseconds for resources to load, defaults\n     *   to 30 seconds, pass `0` to disable timeout. The default value can be\n     *   changed by using the\n     *   {@link Page.setDefaultNavigationTimeout |\n     *   page.setDefaultNavigationTimeout(timeout)}\n     *   or {@link Page.setDefaultTimeout | page.setDefaultTimeout(timeout)}\n     *   methods.\n     *\n     * - `waitUntil`: When to consider setting markup succeeded, defaults to `load`.\n     *    Given an array of event strings, setting content is considered to be\n     *    successful after all events have been fired. Events can be either:<br/>\n     *  - `load` : consider setting content to be finished when the `load` event is\n     *    fired.<br/>\n     *  - `domcontentloaded` : consider setting content to be finished when the\n     *   `DOMContentLoaded` event is fired.<br/>\n     *  - `networkidle0` : consider setting content to be finished when there are no\n     *   more than 0 network connections for at least `500` ms.<br/>\n     *  - `networkidle2` : consider setting content to be finished when there are no\n     *   more than 2 network connections for at least `500` ms.\n     */\n    async setContent(html, options = {}) {\n        await __classPrivateFieldGet(this, _Page_frameManager, \"f\").mainFrame().setContent(html, options);\n    }\n    /**\n     * @param url - URL to navigate page to. The URL should include scheme, e.g.\n     * `https://`\n     * @param options - Navigation Parameter\n     * @returns Promise which resolves to the main resource response. In case of\n     * multiple redirects, the navigation will resolve with the response of the\n     * last redirect.\n     * @remarks\n     * The argument `options` might have the following properties:\n     *\n     * - `timeout` : Maximum navigation time in milliseconds, defaults to 30\n     *   seconds, pass 0 to disable timeout. The default value can be changed by\n     *   using the\n     *   {@link Page.setDefaultNavigationTimeout |\n     *   page.setDefaultNavigationTimeout(timeout)}\n     *   or {@link Page.setDefaultTimeout | page.setDefaultTimeout(timeout)}\n     *   methods.\n     *\n     * - `waitUntil`:When to consider navigation succeeded, defaults to `load`.\n     *    Given an array of event strings, navigation is considered to be successful\n     *    after all events have been fired. Events can be either:<br/>\n     *  - `load` : consider navigation to be finished when the load event is\n     *    fired.<br/>\n     *  - `domcontentloaded` : consider navigation to be finished when the\n     *    DOMContentLoaded event is fired.<br/>\n     *  - `networkidle0` : consider navigation to be finished when there are no\n     *    more than 0 network connections for at least `500` ms.<br/>\n     *  - `networkidle2` : consider navigation to be finished when there are no\n     *    more than 2 network connections for at least `500` ms.\n     *\n     * - `referer` : Referer header value. If provided it will take preference\n     *   over the referer header value set by\n     *   {@link Page.setExtraHTTPHeaders |page.setExtraHTTPHeaders()}.\n     *\n     * `page.goto` will throw an error if:\n     * - there's an SSL error (e.g. in case of self-signed certificates).\n     * - target URL is invalid.\n     * - the timeout is exceeded during navigation.\n     * - the remote server does not respond or is unreachable.\n     * - the main resource failed to load.\n     *\n     * `page.goto` will not throw an error when any valid HTTP status code is\n     *   returned by the remote server, including 404 \"Not Found\" and 500\n     *   \"Internal Server Error\". The status code for such responses can be\n     *   retrieved by calling response.status().\n     *\n     * NOTE: `page.goto` either throws an error or returns a main resource\n     * response. The only exceptions are navigation to about:blank or navigation\n     * to the same URL with a different hash, which would succeed and return null.\n     *\n     * NOTE: Headless mode doesn't support navigation to a PDF document. See the\n     * {@link https://bugs.chromium.org/p/chromium/issues/detail?id=761295\n     * | upstream issue}.\n     *\n     * Shortcut for {@link Frame.goto | page.mainFrame().goto(url, options)}.\n     */\n    async goto(url, options = {}) {\n        return await __classPrivateFieldGet(this, _Page_frameManager, \"f\").mainFrame().goto(url, options);\n    }\n    /**\n     * @param options - Navigation parameters which might have the following\n     * properties:\n     * @returns Promise which resolves to the main resource response. In case of\n     * multiple redirects, the navigation will resolve with the response of the\n     * last redirect.\n     * @remarks\n     * The argument `options` might have the following properties:\n     *\n     * - `timeout` : Maximum navigation time in milliseconds, defaults to 30\n     *   seconds, pass 0 to disable timeout. The default value can be changed by\n     *   using the\n     *   {@link Page.setDefaultNavigationTimeout |\n     *   page.setDefaultNavigationTimeout(timeout)}\n     *   or {@link Page.setDefaultTimeout | page.setDefaultTimeout(timeout)}\n     *   methods.\n     *\n     * - `waitUntil`: When to consider navigation succeeded, defaults to `load`.\n     *    Given an array of event strings, navigation is considered to be\n     *    successful after all events have been fired. Events can be either:<br/>\n     *  - `load` : consider navigation to be finished when the load event is fired.<br/>\n     *  - `domcontentloaded` : consider navigation to be finished when the\n     *   DOMContentLoaded event is fired.<br/>\n     *  - `networkidle0` : consider navigation to be finished when there are no\n     *   more than 0 network connections for at least `500` ms.<br/>\n     *  - `networkidle2` : consider navigation to be finished when there are no\n     *   more than 2 network connections for at least `500` ms.\n     */\n    async reload(options) {\n        const result = await Promise.all([\n            this.waitForNavigation(options),\n            __classPrivateFieldGet(this, _Page_client, \"f\").send('Page.reload'),\n        ]);\n        return result[0];\n    }\n    /**\n     * This resolves when the page navigates to a new URL or reloads. It is useful\n     * when you run code that will indirectly cause the page to navigate. Consider\n     * this example:\n     * ```js\n     * const [response] = await Promise.all([\n     * page.waitForNavigation(), // The promise resolves after navigation has finished\n     * page.click('a.my-link'), // Clicking the link will indirectly cause a navigation\n     * ]);\n     * ```\n     *\n     * @param options - Navigation parameters which might have the following properties:\n     * @returns Promise which resolves to the main resource response. In case of\n     * multiple redirects, the navigation will resolve with the response of the\n     * last redirect. In case of navigation to a different anchor or navigation\n     * due to History API usage, the navigation will resolve with `null`.\n     * @remarks\n     * NOTE: Usage of the\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/History_API | History API}\n     * to change the URL is considered a navigation.\n     *\n     * Shortcut for\n     * {@link Frame.waitForNavigation | page.mainFrame().waitForNavigation(options)}.\n     */\n    async waitForNavigation(options = {}) {\n        return await __classPrivateFieldGet(this, _Page_frameManager, \"f\").mainFrame().waitForNavigation(options);\n    }\n    /**\n     * @param urlOrPredicate - A URL or predicate to wait for\n     * @param options - Optional waiting parameters\n     * @returns Promise which resolves to the matched response\n     * @example\n     * ```js\n     * const firstResponse = await page.waitForResponse(\n     * 'https://example.com/resource'\n     * );\n     * const finalResponse = await page.waitForResponse(\n     * (response) =>\n     * response.url() === 'https://example.com' && response.status() === 200\n     * );\n     * const finalResponse = await page.waitForResponse(async (response) => {\n     * return (await response.text()).includes('<html>');\n     * });\n     * return finalResponse.ok();\n     * ```\n     * @remarks\n     * Optional Waiting Parameters have:\n     *\n     * - `timeout`: Maximum wait time in milliseconds, defaults to `30` seconds, pass\n     * `0` to disable the timeout. The default value can be changed by using the\n     * {@link Page.setDefaultTimeout} method.\n     */\n    async waitForRequest(urlOrPredicate, options = {}) {\n        const { timeout = __classPrivateFieldGet(this, _Page_timeoutSettings, \"f\").timeout() } = options;\n        return (0,_util_js__WEBPACK_IMPORTED_MODULE_10__.waitForEvent)(__classPrivateFieldGet(this, _Page_frameManager, \"f\").networkManager(), _NetworkManager_js__WEBPACK_IMPORTED_MODULE_13__.NetworkManagerEmittedEvents.Request, (request) => {\n            if ((0,_util_js__WEBPACK_IMPORTED_MODULE_10__.isString)(urlOrPredicate)) {\n                return urlOrPredicate === request.url();\n            }\n            if (typeof urlOrPredicate === 'function') {\n                return !!urlOrPredicate(request);\n            }\n            return false;\n        }, timeout, __classPrivateFieldGet(this, _Page_instances, \"m\", _Page_sessionClosePromise).call(this));\n    }\n    /**\n     * @param urlOrPredicate - A URL or predicate to wait for.\n     * @param options - Optional waiting parameters\n     * @returns Promise which resolves to the matched response.\n     * @example\n     * ```js\n     * const firstResponse = await page.waitForResponse(\n     * 'https://example.com/resource'\n     * );\n     * const finalResponse = await page.waitForResponse(\n     * (response) =>\n     * response.url() === 'https://example.com' && response.status() === 200\n     * );\n     * const finalResponse = await page.waitForResponse(async (response) => {\n     * return (await response.text()).includes('<html>');\n     * });\n     * return finalResponse.ok();\n     * ```\n     * @remarks\n     * Optional Parameter have:\n     *\n     * - `timeout`: Maximum wait time in milliseconds, defaults to `30` seconds,\n     * pass `0` to disable the timeout. The default value can be changed by using\n     * the {@link Page.setDefaultTimeout} method.\n     */\n    async waitForResponse(urlOrPredicate, options = {}) {\n        const { timeout = __classPrivateFieldGet(this, _Page_timeoutSettings, \"f\").timeout() } = options;\n        return (0,_util_js__WEBPACK_IMPORTED_MODULE_10__.waitForEvent)(__classPrivateFieldGet(this, _Page_frameManager, \"f\").networkManager(), _NetworkManager_js__WEBPACK_IMPORTED_MODULE_13__.NetworkManagerEmittedEvents.Response, async (response) => {\n            if ((0,_util_js__WEBPACK_IMPORTED_MODULE_10__.isString)(urlOrPredicate)) {\n                return urlOrPredicate === response.url();\n            }\n            if (typeof urlOrPredicate === 'function') {\n                return !!(await urlOrPredicate(response));\n            }\n            return false;\n        }, timeout, __classPrivateFieldGet(this, _Page_instances, \"m\", _Page_sessionClosePromise).call(this));\n    }\n    /**\n     * @param options - Optional waiting parameters\n     * @returns Promise which resolves when network is idle\n     */\n    async waitForNetworkIdle(options = {}) {\n        const { idleTime = 500, timeout = __classPrivateFieldGet(this, _Page_timeoutSettings, \"f\").timeout() } = options;\n        const networkManager = __classPrivateFieldGet(this, _Page_frameManager, \"f\").networkManager();\n        let idleResolveCallback;\n        const idlePromise = new Promise((resolve) => {\n            idleResolveCallback = resolve;\n        });\n        let abortRejectCallback;\n        const abortPromise = new Promise((_, reject) => {\n            abortRejectCallback = reject;\n        });\n        let idleTimer;\n        const onIdle = () => {\n            return idleResolveCallback();\n        };\n        const cleanup = () => {\n            idleTimer && clearTimeout(idleTimer);\n            abortRejectCallback(new Error('abort'));\n        };\n        const evaluate = () => {\n            idleTimer && clearTimeout(idleTimer);\n            if (networkManager.numRequestsInProgress() === 0) {\n                idleTimer = setTimeout(onIdle, idleTime);\n            }\n        };\n        evaluate();\n        const eventHandler = () => {\n            evaluate();\n            return false;\n        };\n        const listenToEvent = (event) => {\n            return (0,_util_js__WEBPACK_IMPORTED_MODULE_10__.waitForEvent)(networkManager, event, eventHandler, timeout, abortPromise);\n        };\n        const eventPromises = [\n            listenToEvent(_NetworkManager_js__WEBPACK_IMPORTED_MODULE_13__.NetworkManagerEmittedEvents.Request),\n            listenToEvent(_NetworkManager_js__WEBPACK_IMPORTED_MODULE_13__.NetworkManagerEmittedEvents.Response),\n        ];\n        await Promise.race([\n            idlePromise,\n            ...eventPromises,\n            __classPrivateFieldGet(this, _Page_instances, \"m\", _Page_sessionClosePromise).call(this),\n        ]).then((r) => {\n            cleanup();\n            return r;\n        }, (error) => {\n            cleanup();\n            throw error;\n        });\n    }\n    /**\n     * @param urlOrPredicate - A URL or predicate to wait for.\n     * @param options - Optional waiting parameters\n     * @returns Promise which resolves to the matched frame.\n     * @example\n     * ```js\n     * const frame = await page.waitForFrame(async (frame) => {\n     *   return frame.name() === 'Test';\n     * });\n     * ```\n     * @remarks\n     * Optional Parameter have:\n     *\n     * - `timeout`: Maximum wait time in milliseconds, defaults to `30` seconds,\n     * pass `0` to disable the timeout. The default value can be changed by using\n     * the {@link Page.setDefaultTimeout} method.\n     */\n    async waitForFrame(urlOrPredicate, options = {}) {\n        const { timeout = __classPrivateFieldGet(this, _Page_timeoutSettings, \"f\").timeout() } = options;\n        let predicate;\n        if ((0,_util_js__WEBPACK_IMPORTED_MODULE_10__.isString)(urlOrPredicate)) {\n            predicate = (frame) => {\n                return Promise.resolve(urlOrPredicate === frame.url());\n            };\n        }\n        else {\n            predicate = (frame) => {\n                const value = urlOrPredicate(frame);\n                if (typeof value === 'boolean') {\n                    return Promise.resolve(value);\n                }\n                return value;\n            };\n        }\n        const eventRace = Promise.race([\n            (0,_util_js__WEBPACK_IMPORTED_MODULE_10__.waitForEvent)(__classPrivateFieldGet(this, _Page_frameManager, \"f\"), _FrameManager_js__WEBPACK_IMPORTED_MODULE_9__.FrameManagerEmittedEvents.FrameAttached, predicate, timeout, __classPrivateFieldGet(this, _Page_instances, \"m\", _Page_sessionClosePromise).call(this)),\n            (0,_util_js__WEBPACK_IMPORTED_MODULE_10__.waitForEvent)(__classPrivateFieldGet(this, _Page_frameManager, \"f\"), _FrameManager_js__WEBPACK_IMPORTED_MODULE_9__.FrameManagerEmittedEvents.FrameNavigated, predicate, timeout, __classPrivateFieldGet(this, _Page_instances, \"m\", _Page_sessionClosePromise).call(this)),\n            ...this.frames().map(async (frame) => {\n                if (await predicate(frame)) {\n                    return frame;\n                }\n                return await eventRace;\n            }),\n        ]);\n        return eventRace;\n    }\n    /**\n     * This method navigate to the previous page in history.\n     * @param options - Navigation parameters\n     * @returns Promise which resolves to the main resource response. In case of\n     * multiple redirects, the navigation will resolve with the response of the\n     * last redirect. If can not go back, resolves to `null`.\n     * @remarks\n     * The argument `options` might have the following properties:\n     *\n     * - `timeout` : Maximum navigation time in milliseconds, defaults to 30\n     *   seconds, pass 0 to disable timeout. The default value can be changed by\n     *   using the\n     *   {@link Page.setDefaultNavigationTimeout\n     *   | page.setDefaultNavigationTimeout(timeout)}\n     *   or {@link Page.setDefaultTimeout | page.setDefaultTimeout(timeout)}\n     *   methods.\n     *\n     * - `waitUntil` : When to consider navigation succeeded, defaults to `load`.\n     *    Given an array of event strings, navigation is considered to be\n     *    successful after all events have been fired. Events can be either:<br/>\n     *  - `load` : consider navigation to be finished when the load event is fired.<br/>\n     *  - `domcontentloaded` : consider navigation to be finished when the\n     *   DOMContentLoaded event is fired.<br/>\n     *  - `networkidle0` : consider navigation to be finished when there are no\n     *   more than 0 network connections for at least `500` ms.<br/>\n     *  - `networkidle2` : consider navigation to be finished when there are no\n     *   more than 2 network connections for at least `500` ms.\n     */\n    async goBack(options = {}) {\n        return __classPrivateFieldGet(this, _Page_instances, \"m\", _Page_go).call(this, -1, options);\n    }\n    /**\n     * This method navigate to the next page in history.\n     * @param options - Navigation Parameter\n     * @returns Promise which resolves to the main resource response. In case of\n     * multiple redirects, the navigation will resolve with the response of the\n     * last redirect. If can not go forward, resolves to `null`.\n     * @remarks\n     * The argument `options` might have the following properties:\n     *\n     * - `timeout` : Maximum navigation time in milliseconds, defaults to 30\n     *   seconds, pass 0 to disable timeout. The default value can be changed by\n     *   using the\n     *   {@link Page.setDefaultNavigationTimeout\n     *   | page.setDefaultNavigationTimeout(timeout)}\n     *   or {@link Page.setDefaultTimeout | page.setDefaultTimeout(timeout)}\n     *   methods.\n     *\n     * - `waitUntil`: When to consider navigation succeeded, defaults to `load`.\n     *    Given an array of event strings, navigation is considered to be\n     *    successful after all events have been fired. Events can be either:<br/>\n     *  - `load` : consider navigation to be finished when the load event is fired.<br/>\n     *  - `domcontentloaded` : consider navigation to be finished when the\n     *   DOMContentLoaded event is fired.<br/>\n     *  - `networkidle0` : consider navigation to be finished when there are no\n     *   more than 0 network connections for at least `500` ms.<br/>\n     *  - `networkidle2` : consider navigation to be finished when there are no\n     *   more than 2 network connections for at least `500` ms.\n     */\n    async goForward(options = {}) {\n        return __classPrivateFieldGet(this, _Page_instances, \"m\", _Page_go).call(this, +1, options);\n    }\n    /**\n     * Brings page to front (activates tab).\n     */\n    async bringToFront() {\n        await __classPrivateFieldGet(this, _Page_client, \"f\").send('Page.bringToFront');\n    }\n    /**\n     * Emulates given device metrics and user agent. This method is a shortcut for\n     * calling two methods: {@link Page.setUserAgent} and {@link Page.setViewport}\n     * To aid emulation, Puppeteer provides a list of device descriptors that can\n     * be obtained via the {@link Puppeteer.devices} `page.emulate` will resize\n     * the page. A lot of websites don't expect phones to change size, so you\n     * should emulate before navigating to the page.\n     * @example\n     * ```js\n     * const puppeteer = require('puppeteer');\n     * const iPhone = puppeteer.devices['iPhone 6'];\n     * (async () => {\n     * const browser = await puppeteer.launch();\n     * const page = await browser.newPage();\n     * await page.emulate(iPhone);\n     * await page.goto('https://www.google.com');\n     * // other actions...\n     * await browser.close();\n     * })();\n     * ```\n     * @remarks List of all available devices is available in the source code:\n     * {@link https://github.com/puppeteer/puppeteer/blob/main/src/common/DeviceDescriptors.ts | src/common/DeviceDescriptors.ts}.\n     */\n    async emulate(options) {\n        await Promise.all([\n            this.setViewport(options.viewport),\n            this.setUserAgent(options.userAgent),\n        ]);\n    }\n    /**\n     * @param enabled - Whether or not to enable JavaScript on the page.\n     * @returns\n     * @remarks\n     * NOTE: changing this value won't affect scripts that have already been run.\n     * It will take full effect on the next navigation.\n     */\n    async setJavaScriptEnabled(enabled) {\n        if (__classPrivateFieldGet(this, _Page_javascriptEnabled, \"f\") === enabled) {\n            return;\n        }\n        __classPrivateFieldSet(this, _Page_javascriptEnabled, enabled, \"f\");\n        await __classPrivateFieldGet(this, _Page_client, \"f\").send('Emulation.setScriptExecutionDisabled', {\n            value: !enabled,\n        });\n    }\n    /**\n     * Toggles bypassing page's Content-Security-Policy.\n     * @param enabled - sets bypassing of page's Content-Security-Policy.\n     * @remarks\n     * NOTE: CSP bypassing happens at the moment of CSP initialization rather than\n     * evaluation. Usually, this means that `page.setBypassCSP` should be called\n     * before navigating to the domain.\n     */\n    async setBypassCSP(enabled) {\n        await __classPrivateFieldGet(this, _Page_client, \"f\").send('Page.setBypassCSP', { enabled });\n    }\n    /**\n     * @param type - Changes the CSS media type of the page. The only allowed\n     * values are `screen`, `print` and `null`. Passing `null` disables CSS media\n     * emulation.\n     * @example\n     * ```\n     * await page.evaluate(() => matchMedia('screen').matches);\n     * // → true\n     * await page.evaluate(() => matchMedia('print').matches);\n     * // → false\n     *\n     * await page.emulateMediaType('print');\n     * await page.evaluate(() => matchMedia('screen').matches);\n     * // → false\n     * await page.evaluate(() => matchMedia('print').matches);\n     * // → true\n     *\n     * await page.emulateMediaType(null);\n     * await page.evaluate(() => matchMedia('screen').matches);\n     * // → true\n     * await page.evaluate(() => matchMedia('print').matches);\n     * // → false\n     * ```\n     */\n    async emulateMediaType(type) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.assert)(type === 'screen' ||\n            type === 'print' ||\n            (type !== null && type !== void 0 ? type : undefined) === undefined, 'Unsupported media type: ' + type);\n        await __classPrivateFieldGet(this, _Page_client, \"f\").send('Emulation.setEmulatedMedia', {\n            media: type || '',\n        });\n    }\n    /**\n     * Enables CPU throttling to emulate slow CPUs.\n     * @param factor - slowdown factor (1 is no throttle, 2 is 2x slowdown, etc).\n     */\n    async emulateCPUThrottling(factor) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.assert)(factor === null || factor >= 1, 'Throttling rate should be greater or equal to 1');\n        await __classPrivateFieldGet(this, _Page_client, \"f\").send('Emulation.setCPUThrottlingRate', {\n            rate: factor !== null ? factor : 1,\n        });\n    }\n    /**\n     * @param features - `<?Array<Object>>` Given an array of media feature\n     * objects, emulates CSS media features on the page. Each media feature object\n     * must have the following properties:\n     * @example\n     * ```js\n     * await page.emulateMediaFeatures([\n     * { name: 'prefers-color-scheme', value: 'dark' },\n     * ]);\n     * await page.evaluate(() => matchMedia('(prefers-color-scheme: dark)').matches);\n     * // → true\n     * await page.evaluate(() => matchMedia('(prefers-color-scheme: light)').matches);\n     * // → false\n     *\n     * await page.emulateMediaFeatures([\n     * { name: 'prefers-reduced-motion', value: 'reduce' },\n     * ]);\n     * await page.evaluate(\n     * () => matchMedia('(prefers-reduced-motion: reduce)').matches\n     * );\n     * // → true\n     * await page.evaluate(\n     * () => matchMedia('(prefers-reduced-motion: no-preference)').matches\n     * );\n     * // → false\n     *\n     * await page.emulateMediaFeatures([\n     * { name: 'prefers-color-scheme', value: 'dark' },\n     * { name: 'prefers-reduced-motion', value: 'reduce' },\n     * ]);\n     * await page.evaluate(() => matchMedia('(prefers-color-scheme: dark)').matches);\n     * // → true\n     * await page.evaluate(() => matchMedia('(prefers-color-scheme: light)').matches);\n     * // → false\n     * await page.evaluate(\n     * () => matchMedia('(prefers-reduced-motion: reduce)').matches\n     * );\n     * // → true\n     * await page.evaluate(\n     * () => matchMedia('(prefers-reduced-motion: no-preference)').matches\n     * );\n     * // → false\n     *\n     * await page.emulateMediaFeatures([{ name: 'color-gamut', value: 'p3' }]);\n     * await page.evaluate(() => matchMedia('(color-gamut: srgb)').matches);\n     * // → true\n     * await page.evaluate(() => matchMedia('(color-gamut: p3)').matches);\n     * // → true\n     * await page.evaluate(() => matchMedia('(color-gamut: rec2020)').matches);\n     * // → false\n     * ```\n     */\n    async emulateMediaFeatures(features) {\n        if (!features) {\n            await __classPrivateFieldGet(this, _Page_client, \"f\").send('Emulation.setEmulatedMedia', {});\n        }\n        if (Array.isArray(features)) {\n            for (const mediaFeature of features) {\n                const name = mediaFeature.name;\n                (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.assert)(/^(?:prefers-(?:color-scheme|reduced-motion)|color-gamut)$/.test(name), 'Unsupported media feature: ' + name);\n            }\n            await __classPrivateFieldGet(this, _Page_client, \"f\").send('Emulation.setEmulatedMedia', {\n                features: features,\n            });\n        }\n    }\n    /**\n     * @param timezoneId - Changes the timezone of the page. See\n     * {@link https://source.chromium.org/chromium/chromium/deps/icu.git/+/faee8bc70570192d82d2978a71e2a615788597d1:source/data/misc/metaZones.txt | ICU’s metaZones.txt}\n     * for a list of supported timezone IDs. Passing\n     * `null` disables timezone emulation.\n     */\n    async emulateTimezone(timezoneId) {\n        try {\n            await __classPrivateFieldGet(this, _Page_client, \"f\").send('Emulation.setTimezoneOverride', {\n                timezoneId: timezoneId || '',\n            });\n        }\n        catch (error) {\n            if ((0,_util_js__WEBPACK_IMPORTED_MODULE_10__.isErrorLike)(error) && error.message.includes('Invalid timezone')) {\n                throw new Error(`Invalid timezone ID: ${timezoneId}`);\n            }\n            throw error;\n        }\n    }\n    /**\n     * Emulates the idle state.\n     * If no arguments set, clears idle state emulation.\n     *\n     * @example\n     * ```js\n     * // set idle emulation\n     * await page.emulateIdleState({isUserActive: true, isScreenUnlocked: false});\n     *\n     * // do some checks here\n     * ...\n     *\n     * // clear idle emulation\n     * await page.emulateIdleState();\n     * ```\n     *\n     * @param overrides - Mock idle state. If not set, clears idle overrides\n     */\n    async emulateIdleState(overrides) {\n        if (overrides) {\n            await __classPrivateFieldGet(this, _Page_client, \"f\").send('Emulation.setIdleOverride', {\n                isUserActive: overrides.isUserActive,\n                isScreenUnlocked: overrides.isScreenUnlocked,\n            });\n        }\n        else {\n            await __classPrivateFieldGet(this, _Page_client, \"f\").send('Emulation.clearIdleOverride');\n        }\n    }\n    /**\n     * Simulates the given vision deficiency on the page.\n     *\n     * @example\n     * ```js\n     * const puppeteer = require('puppeteer');\n     *\n     * (async () => {\n     *   const browser = await puppeteer.launch();\n     *   const page = await browser.newPage();\n     *   await page.goto('https://v8.dev/blog/10-years');\n     *\n     *   await page.emulateVisionDeficiency('achromatopsia');\n     *   await page.screenshot({ path: 'achromatopsia.png' });\n     *\n     *   await page.emulateVisionDeficiency('deuteranopia');\n     *   await page.screenshot({ path: 'deuteranopia.png' });\n     *\n     *   await page.emulateVisionDeficiency('blurredVision');\n     *   await page.screenshot({ path: 'blurred-vision.png' });\n     *\n     *   await browser.close();\n     * })();\n     * ```\n     *\n     * @param type - the type of deficiency to simulate, or `'none'` to reset.\n     */\n    async emulateVisionDeficiency(type) {\n        const visionDeficiencies = new Set([\n            'none',\n            'achromatopsia',\n            'blurredVision',\n            'deuteranopia',\n            'protanopia',\n            'tritanopia',\n        ]);\n        try {\n            (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.assert)(!type || visionDeficiencies.has(type), `Unsupported vision deficiency: ${type}`);\n            await __classPrivateFieldGet(this, _Page_client, \"f\").send('Emulation.setEmulatedVisionDeficiency', {\n                type: type || 'none',\n            });\n        }\n        catch (error) {\n            throw error;\n        }\n    }\n    /**\n     * `page.setViewport` will resize the page. A lot of websites don't expect\n     * phones to change size, so you should set the viewport before navigating to\n     * the page.\n     *\n     * In the case of multiple pages in a single browser, each page can have its\n     * own viewport size.\n     * @example\n     * ```js\n     * const page = await browser.newPage();\n     * await page.setViewport({\n     * width: 640,\n     * height: 480,\n     * deviceScaleFactor: 1,\n     * });\n     * await page.goto('https://example.com');\n     * ```\n     *\n     * @param viewport -\n     * @remarks\n     * Argument viewport have following properties:\n     *\n     * - `width`: page width in pixels. required\n     *\n     * - `height`: page height in pixels. required\n     *\n     * - `deviceScaleFactor`: Specify device scale factor (can be thought of as\n     *   DPR). Defaults to `1`.\n     *\n     * - `isMobile`: Whether the meta viewport tag is taken into account. Defaults\n     *   to `false`.\n     *\n     * - `hasTouch`: Specifies if viewport supports touch events. Defaults to `false`\n     *\n     * - `isLandScape`: Specifies if viewport is in landscape mode. Defaults to false.\n     *\n     * NOTE: in certain cases, setting viewport will reload the page in order to\n     * set the isMobile or hasTouch properties.\n     */\n    async setViewport(viewport) {\n        const needsReload = await __classPrivateFieldGet(this, _Page_emulationManager, \"f\").emulateViewport(viewport);\n        __classPrivateFieldSet(this, _Page_viewport, viewport, \"f\");\n        if (needsReload) {\n            await this.reload();\n        }\n    }\n    /**\n     * @returns\n     *\n     * - `width`: page's width in pixels\n     *\n     * - `height`: page's height in pixels\n     *\n     * - `deviceScalarFactor`: Specify device scale factor (can be though of as\n     *   dpr). Defaults to `1`.\n     *\n     * - `isMobile`: Whether the meta viewport tag is taken into account. Defaults\n     *   to `false`.\n     *\n     * - `hasTouch`: Specifies if viewport supports touch events. Defaults to\n     *   `false`.\n     *\n     * - `isLandScape`: Specifies if viewport is in landscape mode. Defaults to\n     *   `false`.\n     */\n    viewport() {\n        return __classPrivateFieldGet(this, _Page_viewport, \"f\");\n    }\n    /**\n     * @remarks\n     *\n     * Evaluates a function in the page's context and returns the result.\n     *\n     * If the function passed to `page.evaluteHandle` returns a Promise, the\n     * function will wait for the promise to resolve and return its value.\n     *\n     * @example\n     *\n     * ```js\n     * const result = await frame.evaluate(() => {\n     *   return Promise.resolve(8 * 7);\n     * });\n     * console.log(result); // prints \"56\"\n     * ```\n     *\n     * You can pass a string instead of a function (although functions are\n     * recommended as they are easier to debug and use with TypeScript):\n     *\n     * @example\n     * ```\n     * const aHandle = await page.evaluate('1 + 2');\n     * ```\n     *\n     * To get the best TypeScript experience, you should pass in as the\n     * generic the type of `pageFunction`:\n     *\n     * ```\n     * const aHandle = await page.evaluate<() => number>(() => 2);\n     * ```\n     *\n     * @example\n     *\n     * {@link ElementHandle} instances (including {@link JSHandle}s) can be passed\n     * as arguments to the `pageFunction`:\n     *\n     * ```\n     * const bodyHandle = await page.$('body');\n     * const html = await page.evaluate(body => body.innerHTML, bodyHandle);\n     * await bodyHandle.dispose();\n     * ```\n     *\n     * @param pageFunction - a function that is run within the page\n     * @param args - arguments to be passed to the pageFunction\n     *\n     * @returns the return value of `pageFunction`.\n     */\n    async evaluate(pageFunction, ...args) {\n        return __classPrivateFieldGet(this, _Page_frameManager, \"f\").mainFrame().evaluate(pageFunction, ...args);\n    }\n    /**\n     * Adds a function which would be invoked in one of the following scenarios:\n     *\n     * - whenever the page is navigated\n     *\n     * - whenever the child frame is attached or navigated. In this case, the\n     * function is invoked in the context of the newly attached frame.\n     *\n     * The function is invoked after the document was created but before any of\n     * its scripts were run. This is useful to amend the JavaScript environment,\n     * e.g. to seed `Math.random`.\n     * @param pageFunction - Function to be evaluated in browser context\n     * @param args - Arguments to pass to `pageFunction`\n     * @example\n     * An example of overriding the navigator.languages property before the page loads:\n     * ```js\n     * // preload.js\n     *\n     * // overwrite the `languages` property to use a custom getter\n     * Object.defineProperty(navigator, 'languages', {\n     * get: function () {\n     * return ['en-US', 'en', 'bn'];\n     * },\n     * });\n     *\n     * // In your puppeteer script, assuming the preload.js file is\n     * in same folder of our script\n     * const preloadFile = fs.readFileSync('./preload.js', 'utf8');\n     * await page.evaluateOnNewDocument(preloadFile);\n     * ```\n     */\n    async evaluateOnNewDocument(pageFunction, ...args) {\n        const source = (0,_util_js__WEBPACK_IMPORTED_MODULE_10__.evaluationString)(pageFunction, ...args);\n        await __classPrivateFieldGet(this, _Page_client, \"f\").send('Page.addScriptToEvaluateOnNewDocument', {\n            source,\n        });\n    }\n    /**\n     * Toggles ignoring cache for each request based on the enabled state. By\n     * default, caching is enabled.\n     * @param enabled - sets the `enabled` state of cache\n     */\n    async setCacheEnabled(enabled = true) {\n        await __classPrivateFieldGet(this, _Page_frameManager, \"f\").networkManager().setCacheEnabled(enabled);\n    }\n    /**\n     * @remarks\n     * Options object which might have the following properties:\n     *\n     * - `path` : The file path to save the image to. The screenshot type\n     *   will be inferred from file extension. If `path` is a relative path, then\n     *   it is resolved relative to\n     *   {@link https://nodejs.org/api/process.html#process_process_cwd\n     *   | current working directory}.\n     *   If no path is provided, the image won't be saved to the disk.\n     *\n     * - `type` : Specify screenshot type, can be either `jpeg` or `png`.\n     *   Defaults to 'png'.\n     *\n     * - `quality` : The quality of the image, between 0-100. Not\n     *   applicable to `png` images.\n     *\n     * - `fullPage` : When true, takes a screenshot of the full\n     *   scrollable page. Defaults to `false`\n     *\n     * - `clip` : An object which specifies clipping region of the page.\n     *   Should have the following fields:<br/>\n     *  - `x` : x-coordinate of top-left corner of clip area.<br/>\n     *  - `y` :  y-coordinate of top-left corner of clip area.<br/>\n     *  - `width` : width of clipping area.<br/>\n     *  - `height` : height of clipping area.\n     *\n     * - `omitBackground` : Hides default white background and allows\n     *   capturing screenshots with transparency. Defaults to `false`\n     *\n     * - `encoding` : The encoding of the image, can be either base64 or\n     *   binary. Defaults to `binary`.\n     *\n     *\n     * NOTE: Screenshots take at least 1/6 second on OS X. See\n     * {@link https://crbug.com/741689} for discussion.\n     * @returns Promise which resolves to buffer or a base64 string (depending on\n     * the value of `encoding`) with captured screenshot.\n     */\n    async screenshot(options = {}) {\n        let screenshotType = \"png\" /* Protocol.Page.CaptureScreenshotRequestFormat.Png */;\n        // options.type takes precedence over inferring the type from options.path\n        // because it may be a 0-length file with no extension created beforehand\n        // (i.e. as a temp file).\n        if (options.type) {\n            const type = options.type;\n            if (type !== 'png' && type !== 'jpeg' && type !== 'webp') {\n                (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.assertNever)(type, 'Unknown options.type value: ' + type);\n            }\n            screenshotType =\n                options.type;\n        }\n        else if (options.path) {\n            const filePath = options.path;\n            const extension = filePath\n                .slice(filePath.lastIndexOf('.') + 1)\n                .toLowerCase();\n            switch (extension) {\n                case 'png':\n                    screenshotType = \"png\" /* Protocol.Page.CaptureScreenshotRequestFormat.Png */;\n                    break;\n                case 'jpeg':\n                case 'jpg':\n                    screenshotType = \"jpeg\" /* Protocol.Page.CaptureScreenshotRequestFormat.Jpeg */;\n                    break;\n                case 'webp':\n                    screenshotType = \"webp\" /* Protocol.Page.CaptureScreenshotRequestFormat.Webp */;\n                    break;\n                default:\n                    throw new Error(`Unsupported screenshot type for extension \\`.${extension}\\``);\n            }\n        }\n        if (options.quality) {\n            (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.assert)(screenshotType === \"jpeg\" /* Protocol.Page.CaptureScreenshotRequestFormat.Jpeg */ ||\n                screenshotType === \"webp\" /* Protocol.Page.CaptureScreenshotRequestFormat.Webp */, 'options.quality is unsupported for the ' +\n                screenshotType +\n                ' screenshots');\n            (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.assert)(typeof options.quality === 'number', 'Expected options.quality to be a number but found ' +\n                typeof options.quality);\n            (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.assert)(Number.isInteger(options.quality), 'Expected options.quality to be an integer');\n            (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.assert)(options.quality >= 0 && options.quality <= 100, 'Expected options.quality to be between 0 and 100 (inclusive), got ' +\n                options.quality);\n        }\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.assert)(!options.clip || !options.fullPage, 'options.clip and options.fullPage are exclusive');\n        if (options.clip) {\n            (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.assert)(typeof options.clip.x === 'number', 'Expected options.clip.x to be a number but found ' +\n                typeof options.clip.x);\n            (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.assert)(typeof options.clip.y === 'number', 'Expected options.clip.y to be a number but found ' +\n                typeof options.clip.y);\n            (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.assert)(typeof options.clip.width === 'number', 'Expected options.clip.width to be a number but found ' +\n                typeof options.clip.width);\n            (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.assert)(typeof options.clip.height === 'number', 'Expected options.clip.height to be a number but found ' +\n                typeof options.clip.height);\n            (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.assert)(options.clip.width !== 0, 'Expected options.clip.width not to be 0.');\n            (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.assert)(options.clip.height !== 0, 'Expected options.clip.height not to be 0.');\n        }\n        return __classPrivateFieldGet(this, _Page_screenshotTaskQueue, \"f\").postTask(() => {\n            return __classPrivateFieldGet(this, _Page_instances, \"m\", _Page_screenshotTask).call(this, screenshotType, options);\n        });\n    }\n    /**\n     * Generates a PDF of the page with the `print` CSS media type.\n     * @remarks\n     *\n     * NOTE: PDF generation is only supported in Chrome headless mode.\n     *\n     * To generate a PDF with the `screen` media type, call\n     * {@link Page.emulateMediaType | `page.emulateMediaType('screen')`} before\n     * calling `page.pdf()`.\n     *\n     * By default, `page.pdf()` generates a pdf with modified colors for printing.\n     * Use the\n     * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-print-color-adjust | `-webkit-print-color-adjust`}\n     * property to force rendering of exact colors.\n     *\n     *\n     * @param options - options for generating the PDF.\n     */\n    async createPDFStream(options = {}) {\n        const { scale = 1, displayHeaderFooter = false, headerTemplate = '', footerTemplate = '', printBackground = false, landscape = false, pageRanges = '', preferCSSPageSize = false, margin = {}, omitBackground = false, timeout = 30000, } = options;\n        let paperWidth = 8.5;\n        let paperHeight = 11;\n        if (options.format) {\n            const format = _PDFOptions_js__WEBPACK_IMPORTED_MODULE_14__._paperFormats[options.format.toLowerCase()];\n            (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.assert)(format, 'Unknown paper format: ' + options.format);\n            paperWidth = format.width;\n            paperHeight = format.height;\n        }\n        else {\n            paperWidth = convertPrintParameterToInches(options.width) || paperWidth;\n            paperHeight =\n                convertPrintParameterToInches(options.height) || paperHeight;\n        }\n        const marginTop = convertPrintParameterToInches(margin.top) || 0;\n        const marginLeft = convertPrintParameterToInches(margin.left) || 0;\n        const marginBottom = convertPrintParameterToInches(margin.bottom) || 0;\n        const marginRight = convertPrintParameterToInches(margin.right) || 0;\n        if (omitBackground) {\n            await __classPrivateFieldGet(this, _Page_instances, \"m\", _Page_setTransparentBackgroundColor).call(this);\n        }\n        const printCommandPromise = __classPrivateFieldGet(this, _Page_client, \"f\").send('Page.printToPDF', {\n            transferMode: 'ReturnAsStream',\n            landscape,\n            displayHeaderFooter,\n            headerTemplate,\n            footerTemplate,\n            printBackground,\n            scale,\n            paperWidth,\n            paperHeight,\n            marginTop,\n            marginBottom,\n            marginLeft,\n            marginRight,\n            pageRanges,\n            preferCSSPageSize,\n        });\n        const result = await (0,_util_js__WEBPACK_IMPORTED_MODULE_10__.waitWithTimeout)(printCommandPromise, 'Page.printToPDF', timeout);\n        if (omitBackground) {\n            await __classPrivateFieldGet(this, _Page_instances, \"m\", _Page_resetDefaultBackgroundColor).call(this);\n        }\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.assert)(result.stream, '`stream` is missing from `Page.printToPDF');\n        return (0,_util_js__WEBPACK_IMPORTED_MODULE_10__.getReadableFromProtocolStream)(__classPrivateFieldGet(this, _Page_client, \"f\"), result.stream);\n    }\n    /**\n     * @param options -\n     * @returns\n     */\n    async pdf(options = {}) {\n        const { path = undefined } = options;\n        const readable = await this.createPDFStream(options);\n        const buffer = await (0,_util_js__WEBPACK_IMPORTED_MODULE_10__.getReadableAsBuffer)(readable, path);\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.assert)(buffer, 'Could not create buffer');\n        return buffer;\n    }\n    /**\n     * @returns The page's title\n     * @remarks\n     * Shortcut for {@link Frame.title | page.mainFrame().title()}.\n     */\n    async title() {\n        return this.mainFrame().title();\n    }\n    async close(options = { runBeforeUnload: undefined }) {\n        const connection = __classPrivateFieldGet(this, _Page_client, \"f\").connection();\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.assert)(connection, 'Protocol error: Connection closed. Most likely the page has been closed.');\n        const runBeforeUnload = !!options.runBeforeUnload;\n        if (runBeforeUnload) {\n            await __classPrivateFieldGet(this, _Page_client, \"f\").send('Page.close');\n        }\n        else {\n            await connection.send('Target.closeTarget', {\n                targetId: __classPrivateFieldGet(this, _Page_target, \"f\")._targetId,\n            });\n            await __classPrivateFieldGet(this, _Page_target, \"f\")._isClosedPromise;\n        }\n    }\n    /**\n     * Indicates that the page has been closed.\n     * @returns\n     */\n    isClosed() {\n        return __classPrivateFieldGet(this, _Page_closed, \"f\");\n    }\n    get mouse() {\n        return __classPrivateFieldGet(this, _Page_mouse, \"f\");\n    }\n    /**\n     * This method fetches an element with `selector`, scrolls it into view if\n     * needed, and then uses {@link Page.mouse} to click in the center of the\n     * element. If there's no element matching `selector`, the method throws an\n     * error.\n     * @remarks Bear in mind that if `click()` triggers a navigation event and\n     * there's a separate `page.waitForNavigation()` promise to be resolved, you\n     * may end up with a race condition that yields unexpected results. The\n     * correct pattern for click and wait for navigation is the following:\n     * ```js\n     * const [response] = await Promise.all([\n     * page.waitForNavigation(waitOptions),\n     * page.click(selector, clickOptions),\n     * ]);\n     * ```\n     * Shortcut for {@link Frame.click | page.mainFrame().click(selector[, options]) }.\n     * @param selector - A `selector` to search for element to click. If there are\n     * multiple elements satisfying the `selector`, the first will be clicked\n     * @param options - `Object`\n     * @returns Promise which resolves when the element matching `selector` is\n     * successfully clicked. The Promise will be rejected if there is no element\n     * matching `selector`.\n     */\n    click(selector, options = {}) {\n        return this.mainFrame().click(selector, options);\n    }\n    /**\n     * This method fetches an element with `selector` and focuses it. If there's no\n     * element matching `selector`, the method throws an error.\n     * @param selector - A\n     * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | selector }\n     * of an element to focus. If there are multiple elements satisfying the\n     * selector, the first will be focused.\n     * @returns  Promise which resolves when the element matching selector is\n     * successfully focused. The promise will be rejected if there is no element\n     * matching selector.\n     * @remarks\n     * Shortcut for {@link Frame.focus | page.mainFrame().focus(selector)}.\n     */\n    focus(selector) {\n        return this.mainFrame().focus(selector);\n    }\n    /**\n     * This method fetches an element with `selector`, scrolls it into view if\n     * needed, and then uses {@link Page.mouse} to hover over the center of the element.\n     * If there's no element matching `selector`, the method throws an error.\n     * @param selector - A\n     * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | selector}\n     * to search for element to hover. If there are multiple elements satisfying\n     * the selector, the first will be hovered.\n     * @returns Promise which resolves when the element matching `selector` is\n     * successfully hovered. Promise gets rejected if there's no element matching\n     * `selector`.\n     * @remarks\n     * Shortcut for {@link Page.hover | page.mainFrame().hover(selector)}.\n     */\n    hover(selector) {\n        return this.mainFrame().hover(selector);\n    }\n    /**\n     * Triggers a `change` and `input` event once all the provided options have been\n     * selected. If there's no `<select>` element matching `selector`, the method\n     * throws an error.\n     *\n     * @example\n     * ```js\n     * page.select('select#colors', 'blue'); // single selection\n     * page.select('select#colors', 'red', 'green', 'blue'); // multiple selections\n     * ```\n     * @param selector - A\n     * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | Selector}\n     * to query the page for\n     * @param values - Values of options to select. If the `<select>` has the\n     * `multiple` attribute, all values are considered, otherwise only the first one\n     * is taken into account.\n     * @returns\n     *\n     * @remarks\n     * Shortcut for {@link Frame.select | page.mainFrame().select()}\n     */\n    select(selector, ...values) {\n        return this.mainFrame().select(selector, ...values);\n    }\n    /**\n     * This method fetches an element with `selector`, scrolls it into view if\n     * needed, and then uses {@link Page.touchscreen} to tap in the center of the element.\n     * If there's no element matching `selector`, the method throws an error.\n     * @param selector - A\n     * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | Selector}\n     * to search for element to tap. If there are multiple elements satisfying the\n     * selector, the first will be tapped.\n     * @returns\n     * @remarks\n     * Shortcut for {@link Frame.tap | page.mainFrame().tap(selector)}.\n     */\n    tap(selector) {\n        return this.mainFrame().tap(selector);\n    }\n    /**\n     * Sends a `keydown`, `keypress/input`, and `keyup` event for each character\n     * in the text.\n     *\n     * To press a special key, like `Control` or `ArrowDown`, use {@link Keyboard.press}.\n     * @example\n     * ```\n     * await page.type('#mytextarea', 'Hello');\n     * // Types instantly\n     * await page.type('#mytextarea', 'World', { delay: 100 });\n     * // Types slower, like a user\n     * ```\n     * @param selector - A\n     * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | selector}\n     * of an element to type into. If there are multiple elements satisfying the\n     * selector, the first will be used.\n     * @param text - A text to type into a focused element.\n     * @param options - have property `delay` which is the Time to wait between\n     * key presses in milliseconds. Defaults to `0`.\n     * @returns\n     * @remarks\n     */\n    type(selector, text, options) {\n        return this.mainFrame().type(selector, text, options);\n    }\n    /**\n     * @remarks\n     *\n     * This method behaves differently depending on the first parameter. If it's a\n     * `string`, it will be treated as a `selector` or `xpath` (if the string\n     * starts with `//`). This method then is a shortcut for\n     * {@link Page.waitForSelector} or {@link Page.waitForXPath}.\n     *\n     * If the first argument is a function this method is a shortcut for\n     * {@link Page.waitForFunction}.\n     *\n     * If the first argument is a `number`, it's treated as a timeout in\n     * milliseconds and the method returns a promise which resolves after the\n     * timeout.\n     *\n     * @param selectorOrFunctionOrTimeout - a selector, predicate or timeout to\n     * wait for.\n     * @param options - optional waiting parameters.\n     * @param args - arguments to pass to `pageFunction`.\n     *\n     * @deprecated Don't use this method directly. Instead use the more explicit\n     * methods available: {@link Page.waitForSelector},\n     * {@link Page.waitForXPath}, {@link Page.waitForFunction} or\n     * {@link Page.waitForTimeout}.\n     */\n    waitFor(selectorOrFunctionOrTimeout, options = {}, ...args) {\n        return this.mainFrame().waitFor(selectorOrFunctionOrTimeout, options, ...args);\n    }\n    /**\n     * Causes your script to wait for the given number of milliseconds.\n     *\n     * @remarks\n     *\n     * It's generally recommended to not wait for a number of seconds, but instead\n     * use {@link Page.waitForSelector}, {@link Page.waitForXPath} or\n     * {@link Page.waitForFunction} to wait for exactly the conditions you want.\n     *\n     * @example\n     *\n     * Wait for 1 second:\n     *\n     * ```\n     * await page.waitForTimeout(1000);\n     * ```\n     *\n     * @param milliseconds - the number of milliseconds to wait.\n     */\n    waitForTimeout(milliseconds) {\n        return this.mainFrame().waitForTimeout(milliseconds);\n    }\n    /**\n     * Wait for the `selector` to appear in page. If at the moment of calling the\n     * method the `selector` already exists, the method will return immediately. If\n     * the `selector` doesn't appear after the `timeout` milliseconds of waiting, the\n     * function will throw.\n     *\n     * This method works across navigations:\n     * ```js\n     * const puppeteer = require('puppeteer');\n     * (async () => {\n     * const browser = await puppeteer.launch();\n     * const page = await browser.newPage();\n     * let currentURL;\n     * page\n     * .waitForSelector('img')\n     * .then(() => console.log('First URL with image: ' + currentURL));\n     * for (currentURL of [\n     * 'https://example.com',\n     * 'https://google.com',\n     * 'https://bbc.com',\n     * ]) {\n     * await page.goto(currentURL);\n     * }\n     * await browser.close();\n     * })();\n     * ```\n     * @param selector - A\n     * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | selector}\n     * of an element to wait for\n     * @param options - Optional waiting parameters\n     * @returns Promise which resolves when element specified by selector string\n     * is added to DOM. Resolves to `null` if waiting for hidden: `true` and\n     * selector is not found in DOM.\n     * @remarks\n     * The optional Parameter in Arguments `options` are :\n     *\n     * - `Visible`: A boolean wait for element to be present in DOM and to be\n     * visible, i.e. to not have `display: none` or `visibility: hidden` CSS\n     * properties. Defaults to `false`.\n     *\n     * - `hidden`: ait for element to not be found in the DOM or to be hidden,\n     * i.e. have `display: none` or `visibility: hidden` CSS properties. Defaults to\n     * `false`.\n     *\n     * - `timeout`: maximum time to wait for in milliseconds. Defaults to `30000`\n     * (30 seconds). Pass `0` to disable timeout. The default value can be changed\n     * by using the {@link Page.setDefaultTimeout} method.\n     */\n    waitForSelector(selector, options = {}) {\n        return this.mainFrame().waitForSelector(selector, options);\n    }\n    /**\n     * Wait for the `xpath` to appear in page. If at the moment of calling the\n     * method the `xpath` already exists, the method will return immediately. If\n     * the `xpath` doesn't appear after the `timeout` milliseconds of waiting, the\n     * function will throw.\n     *\n     * This method works across navigation\n     * ```js\n     * const puppeteer = require('puppeteer');\n     * (async () => {\n     * const browser = await puppeteer.launch();\n     * const page = await browser.newPage();\n     * let currentURL;\n     * page\n     * .waitForXPath('//img')\n     * .then(() => console.log('First URL with image: ' + currentURL));\n     * for (currentURL of [\n     * 'https://example.com',\n     * 'https://google.com',\n     * 'https://bbc.com',\n     * ]) {\n     * await page.goto(currentURL);\n     * }\n     * await browser.close();\n     * })();\n     * ```\n     * @param xpath - A\n     * {@link https://developer.mozilla.org/en-US/docs/Web/XPath | xpath} of an\n     * element to wait for\n     * @param options - Optional waiting parameters\n     * @returns Promise which resolves when element specified by xpath string is\n     * added to DOM. Resolves to `null` if waiting for `hidden: true` and xpath is\n     * not found in DOM.\n     * @remarks\n     * The optional Argument `options` have properties:\n     *\n     * - `visible`: A boolean to wait for element to be present in DOM and to be\n     * visible, i.e. to not have `display: none` or `visibility: hidden` CSS\n     * properties. Defaults to `false`.\n     *\n     * - `hidden`: A boolean wait for element to not be found in the DOM or to be\n     * hidden, i.e. have `display: none` or `visibility: hidden` CSS properties.\n     * Defaults to `false`.\n     *\n     * - `timeout`: A number which is maximum time to wait for in milliseconds.\n     * Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default\n     * value can be changed by using the {@link Page.setDefaultTimeout} method.\n     */\n    waitForXPath(xpath, options = {}) {\n        return this.mainFrame().waitForXPath(xpath, options);\n    }\n    /**\n     * The `waitForFunction` can be used to observe viewport size change:\n     *\n     * ```\n     * const puppeteer = require('puppeteer');\n     * (async () => {\n     * const browser = await puppeteer.launch();\n     * const page = await browser.newPage();\n     * const watchDog = page.waitForFunction('window.innerWidth < 100');\n     * await page.setViewport({ width: 50, height: 50 });\n     * await watchDog;\n     * await browser.close();\n     * })();\n     * ```\n     * To pass arguments from node.js to the predicate of `page.waitForFunction` function:\n     * ```\n     * const selector = '.foo';\n     * await page.waitForFunction(\n     * (selector) => !!document.querySelector(selector),\n     * {},\n     * selector\n     * );\n     * ```\n     * The predicate of `page.waitForFunction` can be asynchronous too:\n     * ```\n     * const username = 'github-username';\n     * await page.waitForFunction(\n     * async (username) => {\n     * const githubResponse = await fetch(\n     *  `https://api.github.com/users/${username}`\n     * );\n     * const githubUser = await githubResponse.json();\n     * // show the avatar\n     * const img = document.createElement('img');\n     * img.src = githubUser.avatar_url;\n     * // wait 3 seconds\n     * await new Promise((resolve, reject) => setTimeout(resolve, 3000));\n     * img.remove();\n     * },\n     * {},\n     * username\n     * );\n     * ```\n     * @param pageFunction - Function to be evaluated in browser context\n     * @param options - Optional waiting parameters\n     * @param args -  Arguments to pass to `pageFunction`\n     * @returns Promise which resolves when the `pageFunction` returns a truthy\n     * value. It resolves to a JSHandle of the truthy value.\n     *\n     * The optional waiting parameter can be:\n     *\n     * - `Polling`: An interval at which the `pageFunction` is executed, defaults to\n     *   `raf`. If `polling` is a number, then it is treated as an interval in\n     *   milliseconds at which the function would be executed. If polling is a\n     *   string, then it can be one of the following values:<br/>\n     *    - `raf`: to constantly execute `pageFunction` in `requestAnimationFrame`\n     *      callback. This is the tightest polling mode which is suitable to\n     *      observe styling changes.<br/>\n     *    - `mutation`: to execute pageFunction on every DOM mutation.\n     *\n     * - `timeout`: maximum time to wait for in milliseconds. Defaults to `30000`\n     * (30 seconds). Pass `0` to disable timeout. The default value can be changed\n     * by using the\n     * {@link Page.setDefaultTimeout | page.setDefaultTimeout(timeout)} method.\n     *\n     */\n    waitForFunction(pageFunction, options = {}, ...args) {\n        return this.mainFrame().waitForFunction(pageFunction, options, ...args);\n    }\n}\n_Page_closed = new WeakMap(), _Page_client = new WeakMap(), _Page_target = new WeakMap(), _Page_keyboard = new WeakMap(), _Page_mouse = new WeakMap(), _Page_timeoutSettings = new WeakMap(), _Page_touchscreen = new WeakMap(), _Page_accessibility = new WeakMap(), _Page_frameManager = new WeakMap(), _Page_emulationManager = new WeakMap(), _Page_tracing = new WeakMap(), _Page_pageBindings = new WeakMap(), _Page_coverage = new WeakMap(), _Page_javascriptEnabled = new WeakMap(), _Page_viewport = new WeakMap(), _Page_screenshotTaskQueue = new WeakMap(), _Page_workers = new WeakMap(), _Page_fileChooserInterceptors = new WeakMap(), _Page_disconnectPromise = new WeakMap(), _Page_userDragInterceptionEnabled = new WeakMap(), _Page_handlerMap = new WeakMap(), _Page_instances = new WeakSet(), _Page_initialize = async function _Page_initialize() {\n    await Promise.all([\n        __classPrivateFieldGet(this, _Page_frameManager, \"f\").initialize(),\n        __classPrivateFieldGet(this, _Page_client, \"f\").send('Target.setAutoAttach', {\n            autoAttach: true,\n            waitForDebuggerOnStart: false,\n            flatten: true,\n        }),\n        __classPrivateFieldGet(this, _Page_client, \"f\").send('Performance.enable'),\n        __classPrivateFieldGet(this, _Page_client, \"f\").send('Log.enable'),\n    ]);\n}, _Page_onFileChooser = async function _Page_onFileChooser(event) {\n    if (!__classPrivateFieldGet(this, _Page_fileChooserInterceptors, \"f\").size) {\n        return;\n    }\n    const frame = __classPrivateFieldGet(this, _Page_frameManager, \"f\").frame(event.frameId);\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.assert)(frame);\n    const context = await frame.executionContext();\n    const element = await context._adoptBackendNodeId(event.backendNodeId);\n    const interceptors = Array.from(__classPrivateFieldGet(this, _Page_fileChooserInterceptors, \"f\"));\n    __classPrivateFieldGet(this, _Page_fileChooserInterceptors, \"f\").clear();\n    const fileChooser = new _FileChooser_js__WEBPACK_IMPORTED_MODULE_8__.FileChooser(element, event);\n    for (const interceptor of interceptors) {\n        interceptor.call(null, fileChooser);\n    }\n}, _Page_onTargetCrashed = function _Page_onTargetCrashed() {\n    this.emit('error', new Error('Page crashed!'));\n}, _Page_onLogEntryAdded = function _Page_onLogEntryAdded(event) {\n    const { level, text, args, source, url, lineNumber } = event.entry;\n    if (args) {\n        args.map((arg) => {\n            return (0,_util_js__WEBPACK_IMPORTED_MODULE_10__.releaseObject)(__classPrivateFieldGet(this, _Page_client, \"f\"), arg);\n        });\n    }\n    if (source !== 'worker') {\n        this.emit(\"console\" /* PageEmittedEvents.Console */, new _ConsoleMessage_js__WEBPACK_IMPORTED_MODULE_3__.ConsoleMessage(level, text, [], [{ url, lineNumber }]));\n    }\n}, _Page_emitMetrics = function _Page_emitMetrics(event) {\n    this.emit(\"metrics\" /* PageEmittedEvents.Metrics */, {\n        title: event.title,\n        metrics: __classPrivateFieldGet(this, _Page_instances, \"m\", _Page_buildMetricsObject).call(this, event.metrics),\n    });\n}, _Page_buildMetricsObject = function _Page_buildMetricsObject(metrics) {\n    const result = {};\n    for (const metric of metrics || []) {\n        if (supportedMetrics.has(metric.name)) {\n            result[metric.name] = metric.value;\n        }\n    }\n    return result;\n}, _Page_handleException = function _Page_handleException(exceptionDetails) {\n    const message = (0,_util_js__WEBPACK_IMPORTED_MODULE_10__.getExceptionMessage)(exceptionDetails);\n    const err = new Error(message);\n    err.stack = ''; // Don't report clientside error with a node stack attached\n    this.emit(\"pageerror\" /* PageEmittedEvents.PageError */, err);\n}, _Page_onConsoleAPI = async function _Page_onConsoleAPI(event) {\n    if (event.executionContextId === 0) {\n        // DevTools protocol stores the last 1000 console messages. These\n        // messages are always reported even for removed execution contexts. In\n        // this case, they are marked with executionContextId = 0 and are\n        // reported upon enabling Runtime agent.\n        //\n        // Ignore these messages since:\n        // - there's no execution context we can use to operate with message\n        //   arguments\n        // - these messages are reported before Puppeteer clients can subscribe\n        //   to the 'console'\n        //   page event.\n        //\n        // @see https://github.com/puppeteer/puppeteer/issues/3865\n        return;\n    }\n    const context = __classPrivateFieldGet(this, _Page_frameManager, \"f\").executionContextById(event.executionContextId, __classPrivateFieldGet(this, _Page_client, \"f\"));\n    const values = event.args.map((arg) => {\n        return (0,_JSHandle_js__WEBPACK_IMPORTED_MODULE_12__._createJSHandle)(context, arg);\n    });\n    __classPrivateFieldGet(this, _Page_instances, \"m\", _Page_addConsoleMessage).call(this, event.type, values, event.stackTrace);\n}, _Page_onBindingCalled = async function _Page_onBindingCalled(event) {\n    let payload;\n    try {\n        payload = JSON.parse(event.payload);\n    }\n    catch {\n        // The binding was either called by something in the page or it was\n        // called before our wrapper was initialized.\n        return;\n    }\n    const { type, name, seq, args } = payload;\n    if (type !== 'exposedFun' || !__classPrivateFieldGet(this, _Page_pageBindings, \"f\").has(name)) {\n        return;\n    }\n    let expression = null;\n    try {\n        const pageBinding = __classPrivateFieldGet(this, _Page_pageBindings, \"f\").get(name);\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.assert)(pageBinding);\n        const result = await pageBinding(...args);\n        expression = (0,_util_js__WEBPACK_IMPORTED_MODULE_10__.pageBindingDeliverResultString)(name, seq, result);\n    }\n    catch (error) {\n        if ((0,_util_js__WEBPACK_IMPORTED_MODULE_10__.isErrorLike)(error)) {\n            expression = (0,_util_js__WEBPACK_IMPORTED_MODULE_10__.pageBindingDeliverErrorString)(name, seq, error.message, error.stack);\n        }\n        else {\n            expression = (0,_util_js__WEBPACK_IMPORTED_MODULE_10__.pageBindingDeliverErrorValueString)(name, seq, error);\n        }\n    }\n    __classPrivateFieldGet(this, _Page_client, \"f\")\n        .send('Runtime.evaluate', {\n        expression,\n        contextId: event.executionContextId,\n    })\n        .catch(_util_js__WEBPACK_IMPORTED_MODULE_10__.debugError);\n}, _Page_addConsoleMessage = function _Page_addConsoleMessage(eventType, args, stackTrace) {\n    if (!this.listenerCount(\"console\" /* PageEmittedEvents.Console */)) {\n        args.forEach((arg) => {\n            return arg.dispose();\n        });\n        return;\n    }\n    const textTokens = [];\n    for (const arg of args) {\n        const remoteObject = arg._remoteObject;\n        if (remoteObject.objectId) {\n            textTokens.push(arg.toString());\n        }\n        else {\n            textTokens.push((0,_util_js__WEBPACK_IMPORTED_MODULE_10__.valueFromRemoteObject)(remoteObject));\n        }\n    }\n    const stackTraceLocations = [];\n    if (stackTrace) {\n        for (const callFrame of stackTrace.callFrames) {\n            stackTraceLocations.push({\n                url: callFrame.url,\n                lineNumber: callFrame.lineNumber,\n                columnNumber: callFrame.columnNumber,\n            });\n        }\n    }\n    const message = new _ConsoleMessage_js__WEBPACK_IMPORTED_MODULE_3__.ConsoleMessage(eventType, textTokens.join(' '), args, stackTraceLocations);\n    this.emit(\"console\" /* PageEmittedEvents.Console */, message);\n}, _Page_onDialog = function _Page_onDialog(event) {\n    let dialogType = null;\n    const validDialogTypes = new Set([\n        'alert',\n        'confirm',\n        'prompt',\n        'beforeunload',\n    ]);\n    if (validDialogTypes.has(event.type)) {\n        dialogType = event.type;\n    }\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.assert)(dialogType, 'Unknown javascript dialog type: ' + event.type);\n    const dialog = new _Dialog_js__WEBPACK_IMPORTED_MODULE_5__.Dialog(__classPrivateFieldGet(this, _Page_client, \"f\"), dialogType, event.message, event.defaultPrompt);\n    this.emit(\"dialog\" /* PageEmittedEvents.Dialog */, dialog);\n}, _Page_resetDefaultBackgroundColor = \n/**\n * Resets default white background\n */\nasync function _Page_resetDefaultBackgroundColor() {\n    await __classPrivateFieldGet(this, _Page_client, \"f\").send('Emulation.setDefaultBackgroundColorOverride');\n}, _Page_setTransparentBackgroundColor = \n/**\n * Hides default white background\n */\nasync function _Page_setTransparentBackgroundColor() {\n    await __classPrivateFieldGet(this, _Page_client, \"f\").send('Emulation.setDefaultBackgroundColorOverride', {\n        color: { r: 0, g: 0, b: 0, a: 0 },\n    });\n}, _Page_sessionClosePromise = function _Page_sessionClosePromise() {\n    if (!__classPrivateFieldGet(this, _Page_disconnectPromise, \"f\")) {\n        __classPrivateFieldSet(this, _Page_disconnectPromise, new Promise((fulfill) => {\n            return __classPrivateFieldGet(this, _Page_client, \"f\").once(_Connection_js__WEBPACK_IMPORTED_MODULE_2__.CDPSessionEmittedEvents.Disconnected, () => {\n                return fulfill(new Error('Target closed'));\n            });\n        }), \"f\");\n    }\n    return __classPrivateFieldGet(this, _Page_disconnectPromise, \"f\");\n}, _Page_go = async function _Page_go(delta, options) {\n    const history = await __classPrivateFieldGet(this, _Page_client, \"f\").send('Page.getNavigationHistory');\n    const entry = history.entries[history.currentIndex + delta];\n    if (!entry) {\n        return null;\n    }\n    const result = await Promise.all([\n        this.waitForNavigation(options),\n        __classPrivateFieldGet(this, _Page_client, \"f\").send('Page.navigateToHistoryEntry', { entryId: entry.id }),\n    ]);\n    return result[0];\n}, _Page_screenshotTask = async function _Page_screenshotTask(format, options = {}) {\n    await __classPrivateFieldGet(this, _Page_client, \"f\").send('Target.activateTarget', {\n        targetId: __classPrivateFieldGet(this, _Page_target, \"f\")._targetId,\n    });\n    let clip = options.clip ? processClip(options.clip) : undefined;\n    let { captureBeyondViewport = true } = options;\n    captureBeyondViewport =\n        typeof captureBeyondViewport === 'boolean' ? captureBeyondViewport : true;\n    if (options.fullPage) {\n        const metrics = await __classPrivateFieldGet(this, _Page_client, \"f\").send('Page.getLayoutMetrics');\n        // Fallback to `contentSize` in case of using Firefox.\n        const { width, height } = metrics.cssContentSize || metrics.contentSize;\n        // Overwrite clip for full page.\n        clip = { x: 0, y: 0, width, height, scale: 1 };\n        if (!captureBeyondViewport) {\n            const { isMobile = false, deviceScaleFactor = 1, isLandscape = false, } = __classPrivateFieldGet(this, _Page_viewport, \"f\") || {};\n            const screenOrientation = isLandscape\n                ? { angle: 90, type: 'landscapePrimary' }\n                : { angle: 0, type: 'portraitPrimary' };\n            await __classPrivateFieldGet(this, _Page_client, \"f\").send('Emulation.setDeviceMetricsOverride', {\n                mobile: isMobile,\n                width,\n                height,\n                deviceScaleFactor,\n                screenOrientation,\n            });\n        }\n    }\n    const shouldSetDefaultBackground = options.omitBackground && (format === 'png' || format === 'webp');\n    if (shouldSetDefaultBackground) {\n        await __classPrivateFieldGet(this, _Page_instances, \"m\", _Page_setTransparentBackgroundColor).call(this);\n    }\n    const result = await __classPrivateFieldGet(this, _Page_client, \"f\").send('Page.captureScreenshot', {\n        format,\n        quality: options.quality,\n        clip,\n        captureBeyondViewport,\n    });\n    if (shouldSetDefaultBackground) {\n        await __classPrivateFieldGet(this, _Page_instances, \"m\", _Page_resetDefaultBackgroundColor).call(this);\n    }\n    if (options.fullPage && __classPrivateFieldGet(this, _Page_viewport, \"f\")) {\n        await this.setViewport(__classPrivateFieldGet(this, _Page_viewport, \"f\"));\n    }\n    const buffer = options.encoding === 'base64'\n        ? result.data\n        : Buffer.from(result.data, 'base64');\n    if (options.path) {\n        try {\n            const fs = (await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! fs */ \"fs\", 19))).promises;\n            await fs.writeFile(options.path, buffer);\n        }\n        catch (error) {\n            if (error instanceof TypeError) {\n                throw new Error('Screenshots can only be written to a file path in a Node-like environment.');\n            }\n            throw error;\n        }\n    }\n    return buffer;\n    function processClip(clip) {\n        const x = Math.round(clip.x);\n        const y = Math.round(clip.y);\n        const width = Math.round(clip.width + clip.x - x);\n        const height = Math.round(clip.height + clip.y - y);\n        return { x, y, width, height, scale: 1 };\n    }\n};\nconst supportedMetrics = new Set([\n    'Timestamp',\n    'Documents',\n    'Frames',\n    'JSEventListeners',\n    'Nodes',\n    'LayoutCount',\n    'RecalcStyleCount',\n    'LayoutDuration',\n    'RecalcStyleDuration',\n    'ScriptDuration',\n    'TaskDuration',\n    'JSHeapUsedSize',\n    'JSHeapTotalSize',\n]);\nconst unitToPixels = {\n    px: 1,\n    in: 96,\n    cm: 37.8,\n    mm: 3.78,\n};\nfunction convertPrintParameterToInches(parameter) {\n    if (typeof parameter === 'undefined') {\n        return undefined;\n    }\n    let pixels;\n    if ((0,_util_js__WEBPACK_IMPORTED_MODULE_10__.isNumber)(parameter)) {\n        // Treat numbers as pixel values to be aligned with phantom's paperSize.\n        pixels = parameter;\n    }\n    else if ((0,_util_js__WEBPACK_IMPORTED_MODULE_10__.isString)(parameter)) {\n        const text = parameter;\n        let unit = text.substring(text.length - 2).toLowerCase();\n        let valueText = '';\n        if (unit in unitToPixels) {\n            valueText = text.substring(0, text.length - 2);\n        }\n        else {\n            // In case of unknown unit try to parse the whole parameter as number of pixels.\n            // This is consistent with phantom's paperSize behavior.\n            unit = 'px';\n            valueText = text;\n        }\n        const value = Number(valueText);\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.assert)(!isNaN(value), 'Failed to parse parameter value: ' + text);\n        pixels = value * unitToPixels[unit];\n    }\n    else {\n        throw new Error('page.pdf() Cannot handle parameter type: ' + typeof parameter);\n    }\n    return pixels / 96;\n}\n//# sourceMappingURL=Page.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Page.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Puppeteer.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Puppeteer.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Puppeteer\": () => (/* binding */ Puppeteer)\n/* harmony export */ });\n/* harmony import */ var _Errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Errors.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Errors.js\");\n/* harmony import */ var _DeviceDescriptors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DeviceDescriptors.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/DeviceDescriptors.js\");\n/* harmony import */ var _QueryHandler_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./QueryHandler.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/QueryHandler.js\");\n/* harmony import */ var _BrowserConnector_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./BrowserConnector.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/BrowserConnector.js\");\n/* harmony import */ var _NetworkConditions_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./NetworkConditions.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/NetworkConditions.js\");\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n/**\n * The main Puppeteer class.\n *\n * IMPORTANT: if you are using Puppeteer in a Node environment, you will get an\n * instance of {@link PuppeteerNode} when you import or require `puppeteer`.\n * That class extends `Puppeteer`, so has all the methods documented below as\n * well as all that are defined on {@link PuppeteerNode}.\n * @public\n */\nclass Puppeteer {\n    /**\n     * @internal\n     */\n    constructor(settings) {\n        this._changedProduct = false;\n        this._isPuppeteerCore = settings.isPuppeteerCore;\n        this.connect = this.connect.bind(this);\n        this.registerCustomQueryHandler =\n            this.registerCustomQueryHandler.bind(this);\n        this.unregisterCustomQueryHandler =\n            this.unregisterCustomQueryHandler.bind(this);\n        this.customQueryHandlerNames = this.customQueryHandlerNames.bind(this);\n        this.clearCustomQueryHandlers = this.clearCustomQueryHandlers.bind(this);\n    }\n    /**\n     * This method attaches Puppeteer to an existing browser instance.\n     *\n     * @remarks\n     *\n     * @param options - Set of configurable options to set on the browser.\n     * @returns Promise which resolves to browser instance.\n     */\n    connect(options) {\n        return (0,_BrowserConnector_js__WEBPACK_IMPORTED_MODULE_3__._connectToBrowser)(options);\n    }\n    /**\n     * @remarks\n     * A list of devices to be used with `page.emulate(options)`. Actual list of devices can be found in {@link https://github.com/puppeteer/puppeteer/blob/main/src/common/DeviceDescriptors.ts | src/common/DeviceDescriptors.ts}.\n     *\n     * @example\n     *\n     * ```js\n     * const puppeteer = require('puppeteer');\n     * const iPhone = puppeteer.devices['iPhone 6'];\n     *\n     * (async () => {\n     *   const browser = await puppeteer.launch();\n     *   const page = await browser.newPage();\n     *   await page.emulate(iPhone);\n     *   await page.goto('https://www.google.com');\n     *   // other actions...\n     *   await browser.close();\n     * })();\n     * ```\n     *\n     */\n    get devices() {\n        return _DeviceDescriptors_js__WEBPACK_IMPORTED_MODULE_1__._devicesMap;\n    }\n    /**\n     * @remarks\n     *\n     * Puppeteer methods might throw errors if they are unable to fulfill a request.\n     * For example, `page.waitForSelector(selector[, options])` might fail if\n     * the selector doesn't match any nodes during the given timeframe.\n     *\n     * For certain types of errors Puppeteer uses specific error classes.\n     * These classes are available via `puppeteer.errors`.\n     *\n     * @example\n     * An example of handling a timeout error:\n     * ```js\n     * try {\n     *   await page.waitForSelector('.foo');\n     * } catch (e) {\n     *   if (e instanceof puppeteer.errors.TimeoutError) {\n     *     // Do something if this is a timeout.\n     *   }\n     * }\n     * ```\n     */\n    get errors() {\n        return _Errors_js__WEBPACK_IMPORTED_MODULE_0__.puppeteerErrors;\n    }\n    /**\n     * @remarks\n     * Returns a list of network conditions to be used with `page.emulateNetworkConditions(networkConditions)`. Actual list of predefined conditions can be found in {@link https://github.com/puppeteer/puppeteer/blob/main/src/common/NetworkConditions.ts | src/common/NetworkConditions.ts}.\n     *\n     * @example\n     *\n     * ```js\n     * const puppeteer = require('puppeteer');\n     * const slow3G = puppeteer.networkConditions['Slow 3G'];\n     *\n     * (async () => {\n     *   const browser = await puppeteer.launch();\n     *   const page = await browser.newPage();\n     *   await page.emulateNetworkConditions(slow3G);\n     *   await page.goto('https://www.google.com');\n     *   // other actions...\n     *   await browser.close();\n     * })();\n     * ```\n     *\n     */\n    get networkConditions() {\n        return _NetworkConditions_js__WEBPACK_IMPORTED_MODULE_4__.networkConditions;\n    }\n    /**\n     * Registers a {@link CustomQueryHandler | custom query handler}. After\n     * registration, the handler can be used everywhere where a selector is\n     * expected by prepending the selection string with `<name>/`. The name is\n     * only allowed to consist of lower- and upper case latin letters.\n     * @example\n     * ```\n     * puppeteer.registerCustomQueryHandler('text', { … });\n     * const aHandle = await page.$('text/…');\n     * ```\n     * @param name - The name that the custom query handler will be registered under.\n     * @param queryHandler - The {@link CustomQueryHandler | custom query handler} to\n     * register.\n     */\n    registerCustomQueryHandler(name, queryHandler) {\n        (0,_QueryHandler_js__WEBPACK_IMPORTED_MODULE_2__._registerCustomQueryHandler)(name, queryHandler);\n    }\n    /**\n     * @param name - The name of the query handler to unregistered.\n     */\n    unregisterCustomQueryHandler(name) {\n        (0,_QueryHandler_js__WEBPACK_IMPORTED_MODULE_2__._unregisterCustomQueryHandler)(name);\n    }\n    /**\n     * @returns a list with the names of all registered custom query handlers.\n     */\n    customQueryHandlerNames() {\n        return (0,_QueryHandler_js__WEBPACK_IMPORTED_MODULE_2__._customQueryHandlerNames)();\n    }\n    /**\n     * Clears all registered handlers.\n     */\n    clearCustomQueryHandlers() {\n        (0,_QueryHandler_js__WEBPACK_IMPORTED_MODULE_2__._clearCustomQueryHandlers)();\n    }\n}\n//# sourceMappingURL=Puppeteer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Puppeteer.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/QueryHandler.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/QueryHandler.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"_clearCustomQueryHandlers\": () => (/* binding */ _clearCustomQueryHandlers),\n/* harmony export */   \"_customQueryHandlerNames\": () => (/* binding */ _customQueryHandlerNames),\n/* harmony export */   \"_getQueryHandlerAndSelector\": () => (/* binding */ _getQueryHandlerAndSelector),\n/* harmony export */   \"_registerCustomQueryHandler\": () => (/* binding */ _registerCustomQueryHandler),\n/* harmony export */   \"_unregisterCustomQueryHandler\": () => (/* binding */ _unregisterCustomQueryHandler)\n/* harmony export */ });\n/* harmony import */ var _AriaQueryHandler_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AriaQueryHandler.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/AriaQueryHandler.js\");\n/**\n * Copyright 2020 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nfunction makeQueryHandler(handler) {\n    const internalHandler = {};\n    if (handler.queryOne) {\n        const queryOne = handler.queryOne;\n        internalHandler.queryOne = async (element, selector) => {\n            const jsHandle = await element.evaluateHandle(queryOne, selector);\n            const elementHandle = jsHandle.asElement();\n            if (elementHandle) {\n                return elementHandle;\n            }\n            await jsHandle.dispose();\n            return null;\n        };\n        internalHandler.waitFor = (domWorld, selector, options) => {\n            return domWorld._waitForSelectorInPage(queryOne, selector, options);\n        };\n    }\n    if (handler.queryAll) {\n        const queryAll = handler.queryAll;\n        internalHandler.queryAll = async (element, selector) => {\n            const jsHandle = await element.evaluateHandle(queryAll, selector);\n            const properties = await jsHandle.getProperties();\n            await jsHandle.dispose();\n            const result = [];\n            for (const property of properties.values()) {\n                const elementHandle = property.asElement();\n                if (elementHandle) {\n                    result.push(elementHandle);\n                }\n            }\n            return result;\n        };\n        internalHandler.queryAllArray = async (element, selector) => {\n            const resultHandle = await element.evaluateHandle(queryAll, selector);\n            const arrayHandle = await resultHandle.evaluateHandle((res) => {\n                return Array.from(res);\n            });\n            return arrayHandle;\n        };\n    }\n    return internalHandler;\n}\nconst _defaultHandler = makeQueryHandler({\n    queryOne: (element, selector) => {\n        return element.querySelector(selector);\n    },\n    queryAll: (element, selector) => {\n        return element.querySelectorAll(selector);\n    },\n});\nconst pierceHandler = makeQueryHandler({\n    queryOne: (element, selector) => {\n        let found = null;\n        const search = (root) => {\n            const iter = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT);\n            do {\n                const currentNode = iter.currentNode;\n                if (currentNode.shadowRoot) {\n                    search(currentNode.shadowRoot);\n                }\n                if (currentNode instanceof ShadowRoot) {\n                    continue;\n                }\n                if (currentNode !== root && !found && currentNode.matches(selector)) {\n                    found = currentNode;\n                }\n            } while (!found && iter.nextNode());\n        };\n        if (element instanceof Document) {\n            element = element.documentElement;\n        }\n        search(element);\n        return found;\n    },\n    queryAll: (element, selector) => {\n        const result = [];\n        const collect = (root) => {\n            const iter = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT);\n            do {\n                const currentNode = iter.currentNode;\n                if (currentNode.shadowRoot) {\n                    collect(currentNode.shadowRoot);\n                }\n                if (currentNode instanceof ShadowRoot) {\n                    continue;\n                }\n                if (currentNode !== root && currentNode.matches(selector)) {\n                    result.push(currentNode);\n                }\n            } while (iter.nextNode());\n        };\n        if (element instanceof Document) {\n            element = element.documentElement;\n        }\n        collect(element);\n        return result;\n    },\n});\nconst builtInHandlers = new Map([\n    ['aria', _AriaQueryHandler_js__WEBPACK_IMPORTED_MODULE_0__._ariaHandler],\n    ['pierce', pierceHandler],\n]);\nconst queryHandlers = new Map(builtInHandlers);\n/**\n * @internal\n */\nfunction _registerCustomQueryHandler(name, handler) {\n    if (queryHandlers.get(name)) {\n        throw new Error(`A custom query handler named \"${name}\" already exists`);\n    }\n    const isValidName = /^[a-zA-Z]+$/.test(name);\n    if (!isValidName) {\n        throw new Error(`Custom query handler names may only contain [a-zA-Z]`);\n    }\n    const internalHandler = makeQueryHandler(handler);\n    queryHandlers.set(name, internalHandler);\n}\n/**\n * @internal\n */\nfunction _unregisterCustomQueryHandler(name) {\n    if (queryHandlers.has(name) && !builtInHandlers.has(name)) {\n        queryHandlers.delete(name);\n    }\n}\n/**\n * @internal\n */\nfunction _customQueryHandlerNames() {\n    return [...queryHandlers.keys()].filter((name) => {\n        return !builtInHandlers.has(name);\n    });\n}\n/**\n * @internal\n */\nfunction _clearCustomQueryHandlers() {\n    _customQueryHandlerNames().forEach(_unregisterCustomQueryHandler);\n}\n/**\n * @internal\n */\nfunction _getQueryHandlerAndSelector(selector) {\n    const hasCustomQueryHandler = /^[a-zA-Z]+\\//.test(selector);\n    if (!hasCustomQueryHandler) {\n        return { updatedSelector: selector, queryHandler: _defaultHandler };\n    }\n    const index = selector.indexOf('/');\n    const name = selector.slice(0, index);\n    const updatedSelector = selector.slice(index + 1);\n    const queryHandler = queryHandlers.get(name);\n    if (!queryHandler) {\n        throw new Error(`Query set to use \"${name}\", but no query handler of that name was found`);\n    }\n    return {\n        updatedSelector,\n        queryHandler,\n    };\n}\n//# sourceMappingURL=QueryHandler.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvZ29nb2FuaW1lLWFwaS9ub2RlX21vZHVsZXMvcHVwcGV0ZWVyL2xpYi9lc20vcHVwcGV0ZWVyL2NvbW1vbi9RdWVyeUhhbmRsZXIuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3FEO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLENBQUM7QUFDRDtBQUNBLGFBQWEsOERBQVk7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLHlEQUF5RCxLQUFLO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxLQUFLO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW5pbWVmbGl4Ly4vbm9kZV9tb2R1bGVzL2dvZ29hbmltZS1hcGkvbm9kZV9tb2R1bGVzL3B1cHBldGVlci9saWIvZXNtL3B1cHBldGVlci9jb21tb24vUXVlcnlIYW5kbGVyLmpzPzNhMzMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgX2FyaWFIYW5kbGVyIH0gZnJvbSAnLi9BcmlhUXVlcnlIYW5kbGVyLmpzJztcbmZ1bmN0aW9uIG1ha2VRdWVyeUhhbmRsZXIoaGFuZGxlcikge1xuICAgIGNvbnN0IGludGVybmFsSGFuZGxlciA9IHt9O1xuICAgIGlmIChoYW5kbGVyLnF1ZXJ5T25lKSB7XG4gICAgICAgIGNvbnN0IHF1ZXJ5T25lID0gaGFuZGxlci5xdWVyeU9uZTtcbiAgICAgICAgaW50ZXJuYWxIYW5kbGVyLnF1ZXJ5T25lID0gYXN5bmMgKGVsZW1lbnQsIHNlbGVjdG9yKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBqc0hhbmRsZSA9IGF3YWl0IGVsZW1lbnQuZXZhbHVhdGVIYW5kbGUocXVlcnlPbmUsIHNlbGVjdG9yKTtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnRIYW5kbGUgPSBqc0hhbmRsZS5hc0VsZW1lbnQoKTtcbiAgICAgICAgICAgIGlmIChlbGVtZW50SGFuZGxlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnRIYW5kbGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhd2FpdCBqc0hhbmRsZS5kaXNwb3NlKCk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfTtcbiAgICAgICAgaW50ZXJuYWxIYW5kbGVyLndhaXRGb3IgPSAoZG9tV29ybGQsIHNlbGVjdG9yLCBvcHRpb25zKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gZG9tV29ybGQuX3dhaXRGb3JTZWxlY3RvckluUGFnZShxdWVyeU9uZSwgc2VsZWN0b3IsIG9wdGlvbnMpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAoaGFuZGxlci5xdWVyeUFsbCkge1xuICAgICAgICBjb25zdCBxdWVyeUFsbCA9IGhhbmRsZXIucXVlcnlBbGw7XG4gICAgICAgIGludGVybmFsSGFuZGxlci5xdWVyeUFsbCA9IGFzeW5jIChlbGVtZW50LCBzZWxlY3RvcikgPT4ge1xuICAgICAgICAgICAgY29uc3QganNIYW5kbGUgPSBhd2FpdCBlbGVtZW50LmV2YWx1YXRlSGFuZGxlKHF1ZXJ5QWxsLCBzZWxlY3Rvcik7XG4gICAgICAgICAgICBjb25zdCBwcm9wZXJ0aWVzID0gYXdhaXQganNIYW5kbGUuZ2V0UHJvcGVydGllcygpO1xuICAgICAgICAgICAgYXdhaXQganNIYW5kbGUuZGlzcG9zZSgpO1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHByb3BlcnR5IG9mIHByb3BlcnRpZXMudmFsdWVzKCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlbGVtZW50SGFuZGxlID0gcHJvcGVydHkuYXNFbGVtZW50KCk7XG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnRIYW5kbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goZWxlbWVudEhhbmRsZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfTtcbiAgICAgICAgaW50ZXJuYWxIYW5kbGVyLnF1ZXJ5QWxsQXJyYXkgPSBhc3luYyAoZWxlbWVudCwgc2VsZWN0b3IpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdEhhbmRsZSA9IGF3YWl0IGVsZW1lbnQuZXZhbHVhdGVIYW5kbGUocXVlcnlBbGwsIHNlbGVjdG9yKTtcbiAgICAgICAgICAgIGNvbnN0IGFycmF5SGFuZGxlID0gYXdhaXQgcmVzdWx0SGFuZGxlLmV2YWx1YXRlSGFuZGxlKChyZXMpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gQXJyYXkuZnJvbShyZXMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gYXJyYXlIYW5kbGU7XG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBpbnRlcm5hbEhhbmRsZXI7XG59XG5jb25zdCBfZGVmYXVsdEhhbmRsZXIgPSBtYWtlUXVlcnlIYW5kbGVyKHtcbiAgICBxdWVyeU9uZTogKGVsZW1lbnQsIHNlbGVjdG9yKSA9PiB7XG4gICAgICAgIHJldHVybiBlbGVtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgIH0sXG4gICAgcXVlcnlBbGw6IChlbGVtZW50LCBzZWxlY3RvcikgPT4ge1xuICAgICAgICByZXR1cm4gZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgICB9LFxufSk7XG5jb25zdCBwaWVyY2VIYW5kbGVyID0gbWFrZVF1ZXJ5SGFuZGxlcih7XG4gICAgcXVlcnlPbmU6IChlbGVtZW50LCBzZWxlY3RvcikgPT4ge1xuICAgICAgICBsZXQgZm91bmQgPSBudWxsO1xuICAgICAgICBjb25zdCBzZWFyY2ggPSAocm9vdCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaXRlciA9IGRvY3VtZW50LmNyZWF0ZVRyZWVXYWxrZXIocm9vdCwgTm9kZUZpbHRlci5TSE9XX0VMRU1FTlQpO1xuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnROb2RlID0gaXRlci5jdXJyZW50Tm9kZTtcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudE5vZGUuc2hhZG93Um9vdCkge1xuICAgICAgICAgICAgICAgICAgICBzZWFyY2goY3VycmVudE5vZGUuc2hhZG93Um9vdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50Tm9kZSBpbnN0YW5jZW9mIFNoYWRvd1Jvb3QpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50Tm9kZSAhPT0gcm9vdCAmJiAhZm91bmQgJiYgY3VycmVudE5vZGUubWF0Y2hlcyhzZWxlY3RvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgZm91bmQgPSBjdXJyZW50Tm9kZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IHdoaWxlICghZm91bmQgJiYgaXRlci5uZXh0Tm9kZSgpKTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGVsZW1lbnQgaW5zdGFuY2VvZiBEb2N1bWVudCkge1xuICAgICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgICB9XG4gICAgICAgIHNlYXJjaChlbGVtZW50KTtcbiAgICAgICAgcmV0dXJuIGZvdW5kO1xuICAgIH0sXG4gICAgcXVlcnlBbGw6IChlbGVtZW50LCBzZWxlY3RvcikgPT4ge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICAgICAgY29uc3QgY29sbGVjdCA9IChyb290KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpdGVyID0gZG9jdW1lbnQuY3JlYXRlVHJlZVdhbGtlcihyb290LCBOb2RlRmlsdGVyLlNIT1dfRUxFTUVOVCk7XG4gICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgY29uc3QgY3VycmVudE5vZGUgPSBpdGVyLmN1cnJlbnROb2RlO1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50Tm9kZS5zaGFkb3dSb290KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbGxlY3QoY3VycmVudE5vZGUuc2hhZG93Um9vdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50Tm9kZSBpbnN0YW5jZW9mIFNoYWRvd1Jvb3QpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50Tm9kZSAhPT0gcm9vdCAmJiBjdXJyZW50Tm9kZS5tYXRjaGVzKHNlbGVjdG9yKSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChjdXJyZW50Tm9kZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSB3aGlsZSAoaXRlci5uZXh0Tm9kZSgpKTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGVsZW1lbnQgaW5zdGFuY2VvZiBEb2N1bWVudCkge1xuICAgICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgICB9XG4gICAgICAgIGNvbGxlY3QoZWxlbWVudCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcbn0pO1xuY29uc3QgYnVpbHRJbkhhbmRsZXJzID0gbmV3IE1hcChbXG4gICAgWydhcmlhJywgX2FyaWFIYW5kbGVyXSxcbiAgICBbJ3BpZXJjZScsIHBpZXJjZUhhbmRsZXJdLFxuXSk7XG5jb25zdCBxdWVyeUhhbmRsZXJzID0gbmV3IE1hcChidWlsdEluSGFuZGxlcnMpO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIF9yZWdpc3RlckN1c3RvbVF1ZXJ5SGFuZGxlcihuYW1lLCBoYW5kbGVyKSB7XG4gICAgaWYgKHF1ZXJ5SGFuZGxlcnMuZ2V0KG5hbWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQSBjdXN0b20gcXVlcnkgaGFuZGxlciBuYW1lZCBcIiR7bmFtZX1cIiBhbHJlYWR5IGV4aXN0c2ApO1xuICAgIH1cbiAgICBjb25zdCBpc1ZhbGlkTmFtZSA9IC9eW2EtekEtWl0rJC8udGVzdChuYW1lKTtcbiAgICBpZiAoIWlzVmFsaWROYW1lKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ3VzdG9tIHF1ZXJ5IGhhbmRsZXIgbmFtZXMgbWF5IG9ubHkgY29udGFpbiBbYS16QS1aXWApO1xuICAgIH1cbiAgICBjb25zdCBpbnRlcm5hbEhhbmRsZXIgPSBtYWtlUXVlcnlIYW5kbGVyKGhhbmRsZXIpO1xuICAgIHF1ZXJ5SGFuZGxlcnMuc2V0KG5hbWUsIGludGVybmFsSGFuZGxlcik7XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gX3VucmVnaXN0ZXJDdXN0b21RdWVyeUhhbmRsZXIobmFtZSkge1xuICAgIGlmIChxdWVyeUhhbmRsZXJzLmhhcyhuYW1lKSAmJiAhYnVpbHRJbkhhbmRsZXJzLmhhcyhuYW1lKSkge1xuICAgICAgICBxdWVyeUhhbmRsZXJzLmRlbGV0ZShuYW1lKTtcbiAgICB9XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gX2N1c3RvbVF1ZXJ5SGFuZGxlck5hbWVzKCkge1xuICAgIHJldHVybiBbLi4ucXVlcnlIYW5kbGVycy5rZXlzKCldLmZpbHRlcigobmFtZSkgPT4ge1xuICAgICAgICByZXR1cm4gIWJ1aWx0SW5IYW5kbGVycy5oYXMobmFtZSk7XG4gICAgfSk7XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gX2NsZWFyQ3VzdG9tUXVlcnlIYW5kbGVycygpIHtcbiAgICBfY3VzdG9tUXVlcnlIYW5kbGVyTmFtZXMoKS5mb3JFYWNoKF91bnJlZ2lzdGVyQ3VzdG9tUXVlcnlIYW5kbGVyKTtcbn1cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBfZ2V0UXVlcnlIYW5kbGVyQW5kU2VsZWN0b3Ioc2VsZWN0b3IpIHtcbiAgICBjb25zdCBoYXNDdXN0b21RdWVyeUhhbmRsZXIgPSAvXlthLXpBLVpdK1xcLy8udGVzdChzZWxlY3Rvcik7XG4gICAgaWYgKCFoYXNDdXN0b21RdWVyeUhhbmRsZXIpIHtcbiAgICAgICAgcmV0dXJuIHsgdXBkYXRlZFNlbGVjdG9yOiBzZWxlY3RvciwgcXVlcnlIYW5kbGVyOiBfZGVmYXVsdEhhbmRsZXIgfTtcbiAgICB9XG4gICAgY29uc3QgaW5kZXggPSBzZWxlY3Rvci5pbmRleE9mKCcvJyk7XG4gICAgY29uc3QgbmFtZSA9IHNlbGVjdG9yLnNsaWNlKDAsIGluZGV4KTtcbiAgICBjb25zdCB1cGRhdGVkU2VsZWN0b3IgPSBzZWxlY3Rvci5zbGljZShpbmRleCArIDEpO1xuICAgIGNvbnN0IHF1ZXJ5SGFuZGxlciA9IHF1ZXJ5SGFuZGxlcnMuZ2V0KG5hbWUpO1xuICAgIGlmICghcXVlcnlIYW5kbGVyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgUXVlcnkgc2V0IHRvIHVzZSBcIiR7bmFtZX1cIiwgYnV0IG5vIHF1ZXJ5IGhhbmRsZXIgb2YgdGhhdCBuYW1lIHdhcyBmb3VuZGApO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICB1cGRhdGVkU2VsZWN0b3IsXG4gICAgICAgIHF1ZXJ5SGFuZGxlcixcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UXVlcnlIYW5kbGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/QueryHandler.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/SecurityDetails.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/SecurityDetails.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SecurityDetails\": () => (/* binding */ SecurityDetails)\n/* harmony export */ });\n/**\n * Copyright 2020 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _SecurityDetails_subjectName, _SecurityDetails_issuer, _SecurityDetails_validFrom, _SecurityDetails_validTo, _SecurityDetails_protocol, _SecurityDetails_sanList;\n/**\n * The SecurityDetails class represents the security details of a\n * response that was received over a secure connection.\n *\n * @public\n */\nclass SecurityDetails {\n    /**\n     * @internal\n     */\n    constructor(securityPayload) {\n        _SecurityDetails_subjectName.set(this, void 0);\n        _SecurityDetails_issuer.set(this, void 0);\n        _SecurityDetails_validFrom.set(this, void 0);\n        _SecurityDetails_validTo.set(this, void 0);\n        _SecurityDetails_protocol.set(this, void 0);\n        _SecurityDetails_sanList.set(this, void 0);\n        __classPrivateFieldSet(this, _SecurityDetails_subjectName, securityPayload.subjectName, \"f\");\n        __classPrivateFieldSet(this, _SecurityDetails_issuer, securityPayload.issuer, \"f\");\n        __classPrivateFieldSet(this, _SecurityDetails_validFrom, securityPayload.validFrom, \"f\");\n        __classPrivateFieldSet(this, _SecurityDetails_validTo, securityPayload.validTo, \"f\");\n        __classPrivateFieldSet(this, _SecurityDetails_protocol, securityPayload.protocol, \"f\");\n        __classPrivateFieldSet(this, _SecurityDetails_sanList, securityPayload.sanList, \"f\");\n    }\n    /**\n     * @returns The name of the issuer of the certificate.\n     */\n    issuer() {\n        return __classPrivateFieldGet(this, _SecurityDetails_issuer, \"f\");\n    }\n    /**\n     * @returns {@link https://en.wikipedia.org/wiki/Unix_time | Unix timestamp}\n     * marking the start of the certificate's validity.\n     */\n    validFrom() {\n        return __classPrivateFieldGet(this, _SecurityDetails_validFrom, \"f\");\n    }\n    /**\n     * @returns {@link https://en.wikipedia.org/wiki/Unix_time | Unix timestamp}\n     * marking the end of the certificate's validity.\n     */\n    validTo() {\n        return __classPrivateFieldGet(this, _SecurityDetails_validTo, \"f\");\n    }\n    /**\n     * @returns The security protocol being used, e.g. \"TLS 1.2\".\n     */\n    protocol() {\n        return __classPrivateFieldGet(this, _SecurityDetails_protocol, \"f\");\n    }\n    /**\n     * @returns The name of the subject to which the certificate was issued.\n     */\n    subjectName() {\n        return __classPrivateFieldGet(this, _SecurityDetails_subjectName, \"f\");\n    }\n    /**\n     * @returns The list of {@link https://en.wikipedia.org/wiki/Subject_Alternative_Name | subject alternative names (SANs)} of the certificate.\n     */\n    subjectAlternativeNames() {\n        return __classPrivateFieldGet(this, _SecurityDetails_sanList, \"f\");\n    }\n}\n_SecurityDetails_subjectName = new WeakMap(), _SecurityDetails_issuer = new WeakMap(), _SecurityDetails_validFrom = new WeakMap(), _SecurityDetails_validTo = new WeakMap(), _SecurityDetails_protocol = new WeakMap(), _SecurityDetails_sanList = new WeakMap();\n//# sourceMappingURL=SecurityDetails.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvZ29nb2FuaW1lLWFwaS9ub2RlX21vZHVsZXMvcHVwcGV0ZWVyL2xpYi9lc20vcHVwcGV0ZWVyL2NvbW1vbi9TZWN1cml0eURldGFpbHMuanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixTQUFJLElBQUksU0FBSTtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLFNBQUksSUFBSSxTQUFJO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLGlHQUFpRztBQUM5SDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FuaW1lZmxpeC8uL25vZGVfbW9kdWxlcy9nb2dvYW5pbWUtYXBpL25vZGVfbW9kdWxlcy9wdXBwZXRlZXIvbGliL2VzbS9wdXBwZXRlZXIvY29tbW9uL1NlY3VyaXR5RGV0YWlscy5qcz80OWZlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbnZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcbn07XG52YXIgX19jbGFzc1ByaXZhdGVGaWVsZEdldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZEdldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xufTtcbnZhciBfU2VjdXJpdHlEZXRhaWxzX3N1YmplY3ROYW1lLCBfU2VjdXJpdHlEZXRhaWxzX2lzc3VlciwgX1NlY3VyaXR5RGV0YWlsc192YWxpZEZyb20sIF9TZWN1cml0eURldGFpbHNfdmFsaWRUbywgX1NlY3VyaXR5RGV0YWlsc19wcm90b2NvbCwgX1NlY3VyaXR5RGV0YWlsc19zYW5MaXN0O1xuLyoqXG4gKiBUaGUgU2VjdXJpdHlEZXRhaWxzIGNsYXNzIHJlcHJlc2VudHMgdGhlIHNlY3VyaXR5IGRldGFpbHMgb2YgYVxuICogcmVzcG9uc2UgdGhhdCB3YXMgcmVjZWl2ZWQgb3ZlciBhIHNlY3VyZSBjb25uZWN0aW9uLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIFNlY3VyaXR5RGV0YWlscyB7XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2VjdXJpdHlQYXlsb2FkKSB7XG4gICAgICAgIF9TZWN1cml0eURldGFpbHNfc3ViamVjdE5hbWUuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9TZWN1cml0eURldGFpbHNfaXNzdWVyLnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBfU2VjdXJpdHlEZXRhaWxzX3ZhbGlkRnJvbS5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX1NlY3VyaXR5RGV0YWlsc192YWxpZFRvLnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBfU2VjdXJpdHlEZXRhaWxzX3Byb3RvY29sLnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBfU2VjdXJpdHlEZXRhaWxzX3Nhbkxpc3Quc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX1NlY3VyaXR5RGV0YWlsc19zdWJqZWN0TmFtZSwgc2VjdXJpdHlQYXlsb2FkLnN1YmplY3ROYW1lLCBcImZcIik7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX1NlY3VyaXR5RGV0YWlsc19pc3N1ZXIsIHNlY3VyaXR5UGF5bG9hZC5pc3N1ZXIsIFwiZlwiKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfU2VjdXJpdHlEZXRhaWxzX3ZhbGlkRnJvbSwgc2VjdXJpdHlQYXlsb2FkLnZhbGlkRnJvbSwgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9TZWN1cml0eURldGFpbHNfdmFsaWRUbywgc2VjdXJpdHlQYXlsb2FkLnZhbGlkVG8sIFwiZlwiKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfU2VjdXJpdHlEZXRhaWxzX3Byb3RvY29sLCBzZWN1cml0eVBheWxvYWQucHJvdG9jb2wsIFwiZlwiKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfU2VjdXJpdHlEZXRhaWxzX3Nhbkxpc3QsIHNlY3VyaXR5UGF5bG9hZC5zYW5MaXN0LCBcImZcIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIFRoZSBuYW1lIG9mIHRoZSBpc3N1ZXIgb2YgdGhlIGNlcnRpZmljYXRlLlxuICAgICAqL1xuICAgIGlzc3VlcigpIHtcbiAgICAgICAgcmV0dXJuIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1NlY3VyaXR5RGV0YWlsc19pc3N1ZXIsIFwiZlwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMge0BsaW5rIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1VuaXhfdGltZSB8IFVuaXggdGltZXN0YW1wfVxuICAgICAqIG1hcmtpbmcgdGhlIHN0YXJ0IG9mIHRoZSBjZXJ0aWZpY2F0ZSdzIHZhbGlkaXR5LlxuICAgICAqL1xuICAgIHZhbGlkRnJvbSgpIHtcbiAgICAgICAgcmV0dXJuIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1NlY3VyaXR5RGV0YWlsc192YWxpZEZyb20sIFwiZlwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMge0BsaW5rIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1VuaXhfdGltZSB8IFVuaXggdGltZXN0YW1wfVxuICAgICAqIG1hcmtpbmcgdGhlIGVuZCBvZiB0aGUgY2VydGlmaWNhdGUncyB2YWxpZGl0eS5cbiAgICAgKi9cbiAgICB2YWxpZFRvKCkge1xuICAgICAgICByZXR1cm4gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfU2VjdXJpdHlEZXRhaWxzX3ZhbGlkVG8sIFwiZlwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgVGhlIHNlY3VyaXR5IHByb3RvY29sIGJlaW5nIHVzZWQsIGUuZy4gXCJUTFMgMS4yXCIuXG4gICAgICovXG4gICAgcHJvdG9jb2woKSB7XG4gICAgICAgIHJldHVybiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9TZWN1cml0eURldGFpbHNfcHJvdG9jb2wsIFwiZlwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgVGhlIG5hbWUgb2YgdGhlIHN1YmplY3QgdG8gd2hpY2ggdGhlIGNlcnRpZmljYXRlIHdhcyBpc3N1ZWQuXG4gICAgICovXG4gICAgc3ViamVjdE5hbWUoKSB7XG4gICAgICAgIHJldHVybiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9TZWN1cml0eURldGFpbHNfc3ViamVjdE5hbWUsIFwiZlwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgVGhlIGxpc3Qgb2Yge0BsaW5rIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1N1YmplY3RfQWx0ZXJuYXRpdmVfTmFtZSB8IHN1YmplY3QgYWx0ZXJuYXRpdmUgbmFtZXMgKFNBTnMpfSBvZiB0aGUgY2VydGlmaWNhdGUuXG4gICAgICovXG4gICAgc3ViamVjdEFsdGVybmF0aXZlTmFtZXMoKSB7XG4gICAgICAgIHJldHVybiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9TZWN1cml0eURldGFpbHNfc2FuTGlzdCwgXCJmXCIpO1xuICAgIH1cbn1cbl9TZWN1cml0eURldGFpbHNfc3ViamVjdE5hbWUgPSBuZXcgV2Vha01hcCgpLCBfU2VjdXJpdHlEZXRhaWxzX2lzc3VlciA9IG5ldyBXZWFrTWFwKCksIF9TZWN1cml0eURldGFpbHNfdmFsaWRGcm9tID0gbmV3IFdlYWtNYXAoKSwgX1NlY3VyaXR5RGV0YWlsc192YWxpZFRvID0gbmV3IFdlYWtNYXAoKSwgX1NlY3VyaXR5RGV0YWlsc19wcm90b2NvbCA9IG5ldyBXZWFrTWFwKCksIF9TZWN1cml0eURldGFpbHNfc2FuTGlzdCA9IG5ldyBXZWFrTWFwKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TZWN1cml0eURldGFpbHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/SecurityDetails.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Target.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Target.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Target\": () => (/* binding */ Target)\n/* harmony export */ });\n/* harmony import */ var _Page_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Page.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Page.js\");\n/* harmony import */ var _WebWorker_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./WebWorker.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/WebWorker.js\");\n/**\n * Copyright 2019 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Target_browserContext, _Target_targetInfo, _Target_sessionFactory, _Target_ignoreHTTPSErrors, _Target_defaultViewport, _Target_pagePromise, _Target_workerPromise, _Target_screenshotTaskQueue;\n\n\n/**\n * @public\n */\nclass Target {\n    /**\n     * @internal\n     */\n    constructor(targetInfo, browserContext, sessionFactory, ignoreHTTPSErrors, defaultViewport, screenshotTaskQueue, isPageTargetCallback) {\n        _Target_browserContext.set(this, void 0);\n        _Target_targetInfo.set(this, void 0);\n        _Target_sessionFactory.set(this, void 0);\n        _Target_ignoreHTTPSErrors.set(this, void 0);\n        _Target_defaultViewport.set(this, void 0);\n        _Target_pagePromise.set(this, void 0);\n        _Target_workerPromise.set(this, void 0);\n        _Target_screenshotTaskQueue.set(this, void 0);\n        __classPrivateFieldSet(this, _Target_targetInfo, targetInfo, \"f\");\n        __classPrivateFieldSet(this, _Target_browserContext, browserContext, \"f\");\n        this._targetId = targetInfo.targetId;\n        __classPrivateFieldSet(this, _Target_sessionFactory, sessionFactory, \"f\");\n        __classPrivateFieldSet(this, _Target_ignoreHTTPSErrors, ignoreHTTPSErrors, \"f\");\n        __classPrivateFieldSet(this, _Target_defaultViewport, defaultViewport !== null && defaultViewport !== void 0 ? defaultViewport : undefined, \"f\");\n        __classPrivateFieldSet(this, _Target_screenshotTaskQueue, screenshotTaskQueue, \"f\");\n        this._isPageTargetCallback = isPageTargetCallback;\n        this._initializedPromise = new Promise((fulfill) => {\n            return (this._initializedCallback = fulfill);\n        }).then(async (success) => {\n            if (!success) {\n                return false;\n            }\n            const opener = this.opener();\n            if (!opener || !__classPrivateFieldGet(opener, _Target_pagePromise, \"f\") || this.type() !== 'page') {\n                return true;\n            }\n            const openerPage = await __classPrivateFieldGet(opener, _Target_pagePromise, \"f\");\n            if (!openerPage.listenerCount(\"popup\" /* PageEmittedEvents.Popup */)) {\n                return true;\n            }\n            const popupPage = await this.page();\n            openerPage.emit(\"popup\" /* PageEmittedEvents.Popup */, popupPage);\n            return true;\n        });\n        this._isClosedPromise = new Promise((fulfill) => {\n            return (this._closedCallback = fulfill);\n        });\n        this._isInitialized =\n            !this._isPageTargetCallback(__classPrivateFieldGet(this, _Target_targetInfo, \"f\")) ||\n                __classPrivateFieldGet(this, _Target_targetInfo, \"f\").url !== '';\n        if (this._isInitialized) {\n            this._initializedCallback(true);\n        }\n    }\n    /**\n     * Creates a Chrome Devtools Protocol session attached to the target.\n     */\n    createCDPSession() {\n        return __classPrivateFieldGet(this, _Target_sessionFactory, \"f\").call(this);\n    }\n    /**\n     * @internal\n     */\n    _getTargetInfo() {\n        return __classPrivateFieldGet(this, _Target_targetInfo, \"f\");\n    }\n    /**\n     * If the target is not of type `\"page\"` or `\"background_page\"`, returns `null`.\n     */\n    async page() {\n        var _a;\n        if (this._isPageTargetCallback(__classPrivateFieldGet(this, _Target_targetInfo, \"f\")) && !__classPrivateFieldGet(this, _Target_pagePromise, \"f\")) {\n            __classPrivateFieldSet(this, _Target_pagePromise, __classPrivateFieldGet(this, _Target_sessionFactory, \"f\").call(this).then((client) => {\n                var _a;\n                return _Page_js__WEBPACK_IMPORTED_MODULE_0__.Page._create(client, this, __classPrivateFieldGet(this, _Target_ignoreHTTPSErrors, \"f\"), (_a = __classPrivateFieldGet(this, _Target_defaultViewport, \"f\")) !== null && _a !== void 0 ? _a : null, __classPrivateFieldGet(this, _Target_screenshotTaskQueue, \"f\"));\n            }), \"f\");\n        }\n        return (_a = (await __classPrivateFieldGet(this, _Target_pagePromise, \"f\"))) !== null && _a !== void 0 ? _a : null;\n    }\n    /**\n     * If the target is not of type `\"service_worker\"` or `\"shared_worker\"`, returns `null`.\n     */\n    async worker() {\n        if (__classPrivateFieldGet(this, _Target_targetInfo, \"f\").type !== 'service_worker' &&\n            __classPrivateFieldGet(this, _Target_targetInfo, \"f\").type !== 'shared_worker') {\n            return null;\n        }\n        if (!__classPrivateFieldGet(this, _Target_workerPromise, \"f\")) {\n            // TODO(einbinder): Make workers send their console logs.\n            __classPrivateFieldSet(this, _Target_workerPromise, __classPrivateFieldGet(this, _Target_sessionFactory, \"f\").call(this).then((client) => {\n                return new _WebWorker_js__WEBPACK_IMPORTED_MODULE_1__.WebWorker(client, __classPrivateFieldGet(this, _Target_targetInfo, \"f\").url, () => { } /* consoleAPICalled */, () => { } /* exceptionThrown */);\n            }), \"f\");\n        }\n        return __classPrivateFieldGet(this, _Target_workerPromise, \"f\");\n    }\n    url() {\n        return __classPrivateFieldGet(this, _Target_targetInfo, \"f\").url;\n    }\n    /**\n     * Identifies what kind of target this is.\n     *\n     * @remarks\n     *\n     * See {@link https://developer.chrome.com/extensions/background_pages | docs} for more info about background pages.\n     */\n    type() {\n        const type = __classPrivateFieldGet(this, _Target_targetInfo, \"f\").type;\n        if (type === 'page' ||\n            type === 'background_page' ||\n            type === 'service_worker' ||\n            type === 'shared_worker' ||\n            type === 'browser' ||\n            type === 'webview') {\n            return type;\n        }\n        return 'other';\n    }\n    /**\n     * Get the browser the target belongs to.\n     */\n    browser() {\n        return __classPrivateFieldGet(this, _Target_browserContext, \"f\").browser();\n    }\n    /**\n     * Get the browser context the target belongs to.\n     */\n    browserContext() {\n        return __classPrivateFieldGet(this, _Target_browserContext, \"f\");\n    }\n    /**\n     * Get the target that opened this target. Top-level targets return `null`.\n     */\n    opener() {\n        const { openerId } = __classPrivateFieldGet(this, _Target_targetInfo, \"f\");\n        if (!openerId) {\n            return;\n        }\n        return this.browser()._targets.get(openerId);\n    }\n    /**\n     * @internal\n     */\n    _targetInfoChanged(targetInfo) {\n        __classPrivateFieldSet(this, _Target_targetInfo, targetInfo, \"f\");\n        if (!this._isInitialized &&\n            (!this._isPageTargetCallback(__classPrivateFieldGet(this, _Target_targetInfo, \"f\")) ||\n                __classPrivateFieldGet(this, _Target_targetInfo, \"f\").url !== '')) {\n            this._isInitialized = true;\n            this._initializedCallback(true);\n            return;\n        }\n    }\n}\n_Target_browserContext = new WeakMap(), _Target_targetInfo = new WeakMap(), _Target_sessionFactory = new WeakMap(), _Target_ignoreHTTPSErrors = new WeakMap(), _Target_defaultViewport = new WeakMap(), _Target_pagePromise = new WeakMap(), _Target_workerPromise = new WeakMap(), _Target_screenshotTaskQueue = new WeakMap();\n//# sourceMappingURL=Target.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Target.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/TaskQueue.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/TaskQueue.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TaskQueue\": () => (/* binding */ TaskQueue)\n/* harmony export */ });\n/**\n * Copyright 2020 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _TaskQueue_chain;\nclass TaskQueue {\n    constructor() {\n        _TaskQueue_chain.set(this, void 0);\n        __classPrivateFieldSet(this, _TaskQueue_chain, Promise.resolve(), \"f\");\n    }\n    postTask(task) {\n        const result = __classPrivateFieldGet(this, _TaskQueue_chain, \"f\").then(task);\n        __classPrivateFieldSet(this, _TaskQueue_chain, result.then(() => {\n            return undefined;\n        }, () => {\n            return undefined;\n        }), \"f\");\n        return result;\n    }\n}\n_TaskQueue_chain = new WeakMap();\n//# sourceMappingURL=TaskQueue.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvZ29nb2FuaW1lLWFwaS9ub2RlX21vZHVsZXMvcHVwcGV0ZWVyL2xpYi9lc20vcHVwcGV0ZWVyL2NvbW1vbi9UYXNrUXVldWUuanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixTQUFJLElBQUksU0FBSTtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLFNBQUksSUFBSSxTQUFJO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FuaW1lZmxpeC8uL25vZGVfbW9kdWxlcy9nb2dvYW5pbWUtYXBpL25vZGVfbW9kdWxlcy9wdXBwZXRlZXIvbGliL2VzbS9wdXBwZXRlZXIvY29tbW9uL1Rhc2tRdWV1ZS5qcz9hZDZjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbnZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcbn07XG52YXIgX19jbGFzc1ByaXZhdGVGaWVsZEdldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZEdldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xufTtcbnZhciBfVGFza1F1ZXVlX2NoYWluO1xuZXhwb3J0IGNsYXNzIFRhc2tRdWV1ZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIF9UYXNrUXVldWVfY2hhaW4uc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX1Rhc2tRdWV1ZV9jaGFpbiwgUHJvbWlzZS5yZXNvbHZlKCksIFwiZlwiKTtcbiAgICB9XG4gICAgcG9zdFRhc2sodGFzaykge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9UYXNrUXVldWVfY2hhaW4sIFwiZlwiKS50aGVuKHRhc2spO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9UYXNrUXVldWVfY2hhaW4sIHJlc3VsdC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH0sICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH0pLCBcImZcIik7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuX1Rhc2tRdWV1ZV9jaGFpbiA9IG5ldyBXZWFrTWFwKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1UYXNrUXVldWUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/TaskQueue.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/TimeoutSettings.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/TimeoutSettings.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TimeoutSettings\": () => (/* binding */ TimeoutSettings)\n/* harmony export */ });\n/**\n * Copyright 2019 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _TimeoutSettings_defaultTimeout, _TimeoutSettings_defaultNavigationTimeout;\nconst DEFAULT_TIMEOUT = 30000;\n/**\n * @internal\n */\nclass TimeoutSettings {\n    constructor() {\n        _TimeoutSettings_defaultTimeout.set(this, void 0);\n        _TimeoutSettings_defaultNavigationTimeout.set(this, void 0);\n        __classPrivateFieldSet(this, _TimeoutSettings_defaultTimeout, null, \"f\");\n        __classPrivateFieldSet(this, _TimeoutSettings_defaultNavigationTimeout, null, \"f\");\n    }\n    setDefaultTimeout(timeout) {\n        __classPrivateFieldSet(this, _TimeoutSettings_defaultTimeout, timeout, \"f\");\n    }\n    setDefaultNavigationTimeout(timeout) {\n        __classPrivateFieldSet(this, _TimeoutSettings_defaultNavigationTimeout, timeout, \"f\");\n    }\n    navigationTimeout() {\n        if (__classPrivateFieldGet(this, _TimeoutSettings_defaultNavigationTimeout, \"f\") !== null) {\n            return __classPrivateFieldGet(this, _TimeoutSettings_defaultNavigationTimeout, \"f\");\n        }\n        if (__classPrivateFieldGet(this, _TimeoutSettings_defaultTimeout, \"f\") !== null) {\n            return __classPrivateFieldGet(this, _TimeoutSettings_defaultTimeout, \"f\");\n        }\n        return DEFAULT_TIMEOUT;\n    }\n    timeout() {\n        if (__classPrivateFieldGet(this, _TimeoutSettings_defaultTimeout, \"f\") !== null) {\n            return __classPrivateFieldGet(this, _TimeoutSettings_defaultTimeout, \"f\");\n        }\n        return DEFAULT_TIMEOUT;\n    }\n}\n_TimeoutSettings_defaultTimeout = new WeakMap(), _TimeoutSettings_defaultNavigationTimeout = new WeakMap();\n//# sourceMappingURL=TimeoutSettings.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvZ29nb2FuaW1lLWFwaS9ub2RlX21vZHVsZXMvcHVwcGV0ZWVyL2xpYi9lc20vcHVwcGV0ZWVyL2NvbW1vbi9UaW1lb3V0U2V0dGluZ3MuanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixTQUFJLElBQUksU0FBSTtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLFNBQUksSUFBSSxTQUFJO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW5pbWVmbGl4Ly4vbm9kZV9tb2R1bGVzL2dvZ29hbmltZS1hcGkvbm9kZV9tb2R1bGVzL3B1cHBldGVlci9saWIvZXNtL3B1cHBldGVlci9jb21tb24vVGltZW91dFNldHRpbmdzLmpzPzQ3YTUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xudmFyIF9fY2xhc3NQcml2YXRlRmllbGRTZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRTZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xufTtcbnZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XG59O1xudmFyIF9UaW1lb3V0U2V0dGluZ3NfZGVmYXVsdFRpbWVvdXQsIF9UaW1lb3V0U2V0dGluZ3NfZGVmYXVsdE5hdmlnYXRpb25UaW1lb3V0O1xuY29uc3QgREVGQVVMVF9USU1FT1VUID0gMzAwMDA7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY2xhc3MgVGltZW91dFNldHRpbmdzIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgX1RpbWVvdXRTZXR0aW5nc19kZWZhdWx0VGltZW91dC5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX1RpbWVvdXRTZXR0aW5nc19kZWZhdWx0TmF2aWdhdGlvblRpbWVvdXQuc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX1RpbWVvdXRTZXR0aW5nc19kZWZhdWx0VGltZW91dCwgbnVsbCwgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9UaW1lb3V0U2V0dGluZ3NfZGVmYXVsdE5hdmlnYXRpb25UaW1lb3V0LCBudWxsLCBcImZcIik7XG4gICAgfVxuICAgIHNldERlZmF1bHRUaW1lb3V0KHRpbWVvdXQpIHtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfVGltZW91dFNldHRpbmdzX2RlZmF1bHRUaW1lb3V0LCB0aW1lb3V0LCBcImZcIik7XG4gICAgfVxuICAgIHNldERlZmF1bHROYXZpZ2F0aW9uVGltZW91dCh0aW1lb3V0KSB7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX1RpbWVvdXRTZXR0aW5nc19kZWZhdWx0TmF2aWdhdGlvblRpbWVvdXQsIHRpbWVvdXQsIFwiZlwiKTtcbiAgICB9XG4gICAgbmF2aWdhdGlvblRpbWVvdXQoKSB7XG4gICAgICAgIGlmIChfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9UaW1lb3V0U2V0dGluZ3NfZGVmYXVsdE5hdmlnYXRpb25UaW1lb3V0LCBcImZcIikgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9UaW1lb3V0U2V0dGluZ3NfZGVmYXVsdE5hdmlnYXRpb25UaW1lb3V0LCBcImZcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1RpbWVvdXRTZXR0aW5nc19kZWZhdWx0VGltZW91dCwgXCJmXCIpICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVGltZW91dFNldHRpbmdzX2RlZmF1bHRUaW1lb3V0LCBcImZcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIERFRkFVTFRfVElNRU9VVDtcbiAgICB9XG4gICAgdGltZW91dCgpIHtcbiAgICAgICAgaWYgKF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1RpbWVvdXRTZXR0aW5nc19kZWZhdWx0VGltZW91dCwgXCJmXCIpICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVGltZW91dFNldHRpbmdzX2RlZmF1bHRUaW1lb3V0LCBcImZcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIERFRkFVTFRfVElNRU9VVDtcbiAgICB9XG59XG5fVGltZW91dFNldHRpbmdzX2RlZmF1bHRUaW1lb3V0ID0gbmV3IFdlYWtNYXAoKSwgX1RpbWVvdXRTZXR0aW5nc19kZWZhdWx0TmF2aWdhdGlvblRpbWVvdXQgPSBuZXcgV2Vha01hcCgpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VGltZW91dFNldHRpbmdzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/TimeoutSettings.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Tracing.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Tracing.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Tracing\": () => (/* binding */ Tracing)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./assert.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/assert.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/util.js\");\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Tracing_client, _Tracing_recording, _Tracing_path;\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * The Tracing class exposes the tracing audit interface.\n * @remarks\n * You can use `tracing.start` and `tracing.stop` to create a trace file\n * which can be opened in Chrome DevTools or {@link https://chromedevtools.github.io/timeline-viewer/ | timeline viewer}.\n *\n * @example\n * ```js\n * await page.tracing.start({path: 'trace.json'});\n * await page.goto('https://www.google.com');\n * await page.tracing.stop();\n * ```\n *\n * @public\n */\nclass Tracing {\n    /**\n     * @internal\n     */\n    constructor(client) {\n        _Tracing_client.set(this, void 0);\n        _Tracing_recording.set(this, false);\n        _Tracing_path.set(this, void 0);\n        __classPrivateFieldSet(this, _Tracing_client, client, \"f\");\n    }\n    /**\n     * Starts a trace for the current page.\n     * @remarks\n     * Only one trace can be active at a time per browser.\n     *\n     * @param options - Optional `TracingOptions`.\n     */\n    async start(options = {}) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(!__classPrivateFieldGet(this, _Tracing_recording, \"f\"), 'Cannot start recording trace while already recording trace.');\n        const defaultCategories = [\n            '-*',\n            'devtools.timeline',\n            'v8.execute',\n            'disabled-by-default-devtools.timeline',\n            'disabled-by-default-devtools.timeline.frame',\n            'toplevel',\n            'blink.console',\n            'blink.user_timing',\n            'latencyInfo',\n            'disabled-by-default-devtools.timeline.stack',\n            'disabled-by-default-v8.cpu_profiler',\n        ];\n        const { path, screenshots = false, categories = defaultCategories, } = options;\n        if (screenshots) {\n            categories.push('disabled-by-default-devtools.screenshot');\n        }\n        const excludedCategories = categories\n            .filter((cat) => {\n            return cat.startsWith('-');\n        })\n            .map((cat) => {\n            return cat.slice(1);\n        });\n        const includedCategories = categories.filter((cat) => {\n            return !cat.startsWith('-');\n        });\n        __classPrivateFieldSet(this, _Tracing_path, path, \"f\");\n        __classPrivateFieldSet(this, _Tracing_recording, true, \"f\");\n        await __classPrivateFieldGet(this, _Tracing_client, \"f\").send('Tracing.start', {\n            transferMode: 'ReturnAsStream',\n            traceConfig: {\n                excludedCategories,\n                includedCategories,\n            },\n        });\n    }\n    /**\n     * Stops a trace started with the `start` method.\n     * @returns Promise which resolves to buffer with trace data.\n     */\n    async stop() {\n        let resolve;\n        let reject;\n        const contentPromise = new Promise((x, y) => {\n            resolve = x;\n            reject = y;\n        });\n        __classPrivateFieldGet(this, _Tracing_client, \"f\").once('Tracing.tracingComplete', async (event) => {\n            try {\n                const readable = await (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.getReadableFromProtocolStream)(__classPrivateFieldGet(this, _Tracing_client, \"f\"), event.stream);\n                const buffer = await (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.getReadableAsBuffer)(readable, __classPrivateFieldGet(this, _Tracing_path, \"f\"));\n                resolve(buffer !== null && buffer !== void 0 ? buffer : undefined);\n            }\n            catch (error) {\n                if ((0,_util_js__WEBPACK_IMPORTED_MODULE_1__.isErrorLike)(error)) {\n                    reject(error);\n                }\n                else {\n                    reject(new Error(`Unknown error: ${error}`));\n                }\n            }\n        });\n        await __classPrivateFieldGet(this, _Tracing_client, \"f\").send('Tracing.end');\n        __classPrivateFieldSet(this, _Tracing_recording, false, \"f\");\n        return contentPromise;\n    }\n}\n_Tracing_client = new WeakMap(), _Tracing_recording = new WeakMap(), _Tracing_path = new WeakMap();\n//# sourceMappingURL=Tracing.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Tracing.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/USKeyboardLayout.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/USKeyboardLayout.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"_keyDefinitions\": () => (/* binding */ _keyDefinitions)\n/* harmony export */ });\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @internal\n */\nconst _keyDefinitions = {\n    '0': { keyCode: 48, key: '0', code: 'Digit0' },\n    '1': { keyCode: 49, key: '1', code: 'Digit1' },\n    '2': { keyCode: 50, key: '2', code: 'Digit2' },\n    '3': { keyCode: 51, key: '3', code: 'Digit3' },\n    '4': { keyCode: 52, key: '4', code: 'Digit4' },\n    '5': { keyCode: 53, key: '5', code: 'Digit5' },\n    '6': { keyCode: 54, key: '6', code: 'Digit6' },\n    '7': { keyCode: 55, key: '7', code: 'Digit7' },\n    '8': { keyCode: 56, key: '8', code: 'Digit8' },\n    '9': { keyCode: 57, key: '9', code: 'Digit9' },\n    Power: { key: 'Power', code: 'Power' },\n    Eject: { key: 'Eject', code: 'Eject' },\n    Abort: { keyCode: 3, code: 'Abort', key: 'Cancel' },\n    Help: { keyCode: 6, code: 'Help', key: 'Help' },\n    Backspace: { keyCode: 8, code: 'Backspace', key: 'Backspace' },\n    Tab: { keyCode: 9, code: 'Tab', key: 'Tab' },\n    Numpad5: {\n        keyCode: 12,\n        shiftKeyCode: 101,\n        key: 'Clear',\n        code: 'Numpad5',\n        shiftKey: '5',\n        location: 3,\n    },\n    NumpadEnter: {\n        keyCode: 13,\n        code: 'NumpadEnter',\n        key: 'Enter',\n        text: '\\r',\n        location: 3,\n    },\n    Enter: { keyCode: 13, code: 'Enter', key: 'Enter', text: '\\r' },\n    '\\r': { keyCode: 13, code: 'Enter', key: 'Enter', text: '\\r' },\n    '\\n': { keyCode: 13, code: 'Enter', key: 'Enter', text: '\\r' },\n    ShiftLeft: { keyCode: 16, code: 'ShiftLeft', key: 'Shift', location: 1 },\n    ShiftRight: { keyCode: 16, code: 'ShiftRight', key: 'Shift', location: 2 },\n    ControlLeft: {\n        keyCode: 17,\n        code: 'ControlLeft',\n        key: 'Control',\n        location: 1,\n    },\n    ControlRight: {\n        keyCode: 17,\n        code: 'ControlRight',\n        key: 'Control',\n        location: 2,\n    },\n    AltLeft: { keyCode: 18, code: 'AltLeft', key: 'Alt', location: 1 },\n    AltRight: { keyCode: 18, code: 'AltRight', key: 'Alt', location: 2 },\n    Pause: { keyCode: 19, code: 'Pause', key: 'Pause' },\n    CapsLock: { keyCode: 20, code: 'CapsLock', key: 'CapsLock' },\n    Escape: { keyCode: 27, code: 'Escape', key: 'Escape' },\n    Convert: { keyCode: 28, code: 'Convert', key: 'Convert' },\n    NonConvert: { keyCode: 29, code: 'NonConvert', key: 'NonConvert' },\n    Space: { keyCode: 32, code: 'Space', key: ' ' },\n    Numpad9: {\n        keyCode: 33,\n        shiftKeyCode: 105,\n        key: 'PageUp',\n        code: 'Numpad9',\n        shiftKey: '9',\n        location: 3,\n    },\n    PageUp: { keyCode: 33, code: 'PageUp', key: 'PageUp' },\n    Numpad3: {\n        keyCode: 34,\n        shiftKeyCode: 99,\n        key: 'PageDown',\n        code: 'Numpad3',\n        shiftKey: '3',\n        location: 3,\n    },\n    PageDown: { keyCode: 34, code: 'PageDown', key: 'PageDown' },\n    End: { keyCode: 35, code: 'End', key: 'End' },\n    Numpad1: {\n        keyCode: 35,\n        shiftKeyCode: 97,\n        key: 'End',\n        code: 'Numpad1',\n        shiftKey: '1',\n        location: 3,\n    },\n    Home: { keyCode: 36, code: 'Home', key: 'Home' },\n    Numpad7: {\n        keyCode: 36,\n        shiftKeyCode: 103,\n        key: 'Home',\n        code: 'Numpad7',\n        shiftKey: '7',\n        location: 3,\n    },\n    ArrowLeft: { keyCode: 37, code: 'ArrowLeft', key: 'ArrowLeft' },\n    Numpad4: {\n        keyCode: 37,\n        shiftKeyCode: 100,\n        key: 'ArrowLeft',\n        code: 'Numpad4',\n        shiftKey: '4',\n        location: 3,\n    },\n    Numpad8: {\n        keyCode: 38,\n        shiftKeyCode: 104,\n        key: 'ArrowUp',\n        code: 'Numpad8',\n        shiftKey: '8',\n        location: 3,\n    },\n    ArrowUp: { keyCode: 38, code: 'ArrowUp', key: 'ArrowUp' },\n    ArrowRight: { keyCode: 39, code: 'ArrowRight', key: 'ArrowRight' },\n    Numpad6: {\n        keyCode: 39,\n        shiftKeyCode: 102,\n        key: 'ArrowRight',\n        code: 'Numpad6',\n        shiftKey: '6',\n        location: 3,\n    },\n    Numpad2: {\n        keyCode: 40,\n        shiftKeyCode: 98,\n        key: 'ArrowDown',\n        code: 'Numpad2',\n        shiftKey: '2',\n        location: 3,\n    },\n    ArrowDown: { keyCode: 40, code: 'ArrowDown', key: 'ArrowDown' },\n    Select: { keyCode: 41, code: 'Select', key: 'Select' },\n    Open: { keyCode: 43, code: 'Open', key: 'Execute' },\n    PrintScreen: { keyCode: 44, code: 'PrintScreen', key: 'PrintScreen' },\n    Insert: { keyCode: 45, code: 'Insert', key: 'Insert' },\n    Numpad0: {\n        keyCode: 45,\n        shiftKeyCode: 96,\n        key: 'Insert',\n        code: 'Numpad0',\n        shiftKey: '0',\n        location: 3,\n    },\n    Delete: { keyCode: 46, code: 'Delete', key: 'Delete' },\n    NumpadDecimal: {\n        keyCode: 46,\n        shiftKeyCode: 110,\n        code: 'NumpadDecimal',\n        key: '\\u0000',\n        shiftKey: '.',\n        location: 3,\n    },\n    Digit0: { keyCode: 48, code: 'Digit0', shiftKey: ')', key: '0' },\n    Digit1: { keyCode: 49, code: 'Digit1', shiftKey: '!', key: '1' },\n    Digit2: { keyCode: 50, code: 'Digit2', shiftKey: '@', key: '2' },\n    Digit3: { keyCode: 51, code: 'Digit3', shiftKey: '#', key: '3' },\n    Digit4: { keyCode: 52, code: 'Digit4', shiftKey: '$', key: '4' },\n    Digit5: { keyCode: 53, code: 'Digit5', shiftKey: '%', key: '5' },\n    Digit6: { keyCode: 54, code: 'Digit6', shiftKey: '^', key: '6' },\n    Digit7: { keyCode: 55, code: 'Digit7', shiftKey: '&', key: '7' },\n    Digit8: { keyCode: 56, code: 'Digit8', shiftKey: '*', key: '8' },\n    Digit9: { keyCode: 57, code: 'Digit9', shiftKey: '(', key: '9' },\n    KeyA: { keyCode: 65, code: 'KeyA', shiftKey: 'A', key: 'a' },\n    KeyB: { keyCode: 66, code: 'KeyB', shiftKey: 'B', key: 'b' },\n    KeyC: { keyCode: 67, code: 'KeyC', shiftKey: 'C', key: 'c' },\n    KeyD: { keyCode: 68, code: 'KeyD', shiftKey: 'D', key: 'd' },\n    KeyE: { keyCode: 69, code: 'KeyE', shiftKey: 'E', key: 'e' },\n    KeyF: { keyCode: 70, code: 'KeyF', shiftKey: 'F', key: 'f' },\n    KeyG: { keyCode: 71, code: 'KeyG', shiftKey: 'G', key: 'g' },\n    KeyH: { keyCode: 72, code: 'KeyH', shiftKey: 'H', key: 'h' },\n    KeyI: { keyCode: 73, code: 'KeyI', shiftKey: 'I', key: 'i' },\n    KeyJ: { keyCode: 74, code: 'KeyJ', shiftKey: 'J', key: 'j' },\n    KeyK: { keyCode: 75, code: 'KeyK', shiftKey: 'K', key: 'k' },\n    KeyL: { keyCode: 76, code: 'KeyL', shiftKey: 'L', key: 'l' },\n    KeyM: { keyCode: 77, code: 'KeyM', shiftKey: 'M', key: 'm' },\n    KeyN: { keyCode: 78, code: 'KeyN', shiftKey: 'N', key: 'n' },\n    KeyO: { keyCode: 79, code: 'KeyO', shiftKey: 'O', key: 'o' },\n    KeyP: { keyCode: 80, code: 'KeyP', shiftKey: 'P', key: 'p' },\n    KeyQ: { keyCode: 81, code: 'KeyQ', shiftKey: 'Q', key: 'q' },\n    KeyR: { keyCode: 82, code: 'KeyR', shiftKey: 'R', key: 'r' },\n    KeyS: { keyCode: 83, code: 'KeyS', shiftKey: 'S', key: 's' },\n    KeyT: { keyCode: 84, code: 'KeyT', shiftKey: 'T', key: 't' },\n    KeyU: { keyCode: 85, code: 'KeyU', shiftKey: 'U', key: 'u' },\n    KeyV: { keyCode: 86, code: 'KeyV', shiftKey: 'V', key: 'v' },\n    KeyW: { keyCode: 87, code: 'KeyW', shiftKey: 'W', key: 'w' },\n    KeyX: { keyCode: 88, code: 'KeyX', shiftKey: 'X', key: 'x' },\n    KeyY: { keyCode: 89, code: 'KeyY', shiftKey: 'Y', key: 'y' },\n    KeyZ: { keyCode: 90, code: 'KeyZ', shiftKey: 'Z', key: 'z' },\n    MetaLeft: { keyCode: 91, code: 'MetaLeft', key: 'Meta', location: 1 },\n    MetaRight: { keyCode: 92, code: 'MetaRight', key: 'Meta', location: 2 },\n    ContextMenu: { keyCode: 93, code: 'ContextMenu', key: 'ContextMenu' },\n    NumpadMultiply: {\n        keyCode: 106,\n        code: 'NumpadMultiply',\n        key: '*',\n        location: 3,\n    },\n    NumpadAdd: { keyCode: 107, code: 'NumpadAdd', key: '+', location: 3 },\n    NumpadSubtract: {\n        keyCode: 109,\n        code: 'NumpadSubtract',\n        key: '-',\n        location: 3,\n    },\n    NumpadDivide: { keyCode: 111, code: 'NumpadDivide', key: '/', location: 3 },\n    F1: { keyCode: 112, code: 'F1', key: 'F1' },\n    F2: { keyCode: 113, code: 'F2', key: 'F2' },\n    F3: { keyCode: 114, code: 'F3', key: 'F3' },\n    F4: { keyCode: 115, code: 'F4', key: 'F4' },\n    F5: { keyCode: 116, code: 'F5', key: 'F5' },\n    F6: { keyCode: 117, code: 'F6', key: 'F6' },\n    F7: { keyCode: 118, code: 'F7', key: 'F7' },\n    F8: { keyCode: 119, code: 'F8', key: 'F8' },\n    F9: { keyCode: 120, code: 'F9', key: 'F9' },\n    F10: { keyCode: 121, code: 'F10', key: 'F10' },\n    F11: { keyCode: 122, code: 'F11', key: 'F11' },\n    F12: { keyCode: 123, code: 'F12', key: 'F12' },\n    F13: { keyCode: 124, code: 'F13', key: 'F13' },\n    F14: { keyCode: 125, code: 'F14', key: 'F14' },\n    F15: { keyCode: 126, code: 'F15', key: 'F15' },\n    F16: { keyCode: 127, code: 'F16', key: 'F16' },\n    F17: { keyCode: 128, code: 'F17', key: 'F17' },\n    F18: { keyCode: 129, code: 'F18', key: 'F18' },\n    F19: { keyCode: 130, code: 'F19', key: 'F19' },\n    F20: { keyCode: 131, code: 'F20', key: 'F20' },\n    F21: { keyCode: 132, code: 'F21', key: 'F21' },\n    F22: { keyCode: 133, code: 'F22', key: 'F22' },\n    F23: { keyCode: 134, code: 'F23', key: 'F23' },\n    F24: { keyCode: 135, code: 'F24', key: 'F24' },\n    NumLock: { keyCode: 144, code: 'NumLock', key: 'NumLock' },\n    ScrollLock: { keyCode: 145, code: 'ScrollLock', key: 'ScrollLock' },\n    AudioVolumeMute: {\n        keyCode: 173,\n        code: 'AudioVolumeMute',\n        key: 'AudioVolumeMute',\n    },\n    AudioVolumeDown: {\n        keyCode: 174,\n        code: 'AudioVolumeDown',\n        key: 'AudioVolumeDown',\n    },\n    AudioVolumeUp: { keyCode: 175, code: 'AudioVolumeUp', key: 'AudioVolumeUp' },\n    MediaTrackNext: {\n        keyCode: 176,\n        code: 'MediaTrackNext',\n        key: 'MediaTrackNext',\n    },\n    MediaTrackPrevious: {\n        keyCode: 177,\n        code: 'MediaTrackPrevious',\n        key: 'MediaTrackPrevious',\n    },\n    MediaStop: { keyCode: 178, code: 'MediaStop', key: 'MediaStop' },\n    MediaPlayPause: {\n        keyCode: 179,\n        code: 'MediaPlayPause',\n        key: 'MediaPlayPause',\n    },\n    Semicolon: { keyCode: 186, code: 'Semicolon', shiftKey: ':', key: ';' },\n    Equal: { keyCode: 187, code: 'Equal', shiftKey: '+', key: '=' },\n    NumpadEqual: { keyCode: 187, code: 'NumpadEqual', key: '=', location: 3 },\n    Comma: { keyCode: 188, code: 'Comma', shiftKey: '<', key: ',' },\n    Minus: { keyCode: 189, code: 'Minus', shiftKey: '_', key: '-' },\n    Period: { keyCode: 190, code: 'Period', shiftKey: '>', key: '.' },\n    Slash: { keyCode: 191, code: 'Slash', shiftKey: '?', key: '/' },\n    Backquote: { keyCode: 192, code: 'Backquote', shiftKey: '~', key: '`' },\n    BracketLeft: { keyCode: 219, code: 'BracketLeft', shiftKey: '{', key: '[' },\n    Backslash: { keyCode: 220, code: 'Backslash', shiftKey: '|', key: '\\\\' },\n    BracketRight: { keyCode: 221, code: 'BracketRight', shiftKey: '}', key: ']' },\n    Quote: { keyCode: 222, code: 'Quote', shiftKey: '\"', key: \"'\" },\n    AltGraph: { keyCode: 225, code: 'AltGraph', key: 'AltGraph' },\n    Props: { keyCode: 247, code: 'Props', key: 'CrSel' },\n    Cancel: { keyCode: 3, key: 'Cancel', code: 'Abort' },\n    Clear: { keyCode: 12, key: 'Clear', code: 'Numpad5', location: 3 },\n    Shift: { keyCode: 16, key: 'Shift', code: 'ShiftLeft', location: 1 },\n    Control: { keyCode: 17, key: 'Control', code: 'ControlLeft', location: 1 },\n    Alt: { keyCode: 18, key: 'Alt', code: 'AltLeft', location: 1 },\n    Accept: { keyCode: 30, key: 'Accept' },\n    ModeChange: { keyCode: 31, key: 'ModeChange' },\n    ' ': { keyCode: 32, key: ' ', code: 'Space' },\n    Print: { keyCode: 42, key: 'Print' },\n    Execute: { keyCode: 43, key: 'Execute', code: 'Open' },\n    '\\u0000': { keyCode: 46, key: '\\u0000', code: 'NumpadDecimal', location: 3 },\n    a: { keyCode: 65, key: 'a', code: 'KeyA' },\n    b: { keyCode: 66, key: 'b', code: 'KeyB' },\n    c: { keyCode: 67, key: 'c', code: 'KeyC' },\n    d: { keyCode: 68, key: 'd', code: 'KeyD' },\n    e: { keyCode: 69, key: 'e', code: 'KeyE' },\n    f: { keyCode: 70, key: 'f', code: 'KeyF' },\n    g: { keyCode: 71, key: 'g', code: 'KeyG' },\n    h: { keyCode: 72, key: 'h', code: 'KeyH' },\n    i: { keyCode: 73, key: 'i', code: 'KeyI' },\n    j: { keyCode: 74, key: 'j', code: 'KeyJ' },\n    k: { keyCode: 75, key: 'k', code: 'KeyK' },\n    l: { keyCode: 76, key: 'l', code: 'KeyL' },\n    m: { keyCode: 77, key: 'm', code: 'KeyM' },\n    n: { keyCode: 78, key: 'n', code: 'KeyN' },\n    o: { keyCode: 79, key: 'o', code: 'KeyO' },\n    p: { keyCode: 80, key: 'p', code: 'KeyP' },\n    q: { keyCode: 81, key: 'q', code: 'KeyQ' },\n    r: { keyCode: 82, key: 'r', code: 'KeyR' },\n    s: { keyCode: 83, key: 's', code: 'KeyS' },\n    t: { keyCode: 84, key: 't', code: 'KeyT' },\n    u: { keyCode: 85, key: 'u', code: 'KeyU' },\n    v: { keyCode: 86, key: 'v', code: 'KeyV' },\n    w: { keyCode: 87, key: 'w', code: 'KeyW' },\n    x: { keyCode: 88, key: 'x', code: 'KeyX' },\n    y: { keyCode: 89, key: 'y', code: 'KeyY' },\n    z: { keyCode: 90, key: 'z', code: 'KeyZ' },\n    Meta: { keyCode: 91, key: 'Meta', code: 'MetaLeft', location: 1 },\n    '*': { keyCode: 106, key: '*', code: 'NumpadMultiply', location: 3 },\n    '+': { keyCode: 107, key: '+', code: 'NumpadAdd', location: 3 },\n    '-': { keyCode: 109, key: '-', code: 'NumpadSubtract', location: 3 },\n    '/': { keyCode: 111, key: '/', code: 'NumpadDivide', location: 3 },\n    ';': { keyCode: 186, key: ';', code: 'Semicolon' },\n    '=': { keyCode: 187, key: '=', code: 'Equal' },\n    ',': { keyCode: 188, key: ',', code: 'Comma' },\n    '.': { keyCode: 190, key: '.', code: 'Period' },\n    '`': { keyCode: 192, key: '`', code: 'Backquote' },\n    '[': { keyCode: 219, key: '[', code: 'BracketLeft' },\n    '\\\\': { keyCode: 220, key: '\\\\', code: 'Backslash' },\n    ']': { keyCode: 221, key: ']', code: 'BracketRight' },\n    \"'\": { keyCode: 222, key: \"'\", code: 'Quote' },\n    Attn: { keyCode: 246, key: 'Attn' },\n    CrSel: { keyCode: 247, key: 'CrSel', code: 'Props' },\n    ExSel: { keyCode: 248, key: 'ExSel' },\n    EraseEof: { keyCode: 249, key: 'EraseEof' },\n    Play: { keyCode: 250, key: 'Play' },\n    ZoomOut: { keyCode: 251, key: 'ZoomOut' },\n    ')': { keyCode: 48, key: ')', code: 'Digit0' },\n    '!': { keyCode: 49, key: '!', code: 'Digit1' },\n    '@': { keyCode: 50, key: '@', code: 'Digit2' },\n    '#': { keyCode: 51, key: '#', code: 'Digit3' },\n    $: { keyCode: 52, key: '$', code: 'Digit4' },\n    '%': { keyCode: 53, key: '%', code: 'Digit5' },\n    '^': { keyCode: 54, key: '^', code: 'Digit6' },\n    '&': { keyCode: 55, key: '&', code: 'Digit7' },\n    '(': { keyCode: 57, key: '(', code: 'Digit9' },\n    A: { keyCode: 65, key: 'A', code: 'KeyA' },\n    B: { keyCode: 66, key: 'B', code: 'KeyB' },\n    C: { keyCode: 67, key: 'C', code: 'KeyC' },\n    D: { keyCode: 68, key: 'D', code: 'KeyD' },\n    E: { keyCode: 69, key: 'E', code: 'KeyE' },\n    F: { keyCode: 70, key: 'F', code: 'KeyF' },\n    G: { keyCode: 71, key: 'G', code: 'KeyG' },\n    H: { keyCode: 72, key: 'H', code: 'KeyH' },\n    I: { keyCode: 73, key: 'I', code: 'KeyI' },\n    J: { keyCode: 74, key: 'J', code: 'KeyJ' },\n    K: { keyCode: 75, key: 'K', code: 'KeyK' },\n    L: { keyCode: 76, key: 'L', code: 'KeyL' },\n    M: { keyCode: 77, key: 'M', code: 'KeyM' },\n    N: { keyCode: 78, key: 'N', code: 'KeyN' },\n    O: { keyCode: 79, key: 'O', code: 'KeyO' },\n    P: { keyCode: 80, key: 'P', code: 'KeyP' },\n    Q: { keyCode: 81, key: 'Q', code: 'KeyQ' },\n    R: { keyCode: 82, key: 'R', code: 'KeyR' },\n    S: { keyCode: 83, key: 'S', code: 'KeyS' },\n    T: { keyCode: 84, key: 'T', code: 'KeyT' },\n    U: { keyCode: 85, key: 'U', code: 'KeyU' },\n    V: { keyCode: 86, key: 'V', code: 'KeyV' },\n    W: { keyCode: 87, key: 'W', code: 'KeyW' },\n    X: { keyCode: 88, key: 'X', code: 'KeyX' },\n    Y: { keyCode: 89, key: 'Y', code: 'KeyY' },\n    Z: { keyCode: 90, key: 'Z', code: 'KeyZ' },\n    ':': { keyCode: 186, key: ':', code: 'Semicolon' },\n    '<': { keyCode: 188, key: '<', code: 'Comma' },\n    _: { keyCode: 189, key: '_', code: 'Minus' },\n    '>': { keyCode: 190, key: '>', code: 'Period' },\n    '?': { keyCode: 191, key: '?', code: 'Slash' },\n    '~': { keyCode: 192, key: '~', code: 'Backquote' },\n    '{': { keyCode: 219, key: '{', code: 'BracketLeft' },\n    '|': { keyCode: 220, key: '|', code: 'Backslash' },\n    '}': { keyCode: 221, key: '}', code: 'BracketRight' },\n    '\"': { keyCode: 222, key: '\"', code: 'Quote' },\n    SoftLeft: { key: 'SoftLeft', code: 'SoftLeft', location: 4 },\n    SoftRight: { key: 'SoftRight', code: 'SoftRight', location: 4 },\n    Camera: { keyCode: 44, key: 'Camera', code: 'Camera', location: 4 },\n    Call: { key: 'Call', code: 'Call', location: 4 },\n    EndCall: { keyCode: 95, key: 'EndCall', code: 'EndCall', location: 4 },\n    VolumeDown: {\n        keyCode: 182,\n        key: 'VolumeDown',\n        code: 'VolumeDown',\n        location: 4,\n    },\n    VolumeUp: { keyCode: 183, key: 'VolumeUp', code: 'VolumeUp', location: 4 },\n};\n//# sourceMappingURL=USKeyboardLayout.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/USKeyboardLayout.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/WebWorker.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/WebWorker.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"WebWorker\": () => (/* binding */ WebWorker)\n/* harmony export */ });\n/* harmony import */ var _EventEmitter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EventEmitter.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/EventEmitter.js\");\n/* harmony import */ var _ExecutionContext_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ExecutionContext.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/ExecutionContext.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/util.js\");\n/* harmony import */ var _JSHandle_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./JSHandle.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/JSHandle.js\");\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _WebWorker_client, _WebWorker_url, _WebWorker_executionContextPromise, _WebWorker_executionContextCallback;\n\n\n\n\n/**\n * The WebWorker class represents a\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API | WebWorker}.\n *\n * @remarks\n * The events `workercreated` and `workerdestroyed` are emitted on the page\n * object to signal the worker lifecycle.\n *\n * @example\n * ```js\n * page.on('workercreated', worker => console.log('Worker created: ' + worker.url()));\n * page.on('workerdestroyed', worker => console.log('Worker destroyed: ' + worker.url()));\n *\n * console.log('Current workers:');\n * for (const worker of page.workers()) {\n *   console.log('  ' + worker.url());\n * }\n * ```\n *\n * @public\n */\nclass WebWorker extends _EventEmitter_js__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {\n    /**\n     *\n     * @internal\n     */\n    constructor(client, url, consoleAPICalled, exceptionThrown) {\n        super();\n        _WebWorker_client.set(this, void 0);\n        _WebWorker_url.set(this, void 0);\n        _WebWorker_executionContextPromise.set(this, void 0);\n        _WebWorker_executionContextCallback.set(this, void 0);\n        __classPrivateFieldSet(this, _WebWorker_client, client, \"f\");\n        __classPrivateFieldSet(this, _WebWorker_url, url, \"f\");\n        __classPrivateFieldSet(this, _WebWorker_executionContextPromise, new Promise((x) => {\n            return (__classPrivateFieldSet(this, _WebWorker_executionContextCallback, x, \"f\"));\n        }), \"f\");\n        let jsHandleFactory;\n        __classPrivateFieldGet(this, _WebWorker_client, \"f\").once('Runtime.executionContextCreated', async (event) => {\n            // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n            jsHandleFactory = (remoteObject) => {\n                return new _JSHandle_js__WEBPACK_IMPORTED_MODULE_3__.JSHandle(executionContext, client, remoteObject);\n            };\n            const executionContext = new _ExecutionContext_js__WEBPACK_IMPORTED_MODULE_1__.ExecutionContext(client, event.context);\n            __classPrivateFieldGet(this, _WebWorker_executionContextCallback, \"f\").call(this, executionContext);\n        });\n        // This might fail if the target is closed before we receive all execution contexts.\n        __classPrivateFieldGet(this, _WebWorker_client, \"f\").send('Runtime.enable').catch(_util_js__WEBPACK_IMPORTED_MODULE_2__.debugError);\n        __classPrivateFieldGet(this, _WebWorker_client, \"f\").on('Runtime.consoleAPICalled', (event) => {\n            return consoleAPICalled(event.type, event.args.map(jsHandleFactory), event.stackTrace);\n        });\n        __classPrivateFieldGet(this, _WebWorker_client, \"f\").on('Runtime.exceptionThrown', (exception) => {\n            return exceptionThrown(exception.exceptionDetails);\n        });\n    }\n    /**\n     * @returns The URL of this web worker.\n     */\n    url() {\n        return __classPrivateFieldGet(this, _WebWorker_url, \"f\");\n    }\n    /**\n     * Returns the ExecutionContext the WebWorker runs in\n     * @returns The ExecutionContext the web worker runs in.\n     */\n    async executionContext() {\n        return __classPrivateFieldGet(this, _WebWorker_executionContextPromise, \"f\");\n    }\n    /**\n     * If the function passed to the `worker.evaluate` returns a Promise, then\n     * `worker.evaluate` would wait for the promise to resolve and return its\n     * value. If the function passed to the `worker.evaluate` returns a\n     * non-serializable value, then `worker.evaluate` resolves to `undefined`.\n     * DevTools Protocol also supports transferring some additional values that\n     * are not serializable by `JSON`: `-0`, `NaN`, `Infinity`, `-Infinity`, and\n     * bigint literals.\n     * Shortcut for `await worker.executionContext()).evaluate(pageFunction, ...args)`.\n     *\n     * @param pageFunction - Function to be evaluated in the worker context.\n     * @param args - Arguments to pass to `pageFunction`.\n     * @returns Promise which resolves to the return value of `pageFunction`.\n     */\n    async evaluate(pageFunction, ...args) {\n        return (await __classPrivateFieldGet(this, _WebWorker_executionContextPromise, \"f\")).evaluate(pageFunction, ...args);\n    }\n    /**\n     * The only difference between `worker.evaluate` and `worker.evaluateHandle`\n     * is that `worker.evaluateHandle` returns in-page object (JSHandle). If the\n     * function passed to the `worker.evaluateHandle` returns a `Promise`, then\n     * `worker.evaluateHandle` would wait for the promise to resolve and return\n     * its value. Shortcut for\n     * `await worker.executionContext()).evaluateHandle(pageFunction, ...args)`\n     *\n     * @param pageFunction - Function to be evaluated in the page context.\n     * @param args - Arguments to pass to `pageFunction`.\n     * @returns Promise which resolves to the return value of `pageFunction`.\n     */\n    async evaluateHandle(pageFunction, ...args) {\n        return (await __classPrivateFieldGet(this, _WebWorker_executionContextPromise, \"f\")).evaluateHandle(pageFunction, ...args);\n    }\n}\n_WebWorker_client = new WeakMap(), _WebWorker_url = new WeakMap(), _WebWorker_executionContextPromise = new WeakMap(), _WebWorker_executionContextCallback = new WeakMap();\n//# sourceMappingURL=WebWorker.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/WebWorker.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/assert.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/assert.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"assert\": () => (/* binding */ assert),\n/* harmony export */   \"assertNever\": () => (/* binding */ assertNever)\n/* harmony export */ });\n/**\n * Copyright 2020 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Asserts that the given value is truthy.\n * @param value - some conditional statement\n * @param message - the error message to throw if the value is not truthy.\n */\nconst assert = (value, message) => {\n    if (!value) {\n        throw new Error(message);\n    }\n};\nconst assertNever = (value, message) => {\n    if (value) {\n        throw new Error(message);\n    }\n};\n//# sourceMappingURL=assert.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvZ29nb2FuaW1lLWFwaS9ub2RlX21vZHVsZXMvcHVwcGV0ZWVyL2xpYi9lc20vcHVwcGV0ZWVyL2NvbW1vbi9hc3NlcnQuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FuaW1lZmxpeC8uL25vZGVfbW9kdWxlcy9nb2dvYW5pbWUtYXBpL25vZGVfbW9kdWxlcy9wdXBwZXRlZXIvbGliL2VzbS9wdXBwZXRlZXIvY29tbW9uL2Fzc2VydC5qcz9mMWE1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQXNzZXJ0cyB0aGF0IHRoZSBnaXZlbiB2YWx1ZSBpcyB0cnV0aHkuXG4gKiBAcGFyYW0gdmFsdWUgLSBzb21lIGNvbmRpdGlvbmFsIHN0YXRlbWVudFxuICogQHBhcmFtIG1lc3NhZ2UgLSB0aGUgZXJyb3IgbWVzc2FnZSB0byB0aHJvdyBpZiB0aGUgdmFsdWUgaXMgbm90IHRydXRoeS5cbiAqL1xuZXhwb3J0IGNvbnN0IGFzc2VydCA9ICh2YWx1ZSwgbWVzc2FnZSkgPT4ge1xuICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIH1cbn07XG5leHBvcnQgY29uc3QgYXNzZXJ0TmV2ZXIgPSAodmFsdWUsIG1lc3NhZ2UpID0+IHtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hc3NlcnQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/assert.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/fetch.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/fetch.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getFetch\": () => (/* binding */ getFetch)\n/* harmony export */ });\n/**\n * Copyright 2020 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* Use the global version if we're in the browser, else load the node-fetch module. */\nconst getFetch = async () => {\n    return globalThis.fetch || (await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! cross-fetch */ \"cross-fetch\", 19))).fetch;\n};\n//# sourceMappingURL=fetch.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvZ29nb2FuaW1lLWFwaS9ub2RlX21vZHVsZXMvcHVwcGV0ZWVyL2xpYi9lc20vcHVwcGV0ZWVyL2NvbW1vbi9mZXRjaC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLHNDQUFzQyw0SEFBcUI7QUFDM0Q7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FuaW1lZmxpeC8uL25vZGVfbW9kdWxlcy9nb2dvYW5pbWUtYXBpL25vZGVfbW9kdWxlcy9wdXBwZXRlZXIvbGliL2VzbS9wdXBwZXRlZXIvY29tbW9uL2ZldGNoLmpzPzQyZjAiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyogVXNlIHRoZSBnbG9iYWwgdmVyc2lvbiBpZiB3ZSdyZSBpbiB0aGUgYnJvd3NlciwgZWxzZSBsb2FkIHRoZSBub2RlLWZldGNoIG1vZHVsZS4gKi9cbmV4cG9ydCBjb25zdCBnZXRGZXRjaCA9IGFzeW5jICgpID0+IHtcbiAgICByZXR1cm4gZ2xvYmFsVGhpcy5mZXRjaCB8fCAoYXdhaXQgaW1wb3J0KCdjcm9zcy1mZXRjaCcpKS5mZXRjaDtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mZXRjaC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/fetch.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/util.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/util.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"addEventListener\": () => (/* binding */ addEventListener),\n/* harmony export */   \"debugError\": () => (/* binding */ debugError),\n/* harmony export */   \"evaluationString\": () => (/* binding */ evaluationString),\n/* harmony export */   \"getExceptionMessage\": () => (/* binding */ getExceptionMessage),\n/* harmony export */   \"getReadableAsBuffer\": () => (/* binding */ getReadableAsBuffer),\n/* harmony export */   \"getReadableFromProtocolStream\": () => (/* binding */ getReadableFromProtocolStream),\n/* harmony export */   \"isErrnoException\": () => (/* binding */ isErrnoException),\n/* harmony export */   \"isErrorLike\": () => (/* binding */ isErrorLike),\n/* harmony export */   \"isNumber\": () => (/* binding */ isNumber),\n/* harmony export */   \"isString\": () => (/* binding */ isString),\n/* harmony export */   \"makePredicateString\": () => (/* binding */ makePredicateString),\n/* harmony export */   \"pageBindingDeliverErrorString\": () => (/* binding */ pageBindingDeliverErrorString),\n/* harmony export */   \"pageBindingDeliverErrorValueString\": () => (/* binding */ pageBindingDeliverErrorValueString),\n/* harmony export */   \"pageBindingDeliverResultString\": () => (/* binding */ pageBindingDeliverResultString),\n/* harmony export */   \"pageBindingInitString\": () => (/* binding */ pageBindingInitString),\n/* harmony export */   \"releaseObject\": () => (/* binding */ releaseObject),\n/* harmony export */   \"removeEventListeners\": () => (/* binding */ removeEventListeners),\n/* harmony export */   \"valueFromRemoteObject\": () => (/* binding */ valueFromRemoteObject),\n/* harmony export */   \"waitForEvent\": () => (/* binding */ waitForEvent),\n/* harmony export */   \"waitWithTimeout\": () => (/* binding */ waitWithTimeout)\n/* harmony export */ });\n/* harmony import */ var _environment_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../environment.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/environment.js\");\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./assert.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/assert.js\");\n/* harmony import */ var _Debug_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Debug.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Debug.js\");\n/* harmony import */ var _Errors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Errors.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Errors.js\");\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\nconst debugError = (0,_Debug_js__WEBPACK_IMPORTED_MODULE_2__.debug)('puppeteer:error');\nfunction getExceptionMessage(exceptionDetails) {\n    if (exceptionDetails.exception) {\n        return (exceptionDetails.exception.description || exceptionDetails.exception.value);\n    }\n    let message = exceptionDetails.text;\n    if (exceptionDetails.stackTrace) {\n        for (const callframe of exceptionDetails.stackTrace.callFrames) {\n            const location = callframe.url +\n                ':' +\n                callframe.lineNumber +\n                ':' +\n                callframe.columnNumber;\n            const functionName = callframe.functionName || '<anonymous>';\n            message += `\\n    at ${functionName} (${location})`;\n        }\n    }\n    return message;\n}\nfunction valueFromRemoteObject(remoteObject) {\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.assert)(!remoteObject.objectId, 'Cannot extract value when objectId is given');\n    if (remoteObject.unserializableValue) {\n        if (remoteObject.type === 'bigint' && typeof BigInt !== 'undefined') {\n            return BigInt(remoteObject.unserializableValue.replace('n', ''));\n        }\n        switch (remoteObject.unserializableValue) {\n            case '-0':\n                return -0;\n            case 'NaN':\n                return NaN;\n            case 'Infinity':\n                return Infinity;\n            case '-Infinity':\n                return -Infinity;\n            default:\n                throw new Error('Unsupported unserializable value: ' +\n                    remoteObject.unserializableValue);\n        }\n    }\n    return remoteObject.value;\n}\nasync function releaseObject(client, remoteObject) {\n    if (!remoteObject.objectId) {\n        return;\n    }\n    await client\n        .send('Runtime.releaseObject', { objectId: remoteObject.objectId })\n        .catch((error) => {\n        // Exceptions might happen in case of a page been navigated or closed.\n        // Swallow these since they are harmless and we don't leak anything in this case.\n        debugError(error);\n    });\n}\nfunction addEventListener(emitter, eventName, handler) {\n    emitter.on(eventName, handler);\n    return { emitter, eventName, handler };\n}\nfunction removeEventListeners(listeners) {\n    for (const listener of listeners) {\n        listener.emitter.removeListener(listener.eventName, listener.handler);\n    }\n    listeners.length = 0;\n}\nconst isString = (obj) => {\n    return typeof obj === 'string' || obj instanceof String;\n};\nconst isNumber = (obj) => {\n    return typeof obj === 'number' || obj instanceof Number;\n};\nasync function waitForEvent(emitter, eventName, predicate, timeout, abortPromise) {\n    let eventTimeout;\n    let resolveCallback;\n    let rejectCallback;\n    const promise = new Promise((resolve, reject) => {\n        resolveCallback = resolve;\n        rejectCallback = reject;\n    });\n    const listener = addEventListener(emitter, eventName, async (event) => {\n        if (!(await predicate(event))) {\n            return;\n        }\n        resolveCallback(event);\n    });\n    if (timeout) {\n        eventTimeout = setTimeout(() => {\n            rejectCallback(new _Errors_js__WEBPACK_IMPORTED_MODULE_3__.TimeoutError('Timeout exceeded while waiting for event'));\n        }, timeout);\n    }\n    function cleanup() {\n        removeEventListeners([listener]);\n        clearTimeout(eventTimeout);\n    }\n    const result = await Promise.race([promise, abortPromise]).then((r) => {\n        cleanup();\n        return r;\n    }, (error) => {\n        cleanup();\n        throw error;\n    });\n    if (isErrorLike(result)) {\n        throw result;\n    }\n    return result;\n}\nfunction evaluationString(fun, ...args) {\n    if (isString(fun)) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.assert)(args.length === 0, 'Cannot evaluate a string with arguments');\n        return fun;\n    }\n    function serializeArgument(arg) {\n        if (Object.is(arg, undefined)) {\n            return 'undefined';\n        }\n        return JSON.stringify(arg);\n    }\n    return `(${fun})(${args.map(serializeArgument).join(',')})`;\n}\nfunction pageBindingInitString(type, name) {\n    function addPageBinding(type, bindingName) {\n        /* Cast window to any here as we're about to add properties to it\n         * via win[bindingName] which TypeScript doesn't like.\n         */\n        const win = window;\n        const binding = win[bindingName];\n        win[bindingName] = (...args) => {\n            const me = window[bindingName];\n            let callbacks = me.callbacks;\n            if (!callbacks) {\n                callbacks = new Map();\n                me.callbacks = callbacks;\n            }\n            const seq = (me.lastSeq || 0) + 1;\n            me.lastSeq = seq;\n            const promise = new Promise((resolve, reject) => {\n                return callbacks.set(seq, { resolve, reject });\n            });\n            binding(JSON.stringify({ type, name: bindingName, seq, args }));\n            return promise;\n        };\n    }\n    return evaluationString(addPageBinding, type, name);\n}\nfunction pageBindingDeliverResultString(name, seq, result) {\n    function deliverResult(name, seq, result) {\n        window[name].callbacks.get(seq).resolve(result);\n        window[name].callbacks.delete(seq);\n    }\n    return evaluationString(deliverResult, name, seq, result);\n}\nfunction pageBindingDeliverErrorString(name, seq, message, stack) {\n    function deliverError(name, seq, message, stack) {\n        const error = new Error(message);\n        error.stack = stack;\n        window[name].callbacks.get(seq).reject(error);\n        window[name].callbacks.delete(seq);\n    }\n    return evaluationString(deliverError, name, seq, message, stack);\n}\nfunction pageBindingDeliverErrorValueString(name, seq, value) {\n    function deliverErrorValue(name, seq, value) {\n        window[name].callbacks.get(seq).reject(value);\n        window[name].callbacks.delete(seq);\n    }\n    return evaluationString(deliverErrorValue, name, seq, value);\n}\nfunction makePredicateString(predicate, predicateQueryHandler) {\n    function checkWaitForOptions(node, waitForVisible, waitForHidden) {\n        if (!node) {\n            return waitForHidden;\n        }\n        if (!waitForVisible && !waitForHidden) {\n            return node;\n        }\n        const element = node.nodeType === Node.TEXT_NODE\n            ? node.parentElement\n            : node;\n        const style = window.getComputedStyle(element);\n        const isVisible = style && style.visibility !== 'hidden' && hasVisibleBoundingBox();\n        const success = waitForVisible === isVisible || waitForHidden === !isVisible;\n        return success ? node : null;\n        function hasVisibleBoundingBox() {\n            const rect = element.getBoundingClientRect();\n            return !!(rect.top || rect.bottom || rect.width || rect.height);\n        }\n    }\n    const predicateQueryHandlerDef = predicateQueryHandler\n        ? `const predicateQueryHandler = ${predicateQueryHandler};`\n        : '';\n    return `\n    (() => {\n      ${predicateQueryHandlerDef}\n      const checkWaitForOptions = ${checkWaitForOptions};\n      return (${predicate})(...args)\n    })() `;\n}\nasync function waitWithTimeout(promise, taskName, timeout) {\n    let reject;\n    const timeoutError = new _Errors_js__WEBPACK_IMPORTED_MODULE_3__.TimeoutError(`waiting for ${taskName} failed: timeout ${timeout}ms exceeded`);\n    const timeoutPromise = new Promise((_res, rej) => {\n        return (reject = rej);\n    });\n    let timeoutTimer = null;\n    if (timeout) {\n        timeoutTimer = setTimeout(() => {\n            return reject(timeoutError);\n        }, timeout);\n    }\n    try {\n        return await Promise.race([promise, timeoutPromise]);\n    }\n    finally {\n        if (timeoutTimer) {\n            clearTimeout(timeoutTimer);\n        }\n    }\n}\nasync function getReadableAsBuffer(readable, path) {\n    const buffers = [];\n    if (path) {\n        let fs;\n        try {\n            fs = (await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! fs */ \"fs\", 19))).promises;\n        }\n        catch (error) {\n            if (error instanceof TypeError) {\n                throw new Error('Cannot write to a path outside of a Node-like environment.');\n            }\n            throw error;\n        }\n        const fileHandle = await fs.open(path, 'w+');\n        for await (const chunk of readable) {\n            buffers.push(chunk);\n            await fileHandle.writeFile(chunk);\n        }\n        await fileHandle.close();\n    }\n    else {\n        for await (const chunk of readable) {\n            buffers.push(chunk);\n        }\n    }\n    try {\n        return Buffer.concat(buffers);\n    }\n    catch (error) {\n        return null;\n    }\n}\nasync function getReadableFromProtocolStream(client, handle) {\n    // TODO: Once Node 18 becomes the lowest supported version, we can migrate to\n    // ReadableStream.\n    if (!_environment_js__WEBPACK_IMPORTED_MODULE_0__.isNode) {\n        throw new Error('Cannot create a stream outside of Node.js environment.');\n    }\n    const { Readable } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! stream */ \"stream\", 19));\n    let eof = false;\n    return new Readable({\n        async read(size) {\n            if (eof) {\n                return;\n            }\n            const response = await client.send('IO.read', { handle, size });\n            this.push(response.data, response.base64Encoded ? 'base64' : undefined);\n            if (response.eof) {\n                eof = true;\n                await client.send('IO.close', { handle });\n                this.push(null);\n            }\n        },\n    });\n}\nfunction isErrorLike(obj) {\n    return (typeof obj === 'object' && obj !== null && 'name' in obj && 'message' in obj);\n}\nfunction isErrnoException(obj) {\n    return (isErrorLike(obj) &&\n        ('errno' in obj || 'code' in obj || 'path' in obj || 'syscall' in obj));\n}\n//# sourceMappingURL=util.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/util.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/compat.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/compat.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"puppeteerDirname\": () => (/* binding */ puppeteerDirname)\n/* harmony export */ });\n/* harmony import */ var module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! module */ \"module\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! url */ \"url\");\n\n\n\nconst require = (0,module__WEBPACK_IMPORTED_MODULE_0__.createRequire)(\"file:///Users/areccusbranch/Documents/PersonalProjects/animestreaming/node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/compat.js\");\nlet puppeteerDirname;\ntry {\n    // In some environments, like esbuild, this will throw an error.\n    // We suppress the error since the bundled binary is not expected\n    // to be used or installed in this case and, therefore, the\n    // root directory does not have to be known.\n    puppeteerDirname = (0,path__WEBPACK_IMPORTED_MODULE_1__.dirname)(require.resolve('./compat'));\n}\ncatch (error) {\n    puppeteerDirname = (0,path__WEBPACK_IMPORTED_MODULE_1__.dirname)((0,url__WEBPACK_IMPORTED_MODULE_2__.fileURLToPath)(\"file:///Users/areccusbranch/Documents/PersonalProjects/animestreaming/node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/compat.js\"));\n}\n\n//# sourceMappingURL=compat.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvZ29nb2FuaW1lLWFwaS9ub2RlX21vZHVsZXMvcHVwcGV0ZWVyL2xpYi9lc20vcHVwcGV0ZWVyL2NvbXBhdC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXVDO0FBQ1I7QUFDSztBQUNwQyxnQkFBZ0IscURBQWEsQ0FBQyxxSkFBZTtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsNkNBQU87QUFDOUI7QUFDQTtBQUNBLHVCQUF1Qiw2Q0FBTyxDQUFDLGtEQUFhLENBQUMscUpBQWU7QUFDNUQ7QUFDNEI7QUFDNUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbmltZWZsaXgvLi9ub2RlX21vZHVsZXMvZ29nb2FuaW1lLWFwaS9ub2RlX21vZHVsZXMvcHVwcGV0ZWVyL2xpYi9lc20vcHVwcGV0ZWVyL2NvbXBhdC5qcz80ODQ4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZVJlcXVpcmUgfSBmcm9tICdtb2R1bGUnO1xuaW1wb3J0IHsgZGlybmFtZSB9IGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgZmlsZVVSTFRvUGF0aCB9IGZyb20gJ3VybCc7XG5jb25zdCByZXF1aXJlID0gY3JlYXRlUmVxdWlyZShpbXBvcnQubWV0YS51cmwpO1xubGV0IHB1cHBldGVlckRpcm5hbWU7XG50cnkge1xuICAgIC8vIEluIHNvbWUgZW52aXJvbm1lbnRzLCBsaWtlIGVzYnVpbGQsIHRoaXMgd2lsbCB0aHJvdyBhbiBlcnJvci5cbiAgICAvLyBXZSBzdXBwcmVzcyB0aGUgZXJyb3Igc2luY2UgdGhlIGJ1bmRsZWQgYmluYXJ5IGlzIG5vdCBleHBlY3RlZFxuICAgIC8vIHRvIGJlIHVzZWQgb3IgaW5zdGFsbGVkIGluIHRoaXMgY2FzZSBhbmQsIHRoZXJlZm9yZSwgdGhlXG4gICAgLy8gcm9vdCBkaXJlY3RvcnkgZG9lcyBub3QgaGF2ZSB0byBiZSBrbm93bi5cbiAgICBwdXBwZXRlZXJEaXJuYW1lID0gZGlybmFtZShyZXF1aXJlLnJlc29sdmUoJy4vY29tcGF0JykpO1xufVxuY2F0Y2ggKGVycm9yKSB7XG4gICAgcHVwcGV0ZWVyRGlybmFtZSA9IGRpcm5hbWUoZmlsZVVSTFRvUGF0aChpbXBvcnQubWV0YS51cmwpKTtcbn1cbmV4cG9ydCB7IHB1cHBldGVlckRpcm5hbWUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbXBhdC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/compat.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/constants.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/constants.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"rootDirname\": () => (/* binding */ rootDirname)\n/* harmony export */ });\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var _compat_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./compat.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/compat.js\");\n\n\nconst rootDirname = (0,path__WEBPACK_IMPORTED_MODULE_0__.dirname)((0,path__WEBPACK_IMPORTED_MODULE_0__.dirname)((0,path__WEBPACK_IMPORTED_MODULE_0__.dirname)(_compat_js__WEBPACK_IMPORTED_MODULE_1__.puppeteerDirname)));\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvZ29nb2FuaW1lLWFwaS9ub2RlX21vZHVsZXMvcHVwcGV0ZWVyL2xpYi9lc20vcHVwcGV0ZWVyL2NvbnN0YW50cy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBK0I7QUFDZ0I7QUFDeEMsb0JBQW9CLDZDQUFPLENBQUMsNkNBQU8sQ0FBQyw2Q0FBTyxDQUFDLHdEQUFnQjtBQUNuRSIsInNvdXJjZXMiOlsid2VicGFjazovL2FuaW1lZmxpeC8uL25vZGVfbW9kdWxlcy9nb2dvYW5pbWUtYXBpL25vZGVfbW9kdWxlcy9wdXBwZXRlZXIvbGliL2VzbS9wdXBwZXRlZXIvY29uc3RhbnRzLmpzPzFiZWEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGlybmFtZSB9IGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgcHVwcGV0ZWVyRGlybmFtZSB9IGZyb20gJy4vY29tcGF0LmpzJztcbmV4cG9ydCBjb25zdCByb290RGlybmFtZSA9IGRpcm5hbWUoZGlybmFtZShkaXJuYW1lKHB1cHBldGVlckRpcm5hbWUpKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/constants.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/environment.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/environment.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"isNode\": () => (/* binding */ isNode)\n/* harmony export */ });\n/**\n * Copyright 2020 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst isNode = !!(typeof process !== 'undefined' && process.version);\n//# sourceMappingURL=environment.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvZ29nb2FuaW1lLWFwaS9ub2RlX21vZHVsZXMvcHVwcGV0ZWVyL2xpYi9lc20vcHVwcGV0ZWVyL2Vudmlyb25tZW50LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW5pbWVmbGl4Ly4vbm9kZV9tb2R1bGVzL2dvZ29hbmltZS1hcGkvbm9kZV9tb2R1bGVzL3B1cHBldGVlci9saWIvZXNtL3B1cHBldGVlci9lbnZpcm9ubWVudC5qcz84YjdjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmV4cG9ydCBjb25zdCBpc05vZGUgPSAhISh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy52ZXJzaW9uKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVudmlyb25tZW50LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/environment.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/generated/version.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/generated/version.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"packageVersion\": () => (/* binding */ packageVersion)\n/* harmony export */ });\nconst packageVersion = '14.4.1';\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvZ29nb2FuaW1lLWFwaS9ub2RlX21vZHVsZXMvcHVwcGV0ZWVyL2xpYi9lc20vcHVwcGV0ZWVyL2dlbmVyYXRlZC92ZXJzaW9uLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTztBQUNQIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW5pbWVmbGl4Ly4vbm9kZV9tb2R1bGVzL2dvZ29hbmltZS1hcGkvbm9kZV9tb2R1bGVzL3B1cHBldGVlci9saWIvZXNtL3B1cHBldGVlci9nZW5lcmF0ZWQvdmVyc2lvbi5qcz9hZjhmIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBwYWNrYWdlVmVyc2lvbiA9ICcxNC40LjEnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/generated/version.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/initializePuppeteer.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/initializePuppeteer.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"initializePuppeteer\": () => (/* binding */ initializePuppeteer)\n/* harmony export */ });\n/* harmony import */ var pkg_dir__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pkg-dir */ \"pkg-dir\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/constants.js\");\n/* harmony import */ var _node_Puppeteer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node/Puppeteer.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/node/Puppeteer.js\");\n/* harmony import */ var _revisions_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./revisions.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/revisions.js\");\n/**\n * Copyright 2020 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\nconst initializePuppeteer = (packageName) => {\n    const isPuppeteerCore = packageName === 'puppeteer-core';\n    const puppeteerRootDirectory = (0,pkg_dir__WEBPACK_IMPORTED_MODULE_0__.sync)(_constants_js__WEBPACK_IMPORTED_MODULE_1__.rootDirname);\n    let preferredRevision = _revisions_js__WEBPACK_IMPORTED_MODULE_3__.PUPPETEER_REVISIONS.chromium;\n    // puppeteer-core ignores environment variables\n    const productName = !isPuppeteerCore\n        ? (process.env['PUPPETEER_PRODUCT'] ||\n            process.env['npm_config_puppeteer_product'] ||\n            process.env['npm_package_config_puppeteer_product'])\n        : undefined;\n    if (!isPuppeteerCore && productName === 'firefox') {\n        preferredRevision = _revisions_js__WEBPACK_IMPORTED_MODULE_3__.PUPPETEER_REVISIONS.firefox;\n    }\n    return new _node_Puppeteer_js__WEBPACK_IMPORTED_MODULE_2__.PuppeteerNode({\n        projectRoot: puppeteerRootDirectory,\n        preferredRevision,\n        isPuppeteerCore,\n        productName,\n    });\n};\n//# sourceMappingURL=initializePuppeteer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvZ29nb2FuaW1lLWFwaS9ub2RlX21vZHVsZXMvcHVwcGV0ZWVyL2xpYi9lc20vcHVwcGV0ZWVyL2luaXRpYWxpemVQdXBwZXRlZXIuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDK0I7QUFDYztBQUNPO0FBQ0M7QUFDOUM7QUFDUDtBQUNBLG1DQUFtQyw2Q0FBSSxDQUFDLHNEQUFXO0FBQ25ELDRCQUE0Qix1RUFBNEI7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsc0VBQTJCO0FBQ3ZEO0FBQ0EsZUFBZSw2REFBYTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW5pbWVmbGl4Ly4vbm9kZV9tb2R1bGVzL2dvZ29hbmltZS1hcGkvbm9kZV9tb2R1bGVzL3B1cHBldGVlci9saWIvZXNtL3B1cHBldGVlci9pbml0aWFsaXplUHVwcGV0ZWVyLmpzPzEyMWUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgc3luYyB9IGZyb20gJ3BrZy1kaXInO1xuaW1wb3J0IHsgcm9vdERpcm5hbWUgfSBmcm9tICcuL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyBQdXBwZXRlZXJOb2RlIH0gZnJvbSAnLi9ub2RlL1B1cHBldGVlci5qcyc7XG5pbXBvcnQgeyBQVVBQRVRFRVJfUkVWSVNJT05TIH0gZnJvbSAnLi9yZXZpc2lvbnMuanMnO1xuZXhwb3J0IGNvbnN0IGluaXRpYWxpemVQdXBwZXRlZXIgPSAocGFja2FnZU5hbWUpID0+IHtcbiAgICBjb25zdCBpc1B1cHBldGVlckNvcmUgPSBwYWNrYWdlTmFtZSA9PT0gJ3B1cHBldGVlci1jb3JlJztcbiAgICBjb25zdCBwdXBwZXRlZXJSb290RGlyZWN0b3J5ID0gc3luYyhyb290RGlybmFtZSk7XG4gICAgbGV0IHByZWZlcnJlZFJldmlzaW9uID0gUFVQUEVURUVSX1JFVklTSU9OUy5jaHJvbWl1bTtcbiAgICAvLyBwdXBwZXRlZXItY29yZSBpZ25vcmVzIGVudmlyb25tZW50IHZhcmlhYmxlc1xuICAgIGNvbnN0IHByb2R1Y3ROYW1lID0gIWlzUHVwcGV0ZWVyQ29yZVxuICAgICAgICA/IChwcm9jZXNzLmVudlsnUFVQUEVURUVSX1BST0RVQ1QnXSB8fFxuICAgICAgICAgICAgcHJvY2Vzcy5lbnZbJ25wbV9jb25maWdfcHVwcGV0ZWVyX3Byb2R1Y3QnXSB8fFxuICAgICAgICAgICAgcHJvY2Vzcy5lbnZbJ25wbV9wYWNrYWdlX2NvbmZpZ19wdXBwZXRlZXJfcHJvZHVjdCddKVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICBpZiAoIWlzUHVwcGV0ZWVyQ29yZSAmJiBwcm9kdWN0TmFtZSA9PT0gJ2ZpcmVmb3gnKSB7XG4gICAgICAgIHByZWZlcnJlZFJldmlzaW9uID0gUFVQUEVURUVSX1JFVklTSU9OUy5maXJlZm94O1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFB1cHBldGVlck5vZGUoe1xuICAgICAgICBwcm9qZWN0Um9vdDogcHVwcGV0ZWVyUm9vdERpcmVjdG9yeSxcbiAgICAgICAgcHJlZmVycmVkUmV2aXNpb24sXG4gICAgICAgIGlzUHVwcGV0ZWVyQ29yZSxcbiAgICAgICAgcHJvZHVjdE5hbWUsXG4gICAgfSk7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5pdGlhbGl6ZVB1cHBldGVlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/initializePuppeteer.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/node/BrowserFetcher.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/node/BrowserFetcher.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("var fs__WEBPACK_IMPORTED_MODULE_1___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BrowserFetcher\": () => (/* binding */ BrowserFetcher)\n/* harmony export */ });\n/* harmony import */ var os__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! os */ \"os\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! util */ \"util\");\n/* harmony import */ var child_process__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! child_process */ \"child_process\");\n/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! https */ \"https\");\n/* harmony import */ var http__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! http */ \"http\");\n/* harmony import */ var extract_zip__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! extract-zip */ \"extract-zip\");\n/* harmony import */ var _common_Debug_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../common/Debug.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Debug.js\");\n/* harmony import */ var rimraf__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! rimraf */ \"rimraf\");\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! url */ \"url\");\n/* harmony import */ var https_proxy_agent__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! https-proxy-agent */ \"https-proxy-agent\");\n/* harmony import */ var proxy_from_env__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! proxy-from-env */ \"proxy-from-env\");\n/* harmony import */ var _common_assert_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../common/assert.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/assert.js\");\n/* harmony import */ var tar_fs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! tar-fs */ \"tar-fs\");\n/* harmony import */ var unbzip2_stream__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! unbzip2-stream */ \"unbzip2-stream\");\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _BrowserFetcher_instances, _BrowserFetcher_product, _BrowserFetcher_downloadsFolder, _BrowserFetcher_downloadHost, _BrowserFetcher_platform, _BrowserFetcher_getFolderPath;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst { PUPPETEER_EXPERIMENTAL_CHROMIUM_MAC_ARM } = process.env;\nconst debugFetcher = (0,_common_Debug_js__WEBPACK_IMPORTED_MODULE_8__.debug)('puppeteer:fetcher');\nconst downloadURLs = {\n    chrome: {\n        linux: '%s/chromium-browser-snapshots/Linux_x64/%d/%s.zip',\n        mac: '%s/chromium-browser-snapshots/Mac/%d/%s.zip',\n        mac_arm: '%s/chromium-browser-snapshots/Mac_Arm/%d/%s.zip',\n        win32: '%s/chromium-browser-snapshots/Win/%d/%s.zip',\n        win64: '%s/chromium-browser-snapshots/Win_x64/%d/%s.zip',\n    },\n    firefox: {\n        linux: '%s/firefox-%s.en-US.%s-x86_64.tar.bz2',\n        mac: '%s/firefox-%s.en-US.%s.dmg',\n        win32: '%s/firefox-%s.en-US.%s.zip',\n        win64: '%s/firefox-%s.en-US.%s.zip',\n    },\n};\nconst browserConfig = {\n    chrome: {\n        host: 'https://storage.googleapis.com',\n        destination: '.local-chromium',\n    },\n    firefox: {\n        host: 'https://archive.mozilla.org/pub/firefox/nightly/latest-mozilla-central',\n        destination: '.local-firefox',\n    },\n};\nfunction archiveName(product, platform, revision) {\n    switch (product) {\n        case 'chrome':\n            switch (platform) {\n                case 'linux':\n                    return 'chrome-linux';\n                case 'mac_arm':\n                case 'mac':\n                    return 'chrome-mac';\n                case 'win32':\n                case 'win64':\n                    // Windows archive name changed at r591479.\n                    return parseInt(revision, 10) > 591479\n                        ? 'chrome-win'\n                        : 'chrome-win32';\n            }\n        case 'firefox':\n            return platform;\n    }\n}\n/**\n * @internal\n */\nfunction _downloadURL(product, platform, host, revision) {\n    const url = util__WEBPACK_IMPORTED_MODULE_3__.format(downloadURLs[product][platform], host, revision, archiveName(product, platform, revision));\n    return url;\n}\nfunction handleArm64() {\n    let exists = fs__WEBPACK_IMPORTED_MODULE_1__.existsSync('/usr/bin/chromium-browser');\n    if (exists) {\n        return;\n    }\n    exists = fs__WEBPACK_IMPORTED_MODULE_1__.existsSync('/usr/bin/chromium');\n    if (exists) {\n        return;\n    }\n    console.error('The chromium binary is not available for arm64.' +\n        '\\nIf you are on Ubuntu, you can install with: ' +\n        '\\n\\n sudo apt install chromium\\n' +\n        '\\n\\n sudo apt install chromium-browser\\n');\n    throw new Error();\n}\nconst readdirAsync = (0,util__WEBPACK_IMPORTED_MODULE_3__.promisify)(fs__WEBPACK_IMPORTED_MODULE_1__.readdir.bind(/*#__PURE__*/ (fs__WEBPACK_IMPORTED_MODULE_1___namespace_cache || (fs__WEBPACK_IMPORTED_MODULE_1___namespace_cache = __webpack_require__.t(fs__WEBPACK_IMPORTED_MODULE_1__, 2)))));\nconst mkdirAsync = (0,util__WEBPACK_IMPORTED_MODULE_3__.promisify)(fs__WEBPACK_IMPORTED_MODULE_1__.mkdir.bind(/*#__PURE__*/ (fs__WEBPACK_IMPORTED_MODULE_1___namespace_cache || (fs__WEBPACK_IMPORTED_MODULE_1___namespace_cache = __webpack_require__.t(fs__WEBPACK_IMPORTED_MODULE_1__, 2)))));\nconst unlinkAsync = (0,util__WEBPACK_IMPORTED_MODULE_3__.promisify)(fs__WEBPACK_IMPORTED_MODULE_1__.unlink.bind(/*#__PURE__*/ (fs__WEBPACK_IMPORTED_MODULE_1___namespace_cache || (fs__WEBPACK_IMPORTED_MODULE_1___namespace_cache = __webpack_require__.t(fs__WEBPACK_IMPORTED_MODULE_1__, 2)))));\nconst chmodAsync = (0,util__WEBPACK_IMPORTED_MODULE_3__.promisify)(fs__WEBPACK_IMPORTED_MODULE_1__.chmod.bind(/*#__PURE__*/ (fs__WEBPACK_IMPORTED_MODULE_1___namespace_cache || (fs__WEBPACK_IMPORTED_MODULE_1___namespace_cache = __webpack_require__.t(fs__WEBPACK_IMPORTED_MODULE_1__, 2)))));\nfunction existsAsync(filePath) {\n    return new Promise((resolve) => {\n        fs__WEBPACK_IMPORTED_MODULE_1__.access(filePath, (err) => {\n            return resolve(!err);\n        });\n    });\n}\n/**\n * BrowserFetcher can download and manage different versions of Chromium and Firefox.\n *\n * @remarks\n * BrowserFetcher operates on revision strings that specify a precise version of Chromium, e.g. `\"533271\"`. Revision strings can be obtained from {@link http://omahaproxy.appspot.com/ | omahaproxy.appspot.com}.\n * In the Firefox case, BrowserFetcher downloads Firefox Nightly and\n * operates on version numbers such as `\"75\"`.\n *\n * @example\n * An example of using BrowserFetcher to download a specific version of Chromium\n * and running Puppeteer against it:\n *\n * ```js\n * const browserFetcher = puppeteer.createBrowserFetcher();\n * const revisionInfo = await browserFetcher.download('533271');\n * const browser = await puppeteer.launch({executablePath: revisionInfo.executablePath})\n * ```\n *\n * **NOTE** BrowserFetcher is not designed to work concurrently with other\n * instances of BrowserFetcher that share the same downloads directory.\n *\n * @public\n */\nclass BrowserFetcher {\n    /**\n     * @internal\n     */\n    constructor(projectRoot, options = {}) {\n        _BrowserFetcher_instances.add(this);\n        _BrowserFetcher_product.set(this, void 0);\n        _BrowserFetcher_downloadsFolder.set(this, void 0);\n        _BrowserFetcher_downloadHost.set(this, void 0);\n        _BrowserFetcher_platform.set(this, void 0);\n        __classPrivateFieldSet(this, _BrowserFetcher_product, (options.product || 'chrome').toLowerCase(), \"f\");\n        (0,_common_assert_js__WEBPACK_IMPORTED_MODULE_13__.assert)(__classPrivateFieldGet(this, _BrowserFetcher_product, \"f\") === 'chrome' || __classPrivateFieldGet(this, _BrowserFetcher_product, \"f\") === 'firefox', `Unknown product: \"${options.product}\"`);\n        __classPrivateFieldSet(this, _BrowserFetcher_downloadsFolder, options.path ||\n            path__WEBPACK_IMPORTED_MODULE_2__.join(projectRoot, browserConfig[__classPrivateFieldGet(this, _BrowserFetcher_product, \"f\")].destination), \"f\");\n        __classPrivateFieldSet(this, _BrowserFetcher_downloadHost, options.host || browserConfig[__classPrivateFieldGet(this, _BrowserFetcher_product, \"f\")].host, \"f\");\n        if (options.platform) {\n            __classPrivateFieldSet(this, _BrowserFetcher_platform, options.platform, \"f\");\n        }\n        else {\n            const platform = os__WEBPACK_IMPORTED_MODULE_0__.platform();\n            switch (platform) {\n                case 'darwin':\n                    switch (__classPrivateFieldGet(this, _BrowserFetcher_product, \"f\")) {\n                        case 'chrome':\n                            __classPrivateFieldSet(this, _BrowserFetcher_platform, os__WEBPACK_IMPORTED_MODULE_0__.arch() === 'arm64' && PUPPETEER_EXPERIMENTAL_CHROMIUM_MAC_ARM\n                                ? 'mac_arm'\n                                : 'mac', \"f\");\n                            break;\n                        case 'firefox':\n                            __classPrivateFieldSet(this, _BrowserFetcher_platform, 'mac', \"f\");\n                            break;\n                    }\n                    break;\n                case 'linux':\n                    __classPrivateFieldSet(this, _BrowserFetcher_platform, 'linux', \"f\");\n                    break;\n                case 'win32':\n                    __classPrivateFieldSet(this, _BrowserFetcher_platform, os__WEBPACK_IMPORTED_MODULE_0__.arch() === 'x64' ? 'win64' : 'win32', \"f\");\n                    return;\n                default:\n                    (0,_common_assert_js__WEBPACK_IMPORTED_MODULE_13__.assert)(false, 'Unsupported platform: ' + platform);\n            }\n        }\n        (0,_common_assert_js__WEBPACK_IMPORTED_MODULE_13__.assert)(downloadURLs[__classPrivateFieldGet(this, _BrowserFetcher_product, \"f\")][__classPrivateFieldGet(this, _BrowserFetcher_platform, \"f\")], 'Unsupported platform: ' + __classPrivateFieldGet(this, _BrowserFetcher_platform, \"f\"));\n    }\n    /**\n     * @returns Returns the current `Platform`, which is one of `mac`, `linux`,\n     * `win32` or `win64`.\n     */\n    platform() {\n        return __classPrivateFieldGet(this, _BrowserFetcher_platform, \"f\");\n    }\n    /**\n     * @returns Returns the current `Product`, which is one of `chrome` or\n     * `firefox`.\n     */\n    product() {\n        return __classPrivateFieldGet(this, _BrowserFetcher_product, \"f\");\n    }\n    /**\n     * @returns The download host being used.\n     */\n    host() {\n        return __classPrivateFieldGet(this, _BrowserFetcher_downloadHost, \"f\");\n    }\n    /**\n     * Initiates a HEAD request to check if the revision is available.\n     * @remarks\n     * This method is affected by the current `product`.\n     * @param revision - The revision to check availability for.\n     * @returns A promise that resolves to `true` if the revision could be downloaded\n     * from the host.\n     */\n    canDownload(revision) {\n        const url = _downloadURL(__classPrivateFieldGet(this, _BrowserFetcher_product, \"f\"), __classPrivateFieldGet(this, _BrowserFetcher_platform, \"f\"), __classPrivateFieldGet(this, _BrowserFetcher_downloadHost, \"f\"), revision);\n        return new Promise((resolve) => {\n            const request = httpRequest(url, 'HEAD', (response) => {\n                resolve(response.statusCode === 200);\n            }, false);\n            request.on('error', (error) => {\n                console.error(error);\n                resolve(false);\n            });\n        });\n    }\n    /**\n     * Initiates a GET request to download the revision from the host.\n     * @remarks\n     * This method is affected by the current `product`.\n     * @param revision - The revision to download.\n     * @param progressCallback - A function that will be called with two arguments:\n     * How many bytes have been downloaded and the total number of bytes of the download.\n     * @returns A promise with revision information when the revision is downloaded\n     * and extracted.\n     */\n    async download(revision, progressCallback = () => { }) {\n        const url = _downloadURL(__classPrivateFieldGet(this, _BrowserFetcher_product, \"f\"), __classPrivateFieldGet(this, _BrowserFetcher_platform, \"f\"), __classPrivateFieldGet(this, _BrowserFetcher_downloadHost, \"f\"), revision);\n        const fileName = url.split('/').pop();\n        (0,_common_assert_js__WEBPACK_IMPORTED_MODULE_13__.assert)(fileName, `A malformed download URL was found: ${url}.`);\n        const archivePath = path__WEBPACK_IMPORTED_MODULE_2__.join(__classPrivateFieldGet(this, _BrowserFetcher_downloadsFolder, \"f\"), fileName);\n        const outputPath = __classPrivateFieldGet(this, _BrowserFetcher_instances, \"m\", _BrowserFetcher_getFolderPath).call(this, revision);\n        if (await existsAsync(outputPath)) {\n            return this.revisionInfo(revision);\n        }\n        if (!(await existsAsync(__classPrivateFieldGet(this, _BrowserFetcher_downloadsFolder, \"f\")))) {\n            await mkdirAsync(__classPrivateFieldGet(this, _BrowserFetcher_downloadsFolder, \"f\"));\n        }\n        // Use system Chromium builds on Linux ARM devices\n        if (os__WEBPACK_IMPORTED_MODULE_0__.platform() !== 'darwin' && os__WEBPACK_IMPORTED_MODULE_0__.arch() === 'arm64') {\n            handleArm64();\n            return;\n        }\n        try {\n            await _downloadFile(url, archivePath, progressCallback);\n            await install(archivePath, outputPath);\n        }\n        finally {\n            if (await existsAsync(archivePath)) {\n                await unlinkAsync(archivePath);\n            }\n        }\n        const revisionInfo = this.revisionInfo(revision);\n        if (revisionInfo) {\n            await chmodAsync(revisionInfo.executablePath, 0o755);\n        }\n        return revisionInfo;\n    }\n    /**\n     * @remarks\n     * This method is affected by the current `product`.\n     * @returns A promise with a list of all revision strings (for the current `product`)\n     * available locally on disk.\n     */\n    async localRevisions() {\n        if (!(await existsAsync(__classPrivateFieldGet(this, _BrowserFetcher_downloadsFolder, \"f\")))) {\n            return [];\n        }\n        const fileNames = await readdirAsync(__classPrivateFieldGet(this, _BrowserFetcher_downloadsFolder, \"f\"));\n        return fileNames\n            .map((fileName) => {\n            return parseFolderPath(__classPrivateFieldGet(this, _BrowserFetcher_product, \"f\"), fileName);\n        })\n            .filter((entry) => {\n            var _a;\n            return (_a = (entry && entry.platform === __classPrivateFieldGet(this, _BrowserFetcher_platform, \"f\"))) !== null && _a !== void 0 ? _a : false;\n        })\n            .map((entry) => {\n            return entry.revision;\n        });\n    }\n    /**\n     * @remarks\n     * This method is affected by the current `product`.\n     * @param revision - A revision to remove for the current `product`.\n     * @returns A promise that resolves when the revision has been removes or\n     * throws if the revision has not been downloaded.\n     */\n    async remove(revision) {\n        const folderPath = __classPrivateFieldGet(this, _BrowserFetcher_instances, \"m\", _BrowserFetcher_getFolderPath).call(this, revision);\n        (0,_common_assert_js__WEBPACK_IMPORTED_MODULE_13__.assert)(await existsAsync(folderPath), `Failed to remove: revision ${revision} is not downloaded`);\n        await new Promise((fulfill) => {\n            return rimraf__WEBPACK_IMPORTED_MODULE_9__(folderPath, fulfill);\n        });\n    }\n    /**\n     * @param revision - The revision to get info for.\n     * @returns The revision info for the given revision.\n     */\n    revisionInfo(revision) {\n        const folderPath = __classPrivateFieldGet(this, _BrowserFetcher_instances, \"m\", _BrowserFetcher_getFolderPath).call(this, revision);\n        let executablePath = '';\n        if (__classPrivateFieldGet(this, _BrowserFetcher_product, \"f\") === 'chrome') {\n            if (__classPrivateFieldGet(this, _BrowserFetcher_platform, \"f\") === 'mac' || __classPrivateFieldGet(this, _BrowserFetcher_platform, \"f\") === 'mac_arm') {\n                executablePath = path__WEBPACK_IMPORTED_MODULE_2__.join(folderPath, archiveName(__classPrivateFieldGet(this, _BrowserFetcher_product, \"f\"), __classPrivateFieldGet(this, _BrowserFetcher_platform, \"f\"), revision), 'Chromium.app', 'Contents', 'MacOS', 'Chromium');\n            }\n            else if (__classPrivateFieldGet(this, _BrowserFetcher_platform, \"f\") === 'linux') {\n                executablePath = path__WEBPACK_IMPORTED_MODULE_2__.join(folderPath, archiveName(__classPrivateFieldGet(this, _BrowserFetcher_product, \"f\"), __classPrivateFieldGet(this, _BrowserFetcher_platform, \"f\"), revision), 'chrome');\n            }\n            else if (__classPrivateFieldGet(this, _BrowserFetcher_platform, \"f\") === 'win32' || __classPrivateFieldGet(this, _BrowserFetcher_platform, \"f\") === 'win64') {\n                executablePath = path__WEBPACK_IMPORTED_MODULE_2__.join(folderPath, archiveName(__classPrivateFieldGet(this, _BrowserFetcher_product, \"f\"), __classPrivateFieldGet(this, _BrowserFetcher_platform, \"f\"), revision), 'chrome.exe');\n            }\n            else {\n                throw new Error('Unsupported platform: ' + __classPrivateFieldGet(this, _BrowserFetcher_platform, \"f\"));\n            }\n        }\n        else if (__classPrivateFieldGet(this, _BrowserFetcher_product, \"f\") === 'firefox') {\n            if (__classPrivateFieldGet(this, _BrowserFetcher_platform, \"f\") === 'mac' || __classPrivateFieldGet(this, _BrowserFetcher_platform, \"f\") === 'mac_arm') {\n                executablePath = path__WEBPACK_IMPORTED_MODULE_2__.join(folderPath, 'Firefox Nightly.app', 'Contents', 'MacOS', 'firefox');\n            }\n            else if (__classPrivateFieldGet(this, _BrowserFetcher_platform, \"f\") === 'linux') {\n                executablePath = path__WEBPACK_IMPORTED_MODULE_2__.join(folderPath, 'firefox', 'firefox');\n            }\n            else if (__classPrivateFieldGet(this, _BrowserFetcher_platform, \"f\") === 'win32' || __classPrivateFieldGet(this, _BrowserFetcher_platform, \"f\") === 'win64') {\n                executablePath = path__WEBPACK_IMPORTED_MODULE_2__.join(folderPath, 'firefox', 'firefox.exe');\n            }\n            else {\n                throw new Error('Unsupported platform: ' + __classPrivateFieldGet(this, _BrowserFetcher_platform, \"f\"));\n            }\n        }\n        else {\n            throw new Error('Unsupported product: ' + __classPrivateFieldGet(this, _BrowserFetcher_product, \"f\"));\n        }\n        const url = _downloadURL(__classPrivateFieldGet(this, _BrowserFetcher_product, \"f\"), __classPrivateFieldGet(this, _BrowserFetcher_platform, \"f\"), __classPrivateFieldGet(this, _BrowserFetcher_downloadHost, \"f\"), revision);\n        const local = fs__WEBPACK_IMPORTED_MODULE_1__.existsSync(folderPath);\n        debugFetcher({\n            revision,\n            executablePath,\n            folderPath,\n            local,\n            url,\n            product: __classPrivateFieldGet(this, _BrowserFetcher_product, \"f\"),\n        });\n        return {\n            revision,\n            executablePath,\n            folderPath,\n            local,\n            url,\n            product: __classPrivateFieldGet(this, _BrowserFetcher_product, \"f\"),\n        };\n    }\n}\n_BrowserFetcher_product = new WeakMap(), _BrowserFetcher_downloadsFolder = new WeakMap(), _BrowserFetcher_downloadHost = new WeakMap(), _BrowserFetcher_platform = new WeakMap(), _BrowserFetcher_instances = new WeakSet(), _BrowserFetcher_getFolderPath = function _BrowserFetcher_getFolderPath(revision) {\n    return path__WEBPACK_IMPORTED_MODULE_2__.resolve(__classPrivateFieldGet(this, _BrowserFetcher_downloadsFolder, \"f\"), `${__classPrivateFieldGet(this, _BrowserFetcher_platform, \"f\")}-${revision}`);\n};\nfunction parseFolderPath(product, folderPath) {\n    const name = path__WEBPACK_IMPORTED_MODULE_2__.basename(folderPath);\n    const splits = name.split('-');\n    if (splits.length !== 2) {\n        return;\n    }\n    const [platform, revision] = splits;\n    if (!revision || !platform || !(platform in downloadURLs[product])) {\n        return;\n    }\n    return { product, platform, revision };\n}\n/**\n * @internal\n */\nfunction _downloadFile(url, destinationPath, progressCallback) {\n    debugFetcher(`Downloading binary from ${url}`);\n    let fulfill;\n    let reject;\n    const promise = new Promise((x, y) => {\n        fulfill = x;\n        reject = y;\n    });\n    let downloadedBytes = 0;\n    let totalBytes = 0;\n    const request = httpRequest(url, 'GET', (response) => {\n        if (response.statusCode !== 200) {\n            const error = new Error(`Download failed: server returned code ${response.statusCode}. URL: ${url}`);\n            // consume response data to free up memory\n            response.resume();\n            reject(error);\n            return;\n        }\n        const file = fs__WEBPACK_IMPORTED_MODULE_1__.createWriteStream(destinationPath);\n        file.on('finish', () => {\n            return fulfill();\n        });\n        file.on('error', (error) => {\n            return reject(error);\n        });\n        response.pipe(file);\n        totalBytes = parseInt(response.headers['content-length'], 10);\n        if (progressCallback) {\n            response.on('data', onData);\n        }\n    });\n    request.on('error', (error) => {\n        return reject(error);\n    });\n    return promise;\n    function onData(chunk) {\n        downloadedBytes += chunk.length;\n        progressCallback(downloadedBytes, totalBytes);\n    }\n}\nfunction install(archivePath, folderPath) {\n    debugFetcher(`Installing ${archivePath} to ${folderPath}`);\n    if (archivePath.endsWith('.zip')) {\n        return extract_zip__WEBPACK_IMPORTED_MODULE_7__(archivePath, { dir: folderPath });\n    }\n    else if (archivePath.endsWith('.tar.bz2')) {\n        return _extractTar(archivePath, folderPath);\n    }\n    else if (archivePath.endsWith('.dmg')) {\n        return mkdirAsync(folderPath).then(() => {\n            return _installDMG(archivePath, folderPath);\n        });\n    }\n    else {\n        throw new Error(`Unsupported archive format: ${archivePath}`);\n    }\n}\n/**\n * @internal\n */\nfunction _extractTar(tarPath, folderPath) {\n    return new Promise((fulfill, reject) => {\n        const tarStream = tar_fs__WEBPACK_IMPORTED_MODULE_14__.extract(folderPath);\n        tarStream.on('error', reject);\n        tarStream.on('finish', fulfill);\n        const readStream = fs__WEBPACK_IMPORTED_MODULE_1__.createReadStream(tarPath);\n        readStream.pipe(unbzip2_stream__WEBPACK_IMPORTED_MODULE_15__()).pipe(tarStream);\n    });\n}\n/**\n * @internal\n */\nfunction _installDMG(dmgPath, folderPath) {\n    let mountPath;\n    return new Promise((fulfill, reject) => {\n        const mountCommand = `hdiutil attach -nobrowse -noautoopen \"${dmgPath}\"`;\n        child_process__WEBPACK_IMPORTED_MODULE_4__.exec(mountCommand, (err, stdout) => {\n            if (err) {\n                return reject(err);\n            }\n            const volumes = stdout.match(/\\/Volumes\\/(.*)/m);\n            if (!volumes) {\n                return reject(new Error(`Could not find volume path in ${stdout}`));\n            }\n            mountPath = volumes[0];\n            readdirAsync(mountPath)\n                .then((fileNames) => {\n                const appName = fileNames.find((item) => {\n                    return typeof item === 'string' && item.endsWith('.app');\n                });\n                if (!appName) {\n                    return reject(new Error(`Cannot find app in ${mountPath}`));\n                }\n                const copyPath = path__WEBPACK_IMPORTED_MODULE_2__.join(mountPath, appName);\n                debugFetcher(`Copying ${copyPath} to ${folderPath}`);\n                child_process__WEBPACK_IMPORTED_MODULE_4__.exec(`cp -R \"${copyPath}\" \"${folderPath}\"`, (err) => {\n                    if (err) {\n                        reject(err);\n                    }\n                    else {\n                        fulfill();\n                    }\n                });\n            })\n                .catch(reject);\n        });\n    })\n        .catch((error) => {\n        console.error(error);\n    })\n        .finally(() => {\n        if (!mountPath) {\n            return;\n        }\n        const unmountCommand = `hdiutil detach \"${mountPath}\" -quiet`;\n        debugFetcher(`Unmounting ${mountPath}`);\n        child_process__WEBPACK_IMPORTED_MODULE_4__.exec(unmountCommand, (err) => {\n            if (err) {\n                console.error(`Error unmounting dmg: ${err}`);\n            }\n        });\n    });\n}\nfunction httpRequest(url, method, response, keepAlive = true) {\n    const urlParsed = url__WEBPACK_IMPORTED_MODULE_10__.parse(url);\n    let options = {\n        ...urlParsed,\n        method,\n        headers: keepAlive\n            ? {\n                Connection: 'keep-alive',\n            }\n            : undefined,\n    };\n    const proxyURL = (0,proxy_from_env__WEBPACK_IMPORTED_MODULE_12__.getProxyForUrl)(url);\n    if (proxyURL) {\n        if (url.startsWith('http:')) {\n            const proxy = url__WEBPACK_IMPORTED_MODULE_10__.parse(proxyURL);\n            options = {\n                path: options.href,\n                host: proxy.hostname,\n                port: proxy.port,\n            };\n        }\n        else {\n            const parsedProxyURL = url__WEBPACK_IMPORTED_MODULE_10__.parse(proxyURL);\n            const proxyOptions = {\n                ...parsedProxyURL,\n                secureProxy: parsedProxyURL.protocol === 'https:',\n            };\n            options.agent = https_proxy_agent__WEBPACK_IMPORTED_MODULE_11__(proxyOptions);\n            options.rejectUnauthorized = false;\n        }\n    }\n    const requestCallback = (res) => {\n        if (res.statusCode &&\n            res.statusCode >= 300 &&\n            res.statusCode < 400 &&\n            res.headers.location) {\n            httpRequest(res.headers.location, method, response);\n        }\n        else {\n            response(res);\n        }\n    };\n    const request = options.protocol === 'https:'\n        ? https__WEBPACK_IMPORTED_MODULE_5__.request(options, requestCallback)\n        : http__WEBPACK_IMPORTED_MODULE_6__.request(options, requestCallback);\n    request.end();\n    return request;\n}\n//# sourceMappingURL=BrowserFetcher.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/node/BrowserFetcher.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/node/BrowserRunner.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/node/BrowserRunner.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BrowserRunner\": () => (/* binding */ BrowserRunner)\n/* harmony export */ });\n/* harmony import */ var child_process__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! child_process */ \"child_process\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var readline__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! readline */ \"readline\");\n/* harmony import */ var rimraf__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rimraf */ \"rimraf\");\n/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! util */ \"util\");\n/* harmony import */ var _common_assert_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../common/assert.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/assert.js\");\n/* harmony import */ var _common_Connection_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../common/Connection.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Connection.js\");\n/* harmony import */ var _common_Debug_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../common/Debug.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Debug.js\");\n/* harmony import */ var _common_Errors_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../common/Errors.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Errors.js\");\n/* harmony import */ var _common_util_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../common/util.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/util.js\");\n/* harmony import */ var _node_NodeWebSocketTransport_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../node/NodeWebSocketTransport.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/node/NodeWebSocketTransport.js\");\n/* harmony import */ var _PipeTransport_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./PipeTransport.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/node/PipeTransport.js\");\n/**\n * Copyright 2020 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _BrowserRunner_product, _BrowserRunner_executablePath, _BrowserRunner_processArguments, _BrowserRunner_userDataDir, _BrowserRunner_isTempUserDataDir, _BrowserRunner_closed, _BrowserRunner_listeners, _BrowserRunner_processClosing;\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst removeFolderAsync = (0,util__WEBPACK_IMPORTED_MODULE_5__.promisify)(rimraf__WEBPACK_IMPORTED_MODULE_4__);\nconst renameAsync = (0,util__WEBPACK_IMPORTED_MODULE_5__.promisify)(fs__WEBPACK_IMPORTED_MODULE_1__.rename);\nconst unlinkAsync = (0,util__WEBPACK_IMPORTED_MODULE_5__.promisify)(fs__WEBPACK_IMPORTED_MODULE_1__.unlink);\nconst debugLauncher = (0,_common_Debug_js__WEBPACK_IMPORTED_MODULE_8__.debug)('puppeteer:launcher');\nconst PROCESS_ERROR_EXPLANATION = `Puppeteer was unable to kill the process which ran the browser binary.\nThis means that, on future Puppeteer launches, Puppeteer might not be able to launch the browser.\nPlease check your open processes and ensure that the browser processes that Puppeteer launched have been killed.\nIf you think this is a bug, please report it on the Puppeteer issue tracker.`;\nclass BrowserRunner {\n    constructor(product, executablePath, processArguments, userDataDir, isTempUserDataDir) {\n        _BrowserRunner_product.set(this, void 0);\n        _BrowserRunner_executablePath.set(this, void 0);\n        _BrowserRunner_processArguments.set(this, void 0);\n        _BrowserRunner_userDataDir.set(this, void 0);\n        _BrowserRunner_isTempUserDataDir.set(this, void 0);\n        _BrowserRunner_closed.set(this, true);\n        _BrowserRunner_listeners.set(this, []);\n        _BrowserRunner_processClosing.set(this, void 0);\n        __classPrivateFieldSet(this, _BrowserRunner_product, product, \"f\");\n        __classPrivateFieldSet(this, _BrowserRunner_executablePath, executablePath, \"f\");\n        __classPrivateFieldSet(this, _BrowserRunner_processArguments, processArguments, \"f\");\n        __classPrivateFieldSet(this, _BrowserRunner_userDataDir, userDataDir, \"f\");\n        __classPrivateFieldSet(this, _BrowserRunner_isTempUserDataDir, isTempUserDataDir, \"f\");\n    }\n    start(options) {\n        var _a, _b;\n        const { handleSIGINT, handleSIGTERM, handleSIGHUP, dumpio, env, pipe } = options;\n        let stdio;\n        if (pipe) {\n            if (dumpio) {\n                stdio = ['ignore', 'pipe', 'pipe', 'pipe', 'pipe'];\n            }\n            else {\n                stdio = ['ignore', 'ignore', 'ignore', 'pipe', 'pipe'];\n            }\n        }\n        else {\n            if (dumpio) {\n                stdio = ['pipe', 'pipe', 'pipe'];\n            }\n            else {\n                stdio = ['pipe', 'ignore', 'pipe'];\n            }\n        }\n        (0,_common_assert_js__WEBPACK_IMPORTED_MODULE_6__.assert)(!this.proc, 'This process has previously been started.');\n        debugLauncher(`Calling ${__classPrivateFieldGet(this, _BrowserRunner_executablePath, \"f\")} ${__classPrivateFieldGet(this, _BrowserRunner_processArguments, \"f\").join(' ')}`);\n        this.proc = child_process__WEBPACK_IMPORTED_MODULE_0__.spawn(__classPrivateFieldGet(this, _BrowserRunner_executablePath, \"f\"), __classPrivateFieldGet(this, _BrowserRunner_processArguments, \"f\"), {\n            // On non-windows platforms, `detached: true` makes child process a\n            // leader of a new process group, making it possible to kill child\n            // process tree with `.kill(-pid)` command. @see\n            // https://nodejs.org/api/child_process.html#child_process_options_detached\n            detached: process.platform !== 'win32',\n            env,\n            stdio,\n        });\n        if (dumpio) {\n            (_a = this.proc.stderr) === null || _a === void 0 ? void 0 : _a.pipe(process.stderr);\n            (_b = this.proc.stdout) === null || _b === void 0 ? void 0 : _b.pipe(process.stdout);\n        }\n        __classPrivateFieldSet(this, _BrowserRunner_closed, false, \"f\");\n        __classPrivateFieldSet(this, _BrowserRunner_processClosing, new Promise((fulfill, reject) => {\n            this.proc.once('exit', async () => {\n                __classPrivateFieldSet(this, _BrowserRunner_closed, true, \"f\");\n                // Cleanup as processes exit.\n                if (__classPrivateFieldGet(this, _BrowserRunner_isTempUserDataDir, \"f\")) {\n                    try {\n                        await removeFolderAsync(__classPrivateFieldGet(this, _BrowserRunner_userDataDir, \"f\"));\n                        fulfill();\n                    }\n                    catch (error) {\n                        (0,_common_util_js__WEBPACK_IMPORTED_MODULE_10__.debugError)(error);\n                        reject(error);\n                    }\n                }\n                else {\n                    if (__classPrivateFieldGet(this, _BrowserRunner_product, \"f\") === 'firefox') {\n                        try {\n                            // When an existing user profile has been used remove the user\n                            // preferences file and restore possibly backuped preferences.\n                            await unlinkAsync(path__WEBPACK_IMPORTED_MODULE_2__.join(__classPrivateFieldGet(this, _BrowserRunner_userDataDir, \"f\"), 'user.js'));\n                            const prefsBackupPath = path__WEBPACK_IMPORTED_MODULE_2__.join(__classPrivateFieldGet(this, _BrowserRunner_userDataDir, \"f\"), 'prefs.js.puppeteer');\n                            if (fs__WEBPACK_IMPORTED_MODULE_1__.existsSync(prefsBackupPath)) {\n                                const prefsPath = path__WEBPACK_IMPORTED_MODULE_2__.join(__classPrivateFieldGet(this, _BrowserRunner_userDataDir, \"f\"), 'prefs.js');\n                                await unlinkAsync(prefsPath);\n                                await renameAsync(prefsBackupPath, prefsPath);\n                            }\n                        }\n                        catch (error) {\n                            (0,_common_util_js__WEBPACK_IMPORTED_MODULE_10__.debugError)(error);\n                            reject(error);\n                        }\n                    }\n                    fulfill();\n                }\n            });\n        }), \"f\");\n        __classPrivateFieldSet(this, _BrowserRunner_listeners, [(0,_common_util_js__WEBPACK_IMPORTED_MODULE_10__.addEventListener)(process, 'exit', this.kill.bind(this))], \"f\");\n        if (handleSIGINT) {\n            __classPrivateFieldGet(this, _BrowserRunner_listeners, \"f\").push((0,_common_util_js__WEBPACK_IMPORTED_MODULE_10__.addEventListener)(process, 'SIGINT', () => {\n                this.kill();\n                process.exit(130);\n            }));\n        }\n        if (handleSIGTERM) {\n            __classPrivateFieldGet(this, _BrowserRunner_listeners, \"f\").push((0,_common_util_js__WEBPACK_IMPORTED_MODULE_10__.addEventListener)(process, 'SIGTERM', this.close.bind(this)));\n        }\n        if (handleSIGHUP) {\n            __classPrivateFieldGet(this, _BrowserRunner_listeners, \"f\").push((0,_common_util_js__WEBPACK_IMPORTED_MODULE_10__.addEventListener)(process, 'SIGHUP', this.close.bind(this)));\n        }\n    }\n    close() {\n        if (__classPrivateFieldGet(this, _BrowserRunner_closed, \"f\")) {\n            return Promise.resolve();\n        }\n        if (__classPrivateFieldGet(this, _BrowserRunner_isTempUserDataDir, \"f\")) {\n            this.kill();\n        }\n        else if (this.connection) {\n            // Attempt to close the browser gracefully\n            this.connection.send('Browser.close').catch((error) => {\n                (0,_common_util_js__WEBPACK_IMPORTED_MODULE_10__.debugError)(error);\n                this.kill();\n            });\n        }\n        // Cleanup this listener last, as that makes sure the full callback runs. If we\n        // perform this earlier, then the previous function calls would not happen.\n        (0,_common_util_js__WEBPACK_IMPORTED_MODULE_10__.removeEventListeners)(__classPrivateFieldGet(this, _BrowserRunner_listeners, \"f\"));\n        return __classPrivateFieldGet(this, _BrowserRunner_processClosing, \"f\");\n    }\n    kill() {\n        // If the process failed to launch (for example if the browser executable path\n        // is invalid), then the process does not get a pid assigned. A call to\n        // `proc.kill` would error, as the `pid` to-be-killed can not be found.\n        if (this.proc && this.proc.pid && pidExists(this.proc.pid)) {\n            const proc = this.proc;\n            try {\n                if (process.platform === 'win32') {\n                    child_process__WEBPACK_IMPORTED_MODULE_0__.exec(`taskkill /pid ${this.proc.pid} /T /F`, (error) => {\n                        if (error) {\n                            // taskkill can fail to kill the process e.g. due to missing permissions.\n                            // Let's kill the process via Node API. This delays killing of all child\n                            // processes of `this.proc` until the main Node.js process dies.\n                            proc.kill();\n                        }\n                    });\n                }\n                else {\n                    // on linux the process group can be killed with the group id prefixed with\n                    // a minus sign. The process group id is the group leader's pid.\n                    const processGroupId = -this.proc.pid;\n                    try {\n                        process.kill(processGroupId, 'SIGKILL');\n                    }\n                    catch (error) {\n                        // Killing the process group can fail due e.g. to missing permissions.\n                        // Let's kill the process via Node API. This delays killing of all child\n                        // processes of `this.proc` until the main Node.js process dies.\n                        proc.kill('SIGKILL');\n                    }\n                }\n            }\n            catch (error) {\n                throw new Error(`${PROCESS_ERROR_EXPLANATION}\\nError cause: ${(0,_common_util_js__WEBPACK_IMPORTED_MODULE_10__.isErrorLike)(error) ? error.stack : error}`);\n            }\n        }\n        // Attempt to remove temporary profile directory to avoid littering.\n        try {\n            if (__classPrivateFieldGet(this, _BrowserRunner_isTempUserDataDir, \"f\")) {\n                rimraf__WEBPACK_IMPORTED_MODULE_4__.sync(__classPrivateFieldGet(this, _BrowserRunner_userDataDir, \"f\"));\n            }\n        }\n        catch (error) { }\n        // Cleanup this listener last, as that makes sure the full callback runs. If we\n        // perform this earlier, then the previous function calls would not happen.\n        (0,_common_util_js__WEBPACK_IMPORTED_MODULE_10__.removeEventListeners)(__classPrivateFieldGet(this, _BrowserRunner_listeners, \"f\"));\n    }\n    async setupConnection(options) {\n        (0,_common_assert_js__WEBPACK_IMPORTED_MODULE_6__.assert)(this.proc, 'BrowserRunner not started.');\n        const { usePipe, timeout, slowMo, preferredRevision } = options;\n        if (!usePipe) {\n            const browserWSEndpoint = await waitForWSEndpoint(this.proc, timeout, preferredRevision);\n            const transport = await _node_NodeWebSocketTransport_js__WEBPACK_IMPORTED_MODULE_11__.NodeWebSocketTransport.create(browserWSEndpoint);\n            this.connection = new _common_Connection_js__WEBPACK_IMPORTED_MODULE_7__.Connection(browserWSEndpoint, transport, slowMo);\n        }\n        else {\n            // stdio was assigned during start(), and the 'pipe' option there adds the\n            // 4th and 5th items to stdio array\n            const { 3: pipeWrite, 4: pipeRead } = this.proc.stdio;\n            const transport = new _PipeTransport_js__WEBPACK_IMPORTED_MODULE_12__.PipeTransport(pipeWrite, pipeRead);\n            this.connection = new _common_Connection_js__WEBPACK_IMPORTED_MODULE_7__.Connection('', transport, slowMo);\n        }\n        return this.connection;\n    }\n}\n_BrowserRunner_product = new WeakMap(), _BrowserRunner_executablePath = new WeakMap(), _BrowserRunner_processArguments = new WeakMap(), _BrowserRunner_userDataDir = new WeakMap(), _BrowserRunner_isTempUserDataDir = new WeakMap(), _BrowserRunner_closed = new WeakMap(), _BrowserRunner_listeners = new WeakMap(), _BrowserRunner_processClosing = new WeakMap();\nfunction waitForWSEndpoint(browserProcess, timeout, preferredRevision) {\n    (0,_common_assert_js__WEBPACK_IMPORTED_MODULE_6__.assert)(browserProcess.stderr, '`browserProcess` does not have stderr.');\n    const rl = readline__WEBPACK_IMPORTED_MODULE_3__.createInterface(browserProcess.stderr);\n    let stderr = '';\n    return new Promise((resolve, reject) => {\n        const listeners = [\n            (0,_common_util_js__WEBPACK_IMPORTED_MODULE_10__.addEventListener)(rl, 'line', onLine),\n            (0,_common_util_js__WEBPACK_IMPORTED_MODULE_10__.addEventListener)(rl, 'close', () => {\n                return onClose();\n            }),\n            (0,_common_util_js__WEBPACK_IMPORTED_MODULE_10__.addEventListener)(browserProcess, 'exit', () => {\n                return onClose();\n            }),\n            (0,_common_util_js__WEBPACK_IMPORTED_MODULE_10__.addEventListener)(browserProcess, 'error', (error) => {\n                return onClose(error);\n            }),\n        ];\n        const timeoutId = timeout ? setTimeout(onTimeout, timeout) : 0;\n        function onClose(error) {\n            cleanup();\n            reject(new Error([\n                'Failed to launch the browser process!' +\n                    (error ? ' ' + error.message : ''),\n                stderr,\n                '',\n                'TROUBLESHOOTING: https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md',\n                '',\n            ].join('\\n')));\n        }\n        function onTimeout() {\n            cleanup();\n            reject(new _common_Errors_js__WEBPACK_IMPORTED_MODULE_9__.TimeoutError(`Timed out after ${timeout} ms while trying to connect to the browser! Only Chrome at revision r${preferredRevision} is guaranteed to work.`));\n        }\n        function onLine(line) {\n            stderr += line + '\\n';\n            const match = line.match(/^DevTools listening on (ws:\\/\\/.*)$/);\n            if (!match) {\n                return;\n            }\n            cleanup();\n            // The RegExp matches, so this will obviously exist.\n            resolve(match[1]);\n        }\n        function cleanup() {\n            if (timeoutId) {\n                clearTimeout(timeoutId);\n            }\n            (0,_common_util_js__WEBPACK_IMPORTED_MODULE_10__.removeEventListeners)(listeners);\n        }\n    });\n}\nfunction pidExists(pid) {\n    try {\n        return process.kill(pid, 0);\n    }\n    catch (error) {\n        if ((0,_common_util_js__WEBPACK_IMPORTED_MODULE_10__.isErrnoException)(error)) {\n            if (error.code && error.code === 'ESRCH') {\n                return false;\n            }\n        }\n        throw error;\n    }\n}\n//# sourceMappingURL=BrowserRunner.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/node/BrowserRunner.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/node/Launcher.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/node/Launcher.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Launcher)\n/* harmony export */ });\n/* harmony import */ var os__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! os */ \"os\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var _common_assert_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/assert.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/assert.js\");\n/* harmony import */ var _BrowserFetcher_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./BrowserFetcher.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/node/BrowserFetcher.js\");\n/* harmony import */ var _common_Browser_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../common/Browser.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Browser.js\");\n/* harmony import */ var _BrowserRunner_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./BrowserRunner.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/node/BrowserRunner.js\");\n/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! util */ \"util\");\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\nconst copyFileAsync = (0,util__WEBPACK_IMPORTED_MODULE_7__.promisify)(fs__WEBPACK_IMPORTED_MODULE_2__.copyFile);\nconst mkdtempAsync = (0,util__WEBPACK_IMPORTED_MODULE_7__.promisify)(fs__WEBPACK_IMPORTED_MODULE_2__.mkdtemp);\nconst writeFileAsync = (0,util__WEBPACK_IMPORTED_MODULE_7__.promisify)(fs__WEBPACK_IMPORTED_MODULE_2__.writeFile);\nconst tmpDir = () => {\n    return process.env['PUPPETEER_TMP_DIR'] || os__WEBPACK_IMPORTED_MODULE_0__.tmpdir();\n};\n/**\n * @internal\n */\nclass ChromeLauncher {\n    constructor(projectRoot, preferredRevision, isPuppeteerCore) {\n        this._projectRoot = projectRoot;\n        this._preferredRevision = preferredRevision;\n        this._isPuppeteerCore = isPuppeteerCore;\n    }\n    async launch(options = {}) {\n        const { ignoreDefaultArgs = false, args = [], dumpio = false, channel, executablePath, pipe = false, env = process.env, handleSIGINT = true, handleSIGTERM = true, handleSIGHUP = true, ignoreHTTPSErrors = false, defaultViewport = { width: 800, height: 600 }, slowMo = 0, timeout = 30000, waitForInitialPage = true, debuggingPort, } = options;\n        const chromeArguments = [];\n        if (!ignoreDefaultArgs) {\n            chromeArguments.push(...this.defaultArgs(options));\n        }\n        else if (Array.isArray(ignoreDefaultArgs)) {\n            chromeArguments.push(...this.defaultArgs(options).filter((arg) => {\n                return !ignoreDefaultArgs.includes(arg);\n            }));\n        }\n        else {\n            chromeArguments.push(...args);\n        }\n        if (!chromeArguments.some((argument) => {\n            return argument.startsWith('--remote-debugging-');\n        })) {\n            if (pipe) {\n                (0,_common_assert_js__WEBPACK_IMPORTED_MODULE_3__.assert)(!debuggingPort, 'Browser should be launched with either pipe or debugging port - not both.');\n                chromeArguments.push('--remote-debugging-pipe');\n            }\n            else {\n                chromeArguments.push(`--remote-debugging-port=${debuggingPort || 0}`);\n            }\n        }\n        let isTempUserDataDir = true;\n        // Check for the user data dir argument, which will always be set even\n        // with a custom directory specified via the userDataDir option.\n        let userDataDirIndex = chromeArguments.findIndex((arg) => {\n            return arg.startsWith('--user-data-dir');\n        });\n        if (userDataDirIndex < 0) {\n            chromeArguments.push(`--user-data-dir=${await mkdtempAsync(path__WEBPACK_IMPORTED_MODULE_1__.join(tmpDir(), 'puppeteer_dev_chrome_profile-'))}`);\n            userDataDirIndex = chromeArguments.length - 1;\n        }\n        const userDataDir = chromeArguments[userDataDirIndex].split('=', 2)[1];\n        (0,_common_assert_js__WEBPACK_IMPORTED_MODULE_3__.assert)(typeof userDataDir === 'string', '`--user-data-dir` is malformed');\n        isTempUserDataDir = false;\n        let chromeExecutable = executablePath;\n        if (channel) {\n            // executablePath is detected by channel, so it should not be specified by user.\n            (0,_common_assert_js__WEBPACK_IMPORTED_MODULE_3__.assert)(!chromeExecutable, '`executablePath` must not be specified when `channel` is given.');\n            chromeExecutable = executablePathForChannel(channel);\n        }\n        else if (!chromeExecutable) {\n            const { missingText, executablePath } = resolveExecutablePath(this);\n            if (missingText) {\n                throw new Error(missingText);\n            }\n            chromeExecutable = executablePath;\n        }\n        const usePipe = chromeArguments.includes('--remote-debugging-pipe');\n        const runner = new _BrowserRunner_js__WEBPACK_IMPORTED_MODULE_6__.BrowserRunner(this.product, chromeExecutable, chromeArguments, userDataDir, isTempUserDataDir);\n        runner.start({\n            handleSIGHUP,\n            handleSIGTERM,\n            handleSIGINT,\n            dumpio,\n            env,\n            pipe: usePipe,\n        });\n        let browser;\n        try {\n            const connection = await runner.setupConnection({\n                usePipe,\n                timeout,\n                slowMo,\n                preferredRevision: this._preferredRevision,\n            });\n            browser = await _common_Browser_js__WEBPACK_IMPORTED_MODULE_5__.Browser._create(connection, [], ignoreHTTPSErrors, defaultViewport, runner.proc, runner.close.bind(runner));\n        }\n        catch (error) {\n            runner.kill();\n            throw error;\n        }\n        if (waitForInitialPage) {\n            try {\n                await browser.waitForTarget((t) => {\n                    return t.type() === 'page';\n                }, { timeout });\n            }\n            catch (error) {\n                await browser.close();\n                throw error;\n            }\n        }\n        return browser;\n    }\n    defaultArgs(options = {}) {\n        const chromeArguments = [\n            '--allow-pre-commit-input',\n            '--disable-background-networking',\n            '--enable-features=NetworkServiceInProcess2',\n            '--disable-background-timer-throttling',\n            '--disable-backgrounding-occluded-windows',\n            '--disable-breakpad',\n            '--disable-client-side-phishing-detection',\n            '--disable-component-extensions-with-background-pages',\n            '--disable-default-apps',\n            '--disable-dev-shm-usage',\n            '--disable-extensions',\n            // TODO: remove AvoidUnnecessaryBeforeUnloadCheckSync below\n            // once crbug.com/1324138 is fixed and released.\n            '--disable-features=Translate,BackForwardCache,AvoidUnnecessaryBeforeUnloadCheckSync',\n            '--disable-hang-monitor',\n            '--disable-ipc-flooding-protection',\n            '--disable-popup-blocking',\n            '--disable-prompt-on-repost',\n            '--disable-renderer-backgrounding',\n            '--disable-sync',\n            '--force-color-profile=srgb',\n            '--metrics-recording-only',\n            '--no-first-run',\n            '--enable-automation',\n            '--password-store=basic',\n            '--use-mock-keychain',\n            // TODO(sadym): remove '--enable-blink-features=IdleDetection'\n            // once IdleDetection is turned on by default.\n            '--enable-blink-features=IdleDetection',\n            '--export-tagged-pdf',\n        ];\n        const { devtools = false, headless = !devtools, args = [], userDataDir, } = options;\n        if (userDataDir) {\n            chromeArguments.push(`--user-data-dir=${path__WEBPACK_IMPORTED_MODULE_1__.resolve(userDataDir)}`);\n        }\n        if (devtools) {\n            chromeArguments.push('--auto-open-devtools-for-tabs');\n        }\n        if (headless) {\n            chromeArguments.push(headless === 'chrome' ? '--headless=chrome' : '--headless', '--hide-scrollbars', '--mute-audio');\n        }\n        if (args.every((arg) => {\n            return arg.startsWith('-');\n        })) {\n            chromeArguments.push('about:blank');\n        }\n        chromeArguments.push(...args);\n        return chromeArguments;\n    }\n    executablePath(channel) {\n        if (channel) {\n            return executablePathForChannel(channel);\n        }\n        else {\n            const results = resolveExecutablePath(this);\n            return results.executablePath;\n        }\n    }\n    get product() {\n        return 'chrome';\n    }\n}\n/**\n * @internal\n */\nclass FirefoxLauncher {\n    constructor(projectRoot, preferredRevision, isPuppeteerCore) {\n        this._projectRoot = projectRoot;\n        this._preferredRevision = preferredRevision;\n        this._isPuppeteerCore = isPuppeteerCore;\n    }\n    async launch(options = {}) {\n        const { ignoreDefaultArgs = false, args = [], dumpio = false, executablePath = null, pipe = false, env = process.env, handleSIGINT = true, handleSIGTERM = true, handleSIGHUP = true, ignoreHTTPSErrors = false, defaultViewport = { width: 800, height: 600 }, slowMo = 0, timeout = 30000, extraPrefsFirefox = {}, waitForInitialPage = true, debuggingPort = null, } = options;\n        const firefoxArguments = [];\n        if (!ignoreDefaultArgs) {\n            firefoxArguments.push(...this.defaultArgs(options));\n        }\n        else if (Array.isArray(ignoreDefaultArgs)) {\n            firefoxArguments.push(...this.defaultArgs(options).filter((arg) => {\n                return !ignoreDefaultArgs.includes(arg);\n            }));\n        }\n        else {\n            firefoxArguments.push(...args);\n        }\n        if (!firefoxArguments.some((argument) => {\n            return argument.startsWith('--remote-debugging-');\n        })) {\n            if (pipe) {\n                (0,_common_assert_js__WEBPACK_IMPORTED_MODULE_3__.assert)(debuggingPort === null, 'Browser should be launched with either pipe or debugging port - not both.');\n            }\n            firefoxArguments.push(`--remote-debugging-port=${debuggingPort || 0}`);\n        }\n        let userDataDir;\n        let isTempUserDataDir = true;\n        // Check for the profile argument, which will always be set even\n        // with a custom directory specified via the userDataDir option.\n        const profileArgIndex = firefoxArguments.findIndex((arg) => {\n            return ['-profile', '--profile'].includes(arg);\n        });\n        if (profileArgIndex !== -1) {\n            userDataDir = firefoxArguments[profileArgIndex + 1];\n            if (!userDataDir || !fs__WEBPACK_IMPORTED_MODULE_2__.existsSync(userDataDir)) {\n                throw new Error(`Firefox profile not found at '${userDataDir}'`);\n            }\n            // When using a custom Firefox profile it needs to be populated\n            // with required preferences.\n            isTempUserDataDir = false;\n            const prefs = this.defaultPreferences(extraPrefsFirefox);\n            this.writePreferences(prefs, userDataDir);\n        }\n        else {\n            userDataDir = await this._createProfile(extraPrefsFirefox);\n            firefoxArguments.push('--profile');\n            firefoxArguments.push(userDataDir);\n        }\n        await this._updateRevision();\n        let firefoxExecutable = executablePath;\n        if (!executablePath) {\n            const { missingText, executablePath } = resolveExecutablePath(this);\n            if (missingText) {\n                throw new Error(missingText);\n            }\n            firefoxExecutable = executablePath;\n        }\n        if (!firefoxExecutable) {\n            throw new Error('firefoxExecutable is not found.');\n        }\n        const runner = new _BrowserRunner_js__WEBPACK_IMPORTED_MODULE_6__.BrowserRunner(this.product, firefoxExecutable, firefoxArguments, userDataDir, isTempUserDataDir);\n        runner.start({\n            handleSIGHUP,\n            handleSIGTERM,\n            handleSIGINT,\n            dumpio,\n            env,\n            pipe,\n        });\n        let browser;\n        try {\n            const connection = await runner.setupConnection({\n                usePipe: pipe,\n                timeout,\n                slowMo,\n                preferredRevision: this._preferredRevision,\n            });\n            browser = await _common_Browser_js__WEBPACK_IMPORTED_MODULE_5__.Browser._create(connection, [], ignoreHTTPSErrors, defaultViewport, runner.proc, runner.close.bind(runner));\n        }\n        catch (error) {\n            runner.kill();\n            throw error;\n        }\n        if (waitForInitialPage) {\n            try {\n                await browser.waitForTarget((t) => {\n                    return t.type() === 'page';\n                }, { timeout });\n            }\n            catch (error) {\n                await browser.close();\n                throw error;\n            }\n        }\n        return browser;\n    }\n    executablePath() {\n        return resolveExecutablePath(this).executablePath;\n    }\n    async _updateRevision() {\n        // replace 'latest' placeholder with actual downloaded revision\n        if (this._preferredRevision === 'latest') {\n            if (!this._projectRoot) {\n                throw new Error('_projectRoot is undefined. Unable to create a BrowserFetcher.');\n            }\n            const browserFetcher = new _BrowserFetcher_js__WEBPACK_IMPORTED_MODULE_4__.BrowserFetcher(this._projectRoot, {\n                product: this.product,\n            });\n            const localRevisions = await browserFetcher.localRevisions();\n            if (localRevisions[0]) {\n                this._preferredRevision = localRevisions[0];\n            }\n        }\n    }\n    get product() {\n        return 'firefox';\n    }\n    defaultArgs(options = {}) {\n        const { devtools = false, headless = !devtools, args = [], userDataDir = null, } = options;\n        const firefoxArguments = ['--no-remote'];\n        if (os__WEBPACK_IMPORTED_MODULE_0__.platform() === 'darwin') {\n            firefoxArguments.push('--foreground');\n        }\n        else if (os__WEBPACK_IMPORTED_MODULE_0__.platform().startsWith('win')) {\n            firefoxArguments.push('--wait-for-browser');\n        }\n        if (userDataDir) {\n            firefoxArguments.push('--profile');\n            firefoxArguments.push(userDataDir);\n        }\n        if (headless) {\n            firefoxArguments.push('--headless');\n        }\n        if (devtools) {\n            firefoxArguments.push('--devtools');\n        }\n        if (args.every((arg) => {\n            return arg.startsWith('-');\n        })) {\n            firefoxArguments.push('about:blank');\n        }\n        firefoxArguments.push(...args);\n        return firefoxArguments;\n    }\n    defaultPreferences(extraPrefs) {\n        const server = 'dummy.test';\n        const defaultPrefs = {\n            // Make sure Shield doesn't hit the network.\n            'app.normandy.api_url': '',\n            // Disable Firefox old build background check\n            'app.update.checkInstallTime': false,\n            // Disable automatically upgrading Firefox\n            'app.update.disabledForTesting': true,\n            // Increase the APZ content response timeout to 1 minute\n            'apz.content_response_timeout': 60000,\n            // Prevent various error message on the console\n            // jest-puppeteer asserts that no error message is emitted by the console\n            'browser.contentblocking.features.standard': '-tp,tpPrivate,cookieBehavior0,-cm,-fp',\n            // Enable the dump function: which sends messages to the system\n            // console\n            // https://bugzilla.mozilla.org/show_bug.cgi?id=1543115\n            'browser.dom.window.dump.enabled': true,\n            // Disable topstories\n            'browser.newtabpage.activity-stream.feeds.system.topstories': false,\n            // Always display a blank page\n            'browser.newtabpage.enabled': false,\n            // Background thumbnails in particular cause grief: and disabling\n            // thumbnails in general cannot hurt\n            'browser.pagethumbnails.capturing_disabled': true,\n            // Disable safebrowsing components.\n            'browser.safebrowsing.blockedURIs.enabled': false,\n            'browser.safebrowsing.downloads.enabled': false,\n            'browser.safebrowsing.malware.enabled': false,\n            'browser.safebrowsing.passwords.enabled': false,\n            'browser.safebrowsing.phishing.enabled': false,\n            // Disable updates to search engines.\n            'browser.search.update': false,\n            // Do not restore the last open set of tabs if the browser has crashed\n            'browser.sessionstore.resume_from_crash': false,\n            // Skip check for default browser on startup\n            'browser.shell.checkDefaultBrowser': false,\n            // Disable newtabpage\n            'browser.startup.homepage': 'about:blank',\n            // Do not redirect user when a milstone upgrade of Firefox is detected\n            'browser.startup.homepage_override.mstone': 'ignore',\n            // Start with a blank page about:blank\n            'browser.startup.page': 0,\n            // Do not allow background tabs to be zombified on Android: otherwise for\n            // tests that open additional tabs: the test harness tab itself might get\n            // unloaded\n            'browser.tabs.disableBackgroundZombification': false,\n            // Do not warn when closing all other open tabs\n            'browser.tabs.warnOnCloseOtherTabs': false,\n            // Do not warn when multiple tabs will be opened\n            'browser.tabs.warnOnOpen': false,\n            // Disable the UI tour.\n            'browser.uitour.enabled': false,\n            // Turn off search suggestions in the location bar so as not to trigger\n            // network connections.\n            'browser.urlbar.suggest.searches': false,\n            // Disable first run splash page on Windows 10\n            'browser.usedOnWindows10.introURL': '',\n            // Do not warn on quitting Firefox\n            'browser.warnOnQuit': false,\n            // Defensively disable data reporting systems\n            'datareporting.healthreport.documentServerURI': `http://${server}/dummy/healthreport/`,\n            'datareporting.healthreport.logging.consoleEnabled': false,\n            'datareporting.healthreport.service.enabled': false,\n            'datareporting.healthreport.service.firstRun': false,\n            'datareporting.healthreport.uploadEnabled': false,\n            // Do not show datareporting policy notifications which can interfere with tests\n            'datareporting.policy.dataSubmissionEnabled': false,\n            'datareporting.policy.dataSubmissionPolicyBypassNotification': true,\n            // DevTools JSONViewer sometimes fails to load dependencies with its require.js.\n            // This doesn't affect Puppeteer but spams console (Bug 1424372)\n            'devtools.jsonview.enabled': false,\n            // Disable popup-blocker\n            'dom.disable_open_during_load': false,\n            // Enable the support for File object creation in the content process\n            // Required for |Page.setFileInputFiles| protocol method.\n            'dom.file.createInChild': true,\n            // Disable the ProcessHangMonitor\n            'dom.ipc.reportProcessHangs': false,\n            // Disable slow script dialogues\n            'dom.max_chrome_script_run_time': 0,\n            'dom.max_script_run_time': 0,\n            // Only load extensions from the application and user profile\n            // AddonManager.SCOPE_PROFILE + AddonManager.SCOPE_APPLICATION\n            'extensions.autoDisableScopes': 0,\n            'extensions.enabledScopes': 5,\n            // Disable metadata caching for installed add-ons by default\n            'extensions.getAddons.cache.enabled': false,\n            // Disable installing any distribution extensions or add-ons.\n            'extensions.installDistroAddons': false,\n            // Disabled screenshots extension\n            'extensions.screenshots.disabled': true,\n            // Turn off extension updates so they do not bother tests\n            'extensions.update.enabled': false,\n            // Turn off extension updates so they do not bother tests\n            'extensions.update.notifyUser': false,\n            // Make sure opening about:addons will not hit the network\n            'extensions.webservice.discoverURL': `http://${server}/dummy/discoveryURL`,\n            // Temporarily force disable BFCache in parent (https://bit.ly/bug-1732263)\n            'fission.bfcacheInParent': false,\n            // Force all web content to use a single content process\n            'fission.webContentIsolationStrategy': 0,\n            // Allow the application to have focus even it runs in the background\n            'focusmanager.testmode': true,\n            // Disable useragent updates\n            'general.useragent.updates.enabled': false,\n            // Always use network provider for geolocation tests so we bypass the\n            // macOS dialog raised by the corelocation provider\n            'geo.provider.testing': true,\n            // Do not scan Wifi\n            'geo.wifi.scan': false,\n            // No hang monitor\n            'hangmonitor.timeout': 0,\n            // Show chrome errors and warnings in the error console\n            'javascript.options.showInConsole': true,\n            // Disable download and usage of OpenH264: and Widevine plugins\n            'media.gmp-manager.updateEnabled': false,\n            // Prevent various error message on the console\n            // jest-puppeteer asserts that no error message is emitted by the console\n            'network.cookie.cookieBehavior': 0,\n            // Disable experimental feature that is only available in Nightly\n            'network.cookie.sameSite.laxByDefault': false,\n            // Do not prompt for temporary redirects\n            'network.http.prompt-temp-redirect': false,\n            // Disable speculative connections so they are not reported as leaking\n            // when they are hanging around\n            'network.http.speculative-parallel-limit': 0,\n            // Do not automatically switch between offline and online\n            'network.manage-offline-status': false,\n            // Make sure SNTP requests do not hit the network\n            'network.sntp.pools': server,\n            // Disable Flash.\n            'plugin.state.flash': 0,\n            'privacy.trackingprotection.enabled': false,\n            // Can be removed once Firefox 89 is no longer supported\n            // https://bugzilla.mozilla.org/show_bug.cgi?id=1710839\n            'remote.enabled': true,\n            // Don't do network connections for mitm priming\n            'security.certerrors.mitm.priming.enabled': false,\n            // Local documents have access to all other local documents,\n            // including directory listings\n            'security.fileuri.strict_origin_policy': false,\n            // Do not wait for the notification button security delay\n            'security.notification_enable_delay': 0,\n            // Ensure blocklist updates do not hit the network\n            'services.settings.server': `http://${server}/dummy/blocklist/`,\n            // Do not automatically fill sign-in forms with known usernames and\n            // passwords\n            'signon.autofillForms': false,\n            // Disable password capture, so that tests that include forms are not\n            // influenced by the presence of the persistent doorhanger notification\n            'signon.rememberSignons': false,\n            // Disable first-run welcome page\n            'startup.homepage_welcome_url': 'about:blank',\n            // Disable first-run welcome page\n            'startup.homepage_welcome_url.additional': '',\n            // Disable browser animations (tabs, fullscreen, sliding alerts)\n            'toolkit.cosmeticAnimations.enabled': false,\n            // Prevent starting into safe mode after application crashes\n            'toolkit.startup.max_resumed_crashes': -1,\n        };\n        return Object.assign(defaultPrefs, extraPrefs);\n    }\n    /**\n     * Populates the user.js file with custom preferences as needed to allow\n     * Firefox's CDP support to properly function. These preferences will be\n     * automatically copied over to prefs.js during startup of Firefox. To be\n     * able to restore the original values of preferences a backup of prefs.js\n     * will be created.\n     *\n     * @param prefs - List of preferences to add.\n     * @param profilePath - Firefox profile to write the preferences to.\n     */\n    async writePreferences(prefs, profilePath) {\n        const lines = Object.entries(prefs).map(([key, value]) => {\n            return `user_pref(${JSON.stringify(key)}, ${JSON.stringify(value)});`;\n        });\n        await writeFileAsync(path__WEBPACK_IMPORTED_MODULE_1__.join(profilePath, 'user.js'), lines.join('\\n'));\n        // Create a backup of the preferences file if it already exitsts.\n        const prefsPath = path__WEBPACK_IMPORTED_MODULE_1__.join(profilePath, 'prefs.js');\n        if (fs__WEBPACK_IMPORTED_MODULE_2__.existsSync(prefsPath)) {\n            const prefsBackupPath = path__WEBPACK_IMPORTED_MODULE_1__.join(profilePath, 'prefs.js.puppeteer');\n            await copyFileAsync(prefsPath, prefsBackupPath);\n        }\n    }\n    async _createProfile(extraPrefs) {\n        const temporaryProfilePath = await mkdtempAsync(path__WEBPACK_IMPORTED_MODULE_1__.join(tmpDir(), 'puppeteer_dev_firefox_profile-'));\n        const prefs = this.defaultPreferences(extraPrefs);\n        await this.writePreferences(prefs, temporaryProfilePath);\n        return temporaryProfilePath;\n    }\n}\nfunction executablePathForChannel(channel) {\n    const platform = os__WEBPACK_IMPORTED_MODULE_0__.platform();\n    let chromePath;\n    switch (platform) {\n        case 'win32':\n            switch (channel) {\n                case 'chrome':\n                    chromePath = `${process.env['PROGRAMFILES']}\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe`;\n                    break;\n                case 'chrome-beta':\n                    chromePath = `${process.env['PROGRAMFILES']}\\\\Google\\\\Chrome Beta\\\\Application\\\\chrome.exe`;\n                    break;\n                case 'chrome-canary':\n                    chromePath = `${process.env['PROGRAMFILES']}\\\\Google\\\\Chrome SxS\\\\Application\\\\chrome.exe`;\n                    break;\n                case 'chrome-dev':\n                    chromePath = `${process.env['PROGRAMFILES']}\\\\Google\\\\Chrome Dev\\\\Application\\\\chrome.exe`;\n                    break;\n            }\n            break;\n        case 'darwin':\n            switch (channel) {\n                case 'chrome':\n                    chromePath =\n                        '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome';\n                    break;\n                case 'chrome-beta':\n                    chromePath =\n                        '/Applications/Google Chrome Beta.app/Contents/MacOS/Google Chrome Beta';\n                    break;\n                case 'chrome-canary':\n                    chromePath =\n                        '/Applications/Google Chrome Canary.app/Contents/MacOS/Google Chrome Canary';\n                    break;\n                case 'chrome-dev':\n                    chromePath =\n                        '/Applications/Google Chrome Dev.app/Contents/MacOS/Google Chrome Dev';\n                    break;\n            }\n            break;\n        case 'linux':\n            switch (channel) {\n                case 'chrome':\n                    chromePath = '/opt/google/chrome/chrome';\n                    break;\n                case 'chrome-beta':\n                    chromePath = '/opt/google/chrome-beta/chrome';\n                    break;\n                case 'chrome-dev':\n                    chromePath = '/opt/google/chrome-unstable/chrome';\n                    break;\n            }\n            break;\n    }\n    if (!chromePath) {\n        throw new Error(`Unable to detect browser executable path for '${channel}' on ${platform}.`);\n    }\n    // Check if Chrome exists and is accessible.\n    try {\n        fs__WEBPACK_IMPORTED_MODULE_2__.accessSync(chromePath);\n    }\n    catch (error) {\n        throw new Error(`Could not find Google Chrome executable for channel '${channel}' at '${chromePath}'.`);\n    }\n    return chromePath;\n}\nfunction resolveExecutablePath(launcher) {\n    const { product, _isPuppeteerCore, _projectRoot, _preferredRevision } = launcher;\n    let downloadPath;\n    // puppeteer-core doesn't take into account PUPPETEER_* env variables.\n    if (!_isPuppeteerCore) {\n        const executablePath = process.env['PUPPETEER_EXECUTABLE_PATH'] ||\n            process.env['npm_config_puppeteer_executable_path'] ||\n            process.env['npm_package_config_puppeteer_executable_path'];\n        if (executablePath) {\n            const missingText = !fs__WEBPACK_IMPORTED_MODULE_2__.existsSync(executablePath)\n                ? 'Tried to use PUPPETEER_EXECUTABLE_PATH env variable to launch browser but did not find any executable at: ' +\n                    executablePath\n                : undefined;\n            return { executablePath, missingText };\n        }\n        const ubuntuChromiumPath = '/usr/bin/chromium-browser';\n        if (product === 'chrome' &&\n            os__WEBPACK_IMPORTED_MODULE_0__.platform() !== 'darwin' &&\n            os__WEBPACK_IMPORTED_MODULE_0__.arch() === 'arm64' &&\n            fs__WEBPACK_IMPORTED_MODULE_2__.existsSync(ubuntuChromiumPath)) {\n            return { executablePath: ubuntuChromiumPath, missingText: undefined };\n        }\n        downloadPath =\n            process.env['PUPPETEER_DOWNLOAD_PATH'] ||\n                process.env['npm_config_puppeteer_download_path'] ||\n                process.env['npm_package_config_puppeteer_download_path'];\n    }\n    if (!_projectRoot) {\n        throw new Error('_projectRoot is undefined. Unable to create a BrowserFetcher.');\n    }\n    const browserFetcher = new _BrowserFetcher_js__WEBPACK_IMPORTED_MODULE_4__.BrowserFetcher(_projectRoot, {\n        product: product,\n        path: downloadPath,\n    });\n    if (!_isPuppeteerCore && product === 'chrome') {\n        const revision = process.env['PUPPETEER_CHROMIUM_REVISION'];\n        if (revision) {\n            const revisionInfo = browserFetcher.revisionInfo(revision);\n            const missingText = !revisionInfo.local\n                ? 'Tried to use PUPPETEER_CHROMIUM_REVISION env variable to launch browser but did not find executable at: ' +\n                    revisionInfo.executablePath\n                : undefined;\n            return { executablePath: revisionInfo.executablePath, missingText };\n        }\n    }\n    const revisionInfo = browserFetcher.revisionInfo(_preferredRevision);\n    const firefoxHelp = `Run \\`PUPPETEER_PRODUCT=firefox npm install\\` to download a supported Firefox browser binary.`;\n    const chromeHelp = `Run \\`npm install\\` to download the correct Chromium revision (${launcher._preferredRevision}).`;\n    const missingText = !revisionInfo.local\n        ? `Could not find expected browser (${product}) locally. ${product === 'chrome' ? chromeHelp : firefoxHelp}`\n        : undefined;\n    return { executablePath: revisionInfo.executablePath, missingText };\n}\n/**\n * @internal\n */\nfunction Launcher(projectRoot, preferredRevision, isPuppeteerCore, product) {\n    // puppeteer-core doesn't take into account PUPPETEER_* env variables.\n    if (!product && !isPuppeteerCore) {\n        product =\n            process.env['PUPPETEER_PRODUCT'] ||\n                process.env['npm_config_puppeteer_product'] ||\n                process.env['npm_package_config_puppeteer_product'];\n    }\n    switch (product) {\n        case 'firefox':\n            return new FirefoxLauncher(projectRoot, preferredRevision, isPuppeteerCore);\n        case 'chrome':\n        default:\n            if (typeof product !== 'undefined' && product !== 'chrome') {\n                /* The user gave us an incorrect product name\n                 * we'll default to launching Chrome, but log to the console\n                 * to let the user know (they've probably typoed).\n                 */\n                console.warn(`Warning: unknown product name ${product}. Falling back to chrome.`);\n            }\n            return new ChromeLauncher(projectRoot, preferredRevision, isPuppeteerCore);\n    }\n}\n//# sourceMappingURL=Launcher.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/node/Launcher.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/node/NodeWebSocketTransport.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/node/NodeWebSocketTransport.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"NodeWebSocketTransport\": () => (/* binding */ NodeWebSocketTransport)\n/* harmony export */ });\n/* harmony import */ var ws__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ws */ \"(api)/./node_modules/gogoanime-api/node_modules/ws/wrapper.mjs\");\n/* harmony import */ var _generated_version_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../generated/version.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/generated/version.js\");\n/* harmony import */ var dns__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! dns */ \"dns\");\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _NodeWebSocketTransport_ws;\n/**\n * Copyright 2018 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nclass NodeWebSocketTransport {\n    constructor(ws) {\n        _NodeWebSocketTransport_ws.set(this, void 0);\n        __classPrivateFieldSet(this, _NodeWebSocketTransport_ws, ws, \"f\");\n        __classPrivateFieldGet(this, _NodeWebSocketTransport_ws, \"f\").addEventListener('message', (event) => {\n            if (this.onmessage) {\n                this.onmessage.call(null, event.data);\n            }\n        });\n        __classPrivateFieldGet(this, _NodeWebSocketTransport_ws, \"f\").addEventListener('close', () => {\n            if (this.onclose) {\n                this.onclose.call(null);\n            }\n        });\n        // Silently ignore all errors - we don't know what to do with them.\n        __classPrivateFieldGet(this, _NodeWebSocketTransport_ws, \"f\").addEventListener('error', () => { });\n    }\n    static async create(urlString) {\n        // TODO(jrandolf): Starting in Node 17, IPv6 is favoured over IPv4 due to a change\n        // in a default option:\n        // - https://github.com/nodejs/node/issues/40537,\n        // Due to this, for Firefox, we must parse and resolve the `localhost` hostname\n        // manually with the previous behavior according to:\n        // - https://nodejs.org/api/dns.html#dnslookuphostname-options-callback\n        // because of https://bugzilla.mozilla.org/show_bug.cgi?id=1769994.\n        const url = new URL(urlString);\n        if (url.hostname === 'localhost') {\n            const { address } = await dns__WEBPACK_IMPORTED_MODULE_2__.promises.lookup(url.hostname, { verbatim: false });\n            url.hostname = address;\n        }\n        return new Promise((resolve, reject) => {\n            const ws = new ws__WEBPACK_IMPORTED_MODULE_0__[\"default\"](url, [], {\n                followRedirects: true,\n                perMessageDeflate: false,\n                maxPayload: 256 * 1024 * 1024,\n                headers: {\n                    'User-Agent': `Puppeteer ${_generated_version_js__WEBPACK_IMPORTED_MODULE_1__.packageVersion}`,\n                },\n            });\n            ws.addEventListener('open', () => {\n                return resolve(new NodeWebSocketTransport(ws));\n            });\n            ws.addEventListener('error', reject);\n        });\n    }\n    send(message) {\n        __classPrivateFieldGet(this, _NodeWebSocketTransport_ws, \"f\").send(message);\n    }\n    close() {\n        __classPrivateFieldGet(this, _NodeWebSocketTransport_ws, \"f\").close();\n    }\n}\n_NodeWebSocketTransport_ws = new WeakMap();\n//# sourceMappingURL=NodeWebSocketTransport.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvZ29nb2FuaW1lLWFwaS9ub2RlX21vZHVsZXMvcHVwcGV0ZWVyL2xpYi9lc20vcHVwcGV0ZWVyL25vZGUvTm9kZVdlYlNvY2tldFRyYW5zcG9ydC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsOEJBQThCLFNBQUksSUFBSSxTQUFJO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsU0FBSSxJQUFJLFNBQUk7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUMrQjtBQUMwQjtBQUNuQjtBQUMvQjtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EseUdBQXlHO0FBQ3pHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsVUFBVSxRQUFRLGdEQUFVLGlCQUFpQixpQkFBaUI7QUFDbEY7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLDBDQUFhO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLGlFQUFjLENBQUM7QUFDOUQsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW5pbWVmbGl4Ly4vbm9kZV9tb2R1bGVzL2dvZ29hbmltZS1hcGkvbm9kZV9tb2R1bGVzL3B1cHBldGVlci9saWIvZXNtL3B1cHBldGVlci9ub2RlL05vZGVXZWJTb2NrZXRUcmFuc3BvcnQuanM/NGUzOSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19jbGFzc1ByaXZhdGVGaWVsZFNldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZFNldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJtXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIChraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IGYudmFsdWUgPSB2YWx1ZSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpKSwgdmFsdWU7XG59O1xudmFyIF9fY2xhc3NQcml2YXRlRmllbGRHZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRHZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcbn07XG52YXIgX05vZGVXZWJTb2NrZXRUcmFuc3BvcnRfd3M7XG4vKipcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgTm9kZVdlYlNvY2tldCBmcm9tICd3cyc7XG5pbXBvcnQgeyBwYWNrYWdlVmVyc2lvbiB9IGZyb20gJy4uL2dlbmVyYXRlZC92ZXJzaW9uLmpzJztcbmltcG9ydCB7IHByb21pc2VzIGFzIGRucyB9IGZyb20gJ2Rucyc7XG5leHBvcnQgY2xhc3MgTm9kZVdlYlNvY2tldFRyYW5zcG9ydCB7XG4gICAgY29uc3RydWN0b3Iod3MpIHtcbiAgICAgICAgX05vZGVXZWJTb2NrZXRUcmFuc3BvcnRfd3Muc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX05vZGVXZWJTb2NrZXRUcmFuc3BvcnRfd3MsIHdzLCBcImZcIik7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX05vZGVXZWJTb2NrZXRUcmFuc3BvcnRfd3MsIFwiZlwiKS5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5vbm1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9ubWVzc2FnZS5jYWxsKG51bGwsIGV2ZW50LmRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfTm9kZVdlYlNvY2tldFRyYW5zcG9ydF93cywgXCJmXCIpLmFkZEV2ZW50TGlzdGVuZXIoJ2Nsb3NlJywgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMub25jbG9zZSkge1xuICAgICAgICAgICAgICAgIHRoaXMub25jbG9zZS5jYWxsKG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gU2lsZW50bHkgaWdub3JlIGFsbCBlcnJvcnMgLSB3ZSBkb24ndCBrbm93IHdoYXQgdG8gZG8gd2l0aCB0aGVtLlxuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Ob2RlV2ViU29ja2V0VHJhbnNwb3J0X3dzLCBcImZcIikuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCAoKSA9PiB7IH0pO1xuICAgIH1cbiAgICBzdGF0aWMgYXN5bmMgY3JlYXRlKHVybFN0cmluZykge1xuICAgICAgICAvLyBUT0RPKGpyYW5kb2xmKTogU3RhcnRpbmcgaW4gTm9kZSAxNywgSVB2NiBpcyBmYXZvdXJlZCBvdmVyIElQdjQgZHVlIHRvIGEgY2hhbmdlXG4gICAgICAgIC8vIGluIGEgZGVmYXVsdCBvcHRpb246XG4gICAgICAgIC8vIC0gaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2lzc3Vlcy80MDUzNyxcbiAgICAgICAgLy8gRHVlIHRvIHRoaXMsIGZvciBGaXJlZm94LCB3ZSBtdXN0IHBhcnNlIGFuZCByZXNvbHZlIHRoZSBgbG9jYWxob3N0YCBob3N0bmFtZVxuICAgICAgICAvLyBtYW51YWxseSB3aXRoIHRoZSBwcmV2aW91cyBiZWhhdmlvciBhY2NvcmRpbmcgdG86XG4gICAgICAgIC8vIC0gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9kbnMuaHRtbCNkbnNsb29rdXBob3N0bmFtZS1vcHRpb25zLWNhbGxiYWNrXG4gICAgICAgIC8vIGJlY2F1c2Ugb2YgaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTc2OTk5NC5cbiAgICAgICAgY29uc3QgdXJsID0gbmV3IFVSTCh1cmxTdHJpbmcpO1xuICAgICAgICBpZiAodXJsLmhvc3RuYW1lID09PSAnbG9jYWxob3N0Jykge1xuICAgICAgICAgICAgY29uc3QgeyBhZGRyZXNzIH0gPSBhd2FpdCBkbnMubG9va3VwKHVybC5ob3N0bmFtZSwgeyB2ZXJiYXRpbTogZmFsc2UgfSk7XG4gICAgICAgICAgICB1cmwuaG9zdG5hbWUgPSBhZGRyZXNzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB3cyA9IG5ldyBOb2RlV2ViU29ja2V0KHVybCwgW10sIHtcbiAgICAgICAgICAgICAgICBmb2xsb3dSZWRpcmVjdHM6IHRydWUsXG4gICAgICAgICAgICAgICAgcGVyTWVzc2FnZURlZmxhdGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG1heFBheWxvYWQ6IDI1NiAqIDEwMjQgKiAxMDI0LFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgJ1VzZXItQWdlbnQnOiBgUHVwcGV0ZWVyICR7cGFja2FnZVZlcnNpb259YCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB3cy5hZGRFdmVudExpc3RlbmVyKCdvcGVuJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKG5ldyBOb2RlV2ViU29ja2V0VHJhbnNwb3J0KHdzKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHdzLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHNlbmQobWVzc2FnZSkge1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9Ob2RlV2ViU29ja2V0VHJhbnNwb3J0X3dzLCBcImZcIikuc2VuZChtZXNzYWdlKTtcbiAgICB9XG4gICAgY2xvc2UoKSB7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX05vZGVXZWJTb2NrZXRUcmFuc3BvcnRfd3MsIFwiZlwiKS5jbG9zZSgpO1xuICAgIH1cbn1cbl9Ob2RlV2ViU29ja2V0VHJhbnNwb3J0X3dzID0gbmV3IFdlYWtNYXAoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU5vZGVXZWJTb2NrZXRUcmFuc3BvcnQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/node/NodeWebSocketTransport.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/node/PipeTransport.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/node/PipeTransport.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PipeTransport\": () => (/* binding */ PipeTransport)\n/* harmony export */ });\n/* harmony import */ var _common_assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/assert.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/assert.js\");\n/* harmony import */ var _common_util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/util.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/util.js\");\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _PipeTransport_instances, _PipeTransport_pipeWrite, _PipeTransport_eventListeners, _PipeTransport_isClosed, _PipeTransport_pendingMessage, _PipeTransport_dispatch;\n/**\n * Copyright 2018 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nclass PipeTransport {\n    constructor(pipeWrite, pipeRead) {\n        _PipeTransport_instances.add(this);\n        _PipeTransport_pipeWrite.set(this, void 0);\n        _PipeTransport_eventListeners.set(this, void 0);\n        _PipeTransport_isClosed.set(this, false);\n        _PipeTransport_pendingMessage.set(this, '');\n        __classPrivateFieldSet(this, _PipeTransport_pipeWrite, pipeWrite, \"f\");\n        __classPrivateFieldSet(this, _PipeTransport_eventListeners, [\n            (0,_common_util_js__WEBPACK_IMPORTED_MODULE_1__.addEventListener)(pipeRead, 'data', (buffer) => {\n                return __classPrivateFieldGet(this, _PipeTransport_instances, \"m\", _PipeTransport_dispatch).call(this, buffer);\n            }),\n            (0,_common_util_js__WEBPACK_IMPORTED_MODULE_1__.addEventListener)(pipeRead, 'close', () => {\n                if (this.onclose) {\n                    this.onclose.call(null);\n                }\n            }),\n            (0,_common_util_js__WEBPACK_IMPORTED_MODULE_1__.addEventListener)(pipeRead, 'error', _common_util_js__WEBPACK_IMPORTED_MODULE_1__.debugError),\n            (0,_common_util_js__WEBPACK_IMPORTED_MODULE_1__.addEventListener)(pipeWrite, 'error', _common_util_js__WEBPACK_IMPORTED_MODULE_1__.debugError),\n        ], \"f\");\n    }\n    send(message) {\n        (0,_common_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(!__classPrivateFieldGet(this, _PipeTransport_isClosed, \"f\"), '`PipeTransport` is closed.');\n        __classPrivateFieldGet(this, _PipeTransport_pipeWrite, \"f\").write(message);\n        __classPrivateFieldGet(this, _PipeTransport_pipeWrite, \"f\").write('\\0');\n    }\n    close() {\n        __classPrivateFieldSet(this, _PipeTransport_isClosed, true, \"f\");\n        (0,_common_util_js__WEBPACK_IMPORTED_MODULE_1__.removeEventListeners)(__classPrivateFieldGet(this, _PipeTransport_eventListeners, \"f\"));\n    }\n}\n_PipeTransport_pipeWrite = new WeakMap(), _PipeTransport_eventListeners = new WeakMap(), _PipeTransport_isClosed = new WeakMap(), _PipeTransport_pendingMessage = new WeakMap(), _PipeTransport_instances = new WeakSet(), _PipeTransport_dispatch = function _PipeTransport_dispatch(buffer) {\n    (0,_common_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(!__classPrivateFieldGet(this, _PipeTransport_isClosed, \"f\"), '`PipeTransport` is closed.');\n    let end = buffer.indexOf('\\0');\n    if (end === -1) {\n        __classPrivateFieldSet(this, _PipeTransport_pendingMessage, __classPrivateFieldGet(this, _PipeTransport_pendingMessage, \"f\") + buffer.toString(), \"f\");\n        return;\n    }\n    const message = __classPrivateFieldGet(this, _PipeTransport_pendingMessage, \"f\") + buffer.toString(undefined, 0, end);\n    if (this.onmessage) {\n        this.onmessage.call(null, message);\n    }\n    let start = end + 1;\n    end = buffer.indexOf('\\0', start);\n    while (end !== -1) {\n        if (this.onmessage) {\n            this.onmessage.call(null, buffer.toString(undefined, start, end));\n        }\n        start = end + 1;\n        end = buffer.indexOf('\\0', start);\n    }\n    __classPrivateFieldSet(this, _PipeTransport_pendingMessage, buffer.toString(undefined, start), \"f\");\n};\n//# sourceMappingURL=PipeTransport.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvZ29nb2FuaW1lLWFwaS9ub2RlX21vZHVsZXMvcHVwcGV0ZWVyL2xpYi9lc20vcHVwcGV0ZWVyL25vZGUvUGlwZVRyYW5zcG9ydC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSw4QkFBOEIsU0FBSSxJQUFJLFNBQUk7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixTQUFJLElBQUksU0FBSTtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQzZDO0FBQzJDO0FBQ2pGO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksaUVBQWdCO0FBQzVCO0FBQ0EsYUFBYTtBQUNiLFlBQVksaUVBQWdCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixZQUFZLGlFQUFnQixvQkFBb0IsdURBQVU7QUFDMUQsWUFBWSxpRUFBZ0IscUJBQXFCLHVEQUFVO0FBQzNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEseURBQU07QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxxRUFBb0I7QUFDNUI7QUFDQTtBQUNBO0FBQ0EsSUFBSSx5REFBTTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FuaW1lZmxpeC8uL25vZGVfbW9kdWxlcy9nb2dvYW5pbWUtYXBpL25vZGVfbW9kdWxlcy9wdXBwZXRlZXIvbGliL2VzbS9wdXBwZXRlZXIvbm9kZS9QaXBlVHJhbnNwb3J0LmpzPzAzOTUiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fY2xhc3NQcml2YXRlRmllbGRTZXQgPSAodGhpcyAmJiB0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRTZXQpIHx8IGZ1bmN0aW9uIChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xufTtcbnZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XG59O1xudmFyIF9QaXBlVHJhbnNwb3J0X2luc3RhbmNlcywgX1BpcGVUcmFuc3BvcnRfcGlwZVdyaXRlLCBfUGlwZVRyYW5zcG9ydF9ldmVudExpc3RlbmVycywgX1BpcGVUcmFuc3BvcnRfaXNDbG9zZWQsIF9QaXBlVHJhbnNwb3J0X3BlbmRpbmdNZXNzYWdlLCBfUGlwZVRyYW5zcG9ydF9kaXNwYXRjaDtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IGFzc2VydCB9IGZyb20gJy4uL2NvbW1vbi9hc3NlcnQuanMnO1xuaW1wb3J0IHsgYWRkRXZlbnRMaXN0ZW5lciwgZGVidWdFcnJvciwgcmVtb3ZlRXZlbnRMaXN0ZW5lcnMsIH0gZnJvbSAnLi4vY29tbW9uL3V0aWwuanMnO1xuZXhwb3J0IGNsYXNzIFBpcGVUcmFuc3BvcnQge1xuICAgIGNvbnN0cnVjdG9yKHBpcGVXcml0ZSwgcGlwZVJlYWQpIHtcbiAgICAgICAgX1BpcGVUcmFuc3BvcnRfaW5zdGFuY2VzLmFkZCh0aGlzKTtcbiAgICAgICAgX1BpcGVUcmFuc3BvcnRfcGlwZVdyaXRlLnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBfUGlwZVRyYW5zcG9ydF9ldmVudExpc3RlbmVycy5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX1BpcGVUcmFuc3BvcnRfaXNDbG9zZWQuc2V0KHRoaXMsIGZhbHNlKTtcbiAgICAgICAgX1BpcGVUcmFuc3BvcnRfcGVuZGluZ01lc3NhZ2Uuc2V0KHRoaXMsICcnKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfUGlwZVRyYW5zcG9ydF9waXBlV3JpdGUsIHBpcGVXcml0ZSwgXCJmXCIpO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9QaXBlVHJhbnNwb3J0X2V2ZW50TGlzdGVuZXJzLCBbXG4gICAgICAgICAgICBhZGRFdmVudExpc3RlbmVyKHBpcGVSZWFkLCAnZGF0YScsIChidWZmZXIpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUGlwZVRyYW5zcG9ydF9pbnN0YW5jZXMsIFwibVwiLCBfUGlwZVRyYW5zcG9ydF9kaXNwYXRjaCkuY2FsbCh0aGlzLCBidWZmZXIpO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBhZGRFdmVudExpc3RlbmVyKHBpcGVSZWFkLCAnY2xvc2UnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub25jbG9zZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uY2xvc2UuY2FsbChudWxsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXIocGlwZVJlYWQsICdlcnJvcicsIGRlYnVnRXJyb3IpLFxuICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihwaXBlV3JpdGUsICdlcnJvcicsIGRlYnVnRXJyb3IpLFxuICAgICAgICBdLCBcImZcIik7XG4gICAgfVxuICAgIHNlbmQobWVzc2FnZSkge1xuICAgICAgICBhc3NlcnQoIV9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1BpcGVUcmFuc3BvcnRfaXNDbG9zZWQsIFwiZlwiKSwgJ2BQaXBlVHJhbnNwb3J0YCBpcyBjbG9zZWQuJyk7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1BpcGVUcmFuc3BvcnRfcGlwZVdyaXRlLCBcImZcIikud3JpdGUobWVzc2FnZSk7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1BpcGVUcmFuc3BvcnRfcGlwZVdyaXRlLCBcImZcIikud3JpdGUoJ1xcMCcpO1xuICAgIH1cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfUGlwZVRyYW5zcG9ydF9pc0Nsb3NlZCwgdHJ1ZSwgXCJmXCIpO1xuICAgICAgICByZW1vdmVFdmVudExpc3RlbmVycyhfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9QaXBlVHJhbnNwb3J0X2V2ZW50TGlzdGVuZXJzLCBcImZcIikpO1xuICAgIH1cbn1cbl9QaXBlVHJhbnNwb3J0X3BpcGVXcml0ZSA9IG5ldyBXZWFrTWFwKCksIF9QaXBlVHJhbnNwb3J0X2V2ZW50TGlzdGVuZXJzID0gbmV3IFdlYWtNYXAoKSwgX1BpcGVUcmFuc3BvcnRfaXNDbG9zZWQgPSBuZXcgV2Vha01hcCgpLCBfUGlwZVRyYW5zcG9ydF9wZW5kaW5nTWVzc2FnZSA9IG5ldyBXZWFrTWFwKCksIF9QaXBlVHJhbnNwb3J0X2luc3RhbmNlcyA9IG5ldyBXZWFrU2V0KCksIF9QaXBlVHJhbnNwb3J0X2Rpc3BhdGNoID0gZnVuY3Rpb24gX1BpcGVUcmFuc3BvcnRfZGlzcGF0Y2goYnVmZmVyKSB7XG4gICAgYXNzZXJ0KCFfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9QaXBlVHJhbnNwb3J0X2lzQ2xvc2VkLCBcImZcIiksICdgUGlwZVRyYW5zcG9ydGAgaXMgY2xvc2VkLicpO1xuICAgIGxldCBlbmQgPSBidWZmZXIuaW5kZXhPZignXFwwJyk7XG4gICAgaWYgKGVuZCA9PT0gLTEpIHtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfUGlwZVRyYW5zcG9ydF9wZW5kaW5nTWVzc2FnZSwgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUGlwZVRyYW5zcG9ydF9wZW5kaW5nTWVzc2FnZSwgXCJmXCIpICsgYnVmZmVyLnRvU3RyaW5nKCksIFwiZlwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBtZXNzYWdlID0gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfUGlwZVRyYW5zcG9ydF9wZW5kaW5nTWVzc2FnZSwgXCJmXCIpICsgYnVmZmVyLnRvU3RyaW5nKHVuZGVmaW5lZCwgMCwgZW5kKTtcbiAgICBpZiAodGhpcy5vbm1lc3NhZ2UpIHtcbiAgICAgICAgdGhpcy5vbm1lc3NhZ2UuY2FsbChudWxsLCBtZXNzYWdlKTtcbiAgICB9XG4gICAgbGV0IHN0YXJ0ID0gZW5kICsgMTtcbiAgICBlbmQgPSBidWZmZXIuaW5kZXhPZignXFwwJywgc3RhcnQpO1xuICAgIHdoaWxlIChlbmQgIT09IC0xKSB7XG4gICAgICAgIGlmICh0aGlzLm9ubWVzc2FnZSkge1xuICAgICAgICAgICAgdGhpcy5vbm1lc3NhZ2UuY2FsbChudWxsLCBidWZmZXIudG9TdHJpbmcodW5kZWZpbmVkLCBzdGFydCwgZW5kKSk7XG4gICAgICAgIH1cbiAgICAgICAgc3RhcnQgPSBlbmQgKyAxO1xuICAgICAgICBlbmQgPSBidWZmZXIuaW5kZXhPZignXFwwJywgc3RhcnQpO1xuICAgIH1cbiAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9QaXBlVHJhbnNwb3J0X3BlbmRpbmdNZXNzYWdlLCBidWZmZXIudG9TdHJpbmcodW5kZWZpbmVkLCBzdGFydCksIFwiZlwiKTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1QaXBlVHJhbnNwb3J0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/node/PipeTransport.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/node/Puppeteer.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/node/Puppeteer.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PuppeteerNode\": () => (/* binding */ PuppeteerNode)\n/* harmony export */ });\n/* harmony import */ var _common_Puppeteer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/Puppeteer.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/common/Puppeteer.js\");\n/* harmony import */ var _BrowserFetcher_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BrowserFetcher.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/node/BrowserFetcher.js\");\n/* harmony import */ var _Launcher_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Launcher.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/node/Launcher.js\");\n/* harmony import */ var _revisions_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../revisions.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/revisions.js\");\n/**\n * Copyright 2020 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _PuppeteerNode_lazyLauncher, _PuppeteerNode_projectRoot, _PuppeteerNode_productName;\n\n\n\n\n/**\n * Extends the main {@link Puppeteer} class with Node specific behaviour for fetching and\n * downloading browsers.\n *\n * If you're using Puppeteer in a Node environment, this is the class you'll get\n * when you run `require('puppeteer')` (or the equivalent ES `import`).\n *\n * @remarks\n *\n * The most common method to use is {@link PuppeteerNode.launch | launch}, which\n * is used to launch and connect to a new browser instance.\n *\n * See {@link Puppeteer | the main Puppeteer class} for methods common to all\n * environments, such as {@link Puppeteer.connect}.\n *\n * @example\n * The following is a typical example of using Puppeteer to drive automation:\n * ```js\n * const puppeteer = require('puppeteer');\n *\n * (async () => {\n *   const browser = await puppeteer.launch();\n *   const page = await browser.newPage();\n *   await page.goto('https://www.google.com');\n *   // other actions...\n *   await browser.close();\n * })();\n * ```\n *\n * Once you have created a `page` you have access to a large API to interact\n * with the page, navigate, or find certain elements in that page.\n * The {@link Page | `page` documentation} lists all the available methods.\n *\n * @public\n */\nclass PuppeteerNode extends _common_Puppeteer_js__WEBPACK_IMPORTED_MODULE_0__.Puppeteer {\n    /**\n     * @internal\n     */\n    constructor(settings) {\n        const { projectRoot, preferredRevision, productName, ...commonSettings } = settings;\n        super(commonSettings);\n        _PuppeteerNode_lazyLauncher.set(this, void 0);\n        _PuppeteerNode_projectRoot.set(this, void 0);\n        _PuppeteerNode_productName.set(this, void 0);\n        __classPrivateFieldSet(this, _PuppeteerNode_projectRoot, projectRoot, \"f\");\n        __classPrivateFieldSet(this, _PuppeteerNode_productName, productName, \"f\");\n        this._preferredRevision = preferredRevision;\n        this.connect = this.connect.bind(this);\n        this.launch = this.launch.bind(this);\n        this.executablePath = this.executablePath.bind(this);\n        this.defaultArgs = this.defaultArgs.bind(this);\n        this.createBrowserFetcher = this.createBrowserFetcher.bind(this);\n    }\n    /**\n     * This method attaches Puppeteer to an existing browser instance.\n     *\n     * @remarks\n     *\n     * @param options - Set of configurable options to set on the browser.\n     * @returns Promise which resolves to browser instance.\n     */\n    connect(options) {\n        if (options.product) {\n            this._productName = options.product;\n        }\n        return super.connect(options);\n    }\n    /**\n     * @internal\n     */\n    get _productName() {\n        return __classPrivateFieldGet(this, _PuppeteerNode_productName, \"f\");\n    }\n    /**\n     * @internal\n     */\n    set _productName(name) {\n        if (__classPrivateFieldGet(this, _PuppeteerNode_productName, \"f\") !== name) {\n            this._changedProduct = true;\n        }\n        __classPrivateFieldSet(this, _PuppeteerNode_productName, name, \"f\");\n    }\n    /**\n     * Launches puppeteer and launches a browser instance with given arguments\n     * and options when specified.\n     *\n     * @remarks\n     *\n     * @example\n     * You can use `ignoreDefaultArgs` to filter out `--mute-audio` from default arguments:\n     * ```js\n     * const browser = await puppeteer.launch({\n     *   ignoreDefaultArgs: ['--mute-audio']\n     * });\n     * ```\n     *\n     * **NOTE** Puppeteer can also be used to control the Chrome browser,\n     * but it works best with the version of Chromium it is bundled with.\n     * There is no guarantee it will work with any other version.\n     * Use `executablePath` option with extreme caution.\n     * If Google Chrome (rather than Chromium) is preferred, a {@link https://www.google.com/chrome/browser/canary.html | Chrome Canary} or {@link https://www.chromium.org/getting-involved/dev-channel | Dev Channel} build is suggested.\n     * In `puppeteer.launch([options])`, any mention of Chromium also applies to Chrome.\n     * See {@link https://www.howtogeek.com/202825/what%E2%80%99s-the-difference-between-chromium-and-chrome/ | this article} for a description of the differences between Chromium and Chrome. {@link https://chromium.googlesource.com/chromium/src/+/lkgr/docs/chromium_browser_vs_google_chrome.md | This article} describes some differences for Linux users.\n     *\n     * @param options - Set of configurable options to set on the browser.\n     * @returns Promise which resolves to browser instance.\n     */\n    launch(options = {}) {\n        if (options.product) {\n            this._productName = options.product;\n        }\n        return this._launcher.launch(options);\n    }\n    /**\n     * @remarks\n     *\n     * **NOTE** `puppeteer.executablePath()` is affected by the `PUPPETEER_EXECUTABLE_PATH`\n     * and `PUPPETEER_CHROMIUM_REVISION` environment variables.\n     *\n     * @returns A path where Puppeteer expects to find the bundled browser.\n     * The browser binary might not be there if the download was skipped with\n     * the `PUPPETEER_SKIP_DOWNLOAD` environment variable.\n     */\n    executablePath(channel) {\n        return this._launcher.executablePath(channel);\n    }\n    /**\n     * @internal\n     */\n    get _launcher() {\n        if (!__classPrivateFieldGet(this, _PuppeteerNode_lazyLauncher, \"f\") ||\n            __classPrivateFieldGet(this, _PuppeteerNode_lazyLauncher, \"f\").product !== this._productName ||\n            this._changedProduct) {\n            switch (this._productName) {\n                case 'firefox':\n                    this._preferredRevision = _revisions_js__WEBPACK_IMPORTED_MODULE_3__.PUPPETEER_REVISIONS.firefox;\n                    break;\n                case 'chrome':\n                default:\n                    this._preferredRevision = _revisions_js__WEBPACK_IMPORTED_MODULE_3__.PUPPETEER_REVISIONS.chromium;\n            }\n            this._changedProduct = false;\n            __classPrivateFieldSet(this, _PuppeteerNode_lazyLauncher, (0,_Launcher_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(__classPrivateFieldGet(this, _PuppeteerNode_projectRoot, \"f\"), this._preferredRevision, this._isPuppeteerCore, this._productName), \"f\");\n        }\n        return __classPrivateFieldGet(this, _PuppeteerNode_lazyLauncher, \"f\");\n    }\n    /**\n     * The name of the browser that is under automation (`\"chrome\"` or `\"firefox\"`)\n     *\n     * @remarks\n     * The product is set by the `PUPPETEER_PRODUCT` environment variable or the `product`\n     * option in `puppeteer.launch([options])` and defaults to `chrome`.\n     * Firefox support is experimental.\n     */\n    get product() {\n        return this._launcher.product;\n    }\n    /**\n     *\n     * @param options - Set of configurable options to set on the browser.\n     * @returns The default flags that Chromium will be launched with.\n     */\n    defaultArgs(options = {}) {\n        return this._launcher.defaultArgs(options);\n    }\n    /**\n     * @param options - Set of configurable options to specify the settings\n     * of the BrowserFetcher.\n     * @returns A new BrowserFetcher instance.\n     */\n    createBrowserFetcher(options) {\n        if (!__classPrivateFieldGet(this, _PuppeteerNode_projectRoot, \"f\")) {\n            throw new Error('_projectRoot is undefined. Unable to create a BrowserFetcher.');\n        }\n        return new _BrowserFetcher_js__WEBPACK_IMPORTED_MODULE_1__.BrowserFetcher(__classPrivateFieldGet(this, _PuppeteerNode_projectRoot, \"f\"), options);\n    }\n}\n_PuppeteerNode_lazyLauncher = new WeakMap(), _PuppeteerNode_projectRoot = new WeakMap(), _PuppeteerNode_productName = new WeakMap();\n//# sourceMappingURL=Puppeteer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/node/Puppeteer.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/puppeteer.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/puppeteer.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"clearCustomQueryHandlers\": () => (/* binding */ clearCustomQueryHandlers),\n/* harmony export */   \"connect\": () => (/* binding */ connect),\n/* harmony export */   \"createBrowserFetcher\": () => (/* binding */ createBrowserFetcher),\n/* harmony export */   \"customQueryHandlerNames\": () => (/* binding */ customQueryHandlerNames),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   \"defaultArgs\": () => (/* binding */ defaultArgs),\n/* harmony export */   \"devices\": () => (/* binding */ devices),\n/* harmony export */   \"errors\": () => (/* binding */ errors),\n/* harmony export */   \"executablePath\": () => (/* binding */ executablePath),\n/* harmony export */   \"launch\": () => (/* binding */ launch),\n/* harmony export */   \"networkConditions\": () => (/* binding */ networkConditions),\n/* harmony export */   \"registerCustomQueryHandler\": () => (/* binding */ registerCustomQueryHandler),\n/* harmony export */   \"unregisterCustomQueryHandler\": () => (/* binding */ unregisterCustomQueryHandler)\n/* harmony export */ });\n/* harmony import */ var _initializePuppeteer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./initializePuppeteer.js */ \"(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/initializePuppeteer.js\");\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst puppeteer = (0,_initializePuppeteer_js__WEBPACK_IMPORTED_MODULE_0__.initializePuppeteer)('puppeteer');\nconst { clearCustomQueryHandlers, connect, createBrowserFetcher, customQueryHandlerNames, defaultArgs, devices, errors, executablePath, launch, networkConditions, registerCustomQueryHandler, unregisterCustomQueryHandler, } = puppeteer;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (puppeteer);\n//# sourceMappingURL=puppeteer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvZ29nb2FuaW1lLWFwaS9ub2RlX21vZHVsZXMvcHVwcGV0ZWVyL2xpYi9lc20vcHVwcGV0ZWVyL3B1cHBldGVlci5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUMrRDtBQUMvRCxrQkFBa0IsNEVBQW1CO0FBQzlCLFFBQVEsdU5BQXVOO0FBQ3RPLGlFQUFlLFNBQVMsRUFBQztBQUN6QiIsInNvdXJjZXMiOlsid2VicGFjazovL2FuaW1lZmxpeC8uL25vZGVfbW9kdWxlcy9nb2dvYW5pbWUtYXBpL25vZGVfbW9kdWxlcy9wdXBwZXRlZXIvbGliL2VzbS9wdXBwZXRlZXIvcHVwcGV0ZWVyLmpzPzlkMzciXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgaW5pdGlhbGl6ZVB1cHBldGVlciB9IGZyb20gJy4vaW5pdGlhbGl6ZVB1cHBldGVlci5qcyc7XG5jb25zdCBwdXBwZXRlZXIgPSBpbml0aWFsaXplUHVwcGV0ZWVyKCdwdXBwZXRlZXInKTtcbmV4cG9ydCBjb25zdCB7IGNsZWFyQ3VzdG9tUXVlcnlIYW5kbGVycywgY29ubmVjdCwgY3JlYXRlQnJvd3NlckZldGNoZXIsIGN1c3RvbVF1ZXJ5SGFuZGxlck5hbWVzLCBkZWZhdWx0QXJncywgZGV2aWNlcywgZXJyb3JzLCBleGVjdXRhYmxlUGF0aCwgbGF1bmNoLCBuZXR3b3JrQ29uZGl0aW9ucywgcmVnaXN0ZXJDdXN0b21RdWVyeUhhbmRsZXIsIHVucmVnaXN0ZXJDdXN0b21RdWVyeUhhbmRsZXIsIH0gPSBwdXBwZXRlZXI7XG5leHBvcnQgZGVmYXVsdCBwdXBwZXRlZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wdXBwZXRlZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/puppeteer.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/revisions.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/revisions.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PUPPETEER_REVISIONS\": () => (/* binding */ PUPPETEER_REVISIONS)\n/* harmony export */ });\n/**\n * Copyright 2020 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst PUPPETEER_REVISIONS = {\n    chromium: '1002410',\n    firefox: 'latest',\n};\n//# sourceMappingURL=revisions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvZ29nb2FuaW1lLWFwaS9ub2RlX21vZHVsZXMvcHVwcGV0ZWVyL2xpYi9lc20vcHVwcGV0ZWVyL3JldmlzaW9ucy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FuaW1lZmxpeC8uL25vZGVfbW9kdWxlcy9nb2dvYW5pbWUtYXBpL25vZGVfbW9kdWxlcy9wdXBwZXRlZXIvbGliL2VzbS9wdXBwZXRlZXIvcmV2aXNpb25zLmpzPzg3NDQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuZXhwb3J0IGNvbnN0IFBVUFBFVEVFUl9SRVZJU0lPTlMgPSB7XG4gICAgY2hyb21pdW06ICcxMDAyNDEwJyxcbiAgICBmaXJlZm94OiAnbGF0ZXN0Jyxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXZpc2lvbnMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/puppeteer/revisions.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/vendor/mitt/src/index.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/vendor/mitt/src/index.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ mitt)\n/* harmony export */ });\n/**\n * Mitt: Tiny (~200b) functional event emitter / pubsub.\n * @name mitt\n * @returns {Mitt}\n */\nfunction mitt(all) {\n    all = all || new Map();\n    return {\n        /**\n         * A Map of event names to registered handler functions.\n         */\n        all: all,\n        /**\n         * Register an event handler for the given type.\n         * @param {string|symbol} type Type of event to listen for, or `\"*\"` for all events\n         * @param {Function} handler Function to call in response to given event\n         * @memberOf mitt\n         */\n        on: function (type, handler) {\n            var handlers = all.get(type);\n            var added = handlers && handlers.push(handler);\n            if (!added) {\n                all.set(type, [handler]);\n            }\n        },\n        /**\n         * Remove an event handler for the given type.\n         * @param {string|symbol} type Type of event to unregister `handler` from, or `\"*\"`\n         * @param {Function} handler Handler function to remove\n         * @memberOf mitt\n         */\n        off: function (type, handler) {\n            var handlers = all.get(type);\n            if (handlers) {\n                handlers.splice(handlers.indexOf(handler) >>> 0, 1);\n            }\n        },\n        /**\n         * Invoke all handlers for the given type.\n         * If present, `\"*\"` handlers are invoked after type-matched handlers.\n         *\n         * Note: Manually firing \"*\" handlers is not supported.\n         *\n         * @param {string|symbol} type The event type to invoke\n         * @param {Any} [evt] Any value (object is recommended and powerful), passed to each handler\n         * @memberOf mitt\n         */\n        emit: function (type, evt) {\n            (all.get(type) || []).slice().map(function (handler) { handler(evt); });\n            (all.get('*') || []).slice().map(function (handler) { handler(type, evt); });\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvZ29nb2FuaW1lLWFwaS9ub2RlX21vZHVsZXMvcHVwcGV0ZWVyL2xpYi9lc20vdmVuZG9yL21pdHQvc3JjL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsZUFBZTtBQUNsQyxtQkFBbUIsVUFBVTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxtQkFBbUIsZUFBZTtBQUNsQyxtQkFBbUIsVUFBVTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsZUFBZTtBQUNsQyxtQkFBbUIsS0FBSztBQUN4QjtBQUNBO0FBQ0E7QUFDQSxtRUFBbUUsZUFBZTtBQUNsRixrRUFBa0UscUJBQXFCO0FBQ3ZGO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FuaW1lZmxpeC8uL25vZGVfbW9kdWxlcy9nb2dvYW5pbWUtYXBpL25vZGVfbW9kdWxlcy9wdXBwZXRlZXIvbGliL2VzbS92ZW5kb3IvbWl0dC9zcmMvaW5kZXguanM/YTQwNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE1pdHQ6IFRpbnkgKH4yMDBiKSBmdW5jdGlvbmFsIGV2ZW50IGVtaXR0ZXIgLyBwdWJzdWIuXG4gKiBAbmFtZSBtaXR0XG4gKiBAcmV0dXJucyB7TWl0dH1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWl0dChhbGwpIHtcbiAgICBhbGwgPSBhbGwgfHwgbmV3IE1hcCgpO1xuICAgIHJldHVybiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIE1hcCBvZiBldmVudCBuYW1lcyB0byByZWdpc3RlcmVkIGhhbmRsZXIgZnVuY3Rpb25zLlxuICAgICAgICAgKi9cbiAgICAgICAgYWxsOiBhbGwsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZWdpc3RlciBhbiBldmVudCBoYW5kbGVyIGZvciB0aGUgZ2l2ZW4gdHlwZS5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd8c3ltYm9sfSB0eXBlIFR5cGUgb2YgZXZlbnQgdG8gbGlzdGVuIGZvciwgb3IgYFwiKlwiYCBmb3IgYWxsIGV2ZW50c1xuICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIEZ1bmN0aW9uIHRvIGNhbGwgaW4gcmVzcG9uc2UgdG8gZ2l2ZW4gZXZlbnRcbiAgICAgICAgICogQG1lbWJlck9mIG1pdHRcbiAgICAgICAgICovXG4gICAgICAgIG9uOiBmdW5jdGlvbiAodHlwZSwgaGFuZGxlcikge1xuICAgICAgICAgICAgdmFyIGhhbmRsZXJzID0gYWxsLmdldCh0eXBlKTtcbiAgICAgICAgICAgIHZhciBhZGRlZCA9IGhhbmRsZXJzICYmIGhhbmRsZXJzLnB1c2goaGFuZGxlcik7XG4gICAgICAgICAgICBpZiAoIWFkZGVkKSB7XG4gICAgICAgICAgICAgICAgYWxsLnNldCh0eXBlLCBbaGFuZGxlcl0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogUmVtb3ZlIGFuIGV2ZW50IGhhbmRsZXIgZm9yIHRoZSBnaXZlbiB0eXBlLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ3xzeW1ib2x9IHR5cGUgVHlwZSBvZiBldmVudCB0byB1bnJlZ2lzdGVyIGBoYW5kbGVyYCBmcm9tLCBvciBgXCIqXCJgXG4gICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgSGFuZGxlciBmdW5jdGlvbiB0byByZW1vdmVcbiAgICAgICAgICogQG1lbWJlck9mIG1pdHRcbiAgICAgICAgICovXG4gICAgICAgIG9mZjogZnVuY3Rpb24gKHR5cGUsIGhhbmRsZXIpIHtcbiAgICAgICAgICAgIHZhciBoYW5kbGVycyA9IGFsbC5nZXQodHlwZSk7XG4gICAgICAgICAgICBpZiAoaGFuZGxlcnMpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVycy5zcGxpY2UoaGFuZGxlcnMuaW5kZXhPZihoYW5kbGVyKSA+Pj4gMCwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbnZva2UgYWxsIGhhbmRsZXJzIGZvciB0aGUgZ2l2ZW4gdHlwZS5cbiAgICAgICAgICogSWYgcHJlc2VudCwgYFwiKlwiYCBoYW5kbGVycyBhcmUgaW52b2tlZCBhZnRlciB0eXBlLW1hdGNoZWQgaGFuZGxlcnMuXG4gICAgICAgICAqXG4gICAgICAgICAqIE5vdGU6IE1hbnVhbGx5IGZpcmluZyBcIipcIiBoYW5kbGVycyBpcyBub3Qgc3VwcG9ydGVkLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ3xzeW1ib2x9IHR5cGUgVGhlIGV2ZW50IHR5cGUgdG8gaW52b2tlXG4gICAgICAgICAqIEBwYXJhbSB7QW55fSBbZXZ0XSBBbnkgdmFsdWUgKG9iamVjdCBpcyByZWNvbW1lbmRlZCBhbmQgcG93ZXJmdWwpLCBwYXNzZWQgdG8gZWFjaCBoYW5kbGVyXG4gICAgICAgICAqIEBtZW1iZXJPZiBtaXR0XG4gICAgICAgICAqL1xuICAgICAgICBlbWl0OiBmdW5jdGlvbiAodHlwZSwgZXZ0KSB7XG4gICAgICAgICAgICAoYWxsLmdldCh0eXBlKSB8fCBbXSkuc2xpY2UoKS5tYXAoZnVuY3Rpb24gKGhhbmRsZXIpIHsgaGFuZGxlcihldnQpOyB9KTtcbiAgICAgICAgICAgIChhbGwuZ2V0KCcqJykgfHwgW10pLnNsaWNlKCkubWFwKGZ1bmN0aW9uIChoYW5kbGVyKSB7IGhhbmRsZXIodHlwZSwgZXZ0KTsgfSk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/puppeteer/lib/esm/vendor/mitt/src/index.js\n");

/***/ }),

/***/ "(api)/./node_modules/gogoanime-api/node_modules/ws/wrapper.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/gogoanime-api/node_modules/ws/wrapper.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Receiver\": () => (/* reexport default export from named module */ _lib_receiver_js__WEBPACK_IMPORTED_MODULE_1__),\n/* harmony export */   \"Sender\": () => (/* reexport default export from named module */ _lib_sender_js__WEBPACK_IMPORTED_MODULE_2__),\n/* harmony export */   \"WebSocket\": () => (/* reexport default export from named module */ _lib_websocket_js__WEBPACK_IMPORTED_MODULE_3__),\n/* harmony export */   \"WebSocketServer\": () => (/* reexport default export from named module */ _lib_websocket_server_js__WEBPACK_IMPORTED_MODULE_4__),\n/* harmony export */   \"createWebSocketStream\": () => (/* reexport default export from named module */ _lib_stream_js__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _lib_stream_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/stream.js */ \"(api)/./node_modules/gogoanime-api/node_modules/ws/lib/stream.js\");\n/* harmony import */ var _lib_receiver_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/receiver.js */ \"(api)/./node_modules/gogoanime-api/node_modules/ws/lib/receiver.js\");\n/* harmony import */ var _lib_sender_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/sender.js */ \"(api)/./node_modules/gogoanime-api/node_modules/ws/lib/sender.js\");\n/* harmony import */ var _lib_websocket_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/websocket.js */ \"(api)/./node_modules/gogoanime-api/node_modules/ws/lib/websocket.js\");\n/* harmony import */ var _lib_websocket_server_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lib/websocket-server.js */ \"(api)/./node_modules/gogoanime-api/node_modules/ws/lib/websocket-server.js\");\n\n\n\n\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_lib_websocket_js__WEBPACK_IMPORTED_MODULE_3__);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvZ29nb2FuaW1lLWFwaS9ub2RlX21vZHVsZXMvd3Mvd3JhcHBlci5tanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBb0Q7QUFDWDtBQUNKO0FBQ007QUFDYTs7QUFFdUI7QUFDL0UsaUVBQWUsOENBQVMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2FuaW1lZmxpeC8uL25vZGVfbW9kdWxlcy9nb2dvYW5pbWUtYXBpL25vZGVfbW9kdWxlcy93cy93cmFwcGVyLm1qcz9jOWIzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcmVhdGVXZWJTb2NrZXRTdHJlYW0gZnJvbSAnLi9saWIvc3RyZWFtLmpzJztcbmltcG9ydCBSZWNlaXZlciBmcm9tICcuL2xpYi9yZWNlaXZlci5qcyc7XG5pbXBvcnQgU2VuZGVyIGZyb20gJy4vbGliL3NlbmRlci5qcyc7XG5pbXBvcnQgV2ViU29ja2V0IGZyb20gJy4vbGliL3dlYnNvY2tldC5qcyc7XG5pbXBvcnQgV2ViU29ja2V0U2VydmVyIGZyb20gJy4vbGliL3dlYnNvY2tldC1zZXJ2ZXIuanMnO1xuXG5leHBvcnQgeyBjcmVhdGVXZWJTb2NrZXRTdHJlYW0sIFJlY2VpdmVyLCBTZW5kZXIsIFdlYlNvY2tldCwgV2ViU29ja2V0U2VydmVyIH07XG5leHBvcnQgZGVmYXVsdCBXZWJTb2NrZXQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/gogoanime-api/node_modules/ws/wrapper.mjs\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./src/pages/api/anime.ts"));
module.exports = __webpack_exports__;

})();